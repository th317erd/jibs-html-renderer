/******/ var __webpack_modules__ = ({

/***/ "../jibs-dom-renderer/dist/index.js":
/*!******************************************!*\
  !*** ../jibs-dom-renderer/dist/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ __webpack_exports__$),
/* harmony export */   "Component": () => (/* binding */ __webpack_exports__Component),
/* harmony export */   "Components": () => (/* binding */ __webpack_exports__Components),
/* harmony export */   "DOMRenderer": () => (/* binding */ __webpack_exports__DOMRenderer),
/* harmony export */   "Jibs": () => (/* binding */ __webpack_exports__Jibs),
/* harmony export */   "Renderers": () => (/* binding */ __webpack_exports__Renderers),
/* harmony export */   "Utils": () => (/* binding */ __webpack_exports__Utils),
/* harmony export */   "deadbeef": () => (/* binding */ __webpack_exports__deadbeef),
/* harmony export */   "factory": () => (/* binding */ __webpack_exports__factory)
/* harmony export */ });
/******/ var __webpack_modules__ = ({

/***/ "./lib/component-node.js":
/*!*******************************!*\
  !*** ./lib/component-node.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_248__) => {

__nested_webpack_require_248__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_248__.d(__webpack_exports__, {
/* harmony export */   "ComponentNode": () => (/* binding */ ComponentNode)
/* harmony export */ });
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_248__(/*! jibs */ "../jibs/dist/index.js");


const {
  JIB_PROXY,
  resolveChildren,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Jibs;

const {
  CONTEXT_ID,
  RootNode,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Renderers;

const {
  INIT_METHOD,
  UPDATE_EVENT,
  PENDING_STATE_UPDATE,
  LAST_RENDER_TIME,
  SKIP_STATE_UPDATES,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Components;

class ComponentNode extends RootNode {
  constructor(...args) {
    super(...args);

    Object.defineProperties(this, {
      'rootNode': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      'component': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_pendingContextUpdate': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_cachedRenderResult': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_cachedRenderContext': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_cachedWaitingRenderResult': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_previousState': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        {},
      },
      '_currentJib': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_lastContextID': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        this.context[CONTEXT_ID] || 1n,
      },
    });
  }

  mergeComponentProps(oldProps, newProps) {
    let props = Object.assign(Object.create(null), oldProps || {}, newProps);
    return props;
  }

  firePropUpdates(_oldProps, _newProps) {
    let newProps    = _newProps || {};
    let allPropKeys = new Set(Object.keys(newProps).concat(Object.getOwnPropertySymbols(newProps)));

    let oldProps    = _oldProps || {};
    let oldPropKeys = Object.keys(oldProps).concat(Object.getOwnPropertySymbols(oldProps));
    for (let i = 0, il = oldPropKeys.length; i < il; i++)
      allPropKeys.add(oldPropKeys[i]);

    for (let key of allPropKeys) {
      let oldValue  = oldProps[key];
      let newValue  = newProps[key];

      if (oldValue !== newValue)
        this.component.onPropUpdated(key, newValue, oldValue);
    }
  }

  shouldRender(newProps, newChildren) {
    let component = this.component;
    if (!component)
      return true;

    if (this._lastContextID < this.context[CONTEXT_ID]) {
      this._lastContextID = this.context[CONTEXT_ID];
      this._previousState = Object.assign({}, component.state);

      this.firePropUpdates(component.props, newProps);
      component.props = this.mergeComponentProps(component.props, newProps);

      return true;
    }

    if (this.childrenDiffer(component.children, newChildren)) {
      this._previousState = Object.assign({}, component.state);

      this.firePropUpdates(component.props, newProps);
      component.props = this.mergeComponentProps(component.props, newProps);

      return true;
    }

    let previousState = this._previousState || {};
    let propsDiffer   = this.propsDiffer(component.props, newProps, [ 'ref', 'key' ], true);
    if (propsDiffer && component.shouldUpdate(newProps, previousState)) {
      this._previousState = Object.assign({}, component.state);

      this.firePropUpdates(component.props, newProps);
      component.props = this.mergeComponentProps(component.props, newProps);

      return true;
    }

    let stateDiffers = this.propsDiffer(previousState, component.state);
    if (stateDiffers && component.shouldUpdate(newProps, previousState)) {
      this._previousState = Object.assign({}, component.state);
      return true;
    }

    return false;
  }

  async destroy() {
    if (this.destroying)
      return;

    this.destroying = true;

    await this.renderPromise;

    if (this.component) {
      if (this._currentJib && typeof this._currentJib.props.ref === 'function')
        this._currentJib.props.ref.call(this.component, null, this.component);

      await this.component.destroy();
      this.component = null;
    }

    if (this.rootNode) {
      await this.rootNode.destroy();
      this.rootNode = null;
    }

    this._cachedRenderResult = null;
    this._previousState = null;
    this._currentJib = null;

    return await super.destroy();
  }

  onContextUpdate() {
    if (!this.component || this.component[SKIP_STATE_UPDATES] || this.component[PENDING_STATE_UPDATE])
      return Promise.resolve();

    return Promise.resolve().then(async () => {
      await this.render(this._currentJib, this._cachedRenderContext || { index: 0 });
    });
  }

  resolveChildren(children) {
    return resolveChildren.call(this, children);
  }

  async syncElementsWithRenderer(node, renderResult, renderFrame) {
    if (!this.parent)
      return;

    let result = await this.parent.syncElementsWithRenderer(node, renderResult, renderFrame);
    if (this.component)
      this.component.updated();

    return result;
  }

  // eslint-disable-next-line no-unused-vars
  async _render(jib, renderContext) {
    if (jib !== this._currentJib)
      this._currentJib = jib;

    this._cachedRenderContext = renderContext;

    if (!jib)
      return;

    let renderFrame = this.renderFrame;

    let { Type: ComponentClass, props, children } = jib;
    jib.children = await this.resolveChildren(children);

    const finalizeRender = async (renderResult, renderFrame) => {
      if (this.destroying || renderFrame < this.renderFrame || !this.component)
        return;

      this.component[LAST_RENDER_TIME] = jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.now();

      let rootNode = this.rootNode;
      if (!rootNode)
        rootNode = this.rootNode = this.renderer.constructNodeFromJib(JIB_PROXY, this, this.context);

      let fragmentResult = this._cachedRenderResult = await rootNode.render(renderResult, renderContext);
      await this.syncElementsWithRenderer(this, fragmentResult, renderFrame);

      return fragmentResult;
    };

    const handleRenderError = (error) => {
      if (this.destroying || renderFrame < this.renderFrame)
        return;

      console.error(error);

      if (this.component)
        this.component[LAST_RENDER_TIME] = jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.now();

      let renderResult;

      try {
        if (this.component && typeof this.component.renderErrorState === 'function')
          renderResult = this.component.renderErrorState(error);
        else
          renderResult = [ `${error.message}\n${error.stack}` ];
      } catch (error2) {
        renderResult = [ `${error.message}\n${error.stack}` ];
      }

      return finalizeRender(renderResult, renderFrame);
    };

    try {
      if (this.component && !this.shouldRender(jib.props, jib.children)) {
        return this._cachedRenderResult;
      } else {
        let component = this.component;
        if (!component) {
          if (this.destroying || renderFrame < this.renderFrame)
            return;

          component = this.component = new ComponentClass({ ...jib, props: this.mergeComponentProps(null, props), context: this.context, id: this.id });
          if (typeof component[INIT_METHOD] === 'function')
            component[INIT_METHOD]();

          component.on(UPDATE_EVENT, async (pushedRenderResult) => {
            if (pushedRenderResult) {
              this.renderFrame++;
              await finalizeRender(pushedRenderResult, this.renderFrame);
            } else {
              await this.render(this._currentJib, this._cachedRenderContext || { index: 0 });
            }
          });

          if (props && typeof props.ref === 'function')
            props.ref.call(component, component, null);
        }

        // Cancel any pending state updates
        if (this.component[PENDING_STATE_UPDATE])
          this.component[PENDING_STATE_UPDATE] = null;

        let renderResult = this.component.render(jib.children);
        if (jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(renderResult, 'promise')) {
          let waitingRenderResult = this.component.renderWaiting(this._cachedRenderResult);
          let renderCompleted = false;

          let loadingTimer = setTimeout(async () => {
            loadingTimer = null;

            if (jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(waitingRenderResult, 'promise'))
              waitingRenderResult = await waitingRenderResult;

            if (renderCompleted)
              return;

            await finalizeRender(waitingRenderResult, renderFrame);
          }, 5);

          return await renderResult.then(async (renderResult) => {
            renderCompleted = true;

            if (loadingTimer) {
              clearTimeout(loadingTimer);
              loadingTimer = null;
            }

            return await finalizeRender(renderResult, renderFrame);
          }).catch(handleRenderError);
        } else {
          return await finalizeRender(renderResult, renderFrame);
        }
      }
    } catch (error) {
      return await handleRenderError(error);
    }
  }
}


/***/ }),

/***/ "./lib/dom-renderer.js":
/*!*****************************!*\
  !*** ./lib/dom-renderer.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_10234__) => {

__nested_webpack_require_10234__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_10234__.d(__webpack_exports__, {
/* harmony export */   "DOMRenderer": () => (/* binding */ DOMRenderer)
/* harmony export */ });
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_10234__(/*! jibs */ "../jibs/dist/index.js");
/* harmony import */ var _fragment_node_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_10234__(/*! ./fragment-node.js */ "./lib/fragment-node.js");
/* harmony import */ var _text_node_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_10234__(/*! ./text-node.js */ "./lib/text-node.js");
/* harmony import */ var _native_node_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_10234__(/*! ./native-node.js */ "./lib/native-node.js");
/* harmony import */ var _portal_node_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_10234__(/*! ./portal-node.js */ "./lib/portal-node.js");
/* harmony import */ var _component_node_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_10234__(/*! ./component-node.js */ "./lib/component-node.js");








const { Renderer } = jibs__WEBPACK_IMPORTED_MODULE_0__.Renderers;

const {
  JIB_PROXY,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Jibs;

class DOMRenderer extends Renderer {
  static FragmentNode = _fragment_node_js__WEBPACK_IMPORTED_MODULE_1__.FragmentNode;

  static TextNode = _text_node_js__WEBPACK_IMPORTED_MODULE_2__.TextNode;

  static NativeNode = _native_node_js__WEBPACK_IMPORTED_MODULE_3__.NativeNode;

  static PortalNode = _portal_node_js__WEBPACK_IMPORTED_MODULE_4__.PortalNode;

  static ComponentNode = _component_node_js__WEBPACK_IMPORTED_MODULE_5__.ComponentNode;

  constructor(rootElement) {
    super();

    Object.defineProperties(this, {
      'rootElement': {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        rootElement,
      },
      'rootNode': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
    });
  }

  isPortalNode(type) {
    return (/[^a-zA-Z0-9:]/).test(type);
  }

  constructNodeFromJib(jib, parent, context) {
    if (jib === JIB_PROXY)
      return new this.constructor.FragmentNode(this, parent, context);

    let { Type } = jib;
    if (typeof Type === 'function') {
      return new this.constructor.ComponentNode(this, parent, context);
    } else if (typeof Type === 'string') {
      if (this.isPortalNode(Type))
        return new this.constructor.PortalNode(this, parent, context);
      else
        return new this.constructor.NativeNode(this, parent, context);
    } else if (Type == null || Type === JIB_PROXY) {
      return new this.constructor.FragmentNode(this, parent, context);
    }
  }

  async syncElementsWithRenderer(node, renderResult, renderFrame) {
    if (this.destroying || renderFrame < this.renderFrame)
      return;

    await this.updateElementChildren(
      this.context,
      this.rootElement,
      renderResult,
      renderFrame,
    );
  }

  async render(jib) {
    this.renderFrame++;
    let renderFrame = this.renderFrame;

    let rootNode = this.rootNode;
    if (!rootNode)
      rootNode = this.rootNode = this.constructNodeFromJib(JIB_PROXY, this, this.context);

    let renderResult = await rootNode.render(jib, { index: 0 });
    await this.syncElementsWithRenderer(
      this,
      renderResult,
      renderFrame,
    );

    return renderResult;
  }
}


/***/ }),

/***/ "./lib/fragment-node.js":
/*!******************************!*\
  !*** ./lib/fragment-node.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_13912__) => {

__nested_webpack_require_13912__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_13912__.d(__webpack_exports__, {
/* harmony export */   "FragmentNode": () => (/* binding */ FragmentNode)
/* harmony export */ });
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_13912__(/*! jibs */ "../jibs/dist/index.js");


const {
  isJibish,
  constructJib,
  JIB_PROXY,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Jibs;

const {
  RootNode,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Renderers;

const TEXT_TYPE     = Symbol.for('@jib/textNode');
const FRAGMENT_TYPE = Symbol.for('@jib/fragmentNode');

class FragmentNode extends RootNode {
  constructor(...args) {
    super(...args);

    Object.defineProperties(this, {
      '_nodeCache': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        new Map(),
      },
      '_renderCache': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
    });
  }

  async destroy() {
    if (this.destroying)
      return;

    this.destroying = true;

    if (this._nodeCache) {
      let destroyPromises = [];
      let nodeCache       = this._nodeCache;

      this._nodeCache = null;

      for (let cachedResult of nodeCache.values()) {
        if (cachedResult && cachedResult.node && cachedResult.node.destroy)
          destroyPromises.push(cachedResult.node.destroy());
      }

      nodeCache.clear();

      await Promise.all(destroyPromises);
    }

    return await super.destroy();
  }

  async syncElementsWithRenderer(node, renderResult, renderFrame) {
    if (!this.parent || this.renderPromise || renderFrame < this.renderFrame)
      return;

    if (!this._nodeCache)
      return await this.parent.syncElementsWithRenderer(node, renderResult, renderFrame);

    let renderResults = [];
    for (let [ cacheKey, cachedResult ] of this._nodeCache) {
      if (cachedResult.node === node) {
        this._nodeCache.set(cacheKey, { ...cachedResult, renderResult });
        renderResults.push(renderResult);
      } else {
        renderResults.push(cachedResult.renderResult);
      }
    }

    return await this.parent.syncElementsWithRenderer(node, renderResults, renderFrame);
  }

  async _render(_children, renderContext) {
    let indexMap    = new Map();
    let children    = _children;
    let renderFrame = this.renderFrame;

    if (jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(children, 'promise'))
      children = await children;

    if (this.destroying || renderFrame < this.renderFrame)
      return this._renderCache;

    if (!this.isIterableChild(children) && (isJibish(children) || this.isValidChild(children)))
      children = [ children ];

    const getIndexForType = (Type) => {
      let index = (indexMap.get(Type) || 0) + 1;
      indexMap.set(Type, index);

      return index;
    };

    let loopStopped = false;
    let promises = jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.iterate(children, ({ value: _child, key, index, STOP }) => {
      if (loopStopped || this.destroying || renderFrame < this.renderFrame)
        return STOP;

      return (async () => {
        let child = (jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(_child, 'promise')) ? await _child : _child;
        let created;
        let cacheKey;
        let node;
        let renderResult;

        if (isJibish(child)) {
          let jib = constructJib(child);
          if (jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(jib, 'promise'))
            jib = await jib;

          if (this.destroying || renderFrame < this.renderFrame) {
            loopStopped = true;
            return;
          }

          let { Type, props } = jib;
          if (!props)
            props = {};

          let localKey;
          if (index !== key) // Index is an integer, and key is a string, meaning this is an object
            localKey = key;
          else
            localKey = (props.key == null || Object.is(props.key, NaN) || Object.is(props.key, Infinity)) ? `@jib/internal_key_${getIndexForType(Type)}` : props.key;

          cacheKey = (0,jibs__WEBPACK_IMPORTED_MODULE_0__.deadbeef)(Type, localKey);

          let cachedResult = this._nodeCache.get(cacheKey);
          if (!cachedResult) {
            created = true;
            node = this.renderer.constructNodeFromJib(jib, this, this.context);
          } else {
            created = false;
            node = cachedResult.node;
          }

          if (Type === JIB_PROXY)
            renderResult = await node.render(jib.children, renderContext);
          else
            renderResult = await node.render(jib, renderContext);
        } else if (this.isIterableChild(child)) {
          if (jibs__WEBPACK_IMPORTED_MODULE_0__.Utils.isEmpty(child))
            return;

          cacheKey = (0,jibs__WEBPACK_IMPORTED_MODULE_0__.deadbeef)(`@jib/internal_fragment_${getIndexForType(FRAGMENT_TYPE)}`);

          let cachedResult = this._nodeCache.get(cacheKey);
          if (!cachedResult) {
            created = true;
            node = this.renderer.constructNodeFromJib(JIB_PROXY, this, this.context);
          } else {
            created = false;
            node = cachedResult.node;
          }

          renderResult = await node.render(child, renderContext);
        } else if (this.isValidChild(child)) {
          child = (typeof child.valueOf === 'function') ? child.valueOf() : child;
          cacheKey = (0,jibs__WEBPACK_IMPORTED_MODULE_0__.deadbeef)(`@jib/internal_text_${getIndexForType(TEXT_TYPE)}`);

          let cachedResult = this._nodeCache.get(cacheKey);
          if (!cachedResult) {
            created = true;
            node = new this.renderer.constructor.TextNode(this.renderer, this, this.context);
          } else {
            created = false;
            node = cachedResult.node;
          }

          renderResult = await node.render(child, renderContext);
        }

        return { node, cacheKey, renderResult, created };
      })();
    });

    let renderResults = await Promise.all(promises);
    renderResults = renderResults.filter((result) => !!result);

    let destroyPromises = [];
    if (this.destroying || renderFrame < this.renderFrame) {
      for (let i = 0, il = renderResults.length; i < il; i++) {
        let result = renderResults[i];
        let { node, created } = result;

        if (created && node) {
          // Destroy nodes since this render was rejected.
          // But only nodes that were just created...
          // as existing nodes might still need to exist.
          destroyPromises.push(node.destroy());
        }
      }

      if (destroyPromises.length > 0)
        await Promise.all(destroyPromises);

      return this._renderCache;
    }

    let nodeMap = new Map();
    for (let i = 0, il = renderResults.length; i < il; i++) {
      let renderResult = renderResults[i];
      nodeMap.set(renderResult.cacheKey, renderResult);
    }

    if (this._nodeCache) {
      // Cleanup
      for (let [ cacheKey, renderResult ] of this._nodeCache) {
        let hasChild = nodeMap.has(cacheKey);
        if (!hasChild) {
          // This node was destroyed
          destroyPromises.push(renderResult.node.destroy());
        }
      }

      this._nodeCache = nodeMap;

      if (destroyPromises.length > 0)
        await Promise.all(destroyPromises);
    } else {
      this._nodeCache = nodeMap;
    }

    let renderResult = this._renderCache = renderResults.map((renderResult) => renderResult.renderResult).filter((result) => (result != null && !Object.is(result, NaN) && !Object.is(result, Infinity)));
    return renderResult;
  }
}


/***/ }),

/***/ "./lib/native-node.js":
/*!****************************!*\
  !*** ./lib/native-node.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_21845__) => {

__nested_webpack_require_21845__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_21845__.d(__webpack_exports__, {
/* harmony export */   "NativeNode": () => (/* binding */ NativeNode)
/* harmony export */ });
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_21845__(/*! jibs */ "../jibs/dist/index.js");


const {
  JIB_PROXY,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Jibs;

const {
  RootNode,
  NativeElement,
  TextElement,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Renderers;

class NativeNode extends RootNode {
  static ELEMENT_CLASS = NativeElement;

  constructor(...args) {
    super(...args);

    Object.defineProperties(this, {
      'rootNode': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_currentJib': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      '_cachedRenderResult': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        { id: this.id },
      },
    });
  }

  async syncElementsWithRenderer(node, renderResult, renderFrame) {
    if (!this.renderer || this.destroying || renderFrame < this.renderFrame)
      return;

    await this.renderer.updateElementChildren(
      this.context,
      this._cachedRenderResult,
      renderResult,
      renderFrame,
    );
  }

  async destroy() {
    if (this.destroying)
      return;

    this.destroying = true;

    if (this.rootNode) {
      await this.rootNode.destroy();
      this.rootNode = null;
    }

    return await super.destroy();
  }

  async _render(jib, renderContext) {
    let {
      Type,
      props,
      children,
    } = this._currentJib = (jib || {});

    if (!Type)
      return;

    let renderFrame = this.renderFrame;

    if (!Object.prototype.hasOwnProperty.call(props, 'innerHTML')) {
      let rootNode = this.rootNode;
      if (!rootNode)
        rootNode = this.rootNode = this.renderer.constructNodeFromJib(JIB_PROXY, this, this.context);

      let newContext = Object.create(renderContext);
      newContext.index = 0;

      rootNode.render(children, newContext).then((fragmentResult) => {
        return this.syncElementsWithRenderer(this, fragmentResult, renderFrame);
      }).catch((_error) => {
        let error = _error;
        if (!(error instanceof Error))
          error = new Error(error);

        return this.syncElementsWithRenderer(this, [ new TextElement(null, error, props) ], renderFrame);
      });
    } else {
      if (this.rootNode) {
        await this.rootNode.destroy();
        this.rootNode = null;
      }
    }

    let renderResult = this._cachedRenderResult = new this.constructor.ELEMENT_CLASS(
      this.id,
      Type,
      props,
    );

    return renderResult;
  }
}


/***/ }),

/***/ "./lib/portal-node.js":
/*!****************************!*\
  !*** ./lib/portal-node.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_24936__) => {

__nested_webpack_require_24936__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_24936__.d(__webpack_exports__, {
/* harmony export */   "PortalNode": () => (/* binding */ PortalNode)
/* harmony export */ });
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_24936__(/*! jibs */ "../jibs/dist/index.js");
/* harmony import */ var _native_node_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_24936__(/*! ./native-node.js */ "./lib/native-node.js");




const {
  PortalElement,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Renderers;

class PortalNode extends _native_node_js__WEBPACK_IMPORTED_MODULE_1__.NativeNode {
  static ELEMENT_CLASS = PortalElement;
}


/***/ }),

/***/ "./lib/text-node.js":
/*!**************************!*\
  !*** ./lib/text-node.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_25834__) => {

__nested_webpack_require_25834__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_25834__.d(__webpack_exports__, {
/* harmony export */   "TextNode": () => (/* binding */ TextNode)
/* harmony export */ });
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_25834__(/*! jibs */ "../jibs/dist/index.js");


const {
  RootNode,
  TextElement,
} = jibs__WEBPACK_IMPORTED_MODULE_0__.Renderers;

class TextNode extends RootNode {
  async destroy() {
    if (this.destroying)
      return;

    this.destroying = true;

    return await super.destroy();
  }

  async _render(text) {
    return new TextElement(this.id, text);
  }
}


/***/ }),

/***/ "../jibs/dist/index.js":
/*!*****************************!*\
  !*** ../jibs/dist/index.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_26717__) => {

__nested_webpack_require_26717__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_26717__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ __webpack_exports__$),
/* harmony export */   "Component": () => (/* binding */ __webpack_exports__Component),
/* harmony export */   "Components": () => (/* binding */ __webpack_exports__Components),
/* harmony export */   "Jibs": () => (/* binding */ __webpack_exports__Jibs),
/* harmony export */   "Renderers": () => (/* binding */ __webpack_exports__Renderers),
/* harmony export */   "Utils": () => (/* binding */ __webpack_exports__Utils),
/* harmony export */   "deadbeef": () => (/* binding */ __webpack_exports__deadbeef),
/* harmony export */   "factory": () => (/* binding */ __webpack_exports__factory)
/* harmony export */ });
/******/ var __webpack_modules__ = ({

/***/ "./node_modules/deadbeef/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/deadbeef/lib/index.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_284__) {

// Copyright 2022 Wyatt Greenway



const thisGlobal = ((typeof window !== 'undefined') ? window : __nested_webpack_require_284__.g) || this;
const DEADBEEF_REF_MAP_KEY = Symbol.for('@@deadbeefRefMap');
const UNIQUE_ID_SYMBOL = Symbol.for('@@deadbeefUniqueID');
const refMap = (thisGlobal[DEADBEEF_REF_MAP_KEY]) ? thisGlobal[DEADBEEF_REF_MAP_KEY] : new WeakMap();
const idHelpers = [];

if (!thisGlobal[DEADBEEF_REF_MAP_KEY])
  thisGlobal[DEADBEEF_REF_MAP_KEY] = refMap;

let uuidCounter = 0n;

function getHelperForValue(value) {
  for (let i = 0, il = idHelpers.length; i < il; i++) {
    let { helper, generator } = idHelpers[i];
    if (helper(value))
      return generator;
  }
}

function anythingToID(_arg, _alreadyVisited) {
  let arg = _arg;
  if (arg instanceof Number || arg instanceof String || arg instanceof Boolean)
    arg = arg.valueOf();

  let typeOf = typeof arg;

  if (typeOf === 'number' && arg === 0) {
    if (Object.is(arg, -0))
      return 'number:-0';

    return 'number:+0';
  }

  if (typeOf === 'symbol')
    return `symbol:${arg.toString()}`;

  if (arg == null || typeOf === 'number' || typeOf === 'boolean' || typeOf === 'string' || typeOf === 'bigint') {
    if (typeOf === 'number')
      return (arg < 0) ? `number:${arg}` : `number:+${arg}`;

    if (typeOf === 'bigint' && arg === 0n)
      return 'bigint:+0';

    return `${typeOf}:${arg}`;
  }

  let idHelper = (idHelpers.length > 0 && getHelperForValue(arg));
  if (idHelper)
    return anythingToID(idHelper(arg));

  if (UNIQUE_ID_SYMBOL in arg && typeof arg[UNIQUE_ID_SYMBOL] === 'function') {
    // Prevent infinite recursion
    if (!_alreadyVisited || !_alreadyVisited.has(arg)) {
      let alreadyVisited = _alreadyVisited || new Set();
      alreadyVisited.add(arg);
      return anythingToID(arg[UNIQUE_ID_SYMBOL](), alreadyVisited);
    }
  }

  if (!refMap.has(arg)) {
    let key = `${typeof arg}:${++uuidCounter}`;
    refMap.set(arg, key);
    return key;
  }

  return refMap.get(arg);
}

function deadbeef() {
  let parts = [ arguments.length ];
  for (let i = 0, il = arguments.length; i < il; i++)
    parts.push(anythingToID(arguments[i]));

  return parts.join(':');
}

function deadbeefSorted() {
  let parts = [ arguments.length ];
  for (let i = 0, il = arguments.length; i < il; i++)
    parts.push(anythingToID(arguments[i]));

  return parts.sort().join(':');
}

function generateIDFor(helper, generator) {
  idHelpers.push({ helper, generator });
}

function removeIDGenerator(helper) {
  let index = idHelpers.findIndex((item) => (item.helper === helper));
  if (index < 0)
    return;

  idHelpers.splice(index, 1);
}

Object.defineProperties(deadbeef, {
  'idSym': {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        UNIQUE_ID_SYMBOL,
  },
  'sorted': {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        deadbeefSorted,
  },
  'generateIDFor': {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        generateIDFor,
  },
  'removeIDGenerator': {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        removeIDGenerator,
  },
});

module.exports = deadbeef;


/***/ }),

/***/ "./lib/component.js":
/*!**************************!*\
  !*** ./lib/component.js ***!
  \**************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_3738__) => {

__nested_webpack_require_3738__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_3738__.d(__webpack_exports__, {
/* harmony export */   "CAPTURE_REFERENCE_METHODS": () => (/* binding */ CAPTURE_REFERENCE_METHODS),
/* harmony export */   "Component": () => (/* binding */ Component),
/* harmony export */   "FLUSH_UPDATE_METHOD": () => (/* binding */ FLUSH_UPDATE_METHOD),
/* harmony export */   "INIT_METHOD": () => (/* binding */ INIT_METHOD),
/* harmony export */   "LAST_RENDER_TIME": () => (/* binding */ LAST_RENDER_TIME),
/* harmony export */   "PENDING_STATE_UPDATE": () => (/* binding */ PENDING_STATE_UPDATE),
/* harmony export */   "PREVIOUS_STATE": () => (/* binding */ PREVIOUS_STATE),
/* harmony export */   "QUEUE_UPDATE_METHOD": () => (/* binding */ QUEUE_UPDATE_METHOD),
/* harmony export */   "SKIP_STATE_UPDATES": () => (/* binding */ SKIP_STATE_UPDATES),
/* harmony export */   "UPDATE_EVENT": () => (/* binding */ UPDATE_EVENT)
/* harmony export */ });
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_3738__(/*! ./events.js */ "./lib/events.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_3738__(/*! ./utils.js */ "./lib/utils.js");
/* harmony import */ var _jib_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_3738__(/*! ./jib.js */ "./lib/jib.js");
/* global Buffer */





const UPDATE_EVENT              = '@jibs/component/event/update';
const QUEUE_UPDATE_METHOD       = Symbol.for('@jibs/component/queueUpdate');
const FLUSH_UPDATE_METHOD       = Symbol.for('@jibs/component/flushUpdate');
const INIT_METHOD               = Symbol.for('@jibs/component/__init');
const SKIP_STATE_UPDATES        = Symbol.for('@jibs/component/skipStateUpdates');
const PENDING_STATE_UPDATE      = Symbol.for('@jibs/component/pendingStateUpdate');
const LAST_RENDER_TIME          = Symbol.for('@jibs/component/lastRenderTime');
const PREVIOUS_STATE            = Symbol.for('@jibs/component/previousState');
const CAPTURE_REFERENCE_METHODS = Symbol.for('@jibs/component/previousState');

const elementDataCache = new WeakMap();

function isValidStateObject(value) {
  if (value == null)
    return false;

  if (Object.is(value, NaN))
    return false;

  if (Object.is(value, Infinity))
    return false;

  if (value instanceof Boolean || value instanceof Number || value instanceof String)
    return false;

  let typeOf = typeof value;
  if (typeOf === 'string' || typeOf === 'number' || typeOf === 'boolean')
    return false;

  if (Array.isArray(value))
    return false;

  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value))
    return false;

  return true;
}

class Component extends _events_js__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
  static UPDATE_EVENT = UPDATE_EVENT;

  [QUEUE_UPDATE_METHOD]() {
    if (this[PENDING_STATE_UPDATE])
      return;

    this[PENDING_STATE_UPDATE] = Promise.resolve();
    this[PENDING_STATE_UPDATE].then(this[FLUSH_UPDATE_METHOD].bind(this));
  }

  [FLUSH_UPDATE_METHOD]() {
    // Was the state update cancelled?
    if (!this[PENDING_STATE_UPDATE])
      return;

    this.emit(UPDATE_EVENT);

    this[PENDING_STATE_UPDATE] = null;
  }

  [INIT_METHOD]() {
    this[SKIP_STATE_UPDATES] = false;
  }

  constructor(_jib) {
    super();

    // Bind all class methods to "this"
    _utils_js__WEBPACK_IMPORTED_MODULE_1__.bindMethods.call(this, this.constructor.prototype);

    let jib = _jib || {};

    const createNewState = () => {
      let localState = Object.create(null);

      return new Proxy(localState, {
        get: (target, propName) => {
          return target[propName];
        },
        set: (target, propName, value) => {
          let currentValue = target[propName];
          if (currentValue === value)
            return true;

          if (!this[SKIP_STATE_UPDATES])
            this[QUEUE_UPDATE_METHOD]();

          target[propName] = value;
          this.onStateUpdated(propName, value, currentValue);

          return true;
        },
      });
    };

    let props       = Object.assign(Object.create(null), jib.props || {});
    let _localState = createNewState();

    Object.defineProperties(this, {
      [SKIP_STATE_UPDATES]: {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        true,
      },
      [PENDING_STATE_UPDATE]: {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      [LAST_RENDER_TIME]: {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        _utils_js__WEBPACK_IMPORTED_MODULE_1__.now(),
      },
      [CAPTURE_REFERENCE_METHODS]: {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        {},
      },
      'id': {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        jib.id,
      },
      'props': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        props,
      },
      'children': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        jib.children || [],
      },
      'context': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        jib.context || Object.create(null),
      },
      'state': {
        enumerable:   false,
        configurable: true,
        get:          () => {
          return _localState;
        },
        set:          (value) => {
          if (!isValidStateObject(value))
            throw new TypeError(`Invalid value for "this.state": "${value}". Provided "state" must be an iterable object.`);

          Object.assign(_localState, value);
        },
      },
    });
  }

  resolveChildren(children) {
    return _jib_js__WEBPACK_IMPORTED_MODULE_2__.resolveChildren.call(this, children);
  }

  isJib(value) {
    return (0,_jib_js__WEBPACK_IMPORTED_MODULE_2__.isJibish)(value);
  }

  constructJib(value) {
    return (0,_jib_js__WEBPACK_IMPORTED_MODULE_2__.constructJib)(value);
  }

  pushRender(renderResult) {
    this.emit(UPDATE_EVENT, renderResult);
  }

  // eslint-disable-next-line no-unused-vars
  onPropUpdated(propName, newValue, oldValue) {
  }

  // eslint-disable-next-line no-unused-vars
  onStateUpdated(propName, newValue, oldValue) {
  }

  captureReference(name, interceptorCallback) {
    let method = this[CAPTURE_REFERENCE_METHODS][name];
    if (method)
      return method;

    method = (_ref, previousRef) => {
      let ref = _ref;

      if (typeof interceptorCallback === 'function')
        ref = interceptorCallback.call(this, ref, previousRef);

      Object.defineProperties(this, {
        [name]: {
          writable:     true,
          enumerable:   false,
          configurable: true,
          value:        ref,
        },
      });
    };

    if (typeof interceptorCallback !== 'function')
      this[CAPTURE_REFERENCE_METHODS] = method;

    return method;
  }

  forceUpdate() {
    this[QUEUE_UPDATE_METHOD]();
  }

  getState(propertyPath, defaultValue) {
    let state = this.state;
    if (arguments.length === 0)
      return state;

    if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(propertyPath, 'object')) {
      let keys        = Object.keys(propertyPath).concat(Object.getOwnPropertySymbols(propertyPath));
      let finalState  = {};

      for (let i = 0, il = keys.length; i < il; i++) {
        let key = keys[i];
        let [ value, lastPart ] = _utils_js__WEBPACK_IMPORTED_MODULE_1__.fetchDeepProperty(state, key, propertyPath[key], true);
        if (lastPart == null)
          continue;

        finalState[lastPart] = value;
      }

      return finalState;
    } else {
      return _utils_js__WEBPACK_IMPORTED_MODULE_1__.fetchDeepProperty(state, propertyPath, defaultValue);
    }
  }

  setState(value) {
    if (!isValidStateObject(value))
      throw new TypeError(`Invalid value for "this.setState": "${value}". Provided "state" must be an iterable object.`);

    Object.assign(this.state, value);
  }

  setStatePassive(value) {
    if (!isValidStateObject(value))
      throw new TypeError(`Invalid value for "this.setStatePassive": "${value}". Provided "state" must be an iterable object.`);

    try {
      this[SKIP_STATE_UPDATES] = true;
      Object.assign(this.state, value);
    } finally {
      this[SKIP_STATE_UPDATES] = false;
    }
  }

  shouldUpdate() {
    return true;
  }

  destroy() {
    delete this.state;
    delete this.props;
    delete this.context;
    delete this[CAPTURE_REFERENCE_METHODS];
    this.clearAllDebounces();
  }

  renderWaiting() {
  }

  render(children) {
    return children;
  }

  updated() {
  }

  combineWith(sep, ...args) {
    let finalArgs = new Set();
    for (let i = 0, il = args.length; i < il; i++) {
      let arg = args[i];
      if (!arg)
        continue;

      if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(arg, 'string')) {
        let values = arg.split(sep).filter(_utils_js__WEBPACK_IMPORTED_MODULE_1__.isNotEmpty);
        for (let i = 0, il = values.length; i < il; i++) {
          let value = values[i];
          finalArgs.add(value);
        }
      } else if (Array.isArray(arg)) {
        let values = arg.filter((value) => {
          if (!value)
            return false;

          if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(value, 'string'))
            return false;

          return _utils_js__WEBPACK_IMPORTED_MODULE_1__.isNotEmpty(value);
        });

        for (let i = 0, il = values.length; i < il; i++) {
          let value = values[i];
          finalArgs.add(value);
        }
      } else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(arg, 'object')) {
        let keys = Object.keys(arg);
        for (let i = 0, il = keys.length; i < il; i++) {
          let key   = keys[i];
          let value = arg[key];

          if (!value) {
            finalArgs.delete(key);
            continue;
          }

          finalArgs.add(key);
        }
      }
    }

    return Array.from(finalArgs).join(sep || '');
  }

  classes(...args) {
    return this.combineWith(' ', ...args);
  }

  extractChildren(_patterns, children) {
    let extracted = {};
    let patterns  = _patterns;
    let isArray   = Array.isArray(patterns);

    const isMatch = (jib) => {
      let jibType = jib.Type;
      if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(jibType, 'string'))
        jibType = jibType.toLowerCase();

      if (isArray) {
        for (let i = 0, il = patterns.length; i < il; i++) {
          let pattern = patterns[i];
          if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(pattern, 'string'))
            pattern = pattern.toLowerCase();

          if (jibType === pattern) {
            extracted[pattern] = jib;
            return true;
          }
        }
      } else {
        let keys = Object.keys(patterns);
        for (let i = 0, il = keys.length; i < il; i++) {
          let key     = keys[i];
          let pattern = patterns[key];
          let result;

          if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(pattern, RegExp))
            result = pattern.test(jibType);
          else if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(pattern, 'string'))
            result = (pattern.toLowerCase() === jibType);
          else
            result = (pattern === jibType);

          if (result) {
            extracted[key] = jib;
            return true;
          }
        }
      }

      return false;
    };

    extracted.remainingChildren = children.filter((jib) => !isMatch(jib));
    return extracted;
  }

  debounce(func, time, _id) {
    const clearPendingTimeout = () => {
      if (pendingTimer && pendingTimer.timeout) {
        clearTimeout(pendingTimer.timeout);
        pendingTimer.timeout = null;
      }
    };

    var id = (!_id) ? ('' + func) : _id;
    if (!this.debounceTimers) {
      Object.defineProperty(this, 'debounceTimers', {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        {},
      });
    }

    var pendingTimer = this.debounceTimers[id];
    if (!pendingTimer)
      pendingTimer = this.debounceTimers[id] = {};

    pendingTimer.func = func;
    clearPendingTimeout();

    var promise = pendingTimer.promise;
    if (!promise || !promise.pending()) {
      let status = 'pending';
      let resolve;

      promise = pendingTimer.promise = new Promise((_resolve) => {
        resolve = _resolve;
      });

      promise.resolve = () => {
        if (status !== 'pending')
          return;

        status = 'fulfilled';
        clearPendingTimeout();
        this.debounceTimers[id] = null;

        if (typeof pendingTimer.func === 'function') {
          var ret = pendingTimer.func.call(this);
          if (ret instanceof Promise || (ret && typeof ret.then === 'function'))
            ret.then((value) => resolve(value));
          else
            resolve(ret);
        } else {
          resolve();
        }
      };

      promise.cancel = () => {
        status = 'rejected';
        clearPendingTimeout();
        this.debounceTimers[id] = null;

        promise.resolve();
      };

      promise.isPending = () => {
        return (status === 'pending');
      };
    }

    pendingTimer.timeout = setTimeout(promise.resolve, (time == null) ? 250 : time);

    return promise;
  }

  clearDebounce(id) {
    var pendingTimer = this.debounceTimers[id];
    if (pendingTimer == null)
      return;

    if (pendingTimer.timeout)
      clearTimeout(pendingTimer.timeout);

    if (pendingTimer.promise)
      pendingTimer.promise.cancel();
  }

  clearAllDebounces() {
    let debounceTimers  = this.debounceTimers || {};
    let ids             = Object.keys(debounceTimers);

    for (let i = 0, il = ids.length; i < il; i++)
      this.clearDebounce(ids[i]);
  }

  getElementData(element) {
    let data = elementDataCache.get(element);
    if (!data) {
      data = {};
      elementDataCache.set(element, data);
    }

    return data;
  }
}


/***/ }),

/***/ "./lib/events.js":
/*!***********************!*\
  !*** ./lib/events.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_18168__) => {

__nested_webpack_require_18168__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_18168__.d(__webpack_exports__, {
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter)
/* harmony export */ });
const EVENT_LISTENERS = Symbol.for('@jibs/events/listeners');

class EventEmitter {
  constructor() {
    Object.defineProperties(this, {
      [EVENT_LISTENERS]: {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        new Map(),
      },
    });
  }

  addListener(eventName, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('Event listener must be a method');

    let eventMap  = this[EVENT_LISTENERS];
    let scope     = eventMap.get(eventName);

    if (!scope) {
      scope = [];
      eventMap.set(eventName, scope);
    }

    scope.push(listener);

    return this;
  }

  removeListener(eventName, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('Event listener must be a method');

    let eventMap  = this[EVENT_LISTENERS];
    let scope     = eventMap.get(eventName);
    if (!scope)
      return this;

    let index = scope.indexOf(listener);
    if (index >= 0)
      scope.splice(index, 1);

    return this;
  }

  removeAllListeners(eventName) {
    let eventMap  = this[EVENT_LISTENERS];
    if (!eventMap.has(eventName))
      return this;

    eventMap.set(eventName, []);

    return this;
  }

  emit(eventName, ...args) {
    let eventMap  = this[EVENT_LISTENERS];
    let scope     = eventMap.get(eventName);
    if (!scope || scope.length === 0)
      return false;

    for (let i = 0, il = scope.length; i < il; i++) {
      let eventCallback = scope[i];
      eventCallback.apply(this, args);
    }

    return true;
  }

  once(eventName, listener) {
    let func = (...args) => {
      this.off(eventName, func);
      return listener(...args);
    };

    return this.on(eventName, func);
  }

  on(eventName, listener) {
    return this.addListener(eventName, listener);
  }

  off(eventName, listener) {
    return this.removeListener(eventName, listener);
  }

  eventNames() {
    return Array.from(this[EVENT_LISTENERS].keys());
  }

  listenerCount(eventName) {
    let eventMap  = this[EVENT_LISTENERS];
    let scope     = eventMap.get(eventName);
    if (!scope)
      return 0;

    return scope.length;
  }

  listeners(eventName) {
    let eventMap  = this[EVENT_LISTENERS];
    let scope     = eventMap.get(eventName);
    if (!scope)
      return [];

    return scope.slice();
  }
}


/***/ }),

/***/ "./lib/jib.js":
/*!********************!*\
  !*** ./lib/jib.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_20929__) => {

__nested_webpack_require_20929__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_20929__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ $),
/* harmony export */   "JIB": () => (/* binding */ JIB),
/* harmony export */   "JIB_BARREN": () => (/* binding */ JIB_BARREN),
/* harmony export */   "JIB_PROXY": () => (/* binding */ JIB_PROXY),
/* harmony export */   "Jib": () => (/* binding */ Jib),
/* harmony export */   "constructJib": () => (/* binding */ constructJib),
/* harmony export */   "factory": () => (/* binding */ factory),
/* harmony export */   "isJibish": () => (/* binding */ isJibish),
/* harmony export */   "resolveChildren": () => (/* binding */ resolveChildren)
/* harmony export */ });
/* harmony import */ var deadbeef__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_20929__(/*! deadbeef */ "./node_modules/deadbeef/lib/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_20929__(/*! ./utils.js */ "./lib/utils.js");



class Jib {
  constructor(Type, props, children) {
    let defaultProps = (Type && Type.props) ? Type.props : {};

    Object.defineProperties(this, {
      'Type': {
        writable:     true,
        enumerable:   true,
        configurable: true,
        value:        Type,
      },
      'props': {
        writable:     true,
        enumerable:   true,
        configurable: true,
        value:        { ...defaultProps, ...(props || {}) },
      },
      'children': {
        writable:     true,
        enumerable:   true,
        configurable: true,
        value:        _utils_js__WEBPACK_IMPORTED_MODULE_1__.flattenArray(children),
      },
    });
  }
}

const JIB_BARREN  = Symbol.for('@jibs.barren');
const JIB_PROXY   = Symbol.for('@jibs.proxy');
const JIB         = Symbol.for('@jibs.jib');

function factory(JibClass) {
  return function $(_type, props = {}) {
    if (isJibish(_type))
      throw new TypeError('Received a jib but expected a component.');

    let Type = (_type == null) ? JIB_PROXY : _type;

    function barren(..._children) {
      let children = _children;

      function jib() {
        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(Type, 'promise') || children.some((child) => _utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(child, 'promise'))) {
          return Promise.all([ Type ].concat(children)).then((all) => {
            Type = all[0];
            children = all.slice(1);

            return new JibClass(
              Type,
              props,
              children,
            );
          });
        }

        return new JibClass(
          Type,
          props,
          children,
        );
      }

      Object.defineProperties(jib, {
        [JIB]: {
          writable:     false,
          enumerable:   false,
          configurable: false,
          value:        true,
        },
        [deadbeef__WEBPACK_IMPORTED_MODULE_0__.idSym]: {
          writable:     false,
          enumerable:   false,
          configurable: false,
          value:        () => Type,
        },
      });

      return jib;
    }

    Object.defineProperties(barren, {
      [JIB_BARREN]: {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        true,
      },
      [deadbeef__WEBPACK_IMPORTED_MODULE_0__.idSym]: {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        () => Type,
      },
    });

    return barren;
  };
}

const $ = factory(Jib);

function isJibish(value) {
  if (typeof value === 'function' && (value[JIB_BARREN] || value[JIB]))
    return true;

  if (value instanceof Jib)
    return true;

  return false;
}

function constructJib(value) {
  if (value instanceof Jib)
    return value;

  if (typeof value === 'function') {
    if (value[JIB_BARREN])
      return value()();
    else if (value[JIB])
      return value();
  }

  throw new TypeError('constructJib: Provided value is not a Jib.');
}

async function resolveChildren(_children) {
  let children = _children;

  if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(children, 'promise'))
    children = await children;

  if (!((this.isIterableChild || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isIterableChild).call(this, children)) && (isJibish(children) || ((this.isValidChild || _utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidChild).call(this, children))))
    children = [ children ];

  let promises = _utils_js__WEBPACK_IMPORTED_MODULE_1__.iterate(children, async ({ value: _child }) => {
    let child = (_utils_js__WEBPACK_IMPORTED_MODULE_1__.instanceOf(_child, 'promise')) ? await _child : _child;

    if (isJibish(child))
      return await constructJib(child);
    else
      return child;
  });

  return await Promise.all(promises);
}


/***/ }),

/***/ "./lib/renderers/comment-element.js":
/*!******************************************!*\
  !*** ./lib/renderers/comment-element.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_26032__) => {

__nested_webpack_require_26032__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_26032__.d(__webpack_exports__, {
/* harmony export */   "CommentElement": () => (/* binding */ CommentElement)
/* harmony export */ });
/* harmony import */ var _root_element_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_26032__(/*! ./root-element.js */ "./lib/renderers/root-element.js");


class CommentElement extends _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement {
  static TYPE = _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_COMMENT;

  constructor(id, value, props) {
    super(_root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_COMMENT, id, value, props);
  }
}


/***/ }),

/***/ "./lib/renderers/index.js":
/*!********************************!*\
  !*** ./lib/renderers/index.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_26973__) => {

__nested_webpack_require_26973__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_26973__.d(__webpack_exports__, {
/* harmony export */   "CONTEXT_ID": () => (/* reexport safe */ _root_node_js__WEBPACK_IMPORTED_MODULE_0__.CONTEXT_ID),
/* harmony export */   "CommentElement": () => (/* reexport safe */ _comment_element_js__WEBPACK_IMPORTED_MODULE_3__.CommentElement),
/* harmony export */   "FORCE_REFLOW": () => (/* binding */ FORCE_REFLOW),
/* harmony export */   "NativeElement": () => (/* reexport safe */ _native_element_js__WEBPACK_IMPORTED_MODULE_4__.NativeElement),
/* harmony export */   "PortalElement": () => (/* reexport safe */ _portal_element_js__WEBPACK_IMPORTED_MODULE_5__.PortalElement),
/* harmony export */   "Renderer": () => (/* reexport safe */ _renderer_js__WEBPACK_IMPORTED_MODULE_1__.Renderer),
/* harmony export */   "RootElement": () => (/* reexport safe */ _root_element_js__WEBPACK_IMPORTED_MODULE_2__.RootElement),
/* harmony export */   "RootNode": () => (/* reexport safe */ _root_node_js__WEBPACK_IMPORTED_MODULE_0__.RootNode),
/* harmony export */   "TextElement": () => (/* reexport safe */ _text_element_js__WEBPACK_IMPORTED_MODULE_6__.TextElement)
/* harmony export */ });
/* harmony import */ var _root_node_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_26973__(/*! ./root-node.js */ "./lib/renderers/root-node.js");
/* harmony import */ var _renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_26973__(/*! ./renderer.js */ "./lib/renderers/renderer.js");
/* harmony import */ var _root_element_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_26973__(/*! ./root-element.js */ "./lib/renderers/root-element.js");
/* harmony import */ var _comment_element_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_26973__(/*! ./comment-element.js */ "./lib/renderers/comment-element.js");
/* harmony import */ var _native_element_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_26973__(/*! ./native-element.js */ "./lib/renderers/native-element.js");
/* harmony import */ var _portal_element_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_26973__(/*! ./portal-element.js */ "./lib/renderers/portal-element.js");
/* harmony import */ var _text_element_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_26973__(/*! ./text-element.js */ "./lib/renderers/text-element.js");


const FORCE_REFLOW = Symbol.for('@jibsForceReflow');










/***/ }),

/***/ "./lib/renderers/native-element.js":
/*!*****************************************!*\
  !*** ./lib/renderers/native-element.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_29609__) => {

__nested_webpack_require_29609__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_29609__.d(__webpack_exports__, {
/* harmony export */   "NativeElement": () => (/* binding */ NativeElement)
/* harmony export */ });
/* harmony import */ var _root_element_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_29609__(/*! ./root-element.js */ "./lib/renderers/root-element.js");


class NativeElement extends _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement {
  static TYPE = _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_ELEMENT;

  constructor(id, value, props) {
    super(_root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_ELEMENT, id, value, props);
  }
}


/***/ }),

/***/ "./lib/renderers/portal-element.js":
/*!*****************************************!*\
  !*** ./lib/renderers/portal-element.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_30583__) => {

__nested_webpack_require_30583__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_30583__.d(__webpack_exports__, {
/* harmony export */   "PortalElement": () => (/* binding */ PortalElement)
/* harmony export */ });
/* harmony import */ var _root_element_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_30583__(/*! ./root-element.js */ "./lib/renderers/root-element.js");


class PortalElement extends _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement {
  static TYPE = _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_PORTAL;

  constructor(id, value, props) {
    super(_root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_PORTAL, id, value, props);
  }
}


/***/ }),

/***/ "./lib/renderers/renderer.js":
/*!***********************************!*\
  !*** ./lib/renderers/renderer.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_31531__) => {

__nested_webpack_require_31531__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_31531__.d(__webpack_exports__, {
/* harmony export */   "Renderer": () => (/* binding */ Renderer)
/* harmony export */ });
/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_31531__(/*! ../events.js */ "./lib/events.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_31531__(/*! ../utils.js */ "./lib/utils.js");
/* harmony import */ var _root_node_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_31531__(/*! ./root-node.js */ "./lib/renderers/root-node.js");




let _contextIDCounter = 0n;

class Renderer extends _events_js__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
  static RootNode = _root_node_js__WEBPACK_IMPORTED_MODULE_2__.RootNode;

  constructor() {
    super();

    Object.defineProperties(this, {
      'context': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        this.createContext(),
      },
      'destroying': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        false,
      },
      'renderFrame': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        0,
      },
    });
  }

  createContext(rootContext, onUpdate, onUpdateThis) {
    let context     = Object.create(null);
    let myContextID = (rootContext) ? rootContext[_root_node_js__WEBPACK_IMPORTED_MODULE_2__.CONTEXT_ID] : 1n;

    return new Proxy(context, {
      get: (target, propName) => {
        if (propName === _root_node_js__WEBPACK_IMPORTED_MODULE_2__.CONTEXT_ID) {
          let parentID = (rootContext) ? rootContext[_root_node_js__WEBPACK_IMPORTED_MODULE_2__.CONTEXT_ID] : 1n;
          return (parentID > myContextID) ? parentID : myContextID;
        }

        if (!Object.prototype.hasOwnProperty.call(target, propName))
          return (rootContext) ? rootContext[propName] : undefined;

        return target[propName];
      },
      set: (target, propName, value) => {
        if (propName === _root_node_js__WEBPACK_IMPORTED_MODULE_2__.CONTEXT_ID)
          return true;

        if (target[propName] === value)
          return true;

        myContextID = ++_contextIDCounter;
        target[propName] = value;

        if (typeof onUpdate === 'function')
          onUpdate.call(onUpdateThis, onUpdateThis);

        return true;
      },
    });
  }
}


/***/ }),

/***/ "./lib/renderers/root-element.js":
/*!***************************************!*\
  !*** ./lib/renderers/root-element.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_34281__) => {

__nested_webpack_require_34281__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_34281__.d(__webpack_exports__, {
/* harmony export */   "RootElement": () => (/* binding */ RootElement)
/* harmony export */ });

const TYPE_ELEMENT  = 1;
const TYPE_TEXT     = 3;
const TYPE_COMMENT  = 8;
const TYPE_PORTAL   = 15;

class RootElement {
  static TYPE_ELEMENT  = TYPE_ELEMENT;

  static TYPE_TEXT     = TYPE_TEXT;

  static TYPE_COMMENT  = TYPE_COMMENT;

  static TYPE_PORTAL   = TYPE_PORTAL;

  constructor(type, id, value, props) {
    this.isJibsVirtualElement = true;
    this.type   = type;
    this.id     = id;
    this.value  = value;
    this.props  = props || {};
  }
}


/***/ }),

/***/ "./lib/renderers/root-node.js":
/*!************************************!*\
  !*** ./lib/renderers/root-node.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_35222__) => {

__nested_webpack_require_35222__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_35222__.d(__webpack_exports__, {
/* harmony export */   "CONTEXT_ID": () => (/* binding */ CONTEXT_ID),
/* harmony export */   "RootNode": () => (/* binding */ RootNode)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_35222__(/*! ../utils.js */ "./lib/utils.js");


const CONTEXT_ID = Symbol.for('@jibs/node/contextID');

let uuid = 1;

class RootNode {
  static CONTEXT_ID = CONTEXT_ID;

  constructor(renderer, parent, _context) {
    let context = renderer.createContext(
      _context,
      (this.onContextUpdate) ? this.onContextUpdate : undefined,
      this,
    );

    Object.defineProperties(this, {
      'id': {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        uuid++,
      },
      'renderer': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        renderer,
      },
      'parent': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        parent,
      },
      'context': {
        enumerable:   false,
        configurable: true,
        get:          () => {
          return context;
        },
        set:          () => {},
      },
      'renderPromise': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        null,
      },
      'destroying': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        false,
      },
      'renderFrame': {
        writable:     true,
        enumerable:   false,
        configurable: true,
        value:        0,
      },
    });
  }

  destroy() {
    this.destroying = true;
    this.context = null;
  }

  isValidChild(child) {
    return _utils_js__WEBPACK_IMPORTED_MODULE_0__.isValidChild(child);
  }

  isIterableChild(child) {
    return _utils_js__WEBPACK_IMPORTED_MODULE_0__.isIterableChild(child);
  }

  propsDiffer(oldProps, newProps, skipKeys) {
    return _utils_js__WEBPACK_IMPORTED_MODULE_0__.propsDiffer(oldProps, newProps, skipKeys);
  }

  childrenDiffer(oldChildren, newChildren) {
    return _utils_js__WEBPACK_IMPORTED_MODULE_0__.childrenDiffer(oldChildren, newChildren);
  }

  async render(jib, renderContext) {
    if (this.destroying)
      return;

    this.renderFrame++;

    return this._render(jib, renderContext)
      .then((result) => {
        this.renderPromise = null;
        return result;
      })
      .catch((error) => {
        this.renderPromise = null;
        throw error;
      });
  }
}


/***/ }),

/***/ "./lib/renderers/text-element.js":
/*!***************************************!*\
  !*** ./lib/renderers/text-element.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_38207__) => {

__nested_webpack_require_38207__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_38207__.d(__webpack_exports__, {
/* harmony export */   "TextElement": () => (/* binding */ TextElement)
/* harmony export */ });
/* harmony import */ var _root_element_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_38207__(/*! ./root-element.js */ "./lib/renderers/root-element.js");


class TextElement extends _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement {
  static TYPE = _root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_TEXT;

  constructor(id, value, props) {
    super(_root_element_js__WEBPACK_IMPORTED_MODULE_0__.RootElement.TYPE_TEXT, id, value, props);
  }
}


/***/ }),

/***/ "./lib/utils.js":
/*!**********************!*\
  !*** ./lib/utils.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nested_webpack_require_39093__) => {

__nested_webpack_require_39093__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_39093__.d(__webpack_exports__, {
/* harmony export */   "bindMethods": () => (/* binding */ bindMethods),
/* harmony export */   "childrenDiffer": () => (/* binding */ childrenDiffer),
/* harmony export */   "fetchDeepProperty": () => (/* binding */ fetchDeepProperty),
/* harmony export */   "flattenArray": () => (/* binding */ flattenArray),
/* harmony export */   "instanceOf": () => (/* binding */ instanceOf),
/* harmony export */   "isEmpty": () => (/* binding */ isEmpty),
/* harmony export */   "isIterableChild": () => (/* binding */ isIterableChild),
/* harmony export */   "isNotEmpty": () => (/* binding */ isNotEmpty),
/* harmony export */   "isValidChild": () => (/* binding */ isValidChild),
/* harmony export */   "iterate": () => (/* binding */ iterate),
/* harmony export */   "now": () => (/* binding */ now),
/* harmony export */   "propsDiffer": () => (/* binding */ propsDiffer),
/* harmony export */   "sizeOf": () => (/* binding */ sizeOf)
/* harmony export */ });
/* harmony import */ var deadbeef__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_39093__(/*! deadbeef */ "./node_modules/deadbeef/lib/index.js");


const STOP = Symbol.for('@jibsIterateStop');

// eslint-disable-next-line no-nested-ternary
const globalScope = (typeof global !== 'undefined') ? global : (typeof window !== 'undefined') ? window : undefined;

function instanceOf(obj) {
  function testType(obj, _val) {
    function isDeferredType(obj) {
      if (obj instanceof Promise || (obj.constructor && obj.constructor.name === 'Promise'))
        return true;

      // Quack quack...
      if (typeof obj.then === 'function' && typeof obj.catch === 'function')
        return true;

      return false;
    }

    let val     = _val;
    let typeOf  = (typeof obj);

    if (val === globalScope.String)
      val = 'string';
    else if (val === globalScope.Number)
      val = 'number';
    else if (val === globalScope.Boolean)
      val = 'boolean';
    else if (val === globalScope.Function)
      val = 'function';
    else if (val === globalScope.Array)
      val = 'array';
    else if (val === globalScope.Object)
      val = 'object';
    else if (val === globalScope.Promise)
      val = 'promise';
    else if (val === globalScope.BigInt)
      val = 'bigint';
    else if (val === globalScope.Map)
      val = 'map';
    else if (val === globalScope.WeakMap)
      val = 'weakmap';
    else if (val === globalScope.Set)
      val = 'set';
    else if (val === globalScope.Symbol)
      val = 'symbol';
    else if (val === globalScope.Buffer)
      val = 'buffer';

    if (val === 'buffer' && globalScope.Buffer && globalScope.Buffer.isBuffer(obj))
      return true;

    if (val === 'number' && (typeOf === 'number' || obj instanceof Number || (obj.constructor && obj.constructor.name === 'Number'))) {
      if (!isFinite(obj))
        return false;

      return true;
    }

    if (val !== 'object' && val === typeOf)
      return true;

    if (val === 'object') {
      if ((obj.constructor === Object.prototype.constructor || (obj.constructor && obj.constructor.name === 'Object')))
        return true;

      // Null prototype on object
      if (typeOf === 'object' && !obj.constructor)
        return true;

      return false;
    }

    if (val === 'array' && (Array.isArray(obj) || obj instanceof Array || (obj.constructor && obj.constructor.name === 'Array')))
      return true;

    if ((val === 'promise' || val === 'deferred') && isDeferredType(obj))
      return true;

    if (val === 'string' && (obj instanceof globalScope.String || (obj.constructor && obj.constructor.name === 'String')))
      return true;

    if (val === 'boolean' && (obj instanceof globalScope.Boolean || (obj.constructor && obj.constructor.name === 'Boolean')))
      return true;

    if (val === 'map' && (obj instanceof globalScope.Map || (obj.constructor && obj.constructor.name === 'Map')))
      return true;

    if (val === 'weakmap' && (obj instanceof globalScope.WeakMap || (obj.constructor && obj.constructor.name === 'WeakMap')))
      return true;

    if (val === 'set' && (obj instanceof globalScope.Set || (obj.constructor && obj.constructor.name === 'Set')))
      return true;

    if (val === 'function' && typeOf === 'function')
      return true;

    if (typeof val === 'function' && obj instanceof val)
      return true;

    if (typeof val === 'string' && obj.constructor && obj.constructor.name === val)
      return true;

    return false;
  }

  if (obj == null)
    return false;

  for (var i = 1, len = arguments.length; i < len; i++) {
    if (testType(obj, arguments[i]) === true)
      return true;
  }

  return false;
}

function propsDiffer(oldProps, newProps, skipKeys) {
  if (oldProps === newProps)
    return false;

  if (typeof oldProps !== typeof newProps)
    return true;

  if (!oldProps && newProps)
    return true;

  if (oldProps && !newProps)
    return true;

  // eslint-disable-next-line eqeqeq
  if (!oldProps && !newProps && oldProps != oldProps)
    return true;

  let aKeys = Object.keys(oldProps).concat(Object.getOwnPropertySymbols(oldProps));
  let bKeys = Object.keys(newProps).concat(Object.getOwnPropertySymbols(newProps));

  if (aKeys.length !== bKeys.length)
    return true;

  for (let i = 0, il = aKeys.length; i < il; i++) {
    let aKey = aKeys[i];
    if (skipKeys && skipKeys.indexOf(aKey) >= 0)
      continue;

    if (oldProps[aKey] !== newProps[aKey])
      return true;

    let bKey = bKeys[i];
    if (skipKeys && skipKeys.indexOf(bKey))
      continue;

    if (aKey === bKey)
      continue;

    if (oldProps[bKey] !== newProps[bKey])
      return true;
  }

  return false;
}

function sizeOf(value) {
  if (!value)
    return 0;

  if (Object.is(Infinity))
    return 0;

  if (typeof value.length === 'number')
    return value.length;

  return Object.keys(value).length;
}

function _iterate(obj, callback) {
  if (!obj || Object.is(Infinity))
    return [];

  let results   = [];
  let scope     = { collection: obj, STOP };
  let result;

  if (Array.isArray(obj)) {
    scope.type = 'Array';

    for (let i = 0, il = obj.length; i < il; i++) {
      scope.value = obj[i];
      scope.index = scope.key = i;

      result = callback.call(this, scope);
      if (result === STOP)
        break;

      results.push(result);
    }
  } else if (typeof obj.entries === 'function') {
    if (obj instanceof Set || obj.constructor.name === 'Set') {
      scope.type = 'Set';

      let index = 0;
      for (let item of obj.values()) {
        scope.value = item;
        scope.key = item;
        scope.index = index++;

        result = callback.call(this, scope);
        if (result === STOP)
          break;

        results.push(result);
      }
    } else {
      scope.type = obj.constructor.name;

      let index = 0;
      for (let [ key, value ] of obj.entries()) {
        scope.value = value;
        scope.key = key;
        scope.index = index++;

        result = callback.call(this, scope);
        if (result === STOP)
          break;

        results.push(result);
      }
    }
  } else {
    if (instanceOf(obj, 'boolean', 'number', 'bigint', 'function'))
      return;

    scope.type = (obj.constructor) ? obj.constructor.name : 'Object';

    let keys = Object.keys(obj);
    for (let i = 0, il = keys.length; i < il; i++) {
      let key   = keys[i];
      let value = obj[key];

      scope.value = value;
      scope.key = key;
      scope.index = i;

      result = callback.call(this, scope);
      if (result === STOP)
        break;

      results.push(result);
    }
  }

  return results;
}

Object.defineProperties(_iterate, {
  'STOP': {
    writable:     false,
    enumerable:   false,
    configurable: false,
    value:        STOP,
  },
});

const iterate = _iterate;

function childrenDiffer(_children1, _children2) {
  let children1 = (!Array.isArray(_children1)) ? [ _children1 ] : _children1;
  let children2 = (!Array.isArray(_children2)) ? [ _children2 ] : _children2;

  return (deadbeef__WEBPACK_IMPORTED_MODULE_0__(...children1) !== deadbeef__WEBPACK_IMPORTED_MODULE_0__(...children2));
}

function fetchDeepProperty(obj, _key, defaultValue, lastPart) {
  if (obj == null || Object.is(NaN, obj) || Object.is(Infinity, obj))
    return (lastPart) ? [ defaultValue, null ] : defaultValue;

  if (_key == null || Object.is(NaN, _key) || Object.is(Infinity, _key))
    return (lastPart) ? [ defaultValue, null ] : defaultValue;

  let parts;

  if (Array.isArray(_key)) {
    parts = _key;
  } else if (typeof _key === 'symbol') {
    parts = [ _key ];
  } else {
    let key         = ('' + _key);
    let lastIndex   = 0;
    let lastCursor  = 0;

    parts = [];

    // eslint-disable-next-line no-constant-condition
    while (true) {
      let index = key.indexOf('.', lastIndex);
      if (index < 0) {
        parts.push(key.substring(lastCursor));
        break;
      }

      if (key.charAt(index - 1) === '\\') {
        lastIndex = index + 1;
        continue;
      }

      parts.push(key.substring(lastCursor, index));
      lastCursor = lastIndex = index + 1;
    }
  }

  let partN = parts[parts.length - 1];
  if (parts.length === 0)
    return (lastPart) ? [ defaultValue, partN ] : defaultValue;

  let currentValue = obj;
  for (let i = 0, il = parts.length; i < il; i++) {
    let key = parts[i];

    currentValue = currentValue[key];
    if (currentValue == null)
      return (lastPart) ? [ defaultValue, partN ] : defaultValue;
  }

  return (lastPart) ? [ currentValue, partN ] : currentValue;
}

function bindMethods(_proto, skipProtos) {
  let proto           = _proto;
  let alreadyVisited  = new Set();

  while (proto) {
    let descriptors = Object.getOwnPropertyDescriptors(proto);
    let keys        = Object.keys(descriptors).concat(Object.getOwnPropertySymbols(descriptors));

    for (let i = 0, il = keys.length; i < il; i++) {
      let key = keys[i];
      if (key === 'constructor')
        continue;

      if (alreadyVisited.has(key))
        continue;

      alreadyVisited.add(key);

      let value = proto[key];

      // Skip prototype of Object
      // eslint-disable-next-line no-prototype-builtins
      if (Object.prototype.hasOwnProperty(key) && Object.prototype[key] === value)
        continue;

      if (typeof value !== 'function')
        continue;

      this[key] = value.bind(this);
    }

    proto = Object.getPrototypeOf(proto);
    if (proto === Object.prototype)
      break;

    if (skipProtos && skipProtos.indexOf(proto) >= 0)
      break;
  }
}

function isEmpty(value) {
  if (value == null)
    return true;

  if (Object.is(value, Infinity))
    return false;

  if (Object.is(value, NaN))
    return true;

  if (instanceOf(value, 'string'))
    return !(/\S/).test(value);
  else if (instanceOf(value, 'number') && isFinite(value))
    return false;
  else if (!instanceOf(value, 'boolean', 'bigint', 'function') && sizeOf(value) === 0)
    return true;

  return false;
}

function isNotEmpty(value) {
  return !isEmpty.call(this, value);
}

function flattenArray(value) {
  if (!Array.isArray(value))
    return value;

  let newArray = [];
  for (let i = 0, il = value.length; i < il; i++) {
    let item = value[i];
    if (Array.isArray(item))
      newArray = newArray.concat(flattenArray(item));
    else
      newArray.push(item);
  }

  return newArray;
}

function isValidChild(child) {
  if (child == null)
    return false;

  if (typeof child === 'boolean')
    return false;

  if (Object.is(child, Infinity))
    return false;

  if (Object.is(child, NaN))
    return false;

  return true;
}

function isIterableChild(child) {
  if (child == null || Object.is(child, NaN) || Object.is(child, Infinity))
    return false;

  return (Array.isArray(child) || typeof child === 'object' && !instanceOf(child, 'boolean', 'number', 'string'));
}

function now() {
  if (typeof performance !== 'undefined' && typeof performance.now === 'function')
    return performance.now();
  else
    return Date.now();
}


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nested_webpack_require_51464__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_51464__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nested_webpack_require_51464__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nested_webpack_require_51464__.o(definition, key) && !__nested_webpack_require_51464__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__nested_webpack_require_51464__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nested_webpack_require_51464__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_51464__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
__nested_webpack_require_51464__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_51464__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* reexport safe */ _jib_js__WEBPACK_IMPORTED_MODULE_0__.$),
/* harmony export */   "Component": () => (/* reexport safe */ _component_js__WEBPACK_IMPORTED_MODULE_1__.Component),
/* harmony export */   "Components": () => (/* binding */ Components),
/* harmony export */   "Jibs": () => (/* binding */ Jibs),
/* harmony export */   "Renderers": () => (/* binding */ Renderers),
/* harmony export */   "Utils": () => (/* reexport module object */ _utils_js__WEBPACK_IMPORTED_MODULE_3__),
/* harmony export */   "deadbeef": () => (/* reexport default export from named module */ deadbeef__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   "factory": () => (/* reexport safe */ _jib_js__WEBPACK_IMPORTED_MODULE_0__.factory)
/* harmony export */ });
/* harmony import */ var _jib_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_51464__(/*! ./jib.js */ "./lib/jib.js");
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_51464__(/*! ./component.js */ "./lib/component.js");
/* harmony import */ var _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_51464__(/*! ./renderers/index.js */ "./lib/renderers/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_51464__(/*! ./utils.js */ "./lib/utils.js");
/* harmony import */ var deadbeef__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_51464__(/*! deadbeef */ "./node_modules/deadbeef/lib/index.js");


const Jibs = {
  JIB_BARREN: _jib_js__WEBPACK_IMPORTED_MODULE_0__.JIB_BARREN,
  JIB_PROXY: _jib_js__WEBPACK_IMPORTED_MODULE_0__.JIB_PROXY,
  JIB: _jib_js__WEBPACK_IMPORTED_MODULE_0__.JIB,
  Jib: _jib_js__WEBPACK_IMPORTED_MODULE_0__.Jib,
  isJibish: _jib_js__WEBPACK_IMPORTED_MODULE_0__.isJibish,
  constructJib: _jib_js__WEBPACK_IMPORTED_MODULE_0__.constructJib,
  resolveChildren: _jib_js__WEBPACK_IMPORTED_MODULE_0__.resolveChildren,
};



const Components = {
  UPDATE_EVENT: _component_js__WEBPACK_IMPORTED_MODULE_1__.UPDATE_EVENT,
  QUEUE_UPDATE_METHOD: _component_js__WEBPACK_IMPORTED_MODULE_1__.QUEUE_UPDATE_METHOD,
  FLUSH_UPDATE_METHOD: _component_js__WEBPACK_IMPORTED_MODULE_1__.FLUSH_UPDATE_METHOD,
  INIT_METHOD: _component_js__WEBPACK_IMPORTED_MODULE_1__.INIT_METHOD,
  SKIP_STATE_UPDATES: _component_js__WEBPACK_IMPORTED_MODULE_1__.SKIP_STATE_UPDATES,
  PENDING_STATE_UPDATE: _component_js__WEBPACK_IMPORTED_MODULE_1__.PENDING_STATE_UPDATE,
  LAST_RENDER_TIME: _component_js__WEBPACK_IMPORTED_MODULE_1__.LAST_RENDER_TIME,
  PREVIOUS_STATE: _component_js__WEBPACK_IMPORTED_MODULE_1__.PREVIOUS_STATE,
};



const Renderers = {
  CONTEXT_ID: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.RootNode.CONTEXT_ID,
  FORCE_REFLOW: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.FORCE_REFLOW,
  RootNode: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.RootNode,
  Renderer: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.Renderer,
  RootElement: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.RootElement,
  CommentElement: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.CommentElement,
  NativeElement: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.NativeElement,
  PortalElement: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.PortalElement,
  TextElement: _renderers_index_js__WEBPACK_IMPORTED_MODULE_2__.TextElement,
};






})();

var __webpack_exports__$ = __webpack_exports__.$;
var __webpack_exports__Component = __webpack_exports__.Component;
var __webpack_exports__Components = __webpack_exports__.Components;
var __webpack_exports__Jibs = __webpack_exports__.Jibs;
var __webpack_exports__Renderers = __webpack_exports__.Renderers;
var __webpack_exports__Utils = __webpack_exports__.Utils;
var __webpack_exports__deadbeef = __webpack_exports__.deadbeef;
var __webpack_exports__factory = __webpack_exports__.factory;


//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nested_webpack_require_157312__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_157312__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nested_webpack_require_157312__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nested_webpack_require_157312__.o(definition, key) && !__nested_webpack_require_157312__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nested_webpack_require_157312__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_157312__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
__nested_webpack_require_157312__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_157312__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.$),
/* harmony export */   "Component": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.Component),
/* harmony export */   "Components": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.Components),
/* harmony export */   "DOMRenderer": () => (/* reexport safe */ _dom_renderer_js__WEBPACK_IMPORTED_MODULE_0__.DOMRenderer),
/* harmony export */   "Jibs": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.Jibs),
/* harmony export */   "Renderers": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.Renderers),
/* harmony export */   "Utils": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.Utils),
/* harmony export */   "deadbeef": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.deadbeef),
/* harmony export */   "factory": () => (/* reexport safe */ jibs__WEBPACK_IMPORTED_MODULE_1__.factory)
/* harmony export */ });
/* harmony import */ var _dom_renderer_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_157312__(/*! ./dom-renderer.js */ "./lib/dom-renderer.js");
/* harmony import */ var jibs__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_157312__(/*! jibs */ "../jibs/dist/index.js");



})();

var __webpack_exports__$ = __webpack_exports__.$;
var __webpack_exports__Component = __webpack_exports__.Component;
var __webpack_exports__Components = __webpack_exports__.Components;
var __webpack_exports__DOMRenderer = __webpack_exports__.DOMRenderer;
var __webpack_exports__Jibs = __webpack_exports__.Jibs;
var __webpack_exports__Renderers = __webpack_exports__.Renderers;
var __webpack_exports__Utils = __webpack_exports__.Utils;
var __webpack_exports__deadbeef = __webpack_exports__.deadbeef;
var __webpack_exports__factory = __webpack_exports__.factory;


//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUtjOztBQUVkO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSxzQ0FBSTs7QUFFUjtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsMkNBQVM7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxFQUFFLDRDQUFVOztBQUVQO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2Q0FBNkMsUUFBUTtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDOztBQUU1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUVBQXlFLFVBQVU7QUFDbkYsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxVQUFVLHdDQUF3QztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEseUNBQXlDLDJDQUFTOztBQUVsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDJDQUEyQywyQ0FBUzs7QUFFcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYyxJQUFJLFlBQVk7QUFDNUQsUUFBUTtBQUNSLDRCQUE0QixjQUFjLElBQUksWUFBWTtBQUMxRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0REFBNEQsMEZBQTBGO0FBQ3RKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsaUZBQWlGLFVBQVU7QUFDM0Y7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLGtEQUFnQjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLGtEQUFnQjtBQUNoQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xVYzs7QUFFcUM7QUFDSjtBQUNFO0FBQ0E7QUFDRzs7QUFFcEQsUUFBUSxXQUFXLEVBQUUsMkNBQVM7O0FBRTlCO0FBQ0E7QUFDQSxFQUFFLEVBQUUsc0NBQUk7O0FBRUQ7QUFDUCx3QkFBd0IsMkRBQVk7O0FBRXBDLG9CQUFvQixtREFBUTs7QUFFNUIsc0JBQXNCLHVEQUFVOztBQUVoQyxzQkFBc0IsdURBQVU7O0FBRWhDLHlCQUF5Qiw2REFBYTs7QUFFdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0RBQW9ELFVBQVU7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1RmM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsc0NBQUk7O0FBRVI7QUFDQTtBQUNBLEVBQUUsRUFBRSwyQ0FBUzs7QUFFYjtBQUNBOztBQUVPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLCtCQUErQjtBQUN2RTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLGtEQUFnQjtBQUN4Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsK0NBQWEsY0FBYyxpQ0FBaUM7QUFDL0U7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixrREFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWMsa0RBQWdCO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpSUFBaUksc0JBQXNCOztBQUV2SixxQkFBcUIsOENBQVE7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixjQUFjLCtDQUFhO0FBQzNCOztBQUVBLHFCQUFxQiw4Q0FBUSwyQkFBMkIsK0JBQStCOztBQUV2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxxQkFBcUIsOENBQVEsdUJBQXVCLDJCQUEyQjs7QUFFL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0EsY0FBYyxnQkFBZ0I7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7O0FDM09jOztBQUVkO0FBQ0E7QUFDQSxFQUFFLEVBQUUsc0NBQUk7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsMkNBQVM7O0FBRU47QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckMsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sK0JBQStCOztBQUVyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaEhjOztBQUVnQzs7QUFFOUM7QUFDQTtBQUNBLEVBQUUsRUFBRSwyQ0FBUzs7QUFFTix5QkFBeUIsdURBQVU7QUFDMUM7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ1ZjOztBQUVkO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSwyQ0FBUzs7QUFFTjtBQUNQO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdEJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELDhCQUFtQjs7QUFFckU7Ozs7QUFJQSwrREFBK0QsOEJBQW1CO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSx5Q0FBeUMsUUFBUTtBQUNqRCxVQUFVLG9CQUFvQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixlQUFlOztBQUVwQztBQUNBO0FBQ0EsbUNBQW1DLElBQUksZUFBZSxJQUFJOztBQUUxRDtBQUNBOztBQUVBLGNBQWMsT0FBTyxHQUFHLElBQUk7QUFDNUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsV0FBVyxHQUFHLGNBQWM7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsK0JBQW1COztBQUVyRiwrQkFBbUI7QUFDbkIscUJBQXFCLCtCQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixtRUFBbUUsK0JBQW1CO0FBQ3RGLGtFQUFrRSwrQkFBbUI7QUFDckYsZ0VBQWdFLCtCQUFtQjtBQUNuRjs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBLHdFQUF3RTtBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG9FQUFvRSxNQUFNOztBQUUxRTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpRUFBaUUsTUFBTTs7QUFFdkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0VBQXdFLE1BQU07O0FBRTlFO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVCw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsUUFBUTtBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSwwQ0FBMEMsUUFBUTtBQUNsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdDQUFtQjs7QUFFckYsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGlFQUFpRSxnQ0FBbUI7QUFDcEYsa0VBQWtFLGdDQUFtQjs7OztBQUlyRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdDQUFnQyxHQUFHO0FBQzNELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUZBQW1GLGVBQWU7QUFDbEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQW1COztBQUVyRixnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix5RUFBeUUsZ0NBQW1COzs7QUFHNUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixzRUFBc0UsZ0NBQW1CO0FBQ3pGLHFFQUFxRSxnQ0FBbUI7QUFDeEYseUVBQXlFLGdDQUFtQjtBQUM1Riw0RUFBNEUsZ0NBQW1CO0FBQy9GLDJFQUEyRSxnQ0FBbUI7QUFDOUYsMkVBQTJFLGdDQUFtQjtBQUM5Rix5RUFBeUUsZ0NBQW1COzs7QUFHNUY7Ozs7Ozs7Ozs7O0FBV0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHlFQUF5RSxnQ0FBbUI7OztBQUc1RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdDQUFtQjs7QUFFckYsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIseUVBQXlFLGdDQUFtQjs7O0FBRzVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQW1COztBQUVyRixnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QixtRUFBbUUsZ0NBQW1CO0FBQ3RGLGtFQUFrRSxnQ0FBbUI7QUFDckYsc0VBQXNFLGdDQUFtQjs7Ozs7QUFLekY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQW1COztBQUVyRixnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdDQUFtQjs7QUFFckYsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixrRUFBa0UsZ0NBQW1COzs7QUFHckY7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULDhCQUE4QjtBQUM5QixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQW1COztBQUVyRixnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix5RUFBeUUsZ0NBQW1COzs7QUFHNUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLGlFQUFpRSxnQ0FBbUI7OztBQUdwRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMENBQTBDLFNBQVM7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBOztBQUVBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxRQUFRO0FBQzdDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQ0FBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsZ0NBQW1CO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0NBQW1CO0FBQzdCO0FBQ0EsZUFBZSxnQ0FBbUIsd0JBQXdCLGdDQUFtQjtBQUM3RSxtREFBbUQsd0NBQXdDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdDQUFtQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVc7QUFDWCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQ0FBbUI7QUFDN0IsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnQ0FBbUI7QUFDN0I7QUFDQSxpRUFBaUUsaUJBQWlCO0FBQ2xGO0FBQ0EsMERBQTBELGFBQWE7QUFDdkU7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsZ0VBQWdFLGdDQUFtQjtBQUNuRixzRUFBc0UsZ0NBQW1CO0FBQ3pGLDRFQUE0RSxnQ0FBbUI7QUFDL0Ysa0VBQWtFLGdDQUFtQjtBQUNyRixpRUFBaUUsZ0NBQW1COzs7QUFHcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzRUOztBQUU1VCwyQ0FBMkMsY0FBYzs7Ozs7O1NDaDVEekQ7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx5Q0FBeUMsd0NBQXdDO1VBQ2pGO1VBQ0E7VUFDQTs7Ozs7VUNQQTs7Ozs7VUNBQTtVQUNBO1VBQ0E7VUFDQSx1REFBdUQsaUJBQWlCO1VBQ3hFO1VBQ0EsZ0RBQWdELGFBQWE7VUFDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ05nRDtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2ppYnMtZG9tLXJlbmRlcmVyLy4vbGliL2NvbXBvbmVudC1ub2RlLmpzIiwid2VicGFjazovL2ppYnMtZG9tLXJlbmRlcmVyLy4vbGliL2RvbS1yZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9qaWJzLWRvbS1yZW5kZXJlci8uL2xpYi9mcmFnbWVudC1ub2RlLmpzIiwid2VicGFjazovL2ppYnMtZG9tLXJlbmRlcmVyLy4vbGliL25hdGl2ZS1ub2RlLmpzIiwid2VicGFjazovL2ppYnMtZG9tLXJlbmRlcmVyLy4vbGliL3BvcnRhbC1ub2RlLmpzIiwid2VicGFjazovL2ppYnMtZG9tLXJlbmRlcmVyLy4vbGliL3RleHQtbm9kZS5qcyIsIndlYnBhY2s6Ly9qaWJzLWRvbS1yZW5kZXJlci8uLi9qaWJzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamlicy1kb20tcmVuZGVyZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vamlicy1kb20tcmVuZGVyZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2ppYnMtZG9tLXJlbmRlcmVyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vamlicy1kb20tcmVuZGVyZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9qaWJzLWRvbS1yZW5kZXJlci8uL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBKaWJzLFxuICBDb21wb25lbnRzLFxuICBSZW5kZXJlcnMsXG4gIFV0aWxzLFxufSBmcm9tICdqaWJzJztcblxuY29uc3Qge1xuICBKSUJfUFJPWFksXG4gIHJlc29sdmVDaGlsZHJlbixcbn0gPSBKaWJzO1xuXG5jb25zdCB7XG4gIENPTlRFWFRfSUQsXG4gIFJvb3ROb2RlLFxufSA9IFJlbmRlcmVycztcblxuY29uc3Qge1xuICBJTklUX01FVEhPRCxcbiAgVVBEQVRFX0VWRU5ULFxuICBQRU5ESU5HX1NUQVRFX1VQREFURSxcbiAgTEFTVF9SRU5ERVJfVElNRSxcbiAgU0tJUF9TVEFURV9VUERBVEVTLFxufSA9IENvbXBvbmVudHM7XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnROb2RlIGV4dGVuZHMgUm9vdE5vZGUge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAncm9vdE5vZGUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ2NvbXBvbmVudCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbnVsbCxcbiAgICAgIH0sXG4gICAgICAnX3BlbmRpbmdDb250ZXh0VXBkYXRlJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdfY2FjaGVkUmVuZGVyUmVzdWx0Jzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdfY2FjaGVkUmVuZGVyQ29udGV4dCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbnVsbCxcbiAgICAgIH0sXG4gICAgICAnX2NhY2hlZFdhaXRpbmdSZW5kZXJSZXN1bHQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ19wcmV2aW91c1N0YXRlJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICB7fSxcbiAgICAgIH0sXG4gICAgICAnX2N1cnJlbnRKaWInOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ19sYXN0Q29udGV4dElEJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICB0aGlzLmNvbnRleHRbQ09OVEVYVF9JRF0gfHwgMW4sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgbWVyZ2VDb21wb25lbnRQcm9wcyhvbGRQcm9wcywgbmV3UHJvcHMpIHtcbiAgICBsZXQgcHJvcHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIG9sZFByb3BzIHx8IHt9LCBuZXdQcm9wcyk7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG5cbiAgZmlyZVByb3BVcGRhdGVzKF9vbGRQcm9wcywgX25ld1Byb3BzKSB7XG4gICAgbGV0IG5ld1Byb3BzICAgID0gX25ld1Byb3BzIHx8IHt9O1xuICAgIGxldCBhbGxQcm9wS2V5cyA9IG5ldyBTZXQoT2JqZWN0LmtleXMobmV3UHJvcHMpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG5ld1Byb3BzKSkpO1xuXG4gICAgbGV0IG9sZFByb3BzICAgID0gX29sZFByb3BzIHx8IHt9O1xuICAgIGxldCBvbGRQcm9wS2V5cyA9IE9iamVjdC5rZXlzKG9sZFByb3BzKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvbGRQcm9wcykpO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IG9sZFByb3BLZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspXG4gICAgICBhbGxQcm9wS2V5cy5hZGQob2xkUHJvcEtleXNbaV0pO1xuXG4gICAgZm9yIChsZXQga2V5IG9mIGFsbFByb3BLZXlzKSB7XG4gICAgICBsZXQgb2xkVmFsdWUgID0gb2xkUHJvcHNba2V5XTtcbiAgICAgIGxldCBuZXdWYWx1ZSAgPSBuZXdQcm9wc1trZXldO1xuXG4gICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKVxuICAgICAgICB0aGlzLmNvbXBvbmVudC5vblByb3BVcGRhdGVkKGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRSZW5kZXIobmV3UHJvcHMsIG5ld0NoaWxkcmVuKSB7XG4gICAgbGV0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50O1xuICAgIGlmICghY29tcG9uZW50KVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodGhpcy5fbGFzdENvbnRleHRJRCA8IHRoaXMuY29udGV4dFtDT05URVhUX0lEXSkge1xuICAgICAgdGhpcy5fbGFzdENvbnRleHRJRCA9IHRoaXMuY29udGV4dFtDT05URVhUX0lEXTtcbiAgICAgIHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBjb21wb25lbnQuc3RhdGUpO1xuXG4gICAgICB0aGlzLmZpcmVQcm9wVXBkYXRlcyhjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzKTtcbiAgICAgIGNvbXBvbmVudC5wcm9wcyA9IHRoaXMubWVyZ2VDb21wb25lbnRQcm9wcyhjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2hpbGRyZW5EaWZmZXIoY29tcG9uZW50LmNoaWxkcmVuLCBuZXdDaGlsZHJlbikpIHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBjb21wb25lbnQuc3RhdGUpO1xuXG4gICAgICB0aGlzLmZpcmVQcm9wVXBkYXRlcyhjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzKTtcbiAgICAgIGNvbXBvbmVudC5wcm9wcyA9IHRoaXMubWVyZ2VDb21wb25lbnRQcm9wcyhjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHByZXZpb3VzU3RhdGUgPSB0aGlzLl9wcmV2aW91c1N0YXRlIHx8IHt9O1xuICAgIGxldCBwcm9wc0RpZmZlciAgID0gdGhpcy5wcm9wc0RpZmZlcihjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzLCBbICdyZWYnLCAna2V5JyBdLCB0cnVlKTtcbiAgICBpZiAocHJvcHNEaWZmZXIgJiYgY29tcG9uZW50LnNob3VsZFVwZGF0ZShuZXdQcm9wcywgcHJldmlvdXNTdGF0ZSkpIHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBjb21wb25lbnQuc3RhdGUpO1xuXG4gICAgICB0aGlzLmZpcmVQcm9wVXBkYXRlcyhjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzKTtcbiAgICAgIGNvbXBvbmVudC5wcm9wcyA9IHRoaXMubWVyZ2VDb21wb25lbnRQcm9wcyhjb21wb25lbnQucHJvcHMsIG5ld1Byb3BzKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgbGV0IHN0YXRlRGlmZmVycyA9IHRoaXMucHJvcHNEaWZmZXIocHJldmlvdXNTdGF0ZSwgY29tcG9uZW50LnN0YXRlKTtcbiAgICBpZiAoc3RhdGVEaWZmZXJzICYmIGNvbXBvbmVudC5zaG91bGRVcGRhdGUobmV3UHJvcHMsIHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgY29tcG9uZW50LnN0YXRlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWluZylcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMuZGVzdHJveWluZyA9IHRydWU7XG5cbiAgICBhd2FpdCB0aGlzLnJlbmRlclByb21pc2U7XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50SmliICYmIHR5cGVvZiB0aGlzLl9jdXJyZW50SmliLnByb3BzLnJlZiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhpcy5fY3VycmVudEppYi5wcm9wcy5yZWYuY2FsbCh0aGlzLmNvbXBvbmVudCwgbnVsbCwgdGhpcy5jb21wb25lbnQpO1xuXG4gICAgICBhd2FpdCB0aGlzLmNvbXBvbmVudC5kZXN0cm95KCk7XG4gICAgICB0aGlzLmNvbXBvbmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucm9vdE5vZGUpIHtcbiAgICAgIGF3YWl0IHRoaXMucm9vdE5vZGUuZGVzdHJveSgpO1xuICAgICAgdGhpcy5yb290Tm9kZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FjaGVkUmVuZGVyUmVzdWx0ID0gbnVsbDtcbiAgICB0aGlzLl9wcmV2aW91c1N0YXRlID0gbnVsbDtcbiAgICB0aGlzLl9jdXJyZW50SmliID0gbnVsbDtcblxuICAgIHJldHVybiBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICBvbkNvbnRleHRVcGRhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXBvbmVudCB8fCB0aGlzLmNvbXBvbmVudFtTS0lQX1NUQVRFX1VQREFURVNdIHx8IHRoaXMuY29tcG9uZW50W1BFTkRJTkdfU1RBVEVfVVBEQVRFXSlcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMucmVuZGVyKHRoaXMuX2N1cnJlbnRKaWIsIHRoaXMuX2NhY2hlZFJlbmRlckNvbnRleHQgfHwgeyBpbmRleDogMCB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlc29sdmVDaGlsZHJlbihjaGlsZHJlbikge1xuICAgIHJldHVybiByZXNvbHZlQ2hpbGRyZW4uY2FsbCh0aGlzLCBjaGlsZHJlbik7XG4gIH1cblxuICBhc3luYyBzeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIobm9kZSwgcmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpXG4gICAgICByZXR1cm47XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgdGhpcy5wYXJlbnQuc3luY0VsZW1lbnRzV2l0aFJlbmRlcmVyKG5vZGUsIHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudClcbiAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZWQoKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgYXN5bmMgX3JlbmRlcihqaWIsIHJlbmRlckNvbnRleHQpIHtcbiAgICBpZiAoamliICE9PSB0aGlzLl9jdXJyZW50SmliKVxuICAgICAgdGhpcy5fY3VycmVudEppYiA9IGppYjtcblxuICAgIHRoaXMuX2NhY2hlZFJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuXG4gICAgaWYgKCFqaWIpXG4gICAgICByZXR1cm47XG5cbiAgICBsZXQgcmVuZGVyRnJhbWUgPSB0aGlzLnJlbmRlckZyYW1lO1xuXG4gICAgbGV0IHsgVHlwZTogQ29tcG9uZW50Q2xhc3MsIHByb3BzLCBjaGlsZHJlbiB9ID0gamliO1xuICAgIGppYi5jaGlsZHJlbiA9IGF3YWl0IHRoaXMucmVzb2x2ZUNoaWxkcmVuKGNoaWxkcmVuKTtcblxuICAgIGNvbnN0IGZpbmFsaXplUmVuZGVyID0gYXN5bmMgKHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcgfHwgcmVuZGVyRnJhbWUgPCB0aGlzLnJlbmRlckZyYW1lIHx8ICF0aGlzLmNvbXBvbmVudClcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICB0aGlzLmNvbXBvbmVudFtMQVNUX1JFTkRFUl9USU1FXSA9IFV0aWxzLm5vdygpO1xuXG4gICAgICBsZXQgcm9vdE5vZGUgPSB0aGlzLnJvb3ROb2RlO1xuICAgICAgaWYgKCFyb290Tm9kZSlcbiAgICAgICAgcm9vdE5vZGUgPSB0aGlzLnJvb3ROb2RlID0gdGhpcy5yZW5kZXJlci5jb25zdHJ1Y3ROb2RlRnJvbUppYihKSUJfUFJPWFksIHRoaXMsIHRoaXMuY29udGV4dCk7XG5cbiAgICAgIGxldCBmcmFnbWVudFJlc3VsdCA9IHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdCA9IGF3YWl0IHJvb3ROb2RlLnJlbmRlcihyZW5kZXJSZXN1bHQsIHJlbmRlckNvbnRleHQpO1xuICAgICAgYXdhaXQgdGhpcy5zeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIodGhpcywgZnJhZ21lbnRSZXN1bHQsIHJlbmRlckZyYW1lKTtcblxuICAgICAgcmV0dXJuIGZyYWdtZW50UmVzdWx0O1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVSZW5kZXJFcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVzdHJveWluZyB8fCByZW5kZXJGcmFtZSA8IHRoaXMucmVuZGVyRnJhbWUpXG4gICAgICAgIHJldHVybjtcblxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG5cbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudClcbiAgICAgICAgdGhpcy5jb21wb25lbnRbTEFTVF9SRU5ERVJfVElNRV0gPSBVdGlscy5ub3coKTtcblxuICAgICAgbGV0IHJlbmRlclJlc3VsdDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmIHR5cGVvZiB0aGlzLmNvbXBvbmVudC5yZW5kZXJFcnJvclN0YXRlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgIHJlbmRlclJlc3VsdCA9IHRoaXMuY29tcG9uZW50LnJlbmRlckVycm9yU3RhdGUoZXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVuZGVyUmVzdWx0ID0gWyBgJHtlcnJvci5tZXNzYWdlfVxcbiR7ZXJyb3Iuc3RhY2t9YCBdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgIHJlbmRlclJlc3VsdCA9IFsgYCR7ZXJyb3IubWVzc2FnZX1cXG4ke2Vycm9yLnN0YWNrfWAgXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbmFsaXplUmVuZGVyKHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmICF0aGlzLnNob3VsZFJlbmRlcihqaWIucHJvcHMsIGppYi5jaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgIGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50ID0gbmV3IENvbXBvbmVudENsYXNzKHsgLi4uamliLCBwcm9wczogdGhpcy5tZXJnZUNvbXBvbmVudFByb3BzKG51bGwsIHByb3BzKSwgY29udGV4dDogdGhpcy5jb250ZXh0LCBpZDogdGhpcy5pZCB9KTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudFtJTklUX01FVEhPRF0gPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBjb21wb25lbnRbSU5JVF9NRVRIT0RdKCk7XG5cbiAgICAgICAgICBjb21wb25lbnQub24oVVBEQVRFX0VWRU5ULCBhc3luYyAocHVzaGVkUmVuZGVyUmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocHVzaGVkUmVuZGVyUmVzdWx0KSB7XG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyRnJhbWUrKztcbiAgICAgICAgICAgICAgYXdhaXQgZmluYWxpemVSZW5kZXIocHVzaGVkUmVuZGVyUmVzdWx0LCB0aGlzLnJlbmRlckZyYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVuZGVyKHRoaXMuX2N1cnJlbnRKaWIsIHRoaXMuX2NhY2hlZFJlbmRlckNvbnRleHQgfHwgeyBpbmRleDogMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChwcm9wcyAmJiB0eXBlb2YgcHJvcHMucmVmID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcHJvcHMucmVmLmNhbGwoY29tcG9uZW50LCBjb21wb25lbnQsIG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIHN0YXRlIHVwZGF0ZXNcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50W1BFTkRJTkdfU1RBVEVfVVBEQVRFXSlcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudFtQRU5ESU5HX1NUQVRFX1VQREFURV0gPSBudWxsO1xuXG4gICAgICAgIGxldCByZW5kZXJSZXN1bHQgPSB0aGlzLmNvbXBvbmVudC5yZW5kZXIoamliLmNoaWxkcmVuKTtcbiAgICAgICAgaWYgKFV0aWxzLmluc3RhbmNlT2YocmVuZGVyUmVzdWx0LCAncHJvbWlzZScpKSB7XG4gICAgICAgICAgbGV0IHdhaXRpbmdSZW5kZXJSZXN1bHQgPSB0aGlzLmNvbXBvbmVudC5yZW5kZXJXYWl0aW5nKHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdCk7XG4gICAgICAgICAgbGV0IHJlbmRlckNvbXBsZXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgbGV0IGxvYWRpbmdUaW1lciA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbG9hZGluZ1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKFV0aWxzLmluc3RhbmNlT2Yod2FpdGluZ1JlbmRlclJlc3VsdCwgJ3Byb21pc2UnKSlcbiAgICAgICAgICAgICAgd2FpdGluZ1JlbmRlclJlc3VsdCA9IGF3YWl0IHdhaXRpbmdSZW5kZXJSZXN1bHQ7XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpXG4gICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgYXdhaXQgZmluYWxpemVSZW5kZXIod2FpdGluZ1JlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuICAgICAgICAgIH0sIDUpO1xuXG4gICAgICAgICAgcmV0dXJuIGF3YWl0IHJlbmRlclJlc3VsdC50aGVuKGFzeW5jIChyZW5kZXJSZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHJlbmRlckNvbXBsZXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChsb2FkaW5nVGltZXIpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGxvYWRpbmdUaW1lcik7XG4gICAgICAgICAgICAgIGxvYWRpbmdUaW1lciA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmaW5hbGl6ZVJlbmRlcihyZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKTtcbiAgICAgICAgICB9KS5jYXRjaChoYW5kbGVSZW5kZXJFcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGZpbmFsaXplUmVuZGVyKHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVSZW5kZXJFcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBKaWJzLFxuICBSZW5kZXJlcnMsXG59IGZyb20gJ2ppYnMnO1xuXG5pbXBvcnQgeyBGcmFnbWVudE5vZGUgfSAgZnJvbSAnLi9mcmFnbWVudC1ub2RlLmpzJztcbmltcG9ydCB7IFRleHROb2RlIH0gICAgICBmcm9tICcuL3RleHQtbm9kZS5qcyc7XG5pbXBvcnQgeyBOYXRpdmVOb2RlIH0gICAgZnJvbSAnLi9uYXRpdmUtbm9kZS5qcyc7XG5pbXBvcnQgeyBQb3J0YWxOb2RlIH0gICAgZnJvbSAnLi9wb3J0YWwtbm9kZS5qcyc7XG5pbXBvcnQgeyBDb21wb25lbnROb2RlIH0gZnJvbSAnLi9jb21wb25lbnQtbm9kZS5qcyc7XG5cbmNvbnN0IHsgUmVuZGVyZXIgfSA9IFJlbmRlcmVycztcblxuY29uc3Qge1xuICBKSUJfUFJPWFksXG59ID0gSmlicztcblxuZXhwb3J0IGNsYXNzIERPTVJlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xuICBzdGF0aWMgRnJhZ21lbnROb2RlID0gRnJhZ21lbnROb2RlO1xuXG4gIHN0YXRpYyBUZXh0Tm9kZSA9IFRleHROb2RlO1xuXG4gIHN0YXRpYyBOYXRpdmVOb2RlID0gTmF0aXZlTm9kZTtcblxuICBzdGF0aWMgUG9ydGFsTm9kZSA9IFBvcnRhbE5vZGU7XG5cbiAgc3RhdGljIENvbXBvbmVudE5vZGUgPSBDb21wb25lbnROb2RlO1xuXG4gIGNvbnN0cnVjdG9yKHJvb3RFbGVtZW50KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICdyb290RWxlbWVudCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICByb290RWxlbWVudCxcbiAgICAgIH0sXG4gICAgICAncm9vdE5vZGUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgaXNQb3J0YWxOb2RlKHR5cGUpIHtcbiAgICByZXR1cm4gKC9bXmEtekEtWjAtOTpdLykudGVzdCh0eXBlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdE5vZGVGcm9tSmliKGppYiwgcGFyZW50LCBjb250ZXh0KSB7XG4gICAgaWYgKGppYiA9PT0gSklCX1BST1hZKVxuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yLkZyYWdtZW50Tm9kZSh0aGlzLCBwYXJlbnQsIGNvbnRleHQpO1xuXG4gICAgbGV0IHsgVHlwZSB9ID0gamliO1xuICAgIGlmICh0eXBlb2YgVHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yLkNvbXBvbmVudE5vZGUodGhpcywgcGFyZW50LCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHRoaXMuaXNQb3J0YWxOb2RlKFR5cGUpKVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IuUG9ydGFsTm9kZSh0aGlzLCBwYXJlbnQsIGNvbnRleHQpO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IuTmF0aXZlTm9kZSh0aGlzLCBwYXJlbnQsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAoVHlwZSA9PSBudWxsIHx8IFR5cGUgPT09IEpJQl9QUk9YWSkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yLkZyYWdtZW50Tm9kZSh0aGlzLCBwYXJlbnQsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWluZyB8fCByZW5kZXJGcmFtZSA8IHRoaXMucmVuZGVyRnJhbWUpXG4gICAgICByZXR1cm47XG5cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZUVsZW1lbnRDaGlsZHJlbihcbiAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgIHRoaXMucm9vdEVsZW1lbnQsXG4gICAgICByZW5kZXJSZXN1bHQsXG4gICAgICByZW5kZXJGcmFtZSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyKGppYikge1xuICAgIHRoaXMucmVuZGVyRnJhbWUrKztcbiAgICBsZXQgcmVuZGVyRnJhbWUgPSB0aGlzLnJlbmRlckZyYW1lO1xuXG4gICAgbGV0IHJvb3ROb2RlID0gdGhpcy5yb290Tm9kZTtcbiAgICBpZiAoIXJvb3ROb2RlKVxuICAgICAgcm9vdE5vZGUgPSB0aGlzLnJvb3ROb2RlID0gdGhpcy5jb25zdHJ1Y3ROb2RlRnJvbUppYihKSUJfUFJPWFksIHRoaXMsIHRoaXMuY29udGV4dCk7XG5cbiAgICBsZXQgcmVuZGVyUmVzdWx0ID0gYXdhaXQgcm9vdE5vZGUucmVuZGVyKGppYiwgeyBpbmRleDogMCB9KTtcbiAgICBhd2FpdCB0aGlzLnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihcbiAgICAgIHRoaXMsXG4gICAgICByZW5kZXJSZXN1bHQsXG4gICAgICByZW5kZXJGcmFtZSxcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlbmRlclJlc3VsdDtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgSmlicyxcbiAgUmVuZGVyZXJzLFxuICBVdGlscyxcbiAgZGVhZGJlZWYsXG59IGZyb20gJ2ppYnMnO1xuXG5jb25zdCB7XG4gIGlzSmliaXNoLFxuICBjb25zdHJ1Y3RKaWIsXG4gIEpJQl9QUk9YWSxcbn0gPSBKaWJzO1xuXG5jb25zdCB7XG4gIFJvb3ROb2RlLFxufSA9IFJlbmRlcmVycztcblxuY29uc3QgVEVYVF9UWVBFICAgICA9IFN5bWJvbC5mb3IoJ0BqaWIvdGV4dE5vZGUnKTtcbmNvbnN0IEZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdAamliL2ZyYWdtZW50Tm9kZScpO1xuXG5leHBvcnQgY2xhc3MgRnJhZ21lbnROb2RlIGV4dGVuZHMgUm9vdE5vZGUge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAnX25vZGVDYWNoZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbmV3IE1hcCgpLFxuICAgICAgfSxcbiAgICAgICdfcmVuZGVyQ2FjaGUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95aW5nKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdGhpcy5kZXN0cm95aW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9ub2RlQ2FjaGUpIHtcbiAgICAgIGxldCBkZXN0cm95UHJvbWlzZXMgPSBbXTtcbiAgICAgIGxldCBub2RlQ2FjaGUgICAgICAgPSB0aGlzLl9ub2RlQ2FjaGU7XG5cbiAgICAgIHRoaXMuX25vZGVDYWNoZSA9IG51bGw7XG5cbiAgICAgIGZvciAobGV0IGNhY2hlZFJlc3VsdCBvZiBub2RlQ2FjaGUudmFsdWVzKCkpIHtcbiAgICAgICAgaWYgKGNhY2hlZFJlc3VsdCAmJiBjYWNoZWRSZXN1bHQubm9kZSAmJiBjYWNoZWRSZXN1bHQubm9kZS5kZXN0cm95KVxuICAgICAgICAgIGRlc3Ryb3lQcm9taXNlcy5wdXNoKGNhY2hlZFJlc3VsdC5ub2RlLmRlc3Ryb3koKSk7XG4gICAgICB9XG5cbiAgICAgIG5vZGVDYWNoZS5jbGVhcigpO1xuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChkZXN0cm95UHJvbWlzZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICBhc3luYyBzeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIobm9kZSwgcmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSkge1xuICAgIGlmICghdGhpcy5wYXJlbnQgfHwgdGhpcy5yZW5kZXJQcm9taXNlIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgIHJldHVybjtcblxuICAgIGlmICghdGhpcy5fbm9kZUNhY2hlKVxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucGFyZW50LnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKTtcblxuICAgIGxldCByZW5kZXJSZXN1bHRzID0gW107XG4gICAgZm9yIChsZXQgWyBjYWNoZUtleSwgY2FjaGVkUmVzdWx0IF0gb2YgdGhpcy5fbm9kZUNhY2hlKSB7XG4gICAgICBpZiAoY2FjaGVkUmVzdWx0Lm5vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgdGhpcy5fbm9kZUNhY2hlLnNldChjYWNoZUtleSwgeyAuLi5jYWNoZWRSZXN1bHQsIHJlbmRlclJlc3VsdCB9KTtcbiAgICAgICAgcmVuZGVyUmVzdWx0cy5wdXNoKHJlbmRlclJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW5kZXJSZXN1bHRzLnB1c2goY2FjaGVkUmVzdWx0LnJlbmRlclJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucGFyZW50LnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHRzLCByZW5kZXJGcmFtZSk7XG4gIH1cblxuICBhc3luYyBfcmVuZGVyKF9jaGlsZHJlbiwgcmVuZGVyQ29udGV4dCkge1xuICAgIGxldCBpbmRleE1hcCAgICA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY2hpbGRyZW4gICAgPSBfY2hpbGRyZW47XG4gICAgbGV0IHJlbmRlckZyYW1lID0gdGhpcy5yZW5kZXJGcmFtZTtcblxuICAgIGlmIChVdGlscy5pbnN0YW5jZU9mKGNoaWxkcmVuLCAncHJvbWlzZScpKVxuICAgICAgY2hpbGRyZW4gPSBhd2FpdCBjaGlsZHJlbjtcblxuICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcgfHwgcmVuZGVyRnJhbWUgPCB0aGlzLnJlbmRlckZyYW1lKVxuICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlckNhY2hlO1xuXG4gICAgaWYgKCF0aGlzLmlzSXRlcmFibGVDaGlsZChjaGlsZHJlbikgJiYgKGlzSmliaXNoKGNoaWxkcmVuKSB8fCB0aGlzLmlzVmFsaWRDaGlsZChjaGlsZHJlbikpKVxuICAgICAgY2hpbGRyZW4gPSBbIGNoaWxkcmVuIF07XG5cbiAgICBjb25zdCBnZXRJbmRleEZvclR5cGUgPSAoVHlwZSkgPT4ge1xuICAgICAgbGV0IGluZGV4ID0gKGluZGV4TWFwLmdldChUeXBlKSB8fCAwKSArIDE7XG4gICAgICBpbmRleE1hcC5zZXQoVHlwZSwgaW5kZXgpO1xuXG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIGxldCBsb29wU3RvcHBlZCA9IGZhbHNlO1xuICAgIGxldCBwcm9taXNlcyA9IFV0aWxzLml0ZXJhdGUoY2hpbGRyZW4sICh7IHZhbHVlOiBfY2hpbGQsIGtleSwgaW5kZXgsIFNUT1AgfSkgPT4ge1xuICAgICAgaWYgKGxvb3BTdG9wcGVkIHx8IHRoaXMuZGVzdHJveWluZyB8fCByZW5kZXJGcmFtZSA8IHRoaXMucmVuZGVyRnJhbWUpXG4gICAgICAgIHJldHVybiBTVE9QO1xuXG4gICAgICByZXR1cm4gKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGNoaWxkID0gKFV0aWxzLmluc3RhbmNlT2YoX2NoaWxkLCAncHJvbWlzZScpKSA/IGF3YWl0IF9jaGlsZCA6IF9jaGlsZDtcbiAgICAgICAgbGV0IGNyZWF0ZWQ7XG4gICAgICAgIGxldCBjYWNoZUtleTtcbiAgICAgICAgbGV0IG5vZGU7XG4gICAgICAgIGxldCByZW5kZXJSZXN1bHQ7XG5cbiAgICAgICAgaWYgKGlzSmliaXNoKGNoaWxkKSkge1xuICAgICAgICAgIGxldCBqaWIgPSBjb25zdHJ1Y3RKaWIoY2hpbGQpO1xuICAgICAgICAgIGlmIChVdGlscy5pbnN0YW5jZU9mKGppYiwgJ3Byb21pc2UnKSlcbiAgICAgICAgICAgIGppYiA9IGF3YWl0IGppYjtcblxuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcgfHwgcmVuZGVyRnJhbWUgPCB0aGlzLnJlbmRlckZyYW1lKSB7XG4gICAgICAgICAgICBsb29wU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGV0IHsgVHlwZSwgcHJvcHMgfSA9IGppYjtcbiAgICAgICAgICBpZiAoIXByb3BzKVxuICAgICAgICAgICAgcHJvcHMgPSB7fTtcblxuICAgICAgICAgIGxldCBsb2NhbEtleTtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IGtleSkgLy8gSW5kZXggaXMgYW4gaW50ZWdlciwgYW5kIGtleSBpcyBhIHN0cmluZywgbWVhbmluZyB0aGlzIGlzIGFuIG9iamVjdFxuICAgICAgICAgICAgbG9jYWxLZXkgPSBrZXk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbG9jYWxLZXkgPSAocHJvcHMua2V5ID09IG51bGwgfHwgT2JqZWN0LmlzKHByb3BzLmtleSwgTmFOKSB8fCBPYmplY3QuaXMocHJvcHMua2V5LCBJbmZpbml0eSkpID8gYEBqaWIvaW50ZXJuYWxfa2V5XyR7Z2V0SW5kZXhGb3JUeXBlKFR5cGUpfWAgOiBwcm9wcy5rZXk7XG5cbiAgICAgICAgICBjYWNoZUtleSA9IGRlYWRiZWVmKFR5cGUsIGxvY2FsS2V5KTtcblxuICAgICAgICAgIGxldCBjYWNoZWRSZXN1bHQgPSB0aGlzLl9ub2RlQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICAgICAgICBpZiAoIWNhY2hlZFJlc3VsdCkge1xuICAgICAgICAgICAgY3JlYXRlZCA9IHRydWU7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5yZW5kZXJlci5jb25zdHJ1Y3ROb2RlRnJvbUppYihqaWIsIHRoaXMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG5vZGUgPSBjYWNoZWRSZXN1bHQubm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoVHlwZSA9PT0gSklCX1BST1hZKVxuICAgICAgICAgICAgcmVuZGVyUmVzdWx0ID0gYXdhaXQgbm9kZS5yZW5kZXIoamliLmNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZW5kZXJSZXN1bHQgPSBhd2FpdCBub2RlLnJlbmRlcihqaWIsIHJlbmRlckNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJdGVyYWJsZUNoaWxkKGNoaWxkKSkge1xuICAgICAgICAgIGlmIChVdGlscy5pc0VtcHR5KGNoaWxkKSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgIGNhY2hlS2V5ID0gZGVhZGJlZWYoYEBqaWIvaW50ZXJuYWxfZnJhZ21lbnRfJHtnZXRJbmRleEZvclR5cGUoRlJBR01FTlRfVFlQRSl9YCk7XG5cbiAgICAgICAgICBsZXQgY2FjaGVkUmVzdWx0ID0gdGhpcy5fbm9kZUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICAgICAgaWYgKCFjYWNoZWRSZXN1bHQpIHtcbiAgICAgICAgICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMucmVuZGVyZXIuY29uc3RydWN0Tm9kZUZyb21KaWIoSklCX1BST1hZLCB0aGlzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBub2RlID0gY2FjaGVkUmVzdWx0Lm5vZGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVuZGVyUmVzdWx0ID0gYXdhaXQgbm9kZS5yZW5kZXIoY2hpbGQsIHJlbmRlckNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNWYWxpZENoaWxkKGNoaWxkKSkge1xuICAgICAgICAgIGNoaWxkID0gKHR5cGVvZiBjaGlsZC52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSA/IGNoaWxkLnZhbHVlT2YoKSA6IGNoaWxkO1xuICAgICAgICAgIGNhY2hlS2V5ID0gZGVhZGJlZWYoYEBqaWIvaW50ZXJuYWxfdGV4dF8ke2dldEluZGV4Rm9yVHlwZShURVhUX1RZUEUpfWApO1xuXG4gICAgICAgICAgbGV0IGNhY2hlZFJlc3VsdCA9IHRoaXMuX25vZGVDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgICAgICAgIGlmICghY2FjaGVkUmVzdWx0KSB7XG4gICAgICAgICAgICBjcmVhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgdGhpcy5yZW5kZXJlci5jb25zdHJ1Y3Rvci5UZXh0Tm9kZSh0aGlzLnJlbmRlcmVyLCB0aGlzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBub2RlID0gY2FjaGVkUmVzdWx0Lm5vZGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVuZGVyUmVzdWx0ID0gYXdhaXQgbm9kZS5yZW5kZXIoY2hpbGQsIHJlbmRlckNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgbm9kZSwgY2FjaGVLZXksIHJlbmRlclJlc3VsdCwgY3JlYXRlZCB9O1xuICAgICAgfSkoKTtcbiAgICB9KTtcblxuICAgIGxldCByZW5kZXJSZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIHJlbmRlclJlc3VsdHMgPSByZW5kZXJSZXN1bHRzLmZpbHRlcigocmVzdWx0KSA9PiAhIXJlc3VsdCk7XG5cbiAgICBsZXQgZGVzdHJveVByb21pc2VzID0gW107XG4gICAgaWYgKHRoaXMuZGVzdHJveWluZyB8fCByZW5kZXJGcmFtZSA8IHRoaXMucmVuZGVyRnJhbWUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHJlbmRlclJlc3VsdHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gcmVuZGVyUmVzdWx0c1tpXTtcbiAgICAgICAgbGV0IHsgbm9kZSwgY3JlYXRlZCB9ID0gcmVzdWx0O1xuXG4gICAgICAgIGlmIChjcmVhdGVkICYmIG5vZGUpIHtcbiAgICAgICAgICAvLyBEZXN0cm95IG5vZGVzIHNpbmNlIHRoaXMgcmVuZGVyIHdhcyByZWplY3RlZC5cbiAgICAgICAgICAvLyBCdXQgb25seSBub2RlcyB0aGF0IHdlcmUganVzdCBjcmVhdGVkLi4uXG4gICAgICAgICAgLy8gYXMgZXhpc3Rpbmcgbm9kZXMgbWlnaHQgc3RpbGwgbmVlZCB0byBleGlzdC5cbiAgICAgICAgICBkZXN0cm95UHJvbWlzZXMucHVzaChub2RlLmRlc3Ryb3koKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRlc3Ryb3lQcm9taXNlcy5sZW5ndGggPiAwKVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChkZXN0cm95UHJvbWlzZXMpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fcmVuZGVyQ2FjaGU7XG4gICAgfVxuXG4gICAgbGV0IG5vZGVNYXAgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gcmVuZGVyUmVzdWx0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICBsZXQgcmVuZGVyUmVzdWx0ID0gcmVuZGVyUmVzdWx0c1tpXTtcbiAgICAgIG5vZGVNYXAuc2V0KHJlbmRlclJlc3VsdC5jYWNoZUtleSwgcmVuZGVyUmVzdWx0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbm9kZUNhY2hlKSB7XG4gICAgICAvLyBDbGVhbnVwXG4gICAgICBmb3IgKGxldCBbIGNhY2hlS2V5LCByZW5kZXJSZXN1bHQgXSBvZiB0aGlzLl9ub2RlQ2FjaGUpIHtcbiAgICAgICAgbGV0IGhhc0NoaWxkID0gbm9kZU1hcC5oYXMoY2FjaGVLZXkpO1xuICAgICAgICBpZiAoIWhhc0NoaWxkKSB7XG4gICAgICAgICAgLy8gVGhpcyBub2RlIHdhcyBkZXN0cm95ZWRcbiAgICAgICAgICBkZXN0cm95UHJvbWlzZXMucHVzaChyZW5kZXJSZXN1bHQubm9kZS5kZXN0cm95KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX25vZGVDYWNoZSA9IG5vZGVNYXA7XG5cbiAgICAgIGlmIChkZXN0cm95UHJvbWlzZXMubGVuZ3RoID4gMClcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoZGVzdHJveVByb21pc2VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbm9kZUNhY2hlID0gbm9kZU1hcDtcbiAgICB9XG5cbiAgICBsZXQgcmVuZGVyUmVzdWx0ID0gdGhpcy5fcmVuZGVyQ2FjaGUgPSByZW5kZXJSZXN1bHRzLm1hcCgocmVuZGVyUmVzdWx0KSA9PiByZW5kZXJSZXN1bHQucmVuZGVyUmVzdWx0KS5maWx0ZXIoKHJlc3VsdCkgPT4gKHJlc3VsdCAhPSBudWxsICYmICFPYmplY3QuaXMocmVzdWx0LCBOYU4pICYmICFPYmplY3QuaXMocmVzdWx0LCBJbmZpbml0eSkpKTtcbiAgICByZXR1cm4gcmVuZGVyUmVzdWx0O1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBKaWJzLFxuICBSZW5kZXJlcnMsXG4gIFV0aWxzLFxufSBmcm9tICdqaWJzJztcblxuY29uc3Qge1xuICBKSUJfUFJPWFksXG59ID0gSmlicztcblxuY29uc3Qge1xuICBSb290Tm9kZSxcbiAgTmF0aXZlRWxlbWVudCxcbiAgVGV4dEVsZW1lbnQsXG59ID0gUmVuZGVyZXJzO1xuXG5leHBvcnQgY2xhc3MgTmF0aXZlTm9kZSBleHRlbmRzIFJvb3ROb2RlIHtcbiAgc3RhdGljIEVMRU1FTlRfQ0xBU1MgPSBOYXRpdmVFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBzdXBlciguLi5hcmdzKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICdyb290Tm9kZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbnVsbCxcbiAgICAgIH0sXG4gICAgICAnX2N1cnJlbnRKaWInOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ19jYWNoZWRSZW5kZXJSZXN1bHQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIHsgaWQ6IHRoaXMuaWQgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIobm9kZSwgcmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSkge1xuICAgIGlmICghdGhpcy5yZW5kZXJlciB8fCB0aGlzLmRlc3Ryb3lpbmcgfHwgcmVuZGVyRnJhbWUgPCB0aGlzLnJlbmRlckZyYW1lKVxuICAgICAgcmV0dXJuO1xuXG4gICAgYXdhaXQgdGhpcy5yZW5kZXJlci51cGRhdGVFbGVtZW50Q2hpbGRyZW4oXG4gICAgICB0aGlzLmNvbnRleHQsXG4gICAgICB0aGlzLl9jYWNoZWRSZW5kZXJSZXN1bHQsXG4gICAgICByZW5kZXJSZXN1bHQsXG4gICAgICByZW5kZXJGcmFtZSxcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95aW5nKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdGhpcy5kZXN0cm95aW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLnJvb3ROb2RlKSB7XG4gICAgICBhd2FpdCB0aGlzLnJvb3ROb2RlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMucm9vdE5vZGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICBhc3luYyBfcmVuZGVyKGppYiwgcmVuZGVyQ29udGV4dCkge1xuICAgIGxldCB7XG4gICAgICBUeXBlLFxuICAgICAgcHJvcHMsXG4gICAgICBjaGlsZHJlbixcbiAgICB9ID0gdGhpcy5fY3VycmVudEppYiA9IChqaWIgfHwge30pO1xuXG4gICAgaWYgKCFUeXBlKVxuICAgICAgcmV0dXJuO1xuXG4gICAgbGV0IHJlbmRlckZyYW1lID0gdGhpcy5yZW5kZXJGcmFtZTtcblxuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAnaW5uZXJIVE1MJykpIHtcbiAgICAgIGxldCByb290Tm9kZSA9IHRoaXMucm9vdE5vZGU7XG4gICAgICBpZiAoIXJvb3ROb2RlKVxuICAgICAgICByb290Tm9kZSA9IHRoaXMucm9vdE5vZGUgPSB0aGlzLnJlbmRlcmVyLmNvbnN0cnVjdE5vZGVGcm9tSmliKEpJQl9QUk9YWSwgdGhpcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgbGV0IG5ld0NvbnRleHQgPSBPYmplY3QuY3JlYXRlKHJlbmRlckNvbnRleHQpO1xuICAgICAgbmV3Q29udGV4dC5pbmRleCA9IDA7XG5cbiAgICAgIHJvb3ROb2RlLnJlbmRlcihjaGlsZHJlbiwgbmV3Q29udGV4dCkudGhlbigoZnJhZ21lbnRSZXN1bHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0VsZW1lbnRzV2l0aFJlbmRlcmVyKHRoaXMsIGZyYWdtZW50UmVzdWx0LCByZW5kZXJGcmFtZSk7XG4gICAgICB9KS5jYXRjaCgoX2Vycm9yKSA9PiB7XG4gICAgICAgIGxldCBlcnJvciA9IF9lcnJvcjtcbiAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpXG4gICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZXJyb3IpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcih0aGlzLCBbIG5ldyBUZXh0RWxlbWVudChudWxsLCBlcnJvciwgcHJvcHMpIF0sIHJlbmRlckZyYW1lKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5yb290Tm9kZSkge1xuICAgICAgICBhd2FpdCB0aGlzLnJvb3ROb2RlLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yb290Tm9kZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlbmRlclJlc3VsdCA9IHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yLkVMRU1FTlRfQ0xBU1MoXG4gICAgICB0aGlzLmlkLFxuICAgICAgVHlwZSxcbiAgICAgIHByb3BzLFxuICAgICk7XG5cbiAgICByZXR1cm4gcmVuZGVyUmVzdWx0O1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBSZW5kZXJlcnMsXG59IGZyb20gJ2ppYnMnO1xuXG5pbXBvcnQgeyBOYXRpdmVOb2RlIH0gZnJvbSAnLi9uYXRpdmUtbm9kZS5qcyc7XG5cbmNvbnN0IHtcbiAgUG9ydGFsRWxlbWVudCxcbn0gPSBSZW5kZXJlcnM7XG5cbmV4cG9ydCBjbGFzcyBQb3J0YWxOb2RlIGV4dGVuZHMgTmF0aXZlTm9kZSB7XG4gIHN0YXRpYyBFTEVNRU5UX0NMQVNTID0gUG9ydGFsRWxlbWVudDtcbn1cbiIsImltcG9ydCB7XG4gIFJlbmRlcmVycyxcbn0gZnJvbSAnamlicyc7XG5cbmNvbnN0IHtcbiAgUm9vdE5vZGUsXG4gIFRleHRFbGVtZW50LFxufSA9IFJlbmRlcmVycztcblxuZXhwb3J0IGNsYXNzIFRleHROb2RlIGV4dGVuZHMgUm9vdE5vZGUge1xuICBhc3luYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLmRlc3Ryb3lpbmcgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIGFzeW5jIF9yZW5kZXIodGV4dCkge1xuICAgIHJldHVybiBuZXcgVGV4dEVsZW1lbnQodGhpcy5pZCwgdGV4dCk7XG4gIH1cbn1cbiIsIi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9kZWFkYmVlZi9saWIvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2RlYWRiZWVmL2xpYi9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gQ29weXJpZ2h0IDIwMjIgV3lhdHQgR3JlZW53YXlcblxuXG5cbmNvbnN0IHRoaXNHbG9iYWwgPSAoKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IF9fd2VicGFja19yZXF1aXJlX18uZykgfHwgdGhpcztcbmNvbnN0IERFQURCRUVGX1JFRl9NQVBfS0VZID0gU3ltYm9sLmZvcignQEBkZWFkYmVlZlJlZk1hcCcpO1xuY29uc3QgVU5JUVVFX0lEX1NZTUJPTCA9IFN5bWJvbC5mb3IoJ0BAZGVhZGJlZWZVbmlxdWVJRCcpO1xuY29uc3QgcmVmTWFwID0gKHRoaXNHbG9iYWxbREVBREJFRUZfUkVGX01BUF9LRVldKSA/IHRoaXNHbG9iYWxbREVBREJFRUZfUkVGX01BUF9LRVldIDogbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGlkSGVscGVycyA9IFtdO1xuXG5pZiAoIXRoaXNHbG9iYWxbREVBREJFRUZfUkVGX01BUF9LRVldKVxuICB0aGlzR2xvYmFsW0RFQURCRUVGX1JFRl9NQVBfS0VZXSA9IHJlZk1hcDtcblxubGV0IHV1aWRDb3VudGVyID0gMG47XG5cbmZ1bmN0aW9uIGdldEhlbHBlckZvclZhbHVlKHZhbHVlKSB7XG4gIGZvciAobGV0IGkgPSAwLCBpbCA9IGlkSGVscGVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgbGV0IHsgaGVscGVyLCBnZW5lcmF0b3IgfSA9IGlkSGVscGVyc1tpXTtcbiAgICBpZiAoaGVscGVyKHZhbHVlKSlcbiAgICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gYW55dGhpbmdUb0lEKF9hcmcsIF9hbHJlYWR5VmlzaXRlZCkge1xuICBsZXQgYXJnID0gX2FyZztcbiAgaWYgKGFyZyBpbnN0YW5jZW9mIE51bWJlciB8fCBhcmcgaW5zdGFuY2VvZiBTdHJpbmcgfHwgYXJnIGluc3RhbmNlb2YgQm9vbGVhbilcbiAgICBhcmcgPSBhcmcudmFsdWVPZigpO1xuXG4gIGxldCB0eXBlT2YgPSB0eXBlb2YgYXJnO1xuXG4gIGlmICh0eXBlT2YgPT09ICdudW1iZXInICYmIGFyZyA9PT0gMCkge1xuICAgIGlmIChPYmplY3QuaXMoYXJnLCAtMCkpXG4gICAgICByZXR1cm4gJ251bWJlcjotMCc7XG5cbiAgICByZXR1cm4gJ251bWJlcjorMCc7XG4gIH1cblxuICBpZiAodHlwZU9mID09PSAnc3ltYm9sJylcbiAgICByZXR1cm4gYHN5bWJvbDoke2FyZy50b1N0cmluZygpfWA7XG5cbiAgaWYgKGFyZyA9PSBudWxsIHx8IHR5cGVPZiA9PT0gJ251bWJlcicgfHwgdHlwZU9mID09PSAnYm9vbGVhbicgfHwgdHlwZU9mID09PSAnc3RyaW5nJyB8fCB0eXBlT2YgPT09ICdiaWdpbnQnKSB7XG4gICAgaWYgKHR5cGVPZiA9PT0gJ251bWJlcicpXG4gICAgICByZXR1cm4gKGFyZyA8IDApID8gYG51bWJlcjoke2FyZ31gIDogYG51bWJlcjorJHthcmd9YDtcblxuICAgIGlmICh0eXBlT2YgPT09ICdiaWdpbnQnICYmIGFyZyA9PT0gMG4pXG4gICAgICByZXR1cm4gJ2JpZ2ludDorMCc7XG5cbiAgICByZXR1cm4gYCR7dHlwZU9mfToke2FyZ31gO1xuICB9XG5cbiAgbGV0IGlkSGVscGVyID0gKGlkSGVscGVycy5sZW5ndGggPiAwICYmIGdldEhlbHBlckZvclZhbHVlKGFyZykpO1xuICBpZiAoaWRIZWxwZXIpXG4gICAgcmV0dXJuIGFueXRoaW5nVG9JRChpZEhlbHBlcihhcmcpKTtcblxuICBpZiAoVU5JUVVFX0lEX1NZTUJPTCBpbiBhcmcgJiYgdHlwZW9mIGFyZ1tVTklRVUVfSURfU1lNQk9MXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzaW9uXG4gICAgaWYgKCFfYWxyZWFkeVZpc2l0ZWQgfHwgIV9hbHJlYWR5VmlzaXRlZC5oYXMoYXJnKSkge1xuICAgICAgbGV0IGFscmVhZHlWaXNpdGVkID0gX2FscmVhZHlWaXNpdGVkIHx8IG5ldyBTZXQoKTtcbiAgICAgIGFscmVhZHlWaXNpdGVkLmFkZChhcmcpO1xuICAgICAgcmV0dXJuIGFueXRoaW5nVG9JRChhcmdbVU5JUVVFX0lEX1NZTUJPTF0oKSwgYWxyZWFkeVZpc2l0ZWQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcmVmTWFwLmhhcyhhcmcpKSB7XG4gICAgbGV0IGtleSA9IGAke3R5cGVvZiBhcmd9OiR7Kyt1dWlkQ291bnRlcn1gO1xuICAgIHJlZk1hcC5zZXQoYXJnLCBrZXkpO1xuICAgIHJldHVybiBrZXk7XG4gIH1cblxuICByZXR1cm4gcmVmTWFwLmdldChhcmcpO1xufVxuXG5mdW5jdGlvbiBkZWFkYmVlZigpIHtcbiAgbGV0IHBhcnRzID0gWyBhcmd1bWVudHMubGVuZ3RoIF07XG4gIGZvciAobGV0IGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgIHBhcnRzLnB1c2goYW55dGhpbmdUb0lEKGFyZ3VtZW50c1tpXSkpO1xuXG4gIHJldHVybiBwYXJ0cy5qb2luKCc6Jyk7XG59XG5cbmZ1bmN0aW9uIGRlYWRiZWVmU29ydGVkKCkge1xuICBsZXQgcGFydHMgPSBbIGFyZ3VtZW50cy5sZW5ndGggXTtcbiAgZm9yIChsZXQgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspXG4gICAgcGFydHMucHVzaChhbnl0aGluZ1RvSUQoYXJndW1lbnRzW2ldKSk7XG5cbiAgcmV0dXJuIHBhcnRzLnNvcnQoKS5qb2luKCc6Jyk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSURGb3IoaGVscGVyLCBnZW5lcmF0b3IpIHtcbiAgaWRIZWxwZXJzLnB1c2goeyBoZWxwZXIsIGdlbmVyYXRvciB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSURHZW5lcmF0b3IoaGVscGVyKSB7XG4gIGxldCBpbmRleCA9IGlkSGVscGVycy5maW5kSW5kZXgoKGl0ZW0pID0+IChpdGVtLmhlbHBlciA9PT0gaGVscGVyKSk7XG4gIGlmIChpbmRleCA8IDApXG4gICAgcmV0dXJuO1xuXG4gIGlkSGVscGVycy5zcGxpY2UoaW5kZXgsIDEpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhkZWFkYmVlZiwge1xuICAnaWRTeW0nOiB7XG4gICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiAgICAgICAgVU5JUVVFX0lEX1NZTUJPTCxcbiAgfSxcbiAgJ3NvcnRlZCc6IHtcbiAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6ICAgICAgICBkZWFkYmVlZlNvcnRlZCxcbiAgfSxcbiAgJ2dlbmVyYXRlSURGb3InOiB7XG4gICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiAgICAgICAgZ2VuZXJhdGVJREZvcixcbiAgfSxcbiAgJ3JlbW92ZUlER2VuZXJhdG9yJzoge1xuICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogICAgICAgIHJlbW92ZUlER2VuZXJhdG9yLFxuICB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVhZGJlZWY7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9saWIvY29tcG9uZW50LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9jb21wb25lbnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNBUFRVUkVfUkVGRVJFTkNFX01FVEhPRFNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ0FQVFVSRV9SRUZFUkVOQ0VfTUVUSE9EUyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29tcG9uZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbXBvbmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRkxVU0hfVVBEQVRFX01FVEhPRFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGTFVTSF9VUERBVEVfTUVUSE9EKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJJTklUX01FVEhPRFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBJTklUX01FVEhPRCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTEFTVF9SRU5ERVJfVElNRVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBMQVNUX1JFTkRFUl9USU1FKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQRU5ESU5HX1NUQVRFX1VQREFURVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQRU5ESU5HX1NUQVRFX1VQREFURSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUFJFVklPVVNfU1RBVEVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUFJFVklPVVNfU1RBVEUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlFVRVVFX1VQREFURV9NRVRIT0RcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUVVFVUVfVVBEQVRFX01FVEhPRCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU0tJUF9TVEFURV9VUERBVEVTXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNLSVBfU1RBVEVfVVBEQVRFUyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVVBEQVRFX0VWRU5UXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFVQREFURV9FVkVOVClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9ldmVudHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZXZlbnRzLmpzICovIFwiLi9saWIvZXZlbnRzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy5qcyAqLyBcIi4vbGliL3V0aWxzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vamliLmpzICovIFwiLi9saWIvamliLmpzXCIpO1xuLyogZ2xvYmFsIEJ1ZmZlciAqL1xuXG5cblxuXG5cbmNvbnN0IFVQREFURV9FVkVOVCAgICAgICAgICAgICAgPSAnQGppYnMvY29tcG9uZW50L2V2ZW50L3VwZGF0ZSc7XG5jb25zdCBRVUVVRV9VUERBVEVfTUVUSE9EICAgICAgID0gU3ltYm9sLmZvcignQGppYnMvY29tcG9uZW50L3F1ZXVlVXBkYXRlJyk7XG5jb25zdCBGTFVTSF9VUERBVEVfTUVUSE9EICAgICAgID0gU3ltYm9sLmZvcignQGppYnMvY29tcG9uZW50L2ZsdXNoVXBkYXRlJyk7XG5jb25zdCBJTklUX01FVEhPRCAgICAgICAgICAgICAgID0gU3ltYm9sLmZvcignQGppYnMvY29tcG9uZW50L19faW5pdCcpO1xuY29uc3QgU0tJUF9TVEFURV9VUERBVEVTICAgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9za2lwU3RhdGVVcGRhdGVzJyk7XG5jb25zdCBQRU5ESU5HX1NUQVRFX1VQREFURSAgICAgID0gU3ltYm9sLmZvcignQGppYnMvY29tcG9uZW50L3BlbmRpbmdTdGF0ZVVwZGF0ZScpO1xuY29uc3QgTEFTVF9SRU5ERVJfVElNRSAgICAgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9sYXN0UmVuZGVyVGltZScpO1xuY29uc3QgUFJFVklPVVNfU1RBVEUgICAgICAgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9wcmV2aW91c1N0YXRlJyk7XG5jb25zdCBDQVBUVVJFX1JFRkVSRU5DRV9NRVRIT0RTID0gU3ltYm9sLmZvcignQGppYnMvY29tcG9uZW50L3ByZXZpb3VzU3RhdGUnKTtcblxuY29uc3QgZWxlbWVudERhdGFDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbmZ1bmN0aW9uIGlzVmFsaWRTdGF0ZU9iamVjdCh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKE9iamVjdC5pcyh2YWx1ZSwgTmFOKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKE9iamVjdC5pcyh2YWx1ZSwgSW5maW5pdHkpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBsZXQgdHlwZU9mID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZU9mID09PSAnc3RyaW5nJyB8fCB0eXBlT2YgPT09ICdudW1iZXInIHx8IHR5cGVPZiA9PT0gJ2Jvb2xlYW4nKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBCdWZmZXIuaXNCdWZmZXIodmFsdWUpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgX2V2ZW50c19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkV2ZW50RW1pdHRlciB7XG4gIHN0YXRpYyBVUERBVEVfRVZFTlQgPSBVUERBVEVfRVZFTlQ7XG5cbiAgW1FVRVVFX1VQREFURV9NRVRIT0RdKCkge1xuICAgIGlmICh0aGlzW1BFTkRJTkdfU1RBVEVfVVBEQVRFXSlcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXNbUEVORElOR19TVEFURV9VUERBVEVdID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgdGhpc1tQRU5ESU5HX1NUQVRFX1VQREFURV0udGhlbih0aGlzW0ZMVVNIX1VQREFURV9NRVRIT0RdLmJpbmQodGhpcykpO1xuICB9XG5cbiAgW0ZMVVNIX1VQREFURV9NRVRIT0RdKCkge1xuICAgIC8vIFdhcyB0aGUgc3RhdGUgdXBkYXRlIGNhbmNlbGxlZD9cbiAgICBpZiAoIXRoaXNbUEVORElOR19TVEFURV9VUERBVEVdKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdGhpcy5lbWl0KFVQREFURV9FVkVOVCk7XG5cbiAgICB0aGlzW1BFTkRJTkdfU1RBVEVfVVBEQVRFXSA9IG51bGw7XG4gIH1cblxuICBbSU5JVF9NRVRIT0RdKCkge1xuICAgIHRoaXNbU0tJUF9TVEFURV9VUERBVEVTXSA9IGZhbHNlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoX2ppYikge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyBCaW5kIGFsbCBjbGFzcyBtZXRob2RzIHRvIFwidGhpc1wiXG4gICAgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uYmluZE1ldGhvZHMuY2FsbCh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSk7XG5cbiAgICBsZXQgamliID0gX2ppYiB8fCB7fTtcblxuICAgIGNvbnN0IGNyZWF0ZU5ld1N0YXRlID0gKCkgPT4ge1xuICAgICAgbGV0IGxvY2FsU3RhdGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICByZXR1cm4gbmV3IFByb3h5KGxvY2FsU3RhdGUsIHtcbiAgICAgICAgZ2V0OiAodGFyZ2V0LCBwcm9wTmFtZSkgPT4ge1xuICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcE5hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6ICh0YXJnZXQsIHByb3BOYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcE5hbWVdO1xuICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgPT09IHZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICBpZiAoIXRoaXNbU0tJUF9TVEFURV9VUERBVEVTXSlcbiAgICAgICAgICAgIHRoaXNbUVVFVUVfVVBEQVRFX01FVEhPRF0oKTtcblxuICAgICAgICAgIHRhcmdldFtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB0aGlzLm9uU3RhdGVVcGRhdGVkKHByb3BOYW1lLCB2YWx1ZSwgY3VycmVudFZhbHVlKTtcblxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGxldCBwcm9wcyAgICAgICA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSwgamliLnByb3BzIHx8IHt9KTtcbiAgICBsZXQgX2xvY2FsU3RhdGUgPSBjcmVhdGVOZXdTdGF0ZSgpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgW1NLSVBfU1RBVEVfVVBEQVRFU106IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBbUEVORElOR19TVEFURV9VUERBVEVdOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgW0xBU1RfUkVOREVSX1RJTUVdOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLm5vdygpLFxuICAgICAgfSxcbiAgICAgIFtDQVBUVVJFX1JFRkVSRU5DRV9NRVRIT0RTXToge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICB7fSxcbiAgICAgIH0sXG4gICAgICAnaWQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgamliLmlkLFxuICAgICAgfSxcbiAgICAgICdwcm9wcyc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgcHJvcHMsXG4gICAgICB9LFxuICAgICAgJ2NoaWxkcmVuJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBqaWIuY2hpbGRyZW4gfHwgW10sXG4gICAgICB9LFxuICAgICAgJ2NvbnRleHQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIGppYi5jb250ZXh0IHx8IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICB9LFxuICAgICAgJ3N0YXRlJzoge1xuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBfbG9jYWxTdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiAgICAgICAgICAodmFsdWUpID0+IHtcbiAgICAgICAgICBpZiAoIWlzVmFsaWRTdGF0ZU9iamVjdCh2YWx1ZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciBcInRoaXMuc3RhdGVcIjogXCIke3ZhbHVlfVwiLiBQcm92aWRlZCBcInN0YXRlXCIgbXVzdCBiZSBhbiBpdGVyYWJsZSBvYmplY3QuYCk7XG5cbiAgICAgICAgICBPYmplY3QuYXNzaWduKF9sb2NhbFN0YXRlLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmVzb2x2ZUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5yZXNvbHZlQ2hpbGRyZW4uY2FsbCh0aGlzLCBjaGlsZHJlbik7XG4gIH1cblxuICBpc0ppYih2YWx1ZSkge1xuICAgIHJldHVybiAoMCxfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uaXNKaWJpc2gpKHZhbHVlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdEppYih2YWx1ZSkge1xuICAgIHJldHVybiAoMCxfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uY29uc3RydWN0SmliKSh2YWx1ZSk7XG4gIH1cblxuICBwdXNoUmVuZGVyKHJlbmRlclJlc3VsdCkge1xuICAgIHRoaXMuZW1pdChVUERBVEVfRVZFTlQsIHJlbmRlclJlc3VsdCk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgb25Qcm9wVXBkYXRlZChwcm9wTmFtZSwgbmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgb25TdGF0ZVVwZGF0ZWQocHJvcE5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICB9XG5cbiAgY2FwdHVyZVJlZmVyZW5jZShuYW1lLCBpbnRlcmNlcHRvckNhbGxiYWNrKSB7XG4gICAgbGV0IG1ldGhvZCA9IHRoaXNbQ0FQVFVSRV9SRUZFUkVOQ0VfTUVUSE9EU11bbmFtZV07XG4gICAgaWYgKG1ldGhvZClcbiAgICAgIHJldHVybiBtZXRob2Q7XG5cbiAgICBtZXRob2QgPSAoX3JlZiwgcHJldmlvdXNSZWYpID0+IHtcbiAgICAgIGxldCByZWYgPSBfcmVmO1xuXG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJlZiA9IGludGVyY2VwdG9yQ2FsbGJhY2suY2FsbCh0aGlzLCByZWYsIHByZXZpb3VzUmVmKTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6ICAgICAgICByZWYsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvckNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgdGhpc1tDQVBUVVJFX1JFRkVSRU5DRV9NRVRIT0RTXSA9IG1ldGhvZDtcblxuICAgIHJldHVybiBtZXRob2Q7XG4gIH1cblxuICBmb3JjZVVwZGF0ZSgpIHtcbiAgICB0aGlzW1FVRVVFX1VQREFURV9NRVRIT0RdKCk7XG4gIH1cblxuICBnZXRTdGF0ZShwcm9wZXJ0eVBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gc3RhdGU7XG5cbiAgICBpZiAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihwcm9wZXJ0eVBhdGgsICdvYmplY3QnKSkge1xuICAgICAgbGV0IGtleXMgICAgICAgID0gT2JqZWN0LmtleXMocHJvcGVydHlQYXRoKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0eVBhdGgpKTtcbiAgICAgIGxldCBmaW5hbFN0YXRlICA9IHt9O1xuXG4gICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgbGV0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGxldCBbIHZhbHVlLCBsYXN0UGFydCBdID0gX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uZmV0Y2hEZWVwUHJvcGVydHkoc3RhdGUsIGtleSwgcHJvcGVydHlQYXRoW2tleV0sIHRydWUpO1xuICAgICAgICBpZiAobGFzdFBhcnQgPT0gbnVsbClcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBmaW5hbFN0YXRlW2xhc3RQYXJ0XSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmluYWxTdGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmZldGNoRGVlcFByb3BlcnR5KHN0YXRlLCBwcm9wZXJ0eVBhdGgsIGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgc2V0U3RhdGUodmFsdWUpIHtcbiAgICBpZiAoIWlzVmFsaWRTdGF0ZU9iamVjdCh2YWx1ZSkpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciBcInRoaXMuc2V0U3RhdGVcIjogXCIke3ZhbHVlfVwiLiBQcm92aWRlZCBcInN0YXRlXCIgbXVzdCBiZSBhbiBpdGVyYWJsZSBvYmplY3QuYCk7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMuc3RhdGUsIHZhbHVlKTtcbiAgfVxuXG4gIHNldFN0YXRlUGFzc2l2ZSh2YWx1ZSkge1xuICAgIGlmICghaXNWYWxpZFN0YXRlT2JqZWN0KHZhbHVlKSlcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIFwidGhpcy5zZXRTdGF0ZVBhc3NpdmVcIjogXCIke3ZhbHVlfVwiLiBQcm92aWRlZCBcInN0YXRlXCIgbXVzdCBiZSBhbiBpdGVyYWJsZSBvYmplY3QuYCk7XG5cbiAgICB0cnkge1xuICAgICAgdGhpc1tTS0lQX1NUQVRFX1VQREFURVNdID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5zdGF0ZSwgdmFsdWUpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzW1NLSVBfU1RBVEVfVVBEQVRFU10gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRVcGRhdGUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGRlbGV0ZSB0aGlzLnN0YXRlO1xuICAgIGRlbGV0ZSB0aGlzLnByb3BzO1xuICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQ7XG4gICAgZGVsZXRlIHRoaXNbQ0FQVFVSRV9SRUZFUkVOQ0VfTUVUSE9EU107XG4gICAgdGhpcy5jbGVhckFsbERlYm91bmNlcygpO1xuICB9XG5cbiAgcmVuZGVyV2FpdGluZygpIHtcbiAgfVxuXG4gIHJlbmRlcihjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHVwZGF0ZWQoKSB7XG4gIH1cblxuICBjb21iaW5lV2l0aChzZXAsIC4uLmFyZ3MpIHtcbiAgICBsZXQgZmluYWxBcmdzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IGFyZ3MubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGV0IGFyZyA9IGFyZ3NbaV07XG4gICAgICBpZiAoIWFyZylcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGlmIChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKGFyZywgJ3N0cmluZycpKSB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBhcmcuc3BsaXQoc2VwKS5maWx0ZXIoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaXNOb3RFbXB0eSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgIGZpbmFsQXJncy5hZGQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICBsZXQgdmFsdWVzID0gYXJnLmZpbHRlcigodmFsdWUpID0+IHtcbiAgICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgaWYgKCFfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKHZhbHVlLCAnc3RyaW5nJykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICByZXR1cm4gX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaXNOb3RFbXB0eSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgIGZpbmFsQXJncy5hZGQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YoYXJnLCAnb2JqZWN0JykpIHtcbiAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhhcmcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICBsZXQga2V5ICAgPSBrZXlzW2ldO1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGFyZ1trZXldO1xuXG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgZmluYWxBcmdzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmluYWxBcmdzLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmluYWxBcmdzKS5qb2luKHNlcCB8fCAnJyk7XG4gIH1cblxuICBjbGFzc2VzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jb21iaW5lV2l0aCgnICcsIC4uLmFyZ3MpO1xuICB9XG5cbiAgZXh0cmFjdENoaWxkcmVuKF9wYXR0ZXJucywgY2hpbGRyZW4pIHtcbiAgICBsZXQgZXh0cmFjdGVkID0ge307XG4gICAgbGV0IHBhdHRlcm5zICA9IF9wYXR0ZXJucztcbiAgICBsZXQgaXNBcnJheSAgID0gQXJyYXkuaXNBcnJheShwYXR0ZXJucyk7XG5cbiAgICBjb25zdCBpc01hdGNoID0gKGppYikgPT4ge1xuICAgICAgbGV0IGppYlR5cGUgPSBqaWIuVHlwZTtcbiAgICAgIGlmIChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKGppYlR5cGUsICdzdHJpbmcnKSlcbiAgICAgICAgamliVHlwZSA9IGppYlR5cGUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKGlzQXJyYXkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0gcGF0dGVybnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgIGxldCBwYXR0ZXJuID0gcGF0dGVybnNbaV07XG4gICAgICAgICAgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YocGF0dGVybiwgJ3N0cmluZycpKVxuICAgICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4udG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgIGlmIChqaWJUeXBlID09PSBwYXR0ZXJuKSB7XG4gICAgICAgICAgICBleHRyYWN0ZWRbcGF0dGVybl0gPSBqaWI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMocGF0dGVybnMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICBsZXQga2V5ICAgICA9IGtleXNbaV07XG4gICAgICAgICAgbGV0IHBhdHRlcm4gPSBwYXR0ZXJuc1trZXldO1xuICAgICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgICBpZiAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihwYXR0ZXJuLCBSZWdFeHApKVxuICAgICAgICAgICAgcmVzdWx0ID0gcGF0dGVybi50ZXN0KGppYlR5cGUpO1xuICAgICAgICAgIGVsc2UgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YocGF0dGVybiwgJ3N0cmluZycpKVxuICAgICAgICAgICAgcmVzdWx0ID0gKHBhdHRlcm4udG9Mb3dlckNhc2UoKSA9PT0gamliVHlwZSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVzdWx0ID0gKHBhdHRlcm4gPT09IGppYlR5cGUpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBqaWI7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBleHRyYWN0ZWQucmVtYWluaW5nQ2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoKGppYikgPT4gIWlzTWF0Y2goamliKSk7XG4gICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgfVxuXG4gIGRlYm91bmNlKGZ1bmMsIHRpbWUsIF9pZCkge1xuICAgIGNvbnN0IGNsZWFyUGVuZGluZ1RpbWVvdXQgPSAoKSA9PiB7XG4gICAgICBpZiAocGVuZGluZ1RpbWVyICYmIHBlbmRpbmdUaW1lci50aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChwZW5kaW5nVGltZXIudGltZW91dCk7XG4gICAgICAgIHBlbmRpbmdUaW1lci50aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGlkID0gKCFfaWQpID8gKCcnICsgZnVuYykgOiBfaWQ7XG4gICAgaWYgKCF0aGlzLmRlYm91bmNlVGltZXJzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2RlYm91bmNlVGltZXJzJywge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICB7fSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBwZW5kaW5nVGltZXIgPSB0aGlzLmRlYm91bmNlVGltZXJzW2lkXTtcbiAgICBpZiAoIXBlbmRpbmdUaW1lcilcbiAgICAgIHBlbmRpbmdUaW1lciA9IHRoaXMuZGVib3VuY2VUaW1lcnNbaWRdID0ge307XG5cbiAgICBwZW5kaW5nVGltZXIuZnVuYyA9IGZ1bmM7XG4gICAgY2xlYXJQZW5kaW5nVGltZW91dCgpO1xuXG4gICAgdmFyIHByb21pc2UgPSBwZW5kaW5nVGltZXIucHJvbWlzZTtcbiAgICBpZiAoIXByb21pc2UgfHwgIXByb21pc2UucGVuZGluZygpKSB7XG4gICAgICBsZXQgc3RhdHVzID0gJ3BlbmRpbmcnO1xuICAgICAgbGV0IHJlc29sdmU7XG5cbiAgICAgIHByb21pc2UgPSBwZW5kaW5nVGltZXIucHJvbWlzZSA9IG5ldyBQcm9taXNlKChfcmVzb2x2ZSkgPT4ge1xuICAgICAgICByZXNvbHZlID0gX3Jlc29sdmU7XG4gICAgICB9KTtcblxuICAgICAgcHJvbWlzZS5yZXNvbHZlID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSAncGVuZGluZycpXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHN0YXR1cyA9ICdmdWxmaWxsZWQnO1xuICAgICAgICBjbGVhclBlbmRpbmdUaW1lb3V0KCk7XG4gICAgICAgIHRoaXMuZGVib3VuY2VUaW1lcnNbaWRdID0gbnVsbDtcblxuICAgICAgICBpZiAodHlwZW9mIHBlbmRpbmdUaW1lci5mdW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHJldCA9IHBlbmRpbmdUaW1lci5mdW5jLmNhbGwodGhpcyk7XG4gICAgICAgICAgaWYgKHJldCBpbnN0YW5jZW9mIFByb21pc2UgfHwgKHJldCAmJiB0eXBlb2YgcmV0LnRoZW4gPT09ICdmdW5jdGlvbicpKVxuICAgICAgICAgICAgcmV0LnRoZW4oKHZhbHVlKSA9PiByZXNvbHZlKHZhbHVlKSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVzb2x2ZShyZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgIHN0YXR1cyA9ICdyZWplY3RlZCc7XG4gICAgICAgIGNsZWFyUGVuZGluZ1RpbWVvdXQoKTtcbiAgICAgICAgdGhpcy5kZWJvdW5jZVRpbWVyc1tpZF0gPSBudWxsO1xuXG4gICAgICAgIHByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgfTtcblxuICAgICAgcHJvbWlzZS5pc1BlbmRpbmcgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoc3RhdHVzID09PSAncGVuZGluZycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBwZW5kaW5nVGltZXIudGltZW91dCA9IHNldFRpbWVvdXQocHJvbWlzZS5yZXNvbHZlLCAodGltZSA9PSBudWxsKSA/IDI1MCA6IHRpbWUpO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBjbGVhckRlYm91bmNlKGlkKSB7XG4gICAgdmFyIHBlbmRpbmdUaW1lciA9IHRoaXMuZGVib3VuY2VUaW1lcnNbaWRdO1xuICAgIGlmIChwZW5kaW5nVGltZXIgPT0gbnVsbClcbiAgICAgIHJldHVybjtcblxuICAgIGlmIChwZW5kaW5nVGltZXIudGltZW91dClcbiAgICAgIGNsZWFyVGltZW91dChwZW5kaW5nVGltZXIudGltZW91dCk7XG5cbiAgICBpZiAocGVuZGluZ1RpbWVyLnByb21pc2UpXG4gICAgICBwZW5kaW5nVGltZXIucHJvbWlzZS5jYW5jZWwoKTtcbiAgfVxuXG4gIGNsZWFyQWxsRGVib3VuY2VzKCkge1xuICAgIGxldCBkZWJvdW5jZVRpbWVycyAgPSB0aGlzLmRlYm91bmNlVGltZXJzIHx8IHt9O1xuICAgIGxldCBpZHMgICAgICAgICAgICAgPSBPYmplY3Qua2V5cyhkZWJvdW5jZVRpbWVycyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBpZHMubGVuZ3RoOyBpIDwgaWw7IGkrKylcbiAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZShpZHNbaV0pO1xuICB9XG5cbiAgZ2V0RWxlbWVudERhdGEoZWxlbWVudCkge1xuICAgIGxldCBkYXRhID0gZWxlbWVudERhdGFDYWNoZS5nZXQoZWxlbWVudCk7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICBkYXRhID0ge307XG4gICAgICBlbGVtZW50RGF0YUNhY2hlLnNldChlbGVtZW50LCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL2V2ZW50cy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvZXZlbnRzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJFdmVudEVtaXR0ZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRXZlbnRFbWl0dGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG5jb25zdCBFVkVOVF9MSVNURU5FUlMgPSBTeW1ib2wuZm9yKCdAamlicy9ldmVudHMvbGlzdGVuZXJzJyk7XG5cbmNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIFtFVkVOVF9MSVNURU5FUlNdOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbmV3IE1hcCgpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGFkZExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXZlbnQgbGlzdGVuZXIgbXVzdCBiZSBhIG1ldGhvZCcpO1xuXG4gICAgbGV0IGV2ZW50TWFwICA9IHRoaXNbRVZFTlRfTElTVEVORVJTXTtcbiAgICBsZXQgc2NvcGUgICAgID0gZXZlbnRNYXAuZ2V0KGV2ZW50TmFtZSk7XG5cbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICBzY29wZSA9IFtdO1xuICAgICAgZXZlbnRNYXAuc2V0KGV2ZW50TmFtZSwgc2NvcGUpO1xuICAgIH1cblxuICAgIHNjb3BlLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V2ZW50IGxpc3RlbmVyIG11c3QgYmUgYSBtZXRob2QnKTtcblxuICAgIGxldCBldmVudE1hcCAgPSB0aGlzW0VWRU5UX0xJU1RFTkVSU107XG4gICAgbGV0IHNjb3BlICAgICA9IGV2ZW50TWFwLmdldChldmVudE5hbWUpO1xuICAgIGlmICghc2NvcGUpXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGxldCBpbmRleCA9IHNjb3BlLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKVxuICAgICAgc2NvcGUuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgIGxldCBldmVudE1hcCAgPSB0aGlzW0VWRU5UX0xJU1RFTkVSU107XG4gICAgaWYgKCFldmVudE1hcC5oYXMoZXZlbnROYW1lKSlcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgZXZlbnRNYXAuc2V0KGV2ZW50TmFtZSwgW10pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBlbWl0KGV2ZW50TmFtZSwgLi4uYXJncykge1xuICAgIGxldCBldmVudE1hcCAgPSB0aGlzW0VWRU5UX0xJU1RFTkVSU107XG4gICAgbGV0IHNjb3BlICAgICA9IGV2ZW50TWFwLmdldChldmVudE5hbWUpO1xuICAgIGlmICghc2NvcGUgfHwgc2NvcGUubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gc2NvcGUubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGV0IGV2ZW50Q2FsbGJhY2sgPSBzY29wZVtpXTtcbiAgICAgIGV2ZW50Q2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBvbmNlKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICBsZXQgZnVuYyA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLm9mZihldmVudE5hbWUsIGZ1bmMpO1xuICAgICAgcmV0dXJuIGxpc3RlbmVyKC4uLmFyZ3MpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5vbihldmVudE5hbWUsIGZ1bmMpO1xuICB9XG5cbiAgb24oZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIHJldHVybiB0aGlzLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgb2ZmKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIGV2ZW50TmFtZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpc1tFVkVOVF9MSVNURU5FUlNdLmtleXMoKSk7XG4gIH1cblxuICBsaXN0ZW5lckNvdW50KGV2ZW50TmFtZSkge1xuICAgIGxldCBldmVudE1hcCAgPSB0aGlzW0VWRU5UX0xJU1RFTkVSU107XG4gICAgbGV0IHNjb3BlICAgICA9IGV2ZW50TWFwLmdldChldmVudE5hbWUpO1xuICAgIGlmICghc2NvcGUpXG4gICAgICByZXR1cm4gMDtcblxuICAgIHJldHVybiBzY29wZS5sZW5ndGg7XG4gIH1cblxuICBsaXN0ZW5lcnMoZXZlbnROYW1lKSB7XG4gICAgbGV0IGV2ZW50TWFwICA9IHRoaXNbRVZFTlRfTElTVEVORVJTXTtcbiAgICBsZXQgc2NvcGUgICAgID0gZXZlbnRNYXAuZ2V0KGV2ZW50TmFtZSk7XG4gICAgaWYgKCFzY29wZSlcbiAgICAgIHJldHVybiBbXTtcblxuICAgIHJldHVybiBzY29wZS5zbGljZSgpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9saWIvamliLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9qaWIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIiRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gJCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSklCXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEpJQiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSklCX0JBUlJFTlwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBKSUJfQkFSUkVOKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJKSUJfUFJPWFlcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSklCX1BST1hZKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJKaWJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSmliKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJjb25zdHJ1Y3RKaWJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gY29uc3RydWN0SmliKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJmYWN0b3J5XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGZhY3RvcnkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImlzSmliaXNoXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGlzSmliaXNoKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJyZXNvbHZlQ2hpbGRyZW5cIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gcmVzb2x2ZUNoaWxkcmVuKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgZGVhZGJlZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGRlYWRiZWVmICovIFwiLi9ub2RlX21vZHVsZXMvZGVhZGJlZWYvbGliL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy5qcyAqLyBcIi4vbGliL3V0aWxzLmpzXCIpO1xuXG5cblxuY2xhc3MgSmliIHtcbiAgY29uc3RydWN0b3IoVHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgbGV0IGRlZmF1bHRQcm9wcyA9IChUeXBlICYmIFR5cGUucHJvcHMpID8gVHlwZS5wcm9wcyA6IHt9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgJ1R5cGUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgVHlwZSxcbiAgICAgIH0sXG4gICAgICAncHJvcHMnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgeyAuLi5kZWZhdWx0UHJvcHMsIC4uLihwcm9wcyB8fCB7fSkgfSxcbiAgICAgIH0sXG4gICAgICAnY2hpbGRyZW4nOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uZmxhdHRlbkFycmF5KGNoaWxkcmVuKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgSklCX0JBUlJFTiAgPSBTeW1ib2wuZm9yKCdAamlicy5iYXJyZW4nKTtcbmNvbnN0IEpJQl9QUk9YWSAgID0gU3ltYm9sLmZvcignQGppYnMucHJveHknKTtcbmNvbnN0IEpJQiAgICAgICAgID0gU3ltYm9sLmZvcignQGppYnMuamliJyk7XG5cbmZ1bmN0aW9uIGZhY3RvcnkoSmliQ2xhc3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICQoX3R5cGUsIHByb3BzID0ge30pIHtcbiAgICBpZiAoaXNKaWJpc2goX3R5cGUpKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVjZWl2ZWQgYSBqaWIgYnV0IGV4cGVjdGVkIGEgY29tcG9uZW50LicpO1xuXG4gICAgbGV0IFR5cGUgPSAoX3R5cGUgPT0gbnVsbCkgPyBKSUJfUFJPWFkgOiBfdHlwZTtcblxuICAgIGZ1bmN0aW9uIGJhcnJlbiguLi5fY2hpbGRyZW4pIHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IF9jaGlsZHJlbjtcblxuICAgICAgZnVuY3Rpb24gamliKCkge1xuICAgICAgICBpZiAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihUeXBlLCAncHJvbWlzZScpIHx8IGNoaWxkcmVuLnNvbWUoKGNoaWxkKSA9PiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKGNoaWxkLCAncHJvbWlzZScpKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbIFR5cGUgXS5jb25jYXQoY2hpbGRyZW4pKS50aGVuKChhbGwpID0+IHtcbiAgICAgICAgICAgIFR5cGUgPSBhbGxbMF07XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGFsbC5zbGljZSgxKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKaWJDbGFzcyhcbiAgICAgICAgICAgICAgVHlwZSxcbiAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgSmliQ2xhc3MoXG4gICAgICAgICAgVHlwZSxcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoamliLCB7XG4gICAgICAgIFtKSUJdOiB7XG4gICAgICAgICAgd3JpdGFibGU6ICAgICBmYWxzZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6ICAgICAgICB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBbZGVhZGJlZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pZFN5bV06IHtcbiAgICAgICAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogICAgICAgICgpID0+IFR5cGUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGppYjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhiYXJyZW4sIHtcbiAgICAgIFtKSUJfQkFSUkVOXToge1xuICAgICAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogICAgICAgIHRydWUsXG4gICAgICB9LFxuICAgICAgW2RlYWRiZWVmX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaWRTeW1dOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgKCkgPT4gVHlwZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmFycmVuO1xuICB9O1xufVxuXG5jb25zdCAkID0gZmFjdG9yeShKaWIpO1xuXG5mdW5jdGlvbiBpc0ppYmlzaCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICh2YWx1ZVtKSUJfQkFSUkVOXSB8fCB2YWx1ZVtKSUJdKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBKaWIpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RKaWIodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSmliKVxuICAgIHJldHVybiB2YWx1ZTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlW0pJQl9CQVJSRU5dKVxuICAgICAgcmV0dXJuIHZhbHVlKCkoKTtcbiAgICBlbHNlIGlmICh2YWx1ZVtKSUJdKVxuICAgICAgcmV0dXJuIHZhbHVlKCk7XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb25zdHJ1Y3RKaWI6IFByb3ZpZGVkIHZhbHVlIGlzIG5vdCBhIEppYi4nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuKF9jaGlsZHJlbikge1xuICBsZXQgY2hpbGRyZW4gPSBfY2hpbGRyZW47XG5cbiAgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YoY2hpbGRyZW4sICdwcm9taXNlJykpXG4gICAgY2hpbGRyZW4gPSBhd2FpdCBjaGlsZHJlbjtcblxuICBpZiAoISgodGhpcy5pc0l0ZXJhYmxlQ2hpbGQgfHwgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaXNJdGVyYWJsZUNoaWxkKS5jYWxsKHRoaXMsIGNoaWxkcmVuKSkgJiYgKGlzSmliaXNoKGNoaWxkcmVuKSB8fCAoKHRoaXMuaXNWYWxpZENoaWxkIHx8IF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmlzVmFsaWRDaGlsZCkuY2FsbCh0aGlzLCBjaGlsZHJlbikpKSlcbiAgICBjaGlsZHJlbiA9IFsgY2hpbGRyZW4gXTtcblxuICBsZXQgcHJvbWlzZXMgPSBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pdGVyYXRlKGNoaWxkcmVuLCBhc3luYyAoeyB2YWx1ZTogX2NoaWxkIH0pID0+IHtcbiAgICBsZXQgY2hpbGQgPSAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihfY2hpbGQsICdwcm9taXNlJykpID8gYXdhaXQgX2NoaWxkIDogX2NoaWxkO1xuXG4gICAgaWYgKGlzSmliaXNoKGNoaWxkKSlcbiAgICAgIHJldHVybiBhd2FpdCBjb25zdHJ1Y3RKaWIoY2hpbGQpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgfSk7XG5cbiAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvY29tbWVudC1lbGVtZW50LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvcmVuZGVyZXJzL2NvbW1lbnQtZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbW1lbnRFbGVtZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbW1lbnRFbGVtZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yb290LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1lbGVtZW50LmpzXCIpO1xuXG5cbmNsYXNzIENvbW1lbnRFbGVtZW50IGV4dGVuZHMgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50IHtcbiAgc3RhdGljIFRZUEUgPSBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9DT01NRU5UO1xuXG4gIGNvbnN0cnVjdG9yKGlkLCB2YWx1ZSwgcHJvcHMpIHtcbiAgICBzdXBlcihfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9DT01NRU5ULCBpZCwgdmFsdWUsIHByb3BzKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3JlbmRlcmVycy9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvcmVuZGVyZXJzL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDT05URVhUX0lEXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9yb290X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5DT05URVhUX0lEKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb21tZW50RWxlbWVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfY29tbWVudF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uQ29tbWVudEVsZW1lbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZPUkNFX1JFRkxPV1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGT1JDRV9SRUZMT1cpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk5hdGl2ZUVsZW1lbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX25hdGl2ZV9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTmF0aXZlRWxlbWVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUG9ydGFsRWxlbWVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfcG9ydGFsX2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Qb3J0YWxFbGVtZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSZW5kZXJlclwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfcmVuZGVyZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5SZW5kZXJlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUm9vdEVsZW1lbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJvb3RFbGVtZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSb290Tm9kZVwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfcm9vdF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdE5vZGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRleHRFbGVtZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF90ZXh0X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5UZXh0RWxlbWVudClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9yb290X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcm9vdC1ub2RlLmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3Qtbm9kZS5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcmVuZGVyZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcmVuZGVyZXIuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcmVuZGVyZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yb290LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1lbGVtZW50LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jb21tZW50X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY29tbWVudC1lbGVtZW50LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL2NvbW1lbnQtZWxlbWVudC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbmF0aXZlX2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbmF0aXZlLWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvbmF0aXZlLWVsZW1lbnQuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BvcnRhbF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3BvcnRhbC1lbGVtZW50LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3BvcnRhbC1lbGVtZW50LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF90ZXh0X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdGV4dC1lbGVtZW50LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3RleHQtZWxlbWVudC5qc1wiKTtcblxuXG5jb25zdCBGT1JDRV9SRUZMT1cgPSBTeW1ib2wuZm9yKCdAamlic0ZvcmNlUmVmbG93Jyk7XG5cblxuXG5cblxuXG5cblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3JlbmRlcmVycy9uYXRpdmUtZWxlbWVudC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvcmVuZGVyZXJzL25hdGl2ZS1lbGVtZW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJOYXRpdmVFbGVtZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE5hdGl2ZUVsZW1lbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3Jvb3QtZWxlbWVudC5qcyAqLyBcIi4vbGliL3JlbmRlcmVycy9yb290LWVsZW1lbnQuanNcIik7XG5cblxuY2xhc3MgTmF0aXZlRWxlbWVudCBleHRlbmRzIF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Sb290RWxlbWVudCB7XG4gIHN0YXRpYyBUWVBFID0gX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfRUxFTUVOVDtcblxuICBjb25zdHJ1Y3RvcihpZCwgdmFsdWUsIHByb3BzKSB7XG4gICAgc3VwZXIoX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfRUxFTUVOVCwgaWQsIHZhbHVlLCBwcm9wcyk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvcG9ydGFsLWVsZW1lbnQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3JlbmRlcmVycy9wb3J0YWwtZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUG9ydGFsRWxlbWVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQb3J0YWxFbGVtZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yb290LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1lbGVtZW50LmpzXCIpO1xuXG5cbmNsYXNzIFBvcnRhbEVsZW1lbnQgZXh0ZW5kcyBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQge1xuICBzdGF0aWMgVFlQRSA9IF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Sb290RWxlbWVudC5UWVBFX1BPUlRBTDtcblxuICBjb25zdHJ1Y3RvcihpZCwgdmFsdWUsIHByb3BzKSB7XG4gICAgc3VwZXIoX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfUE9SVEFMLCBpZCwgdmFsdWUsIHByb3BzKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3JlbmRlcmVycy9yZW5kZXJlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvcmVuZGVyZXJzL3JlbmRlcmVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSZW5kZXJlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSZW5kZXJlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9ldmVudHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2V2ZW50cy5qcyAqLyBcIi4vbGliL2V2ZW50cy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWxzLmpzICovIFwiLi9saWIvdXRpbHMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yb290LW5vZGUuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1ub2RlLmpzXCIpO1xuXG5cblxuXG5sZXQgX2NvbnRleHRJRENvdW50ZXIgPSAwbjtcblxuY2xhc3MgUmVuZGVyZXIgZXh0ZW5kcyBfZXZlbnRzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRFbWl0dGVyIHtcbiAgc3RhdGljIFJvb3ROb2RlID0gX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJvb3ROb2RlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAnY29udGV4dCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgdGhpcy5jcmVhdGVDb250ZXh0KCksXG4gICAgICB9LFxuICAgICAgJ2Rlc3Ryb3lpbmcnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIGZhbHNlLFxuICAgICAgfSxcbiAgICAgICdyZW5kZXJGcmFtZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgMCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVDb250ZXh0KHJvb3RDb250ZXh0LCBvblVwZGF0ZSwgb25VcGRhdGVUaGlzKSB7XG4gICAgbGV0IGNvbnRleHQgICAgID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBsZXQgbXlDb250ZXh0SUQgPSAocm9vdENvbnRleHQpID8gcm9vdENvbnRleHRbX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNPTlRFWFRfSURdIDogMW47XG5cbiAgICByZXR1cm4gbmV3IFByb3h5KGNvbnRleHQsIHtcbiAgICAgIGdldDogKHRhcmdldCwgcHJvcE5hbWUpID0+IHtcbiAgICAgICAgaWYgKHByb3BOYW1lID09PSBfcm9vdF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uQ09OVEVYVF9JRCkge1xuICAgICAgICAgIGxldCBwYXJlbnRJRCA9IChyb290Q29udGV4dCkgPyByb290Q29udGV4dFtfcm9vdF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uQ09OVEVYVF9JRF0gOiAxbjtcbiAgICAgICAgICByZXR1cm4gKHBhcmVudElEID4gbXlDb250ZXh0SUQpID8gcGFyZW50SUQgOiBteUNvbnRleHRJRDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcE5hbWUpKVxuICAgICAgICAgIHJldHVybiAocm9vdENvbnRleHQpID8gcm9vdENvbnRleHRbcHJvcE5hbWVdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcE5hbWVdO1xuICAgICAgfSxcbiAgICAgIHNldDogKHRhcmdldCwgcHJvcE5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChwcm9wTmFtZSA9PT0gX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNPTlRFWFRfSUQpXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgaWYgKHRhcmdldFtwcm9wTmFtZV0gPT09IHZhbHVlKVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIG15Q29udGV4dElEID0gKytfY29udGV4dElEQ291bnRlcjtcbiAgICAgICAgdGFyZ2V0W3Byb3BOYW1lXSA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb25VcGRhdGUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgb25VcGRhdGUuY2FsbChvblVwZGF0ZVRoaXMsIG9uVXBkYXRlVGhpcyk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3QtZWxlbWVudC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3JlbmRlcmVycy9yb290LWVsZW1lbnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSb290RWxlbWVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSb290RWxlbWVudClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuXG5jb25zdCBUWVBFX0VMRU1FTlQgID0gMTtcbmNvbnN0IFRZUEVfVEVYVCAgICAgPSAzO1xuY29uc3QgVFlQRV9DT01NRU5UICA9IDg7XG5jb25zdCBUWVBFX1BPUlRBTCAgID0gMTU7XG5cbmNsYXNzIFJvb3RFbGVtZW50IHtcbiAgc3RhdGljIFRZUEVfRUxFTUVOVCAgPSBUWVBFX0VMRU1FTlQ7XG5cbiAgc3RhdGljIFRZUEVfVEVYVCAgICAgPSBUWVBFX1RFWFQ7XG5cbiAgc3RhdGljIFRZUEVfQ09NTUVOVCAgPSBUWVBFX0NPTU1FTlQ7XG5cbiAgc3RhdGljIFRZUEVfUE9SVEFMICAgPSBUWVBFX1BPUlRBTDtcblxuICBjb25zdHJ1Y3Rvcih0eXBlLCBpZCwgdmFsdWUsIHByb3BzKSB7XG4gICAgdGhpcy5pc0ppYnNWaXJ0dWFsRWxlbWVudCA9IHRydWU7XG4gICAgdGhpcy50eXBlICAgPSB0eXBlO1xuICAgIHRoaXMuaWQgICAgID0gaWQ7XG4gICAgdGhpcy52YWx1ZSAgPSB2YWx1ZTtcbiAgICB0aGlzLnByb3BzICA9IHByb3BzIHx8IHt9O1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3Qtbm9kZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3JlbmRlcmVycy9yb290LW5vZGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDT05URVhUX0lEXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENPTlRFWFRfSUQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlJvb3ROb2RlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFJvb3ROb2RlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy5qcyAqLyBcIi4vbGliL3V0aWxzLmpzXCIpO1xuXG5cbmNvbnN0IENPTlRFWFRfSUQgPSBTeW1ib2wuZm9yKCdAamlicy9ub2RlL2NvbnRleHRJRCcpO1xuXG5sZXQgdXVpZCA9IDE7XG5cbmNsYXNzIFJvb3ROb2RlIHtcbiAgc3RhdGljIENPTlRFWFRfSUQgPSBDT05URVhUX0lEO1xuXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyLCBwYXJlbnQsIF9jb250ZXh0KSB7XG4gICAgbGV0IGNvbnRleHQgPSByZW5kZXJlci5jcmVhdGVDb250ZXh0KFxuICAgICAgX2NvbnRleHQsXG4gICAgICAodGhpcy5vbkNvbnRleHRVcGRhdGUpID8gdGhpcy5vbkNvbnRleHRVcGRhdGUgOiB1bmRlZmluZWQsXG4gICAgICB0aGlzLFxuICAgICk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAnaWQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgdXVpZCsrLFxuICAgICAgfSxcbiAgICAgICdyZW5kZXJlcic6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgcmVuZGVyZXIsXG4gICAgICB9LFxuICAgICAgJ3BhcmVudCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgcGFyZW50LFxuICAgICAgfSxcbiAgICAgICdjb250ZXh0Jzoge1xuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGdldDogICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6ICAgICAgICAgICgpID0+IHt9LFxuICAgICAgfSxcbiAgICAgICdyZW5kZXJQcm9taXNlJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdkZXN0cm95aW5nJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBmYWxzZSxcbiAgICAgIH0sXG4gICAgICAncmVuZGVyRnJhbWUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIDAsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3lpbmcgPSB0cnVlO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIH1cblxuICBpc1ZhbGlkQ2hpbGQoY2hpbGQpIHtcbiAgICByZXR1cm4gX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNWYWxpZENoaWxkKGNoaWxkKTtcbiAgfVxuXG4gIGlzSXRlcmFibGVDaGlsZChjaGlsZCkge1xuICAgIHJldHVybiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc0l0ZXJhYmxlQ2hpbGQoY2hpbGQpO1xuICB9XG5cbiAgcHJvcHNEaWZmZXIob2xkUHJvcHMsIG5ld1Byb3BzLCBza2lwS2V5cykge1xuICAgIHJldHVybiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5wcm9wc0RpZmZlcihvbGRQcm9wcywgbmV3UHJvcHMsIHNraXBLZXlzKTtcbiAgfVxuXG4gIGNoaWxkcmVuRGlmZmVyKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbikge1xuICAgIHJldHVybiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5jaGlsZHJlbkRpZmZlcihvbGRDaGlsZHJlbiwgbmV3Q2hpbGRyZW4pO1xuICB9XG5cbiAgYXN5bmMgcmVuZGVyKGppYiwgcmVuZGVyQ29udGV4dCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnJlbmRlckZyYW1lKys7XG5cbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyKGppYiwgcmVuZGVyQ29udGV4dClcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJQcm9taXNlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMucmVuZGVyUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvdGV4dC1lbGVtZW50LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvcmVuZGVyZXJzL3RleHQtZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRleHRFbGVtZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHRFbGVtZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yb290LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1lbGVtZW50LmpzXCIpO1xuXG5cbmNsYXNzIFRleHRFbGVtZW50IGV4dGVuZHMgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50IHtcbiAgc3RhdGljIFRZUEUgPSBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9URVhUO1xuXG4gIGNvbnN0cnVjdG9yKGlkLCB2YWx1ZSwgcHJvcHMpIHtcbiAgICBzdXBlcihfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9URVhULCBpZCwgdmFsdWUsIHByb3BzKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3V0aWxzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3V0aWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImJpbmRNZXRob2RzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGJpbmRNZXRob2RzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJjaGlsZHJlbkRpZmZlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBjaGlsZHJlbkRpZmZlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZmV0Y2hEZWVwUHJvcGVydHlcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZmV0Y2hEZWVwUHJvcGVydHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImZsYXR0ZW5BcnJheVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBmbGF0dGVuQXJyYXkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImluc3RhbmNlT2ZcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaW5zdGFuY2VPZiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiaXNFbXB0eVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBpc0VtcHR5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJpc0l0ZXJhYmxlQ2hpbGRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaXNJdGVyYWJsZUNoaWxkKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJpc05vdEVtcHR5XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGlzTm90RW1wdHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImlzVmFsaWRDaGlsZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBpc1ZhbGlkQ2hpbGQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIml0ZXJhdGVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaXRlcmF0ZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwibm93XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIG5vdyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwicHJvcHNEaWZmZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gcHJvcHNEaWZmZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcInNpemVPZlwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBzaXplT2YpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBkZWFkYmVlZl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZGVhZGJlZWYgKi8gXCIuL25vZGVfbW9kdWxlcy9kZWFkYmVlZi9saWIvaW5kZXguanNcIik7XG5cblxuY29uc3QgU1RPUCA9IFN5bWJvbC5mb3IoJ0BqaWJzSXRlcmF0ZVN0b3AnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG5jb25zdCBnbG9iYWxTY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgPyBnbG9iYWwgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93IDogdW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpbnN0YW5jZU9mKG9iaikge1xuICBmdW5jdGlvbiB0ZXN0VHlwZShvYmosIF92YWwpIHtcbiAgICBmdW5jdGlvbiBpc0RlZmVycmVkVHlwZShvYmopIHtcbiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBQcm9taXNlIHx8IChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdQcm9taXNlJykpXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAvLyBRdWFjayBxdWFjay4uLlxuICAgICAgaWYgKHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLmNhdGNoID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCB2YWwgICAgID0gX3ZhbDtcbiAgICBsZXQgdHlwZU9mICA9ICh0eXBlb2Ygb2JqKTtcblxuICAgIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLlN0cmluZylcbiAgICAgIHZhbCA9ICdzdHJpbmcnO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuTnVtYmVyKVxuICAgICAgdmFsID0gJ251bWJlcic7XG4gICAgZWxzZSBpZiAodmFsID09PSBnbG9iYWxTY29wZS5Cb29sZWFuKVxuICAgICAgdmFsID0gJ2Jvb2xlYW4nO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuRnVuY3Rpb24pXG4gICAgICB2YWwgPSAnZnVuY3Rpb24nO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuQXJyYXkpXG4gICAgICB2YWwgPSAnYXJyYXknO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuT2JqZWN0KVxuICAgICAgdmFsID0gJ29iamVjdCc7XG4gICAgZWxzZSBpZiAodmFsID09PSBnbG9iYWxTY29wZS5Qcm9taXNlKVxuICAgICAgdmFsID0gJ3Byb21pc2UnO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuQmlnSW50KVxuICAgICAgdmFsID0gJ2JpZ2ludCc7XG4gICAgZWxzZSBpZiAodmFsID09PSBnbG9iYWxTY29wZS5NYXApXG4gICAgICB2YWwgPSAnbWFwJztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLldlYWtNYXApXG4gICAgICB2YWwgPSAnd2Vha21hcCc7XG4gICAgZWxzZSBpZiAodmFsID09PSBnbG9iYWxTY29wZS5TZXQpXG4gICAgICB2YWwgPSAnc2V0JztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLlN5bWJvbClcbiAgICAgIHZhbCA9ICdzeW1ib2wnO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuQnVmZmVyKVxuICAgICAgdmFsID0gJ2J1ZmZlcic7XG5cbiAgICBpZiAodmFsID09PSAnYnVmZmVyJyAmJiBnbG9iYWxTY29wZS5CdWZmZXIgJiYgZ2xvYmFsU2NvcGUuQnVmZmVyLmlzQnVmZmVyKG9iaikpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh2YWwgPT09ICdudW1iZXInICYmICh0eXBlT2YgPT09ICdudW1iZXInIHx8IG9iaiBpbnN0YW5jZW9mIE51bWJlciB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnTnVtYmVyJykpKSB7XG4gICAgICBpZiAoIWlzRmluaXRlKG9iaikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHZhbCAhPT0gJ29iamVjdCcgJiYgdmFsID09PSB0eXBlT2YpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoKG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnT2JqZWN0JykpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgLy8gTnVsbCBwcm90b3R5cGUgb24gb2JqZWN0XG4gICAgICBpZiAodHlwZU9mID09PSAnb2JqZWN0JyAmJiAhb2JqLmNvbnN0cnVjdG9yKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh2YWwgPT09ICdhcnJheScgJiYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBBcnJheSB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQXJyYXknKSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICgodmFsID09PSAncHJvbWlzZScgfHwgdmFsID09PSAnZGVmZXJyZWQnKSAmJiBpc0RlZmVycmVkVHlwZShvYmopKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodmFsID09PSAnc3RyaW5nJyAmJiAob2JqIGluc3RhbmNlb2YgZ2xvYmFsU2NvcGUuU3RyaW5nIHx8IChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdTdHJpbmcnKSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh2YWwgPT09ICdib29sZWFuJyAmJiAob2JqIGluc3RhbmNlb2YgZ2xvYmFsU2NvcGUuQm9vbGVhbiB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnQm9vbGVhbicpKSlcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHZhbCA9PT0gJ21hcCcgJiYgKG9iaiBpbnN0YW5jZW9mIGdsb2JhbFNjb3BlLk1hcCB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnTWFwJykpKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodmFsID09PSAnd2Vha21hcCcgJiYgKG9iaiBpbnN0YW5jZW9mIGdsb2JhbFNjb3BlLldlYWtNYXAgfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ1dlYWtNYXAnKSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh2YWwgPT09ICdzZXQnICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWxTY29wZS5TZXQgfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ1NldCcpKSlcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHZhbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlT2YgPT09ICdmdW5jdGlvbicpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIHZhbClcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdmFsKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAob2JqID09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAodGVzdFR5cGUob2JqLCBhcmd1bWVudHNbaV0pID09PSB0cnVlKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByb3BzRGlmZmVyKG9sZFByb3BzLCBuZXdQcm9wcywgc2tpcEtleXMpIHtcbiAgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBvbGRQcm9wcyAhPT0gdHlwZW9mIG5ld1Byb3BzKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIGlmICghb2xkUHJvcHMgJiYgbmV3UHJvcHMpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgaWYgKG9sZFByb3BzICYmICFuZXdQcm9wcylcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gIGlmICghb2xkUHJvcHMgJiYgIW5ld1Byb3BzICYmIG9sZFByb3BzICE9IG9sZFByb3BzKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIGxldCBhS2V5cyA9IE9iamVjdC5rZXlzKG9sZFByb3BzKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvbGRQcm9wcykpO1xuICBsZXQgYktleXMgPSBPYmplY3Qua2V5cyhuZXdQcm9wcykuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobmV3UHJvcHMpKTtcblxuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGlsID0gYUtleXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgIGxldCBhS2V5ID0gYUtleXNbaV07XG4gICAgaWYgKHNraXBLZXlzICYmIHNraXBLZXlzLmluZGV4T2YoYUtleSkgPj0gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG9sZFByb3BzW2FLZXldICE9PSBuZXdQcm9wc1thS2V5XSlcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgbGV0IGJLZXkgPSBiS2V5c1tpXTtcbiAgICBpZiAoc2tpcEtleXMgJiYgc2tpcEtleXMuaW5kZXhPZihiS2V5KSlcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKGFLZXkgPT09IGJLZXkpXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChvbGRQcm9wc1tiS2V5XSAhPT0gbmV3UHJvcHNbYktleV0pXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2l6ZU9mKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuIDA7XG5cbiAgaWYgKE9iamVjdC5pcyhJbmZpbml0eSkpXG4gICAgcmV0dXJuIDA7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInKVxuICAgIHJldHVybiB2YWx1ZS5sZW5ndGg7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYXRlKG9iaiwgY2FsbGJhY2spIHtcbiAgaWYgKCFvYmogfHwgT2JqZWN0LmlzKEluZmluaXR5KSlcbiAgICByZXR1cm4gW107XG5cbiAgbGV0IHJlc3VsdHMgICA9IFtdO1xuICBsZXQgc2NvcGUgICAgID0geyBjb2xsZWN0aW9uOiBvYmosIFNUT1AgfTtcbiAgbGV0IHJlc3VsdDtcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgc2NvcGUudHlwZSA9ICdBcnJheSc7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBvYmoubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgc2NvcGUudmFsdWUgPSBvYmpbaV07XG4gICAgICBzY29wZS5pbmRleCA9IHNjb3BlLmtleSA9IGk7XG5cbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwodGhpcywgc2NvcGUpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gU1RPUClcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLmVudHJpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgU2V0IHx8IG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU2V0Jykge1xuICAgICAgc2NvcGUudHlwZSA9ICdTZXQnO1xuXG4gICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgZm9yIChsZXQgaXRlbSBvZiBvYmoudmFsdWVzKCkpIHtcbiAgICAgICAgc2NvcGUudmFsdWUgPSBpdGVtO1xuICAgICAgICBzY29wZS5rZXkgPSBpdGVtO1xuICAgICAgICBzY29wZS5pbmRleCA9IGluZGV4Kys7XG5cbiAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzY29wZSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IFNUT1ApXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjb3BlLnR5cGUgPSBvYmouY29uc3RydWN0b3IubmFtZTtcblxuICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgIGZvciAobGV0IFsga2V5LCB2YWx1ZSBdIG9mIG9iai5lbnRyaWVzKCkpIHtcbiAgICAgICAgc2NvcGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgc2NvcGUua2V5ID0ga2V5O1xuICAgICAgICBzY29wZS5pbmRleCA9IGluZGV4Kys7XG5cbiAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzY29wZSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IFNUT1ApXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpbnN0YW5jZU9mKG9iaiwgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2JpZ2ludCcsICdmdW5jdGlvbicpKVxuICAgICAgcmV0dXJuO1xuXG4gICAgc2NvcGUudHlwZSA9IChvYmouY29uc3RydWN0b3IpID8gb2JqLmNvbnN0cnVjdG9yLm5hbWUgOiAnT2JqZWN0JztcblxuICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGxldCBrZXkgICA9IGtleXNbaV07XG4gICAgICBsZXQgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgc2NvcGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHNjb3BlLmtleSA9IGtleTtcbiAgICAgIHNjb3BlLmluZGV4ID0gaTtcblxuICAgICAgcmVzdWx0ID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzY29wZSk7XG4gICAgICBpZiAocmVzdWx0ID09PSBTVE9QKVxuICAgICAgICBicmVhaztcblxuICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF9pdGVyYXRlLCB7XG4gICdTVE9QJzoge1xuICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiAgICAgICAgU1RPUCxcbiAgfSxcbn0pO1xuXG5jb25zdCBpdGVyYXRlID0gX2l0ZXJhdGU7XG5cbmZ1bmN0aW9uIGNoaWxkcmVuRGlmZmVyKF9jaGlsZHJlbjEsIF9jaGlsZHJlbjIpIHtcbiAgbGV0IGNoaWxkcmVuMSA9ICghQXJyYXkuaXNBcnJheShfY2hpbGRyZW4xKSkgPyBbIF9jaGlsZHJlbjEgXSA6IF9jaGlsZHJlbjE7XG4gIGxldCBjaGlsZHJlbjIgPSAoIUFycmF5LmlzQXJyYXkoX2NoaWxkcmVuMikpID8gWyBfY2hpbGRyZW4yIF0gOiBfY2hpbGRyZW4yO1xuXG4gIHJldHVybiAoZGVhZGJlZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyguLi5jaGlsZHJlbjEpICE9PSBkZWFkYmVlZl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKC4uLmNoaWxkcmVuMikpO1xufVxuXG5mdW5jdGlvbiBmZXRjaERlZXBQcm9wZXJ0eShvYmosIF9rZXksIGRlZmF1bHRWYWx1ZSwgbGFzdFBhcnQpIHtcbiAgaWYgKG9iaiA9PSBudWxsIHx8IE9iamVjdC5pcyhOYU4sIG9iaikgfHwgT2JqZWN0LmlzKEluZmluaXR5LCBvYmopKVxuICAgIHJldHVybiAobGFzdFBhcnQpID8gWyBkZWZhdWx0VmFsdWUsIG51bGwgXSA6IGRlZmF1bHRWYWx1ZTtcblxuICBpZiAoX2tleSA9PSBudWxsIHx8IE9iamVjdC5pcyhOYU4sIF9rZXkpIHx8IE9iamVjdC5pcyhJbmZpbml0eSwgX2tleSkpXG4gICAgcmV0dXJuIChsYXN0UGFydCkgPyBbIGRlZmF1bHRWYWx1ZSwgbnVsbCBdIDogZGVmYXVsdFZhbHVlO1xuXG4gIGxldCBwYXJ0cztcblxuICBpZiAoQXJyYXkuaXNBcnJheShfa2V5KSkge1xuICAgIHBhcnRzID0gX2tleTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgX2tleSA9PT0gJ3N5bWJvbCcpIHtcbiAgICBwYXJ0cyA9IFsgX2tleSBdO1xuICB9IGVsc2Uge1xuICAgIGxldCBrZXkgICAgICAgICA9ICgnJyArIF9rZXkpO1xuICAgIGxldCBsYXN0SW5kZXggICA9IDA7XG4gICAgbGV0IGxhc3RDdXJzb3IgID0gMDtcblxuICAgIHBhcnRzID0gW107XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBpbmRleCA9IGtleS5pbmRleE9mKCcuJywgbGFzdEluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcGFydHMucHVzaChrZXkuc3Vic3RyaW5nKGxhc3RDdXJzb3IpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkuY2hhckF0KGluZGV4IC0gMSkgPT09ICdcXFxcJykge1xuICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBwYXJ0cy5wdXNoKGtleS5zdWJzdHJpbmcobGFzdEN1cnNvciwgaW5kZXgpKTtcbiAgICAgIGxhc3RDdXJzb3IgPSBsYXN0SW5kZXggPSBpbmRleCArIDE7XG4gICAgfVxuICB9XG5cbiAgbGV0IHBhcnROID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gIGlmIChwYXJ0cy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIChsYXN0UGFydCkgPyBbIGRlZmF1bHRWYWx1ZSwgcGFydE4gXSA6IGRlZmF1bHRWYWx1ZTtcblxuICBsZXQgY3VycmVudFZhbHVlID0gb2JqO1xuICBmb3IgKGxldCBpID0gMCwgaWwgPSBwYXJ0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgbGV0IGtleSA9IHBhcnRzW2ldO1xuXG4gICAgY3VycmVudFZhbHVlID0gY3VycmVudFZhbHVlW2tleV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBudWxsKVxuICAgICAgcmV0dXJuIChsYXN0UGFydCkgPyBbIGRlZmF1bHRWYWx1ZSwgcGFydE4gXSA6IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiAobGFzdFBhcnQpID8gWyBjdXJyZW50VmFsdWUsIHBhcnROIF0gOiBjdXJyZW50VmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJpbmRNZXRob2RzKF9wcm90bywgc2tpcFByb3Rvcykge1xuICBsZXQgcHJvdG8gICAgICAgICAgID0gX3Byb3RvO1xuICBsZXQgYWxyZWFkeVZpc2l0ZWQgID0gbmV3IFNldCgpO1xuXG4gIHdoaWxlIChwcm90bykge1xuICAgIGxldCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHByb3RvKTtcbiAgICBsZXQga2V5cyAgICAgICAgPSBPYmplY3Qua2V5cyhkZXNjcmlwdG9ycykuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZGVzY3JpcHRvcnMpKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IGtleXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGV0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InKVxuICAgICAgICBjb250aW51ZTtcblxuICAgICAgaWYgKGFscmVhZHlWaXNpdGVkLmhhcyhrZXkpKVxuICAgICAgICBjb250aW51ZTtcblxuICAgICAgYWxyZWFkeVZpc2l0ZWQuYWRkKGtleSk7XG5cbiAgICAgIGxldCB2YWx1ZSA9IHByb3RvW2tleV07XG5cbiAgICAgIC8vIFNraXAgcHJvdG90eXBlIG9mIE9iamVjdFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBPYmplY3QucHJvdG90eXBlW2tleV0gPT09IHZhbHVlKVxuICAgICAgICBjb250aW51ZTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICAgIGlmIChwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgIGJyZWFrO1xuXG4gICAgaWYgKHNraXBQcm90b3MgJiYgc2tpcFByb3Rvcy5pbmRleE9mKHByb3RvKSA+PSAwKVxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICBpZiAoT2JqZWN0LmlzKHZhbHVlLCBJbmZpbml0eSkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChPYmplY3QuaXModmFsdWUsIE5hTikpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGluc3RhbmNlT2YodmFsdWUsICdzdHJpbmcnKSlcbiAgICByZXR1cm4gISgvXFxTLykudGVzdCh2YWx1ZSk7XG4gIGVsc2UgaWYgKGluc3RhbmNlT2YodmFsdWUsICdudW1iZXInKSAmJiBpc0Zpbml0ZSh2YWx1ZSkpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmICghaW5zdGFuY2VPZih2YWx1ZSwgJ2Jvb2xlYW4nLCAnYmlnaW50JywgJ2Z1bmN0aW9uJykgJiYgc2l6ZU9mKHZhbHVlKSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTm90RW1wdHkodmFsdWUpIHtcbiAgcmV0dXJuICFpc0VtcHR5LmNhbGwodGhpcywgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuQXJyYXkodmFsdWUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICByZXR1cm4gdmFsdWU7XG5cbiAgbGV0IG5ld0FycmF5ID0gW107XG4gIGZvciAobGV0IGkgPSAwLCBpbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICBsZXQgaXRlbSA9IHZhbHVlW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKVxuICAgICAgbmV3QXJyYXkgPSBuZXdBcnJheS5jb25jYXQoZmxhdHRlbkFycmF5KGl0ZW0pKTtcbiAgICBlbHNlXG4gICAgICBuZXdBcnJheS5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld0FycmF5O1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkQ2hpbGQoY2hpbGQpIHtcbiAgaWYgKGNoaWxkID09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdib29sZWFuJylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKE9iamVjdC5pcyhjaGlsZCwgSW5maW5pdHkpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoT2JqZWN0LmlzKGNoaWxkLCBOYU4pKVxuICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNJdGVyYWJsZUNoaWxkKGNoaWxkKSB7XG4gIGlmIChjaGlsZCA9PSBudWxsIHx8IE9iamVjdC5pcyhjaGlsZCwgTmFOKSB8fCBPYmplY3QuaXMoY2hpbGQsIEluZmluaXR5KSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIChBcnJheS5pc0FycmF5KGNoaWxkKSB8fCB0eXBlb2YgY2hpbGQgPT09ICdvYmplY3QnICYmICFpbnN0YW5jZU9mKGNoaWxkLCAnYm9vbGVhbicsICdudW1iZXInLCAnc3RyaW5nJykpO1xufVxuXG5mdW5jdGlvbiBub3coKSB7XG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICBlbHNlXG4gICAgcmV0dXJuIERhdGUubm93KCk7XG59XG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gLy8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gdmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXG4vKioqKioqLyAvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi8gXG4vKioqKioqLyBcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFxuLyoqKioqKi8gXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyB9XG4vKioqKioqLyBcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovICgoKSA9PiB7XG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcbi8qKioqKiovIFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG4vKioqKioqLyBcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuLyoqKioqKi8gXHRcdH0gY2F0Y2ggKGUpIHtcbi8qKioqKiovIFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpXG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovIH0pKCk7XG4vKioqKioqLyBcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay5cbigoKSA9PiB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCIkXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy4kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb21wb25lbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkNvbXBvbmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29tcG9uZW50c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wb25lbnRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJKaWJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEppYnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlJlbmRlcmVyc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSZW5kZXJlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlV0aWxzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBtb2R1bGUgb2JqZWN0ICovIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWFkYmVlZlwiOiAoKSA9PiAoLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gZGVhZGJlZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZmFjdG9yeVwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uZmFjdG9yeSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vamliLmpzICovIFwiLi9saWIvamliLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jb21wb25lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY29tcG9uZW50LmpzICovIFwiLi9saWIvY29tcG9uZW50LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9yZW5kZXJlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcmVuZGVyZXJzL2luZGV4LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy5qcyAqLyBcIi4vbGliL3V0aWxzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGRlYWRiZWVmX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBkZWFkYmVlZiAqLyBcIi4vbm9kZV9tb2R1bGVzL2RlYWRiZWVmL2xpYi9pbmRleC5qc1wiKTtcblxuXG5jb25zdCBKaWJzID0ge1xuICBKSUJfQkFSUkVOOiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uSklCX0JBUlJFTixcbiAgSklCX1BST1hZOiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uSklCX1BST1hZLFxuICBKSUI6IF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5KSUIsXG4gIEppYjogX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkppYixcbiAgaXNKaWJpc2g6IF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc0ppYmlzaCxcbiAgY29uc3RydWN0SmliOiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uY29uc3RydWN0SmliLFxuICByZXNvbHZlQ2hpbGRyZW46IF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5yZXNvbHZlQ2hpbGRyZW4sXG59O1xuXG5cblxuY29uc3QgQ29tcG9uZW50cyA9IHtcbiAgVVBEQVRFX0VWRU5UOiBfY29tcG9uZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uVVBEQVRFX0VWRU5ULFxuICBRVUVVRV9VUERBVEVfTUVUSE9EOiBfY29tcG9uZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uUVVFVUVfVVBEQVRFX01FVEhPRCxcbiAgRkxVU0hfVVBEQVRFX01FVEhPRDogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZMVVNIX1VQREFURV9NRVRIT0QsXG4gIElOSVRfTUVUSE9EOiBfY29tcG9uZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uSU5JVF9NRVRIT0QsXG4gIFNLSVBfU1RBVEVfVVBEQVRFUzogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlNLSVBfU1RBVEVfVVBEQVRFUyxcbiAgUEVORElOR19TVEFURV9VUERBVEU6IF9jb21wb25lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5QRU5ESU5HX1NUQVRFX1VQREFURSxcbiAgTEFTVF9SRU5ERVJfVElNRTogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxBU1RfUkVOREVSX1RJTUUsXG4gIFBSRVZJT1VTX1NUQVRFOiBfY29tcG9uZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uUFJFVklPVVNfU1RBVEUsXG59O1xuXG5cblxuY29uc3QgUmVuZGVyZXJzID0ge1xuICBDT05URVhUX0lEOiBfcmVuZGVyZXJzX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uUm9vdE5vZGUuQ09OVEVYVF9JRCxcbiAgRk9SQ0VfUkVGTE9XOiBfcmVuZGVyZXJzX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uRk9SQ0VfUkVGTE9XLFxuICBSb290Tm9kZTogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJvb3ROb2RlLFxuICBSZW5kZXJlcjogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJlbmRlcmVyLFxuICBSb290RWxlbWVudDogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJvb3RFbGVtZW50LFxuICBDb21tZW50RWxlbWVudDogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNvbW1lbnRFbGVtZW50LFxuICBOYXRpdmVFbGVtZW50OiBfcmVuZGVyZXJzX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTmF0aXZlRWxlbWVudCxcbiAgUG9ydGFsRWxlbWVudDogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlBvcnRhbEVsZW1lbnQsXG4gIFRleHRFbGVtZW50OiBfcmVuZGVyZXJzX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uVGV4dEVsZW1lbnQsXG59O1xuXG5cblxuXG5cblxufSkoKTtcblxudmFyIF9fd2VicGFja19leHBvcnRzX18kID0gX193ZWJwYWNrX2V4cG9ydHNfXy4kO1xudmFyIF9fd2VicGFja19leHBvcnRzX19Db21wb25lbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkNvbXBvbmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQ29tcG9uZW50cyA9IF9fd2VicGFja19leHBvcnRzX18uQ29tcG9uZW50cztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fSmlicyA9IF9fd2VicGFja19leHBvcnRzX18uSmlicztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fUmVuZGVyZXJzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5SZW5kZXJlcnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1V0aWxzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5VdGlscztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fZGVhZGJlZWYgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmRlYWRiZWVmO1xudmFyIF9fd2VicGFja19leHBvcnRzX19mYWN0b3J5ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5mYWN0b3J5O1xuZXhwb3J0IHsgX193ZWJwYWNrX2V4cG9ydHNfXyQgYXMgJCwgX193ZWJwYWNrX2V4cG9ydHNfX0NvbXBvbmVudCBhcyBDb21wb25lbnQsIF9fd2VicGFja19leHBvcnRzX19Db21wb25lbnRzIGFzIENvbXBvbmVudHMsIF9fd2VicGFja19leHBvcnRzX19KaWJzIGFzIEppYnMsIF9fd2VicGFja19leHBvcnRzX19SZW5kZXJlcnMgYXMgUmVuZGVyZXJzLCBfX3dlYnBhY2tfZXhwb3J0c19fVXRpbHMgYXMgVXRpbHMsIF9fd2VicGFja19leHBvcnRzX19kZWFkYmVlZiBhcyBkZWFkYmVlZiwgX193ZWJwYWNrX2V4cG9ydHNfX2ZhY3RvcnkgYXMgZmFjdG9yeSB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdRVUZCUVRzN1FVRkZZVHM3UVVGRllpd3JSRUZCSzBRc2NVSkJRVTA3UVVGRGNrVTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQkxIbERRVUY1UXl4UlFVRlJPMEZCUTJwRUxGVkJRVlVzYjBKQlFXOUNPMEZCUXpsQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2NVSkJRWEZDTEdWQlFXVTdPMEZCUlhCRE8wRkJRMEU3UVVGRFFTeHRRMEZCYlVNc1NVRkJTU3hsUVVGbExFbEJRVWs3TzBGQlJURkVPMEZCUTBFN08wRkJSVUVzWTBGQll5eFBRVUZQTEVkQlFVY3NTVUZCU1R0QlFVTTFRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHbENRVUZwUWl4WFFVRlhMRWRCUVVjc1kwRkJZenRCUVVNM1F6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRExGRkJRVkU3UVVGRGFrUTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRExGRkJRVkU3UVVGRGFrUTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEcxQ1FVRnRRaXh0UWtGQmJVSTdRVUZEZEVNN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZ3NRMEZCUXpzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETDBoQk96dEJRVVV5UXp0QlFVTkVPMEZCUzNoQ096dEJRVVZZTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGVURzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVlBMSGRDUVVGM1FpeHZSRUZCV1R0QlFVTXpRenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hKUVVGSkxIVkVRVUZ6UWpzN1FVRkZNVUk3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzVTBGQlV6dEJRVU5VTEU5QlFVODdRVUZEVURzN1FVRkZRU3gzUlVGQmQwVTdRVUZEZUVVN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHpRa0ZCYzBJc01FTkJRVk03UVVGREwwSXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBKQlFYZENPMEZCUTNoQ0xFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTEc5RlFVRnZSU3hOUVVGTk96dEJRVVV4UlR0QlFVTkJMRk5CUVZNN1FVRkRWQ3hQUVVGUE8wRkJRMUFzUzBGQlN6dEJRVU5NT3p0QlFVVkJPMEZCUTBFc1YwRkJWeXg1UkVGQmIwSTdRVUZETDBJN08wRkJSVUU3UVVGRFFTeFhRVUZYTEdsRVFVRlJPMEZCUTI1Q096dEJRVVZCTzBGQlEwRXNWMEZCVnl4eFJFRkJXVHRCUVVOMlFqczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVMRTlCUVU4N1FVRkRVRHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEZGQlFWRXNhVVJCUVdkQ08wRkJRM2hDTzBGQlEwRTdPMEZCUlVFc2QwTkJRWGRETEZGQlFWRTdRVUZEYUVRN1FVRkRRU3hyUTBGQmEwTXNkMFJCUVhWQ08wRkJRM3BFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEUxQlFVMDdRVUZEVGl4aFFVRmhMSGRFUVVGMVFqdEJRVU53UXp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHBSVUZCYVVVc1RVRkJUVHM3UVVGRmRrVTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzZDBWQlFYZEZMRTFCUVUwN08wRkJSVGxGTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTFCUVUwN1FVRkRUanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSE5EUVVGelF5eFJRVUZSTzBGQlF6bERPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFZRVUZWTEdsRVFVRm5RanRCUVVNeFFpd3lRMEZCTWtNc2FVUkJRV2RDTzBGQlF6TkVMRFJEUVVFMFF5eFJRVUZSTzBGQlEzQkVPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVkU3UVVGRFVqdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1pVRkJaU3hwUkVGQlowSTdRVUZETDBJN08wRkJSVUVzYVVKQlFXbENMR2xFUVVGblFqdEJRVU5xUXl4VFFVRlRPenRCUVVWVUxEUkRRVUUwUXl4UlFVRlJPMEZCUTNCRU8wRkJRMEU3UVVGRFFUdEJRVU5CTEZGQlFWRXNVMEZCVXl4cFJFRkJaMEk3UVVGRGFrTTdRVUZEUVN3d1EwRkJNRU1zVVVGQlVUdEJRVU5zUkR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeFZRVUZWTEdsRVFVRm5RanRCUVVNeFFqczdRVUZGUVR0QlFVTkJMRGhEUVVFNFF5eFJRVUZSTzBGQlEzUkVPMEZCUTBFc1kwRkJZeXhwUkVGQlowSTdRVUZET1VJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRkZCUVZFN1FVRkRVanRCUVVOQkxEQkRRVUV3UXl4UlFVRlJPMEZCUTJ4RU8wRkJRMEU3UVVGRFFUczdRVUZGUVN4alFVRmpMR2xFUVVGblFqdEJRVU01UWp0QlFVTkJMRzFDUVVGdFFpeHBSRUZCWjBJN1FVRkRia003UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDNRa0ZCZDBJN1FVRkRlRUlzVDBGQlR6dEJRVU5RT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4UFFVRlBPenRCUVVWUU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJWVHRCUVVOV08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEhGRFFVRnhReXhSUVVGUk8wRkJRemRETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPenM3T3pzN08wRkROV1ZCT3p0QlFVVlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDFRMEZCZFVNc1VVRkJVVHRCUVVNdlF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETjBkblF6dEJRVU5KT3p0QlFVVTNRanRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2QwSkJRWGRDTEdkRFFVRm5ReXhIUVVGSE8wRkJRek5FTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxITkNRVUZ6UWl4dFJFRkJhMEk3UVVGRGVFTXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZQTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOUUxIRkRRVUZ4UXp0QlFVTnlRenRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFpRVUZaTEdsRVFVRm5RaXc0UTBGQk9FTXNhVVJCUVdkQ08wRkJRekZHTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnp0QlFVTllPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRc1UwRkJVeXd5UTBGQll6dEJRVU4yUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZDeFBRVUZQT3p0QlFVVlFPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUUxFOUJRVThzTWtOQlFXTTdRVUZEY2tJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3TzBGQlJVODdPMEZCUlVFN1FVRkRVRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVTg3UVVGRFVEczdRVUZGUVN4TlFVRk5MR2xFUVVGblFqdEJRVU4wUWpzN1FVRkZRU3hwUTBGQmFVTXNjMFJCUVhGQ0xIbEZRVUY1UlN4dFJFRkJhMEk3UVVGRGFrbzdPMEZCUlVFc2FVSkJRV2xDTERoRFFVRmhMRzlDUVVGdlFpeGxRVUZsTzBGQlEycEZMR2xDUVVGcFFpeHBSRUZCWjBJN08wRkJSV3BETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenM3UVVGRlNEdEJRVU5CT3pzN096czdPenM3T3pzN096czdPMEZEYmtwblJEczdRVUZGZWtNc05rSkJRVFpDTEhsRVFVRlhPMEZCUXk5RExHZENRVUZuUWl4elJVRkJkMEk3TzBGQlJYaERPMEZCUTBFc1ZVRkJWU3h6UlVGQmQwSTdRVUZEYkVNN1FVRkRRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFRIZENPenRCUVVWcVFqczdRVUZGYTBNN08wRkJSVTg3UVVGRFRUdEJRVU5HTzBGQlEwRTdRVUZEU2pzN096czdPenM3T3pzN096czdPenRCUTJKQk96dEJRVVY2UXl3MFFrRkJORUlzZVVSQlFWYzdRVUZET1VNc1owSkJRV2RDTEhORlFVRjNRanM3UVVGRmVFTTdRVUZEUVN4VlFVRlZMSE5GUVVGM1FqdEJRVU5zUXp0QlFVTkJPenM3T3pzN096czdPenM3T3pzN08wRkRVbWRFT3p0QlFVVjZReXcwUWtGQk5FSXNlVVJCUVZjN1FVRkRPVU1zWjBKQlFXZENMSEZGUVVGMVFqczdRVUZGZGtNN1FVRkRRU3hWUVVGVkxIRkZRVUYxUWp0QlFVTnFRenRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN1FVTlNORU03UVVGRFJEdEJRVWx1UWpzN1FVRkZlRUk3TzBGQlJVOHNkVUpCUVhWQ0xHOUVRVUZaTzBGQlF6RkRMRzlDUVVGdlFpeHRSRUZCVVRzN1FVRkZOVUk3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUUxFdEJRVXM3UVVGRFREczdRVUZGUVR0QlFVTkJPMEZCUTBFc2EwUkJRV3RFTEhGRVFVRlZPenRCUVVVMVJEdEJRVU5CTzBGQlEwRXNlVUpCUVhsQ0xIRkVRVUZWTzBGQlEyNURMSEZFUVVGeFJDeHhSRUZCVlR0QlFVTXZSRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFTeDVRa0ZCZVVJc2NVUkJRVlU3UVVGRGJrTTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFBRVUZQTzBGQlExQXNTMEZCU3p0QlFVTk1PMEZCUTBFN096czdPenM3T3pzN096czdPenM3UVVOeVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVTg3UVVGRFVEczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN096czdPenRCUTNSQ2NVTTdPMEZCUlRsQ096dEJRVVZRT3p0QlFVVlBPMEZCUTFBN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZDdzRRa0ZCT0VJN1FVRkRPVUlzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxGZEJRVmNzYlVSQlFXdENPMEZCUXpkQ096dEJRVVZCTzBGQlEwRXNWMEZCVnl4elJFRkJjVUk3UVVGRGFFTTdPMEZCUlVFN1FVRkRRU3hYUVVGWExHdEVRVUZwUWp0QlFVTTFRanM3UVVGRlFUdEJRVU5CTEZkQlFWY3NjVVJCUVc5Q08wRkJReTlDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHM3T3pzN096czdPenM3T3pzN096dEJRM0pIWjBRN08wRkJSWHBETERCQ1FVRXdRaXg1UkVGQlZ6dEJRVU0xUXl4blFrRkJaMElzYlVWQlFYRkNPenRCUVVWeVF6dEJRVU5CTEZWQlFWVXNiVVZCUVhGQ08wRkJReTlDTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5TWjBNN08wRkJSV2hET3p0QlFVVkJPMEZCUTBFc01FZEJRVEJITEZOQlFVazdPMEZCUlhaSE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzTUVOQlFUQkRMRk5CUVZNN1FVRkRia1E3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVTg3UVVGRFVEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNjVU5CUVhGRExGRkJRVkU3UVVGRE4wTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVODdRVUZEVUR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHOUNRVUZ2UWp0QlFVTndRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSEZEUVVGeFF5eFJRVUZSTzBGQlF6ZERPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hKUVVGSk8wRkJRMG83UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVFVGQlRUdEJRVU5PT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVazdRVUZEU2p0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNjME5CUVhORExGRkJRVkU3UVVGRE9VTTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTQ3hEUVVGRE96dEJRVVZOT3p0QlFVVkJPMEZCUTFBN1FVRkRRVHM3UVVGRlFTeFZRVUZWTEhGRFFVRlJMRzFDUVVGdFFpeHhRMEZCVVR0QlFVTTNRenM3UVVGRlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1NVRkJTVHRCUVVOS08wRkJRMEVzU1VGQlNUdEJRVU5LTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHhRMEZCY1VNc1VVRkJVVHRCUVVNM1F6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVlBPMEZCUTFBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2MwTkJRWE5ETEZGQlFWRTdRVUZET1VNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWUE8wRkJRMUE3UVVGRFFUczdRVUZGVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHhRMEZCY1VNc1VVRkJVVHRCUVVNM1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN1UwTnVZa0U3VTBGRFFUczdVMEZGUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHRUUVVOQk8xTkJRMEU3VTBGRFFUdFRRVU5CTzFOQlEwRTdVMEZEUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHM3VTBGRlFUdFRRVU5CT3p0VFFVVkJPMU5CUTBFN1UwRkRRVHM3T3pzN1ZVTjBRa0U3VlVGRFFUdFZRVU5CTzFWQlEwRTdWVUZEUVN4NVEwRkJlVU1zZDBOQlFYZERPMVZCUTJwR08xVkJRMEU3VlVGRFFUczdPenM3VlVOUVFUdFZRVU5CTzFWQlEwRTdWVUZEUVR0VlFVTkJMRWRCUVVjN1ZVRkRTRHRWUVVOQk8xVkJRMEVzUTBGQlF6czdPenM3VlVOUVJEczdPenM3VlVOQlFUdFZRVU5CTzFWQlEwRTdWVUZEUVN4MVJFRkJkVVFzYVVKQlFXbENPMVZCUTNoRk8xVkJRMEVzWjBSQlFXZEVMR0ZCUVdFN1ZVRkROMFE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEU1d0Q096dEJRVVZZTzBGQlExQXNXVUZCV1R0QlFVTmFMRmRCUVZjN1FVRkRXQ3hMUVVGTE8wRkJRMHdzUzBGQlN6dEJRVU5NTEZWQlFWVTdRVUZEVml4alFVRmpPMEZCUTJRc2FVSkJRV2xDTzBGQlEycENPenRCUVdGM1FqczdRVUZGYWtJN1FVRkRVQ3hqUVVGak8wRkJRMlFzY1VKQlFYRkNPMEZCUTNKQ0xIRkNRVUZ4UWp0QlFVTnlRaXhoUVVGaE8wRkJRMklzYjBKQlFXOUNPMEZCUTNCQ0xITkNRVUZ6UWp0QlFVTjBRaXhyUWtGQmEwSTdRVUZEYkVJc1owSkJRV2RDTzBGQlEyaENPenRCUVZjNFFqczdRVUZGZGtJN1FVRkRVQ3hqUVVGakxHOUZRVUZ0UWp0QlFVTnFReXhqUVVGak8wRkJRMlFzVlVGQlZUdEJRVU5XTEZWQlFWVTdRVUZEVml4aFFVRmhPMEZCUTJJc1owSkJRV2RDTzBGQlEyaENMR1ZCUVdVN1FVRkRaaXhsUVVGbE8wRkJRMllzWVVGQllUdEJRVU5pT3p0QlFVVnZRenRCUVVOWE96dEJRVTAzUXlJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXViMlJsWDIxdlpIVnNaWE12WkdWaFpHSmxaV1l2YkdsaUwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXNhV0l2WTI5dGNHOXVaVzUwTG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXNhV0l2WlhabGJuUnpMbXB6SWl3aWQyVmljR0ZqYXpvdkwycHBZbk12TGk5c2FXSXZhbWxpTG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXNhV0l2Y21WdVpHVnlaWEp6TDJOdmJXMWxiblF0Wld4bGJXVnVkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM0psYm1SbGNtVnljeTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk5cWFXSnpMeTR2YkdsaUwzSmxibVJsY21WeWN5OXVZWFJwZG1VdFpXeGxiV1Z1ZEM1cWN5SXNJbmRsWW5CaFkyczZMeTlxYVdKekx5NHZiR2xpTDNKbGJtUmxjbVZ5Y3k5d2IzSjBZV3d0Wld4bGJXVnVkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM0psYm1SbGNtVnljeTl5Wlc1a1pYSmxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM0psYm1SbGNtVnljeTl5YjI5MExXVnNaVzFsYm5RdWFuTWlMQ0ozWldKd1lXTnJPaTh2YW1saWN5OHVMMnhwWWk5eVpXNWtaWEpsY25NdmNtOXZkQzF1YjJSbExtcHpJaXdpZDJWaWNHRmphem92TDJwcFluTXZMaTlzYVdJdmNtVnVaR1Z5WlhKekwzUmxlSFF0Wld4bGJXVnVkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM1YwYVd4ekxtcHpJaXdpZDJWaWNHRmphem92TDJwcFluTXZkMlZpY0dGamF5OWliMjkwYzNSeVlYQWlMQ0ozWldKd1lXTnJPaTh2YW1saWN5OTNaV0p3WVdOckwzSjFiblJwYldVdlpHVm1hVzVsSUhCeWIzQmxjblI1SUdkbGRIUmxjbk1pTENKM1pXSndZV05yT2k4dmFtbGljeTkzWldKd1lXTnJMM0oxYm5ScGJXVXZaMnh2WW1Gc0lpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdmQyVmljR0ZqYXk5eWRXNTBhVzFsTDJoaGMwOTNibEJ5YjNCbGNuUjVJSE5vYjNKMGFHRnVaQ0lzSW5kbFluQmhZMnM2THk5cWFXSnpMM2RsWW5CaFkyc3ZjblZ1ZEdsdFpTOXRZV3RsSUc1aGJXVnpjR0ZqWlNCdlltcGxZM1FpTENKM1pXSndZV05yT2k4dmFtbGljeTh1TDJ4cFlpOXBibVJsZUM1cWN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCRGIzQjVjbWxuYUhRZ01qQXlNaUJYZVdGMGRDQkhjbVZsYm5kaGVWeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNibU52Ym5OMElIUm9hWE5IYkc5aVlXd2dQU0FvS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbktTQS9JSGRwYm1SdmR5QTZJR2RzYjJKaGJDa2dmSHdnZEdocGN6dGNibU52Ym5OMElFUkZRVVJDUlVWR1gxSkZSbDlOUVZCZlMwVlpJRDBnVTNsdFltOXNMbVp2Y2lnblFFQmtaV0ZrWW1WbFpsSmxaazFoY0NjcE8xeHVZMjl1YzNRZ1ZVNUpVVlZGWDBsRVgxTlpUVUpQVENBOUlGTjViV0p2YkM1bWIzSW9KMEJBWkdWaFpHSmxaV1pWYm1seGRXVkpSQ2NwTzF4dVkyOXVjM1FnY21WbVRXRndJRDBnS0hSb2FYTkhiRzlpWVd4YlJFVkJSRUpGUlVaZlVrVkdYMDFCVUY5TFJWbGRLU0EvSUhSb2FYTkhiRzlpWVd4YlJFVkJSRUpGUlVaZlVrVkdYMDFCVUY5TFJWbGRJRG9nYm1WM0lGZGxZV3ROWVhBb0tUdGNibU52Ym5OMElHbGtTR1ZzY0dWeWN5QTlJRnRkTzF4dVhHNXBaaUFvSVhSb2FYTkhiRzlpWVd4YlJFVkJSRUpGUlVaZlVrVkdYMDFCVUY5TFJWbGRLVnh1SUNCMGFHbHpSMnh2WW1Gc1cwUkZRVVJDUlVWR1gxSkZSbDlOUVZCZlMwVlpYU0E5SUhKbFprMWhjRHRjYmx4dWJHVjBJSFYxYVdSRGIzVnVkR1Z5SUQwZ01HNDdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFaGxiSEJsY2tadmNsWmhiSFZsS0haaGJIVmxLU0I3WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3TENCcGJDQTlJR2xrU0dWc2NHVnljeTVzWlc1bmRHZzdJR2tnUENCcGJEc2dhU3NyS1NCN1hHNGdJQ0FnYkdWMElIc2dhR1ZzY0dWeUxDQm5aVzVsY21GMGIzSWdmU0E5SUdsa1NHVnNjR1Z5YzF0cFhUdGNiaUFnSUNCcFppQW9hR1ZzY0dWeUtIWmhiSFZsS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUJuWlc1bGNtRjBiM0k3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXNTVkR2hwYm1kVWIwbEVLRjloY21jc0lGOWhiSEpsWVdSNVZtbHphWFJsWkNrZ2UxeHVJQ0JzWlhRZ1lYSm5JRDBnWDJGeVp6dGNiaUFnYVdZZ0tHRnlaeUJwYm5OMFlXNWpaVzltSUU1MWJXSmxjaUI4ZkNCaGNtY2dhVzV6ZEdGdVkyVnZaaUJUZEhKcGJtY2dmSHdnWVhKbklHbHVjM1JoYm1ObGIyWWdRbTl2YkdWaGJpbGNiaUFnSUNCaGNtY2dQU0JoY21jdWRtRnNkV1ZQWmlncE8xeHVYRzRnSUd4bGRDQjBlWEJsVDJZZ1BTQjBlWEJsYjJZZ1lYSm5PMXh1WEc0Z0lHbG1JQ2gwZVhCbFQyWWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHRnlaeUE5UFQwZ01Da2dlMXh1SUNBZ0lHbG1JQ2hQWW1wbFkzUXVhWE1vWVhKbkxDQXRNQ2twWEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMjUxYldKbGNqb3RNQ2M3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdKMjUxYldKbGNqb3JNQ2M3WEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3WlU5bUlEMDlQU0FuYzNsdFltOXNKeWxjYmlBZ0lDQnlaWFIxY200Z1lITjViV0p2YkRva2UyRnlaeTUwYjFOMGNtbHVaeWdwZldBN1hHNWNiaUFnYVdZZ0tHRnlaeUE5UFNCdWRXeHNJSHg4SUhSNWNHVlBaaUE5UFQwZ0oyNTFiV0psY2ljZ2ZId2dkSGx3WlU5bUlEMDlQU0FuWW05dmJHVmhiaWNnZkh3Z2RIbHdaVTltSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbFQyWWdQVDA5SUNkaWFXZHBiblFuS1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1ZQWmlBOVBUMGdKMjUxYldKbGNpY3BYRzRnSUNBZ0lDQnlaWFIxY200Z0tHRnlaeUE4SURBcElEOGdZRzUxYldKbGNqb2tlMkZ5WjMxZ0lEb2dZRzUxYldKbGNqb3JKSHRoY21kOVlEdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbFQyWWdQVDA5SUNkaWFXZHBiblFuSUNZbUlHRnlaeUE5UFQwZ01HNHBYRzRnSUNBZ0lDQnlaWFIxY200Z0oySnBaMmx1ZERvck1DYzdYRzVjYmlBZ0lDQnlaWFIxY200Z1lDUjdkSGx3WlU5bWZUb2tlMkZ5WjMxZ08xeHVJQ0I5WEc1Y2JpQWdiR1YwSUdsa1NHVnNjR1Z5SUQwZ0tHbGtTR1ZzY0dWeWN5NXNaVzVuZEdnZ1BpQXdJQ1ltSUdkbGRFaGxiSEJsY2tadmNsWmhiSFZsS0dGeVp5a3BPMXh1SUNCcFppQW9hV1JJWld4d1pYSXBYRzRnSUNBZ2NtVjBkWEp1SUdGdWVYUm9hVzVuVkc5SlJDaHBaRWhsYkhCbGNpaGhjbWNwS1R0Y2JseHVJQ0JwWmlBb1ZVNUpVVlZGWDBsRVgxTlpUVUpQVENCcGJpQmhjbWNnSmlZZ2RIbHdaVzltSUdGeVoxdFZUa2xSVlVWZlNVUmZVMWxOUWs5TVhTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUM4dklGQnlaWFpsYm5RZ2FXNW1hVzVwZEdVZ2NtVmpkWEp6YVc5dVhHNGdJQ0FnYVdZZ0tDRmZZV3h5WldGa2VWWnBjMmwwWldRZ2ZId2dJVjloYkhKbFlXUjVWbWx6YVhSbFpDNW9ZWE1vWVhKbktTa2dlMXh1SUNBZ0lDQWdiR1YwSUdGc2NtVmhaSGxXYVhOcGRHVmtJRDBnWDJGc2NtVmhaSGxXYVhOcGRHVmtJSHg4SUc1bGR5QlRaWFFvS1R0Y2JpQWdJQ0FnSUdGc2NtVmhaSGxXYVhOcGRHVmtMbUZrWkNoaGNtY3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnVlWFJvYVc1blZHOUpSQ2hoY21kYlZVNUpVVlZGWDBsRVgxTlpUVUpQVEYwb0tTd2dZV3h5WldGa2VWWnBjMmwwWldRcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2doY21WbVRXRndMbWhoY3loaGNtY3BLU0I3WEc0Z0lDQWdiR1YwSUd0bGVTQTlJR0FrZTNSNWNHVnZaaUJoY21kOU9pUjdLeXQxZFdsa1EyOTFiblJsY24xZ08xeHVJQ0FnSUhKbFprMWhjQzV6WlhRb1lYSm5MQ0JyWlhrcE8xeHVJQ0FnSUhKbGRIVnliaUJyWlhrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVm1UV0Z3TG1kbGRDaGhjbWNwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJrWldGa1ltVmxaaWdwSUh0Y2JpQWdiR1YwSUhCaGNuUnpJRDBnV3lCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUYwN1hHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnBiRHNnYVNzcktWeHVJQ0FnSUhCaGNuUnpMbkIxYzJnb1lXNTVkR2hwYm1kVWIwbEVLR0Z5WjNWdFpXNTBjMXRwWFNrcE8xeHVYRzRnSUhKbGRIVnliaUJ3WVhKMGN5NXFiMmx1S0NjNkp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxZV1JpWldWbVUyOXlkR1ZrS0NrZ2UxeHVJQ0JzWlhRZ2NHRnlkSE1nUFNCYklHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1hUdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BYRzRnSUNBZ2NHRnlkSE11Y0hWemFDaGhibmwwYUdsdVoxUnZTVVFvWVhKbmRXMWxiblJ6VzJsZEtTazdYRzVjYmlBZ2NtVjBkWEp1SUhCaGNuUnpMbk52Y25Rb0tTNXFiMmx1S0NjNkp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxibVZ5WVhSbFNVUkdiM0lvYUdWc2NHVnlMQ0JuWlc1bGNtRjBiM0lwSUh0Y2JpQWdhV1JJWld4d1pYSnpMbkIxYzJnb2V5Qm9aV3h3WlhJc0lHZGxibVZ5WVhSdmNpQjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ0YjNabFNVUkhaVzVsY21GMGIzSW9hR1ZzY0dWeUtTQjdYRzRnSUd4bGRDQnBibVJsZUNBOUlHbGtTR1ZzY0dWeWN5NW1hVzVrU1c1a1pYZ29LR2wwWlcwcElEMCtJQ2hwZEdWdExtaGxiSEJsY2lBOVBUMGdhR1ZzY0dWeUtTazdYRzRnSUdsbUlDaHBibVJsZUNBOElEQXBYRzRnSUNBZ2NtVjBkWEp1TzF4dVhHNGdJR2xrU0dWc2NHVnljeTV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPMXh1ZlZ4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3loa1pXRmtZbVZsWml3Z2UxeHVJQ0FuYVdSVGVXMG5PaUI3WEc0Z0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdWVTVKVVZWRlgwbEVYMU5aVFVKUFRDeGNiaUFnZlN4Y2JpQWdKM052Y25SbFpDYzZJSHRjYmlBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQmtaV0ZrWW1WbFpsTnZjblJsWkN4Y2JpQWdmU3hjYmlBZ0oyZGxibVZ5WVhSbFNVUkdiM0luT2lCN1hHNGdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQjBjblZsTEZ4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnWjJWdVpYSmhkR1ZKUkVadmNpeGNiaUFnZlN4Y2JpQWdKM0psYlc5MlpVbEVSMlZ1WlhKaGRHOXlKem9nZTF4dUlDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCMllXeDFaVG9nSUNBZ0lDQWdJSEpsYlc5MlpVbEVSMlZ1WlhKaGRHOXlMRnh1SUNCOUxGeHVmU2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pHVmhaR0psWldZN1hHNGlMQ0l2S2lCbmJHOWlZV3dnUW5WbVptVnlJQ292WEc1Y2JtbHRjRzl5ZENCN0lFVjJaVzUwUlcxcGRIUmxjaUI5SUdaeWIyMGdKeTR2WlhabGJuUnpMbXB6Snp0Y2JtbHRjRzl5ZENBcUlHRnpJRlYwYVd4eklDQWdJQ0FnSUdaeWIyMGdKeTR2ZFhScGJITXVhbk1uTzF4dWFXMXdiM0owSUh0Y2JpQWdhWE5LYVdKcGMyZ3NYRzRnSUhKbGMyOXNkbVZEYUdsc1pISmxiaXhjYmlBZ1kyOXVjM1J5ZFdOMFNtbGlMRnh1ZlNCbWNtOXRJQ2N1TDJwcFlpNXFjeWM3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JWVUVSQlZFVmZSVlpGVGxRZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnSjBCcWFXSnpMMk52YlhCdmJtVnVkQzlsZG1WdWRDOTFjR1JoZEdVbk8xeHVaWGh3YjNKMElHTnZibk4wSUZGVlJWVkZYMVZRUkVGVVJWOU5SVlJJVDBRZ0lDQWdJQ0FnUFNCVGVXMWliMnd1Wm05eUtDZEFhbWxpY3k5amIyMXdiMjVsYm5RdmNYVmxkV1ZWY0dSaGRHVW5LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQkdURlZUU0Y5VlVFUkJWRVZmVFVWVVNFOUVJQ0FnSUNBZ0lEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZZMjl0Y0c5dVpXNTBMMlpzZFhOb1ZYQmtZWFJsSnlrN1hHNWxlSEJ2Y25RZ1kyOXVjM1FnU1U1SlZGOU5SVlJJVDBRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUZONWJXSnZiQzVtYjNJb0owQnFhV0p6TDJOdmJYQnZibVZ1ZEM5ZlgybHVhWFFuS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JUUzBsUVgxTlVRVlJGWDFWUVJFRlVSVk1nSUNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDNOcmFYQlRkR0YwWlZWd1pHRjBaWE1uS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDNCbGJtUnBibWRUZEdGMFpWVndaR0YwWlNjcE8xeHVaWGh3YjNKMElHTnZibk4wSUV4QlUxUmZVa1ZPUkVWU1gxUkpUVVVnSUNBZ0lDQWdJQ0FnUFNCVGVXMWliMnd1Wm05eUtDZEFhbWxpY3k5amIyMXdiMjVsYm5RdmJHRnpkRkpsYm1SbGNsUnBiV1VuS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JRVWtWV1NVOVZVMTlUVkVGVVJTQWdJQ0FnSUNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDNCeVpYWnBiM1Z6VTNSaGRHVW5LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQkRRVkJVVlZKRlgxSkZSa1ZTUlU1RFJWOU5SVlJJVDBSVElEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZZMjl0Y0c5dVpXNTBMM0J5WlhacGIzVnpVM1JoZEdVbktUdGNibHh1WTI5dWMzUWdaV3hsYldWdWRFUmhkR0ZEWVdOb1pTQTlJRzVsZHlCWFpXRnJUV0Z3S0NrN1hHNWNibVoxYm1OMGFXOXVJR2x6Vm1Gc2FXUlRkR0YwWlU5aWFtVmpkQ2gyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNWNiaUFnYVdZZ0tFOWlhbVZqZEM1cGN5aDJZV3gxWlN3Z1RtRk9LU2xjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdhV1lnS0U5aWFtVmpkQzVwY3loMllXeDFaU3dnU1c1bWFXNXBkSGtwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCQ2IyOXNaV0Z1SUh4OElIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1RuVnRZbVZ5SUh4OElIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1UzUnlhVzVuS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JzWlhRZ2RIbHdaVTltSUQwZ2RIbHdaVzltSUhaaGJIVmxPMXh1SUNCcFppQW9kSGx3WlU5bUlEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxUMllnUFQwOUlDZHVkVzFpWlhJbklIeDhJSFI1Y0dWUFppQTlQVDBnSjJKdmIyeGxZVzRuS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdRblZtWm1WeUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQkNkV1ptWlhJdWFYTkNkV1ptWlhJb2RtRnNkV1VwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFTnZiWEJ2Ym1WdWRDQmxlSFJsYm1SeklFVjJaVzUwUlcxcGRIUmxjaUI3WEc0Z0lITjBZWFJwWXlCVlVFUkJWRVZmUlZaRlRsUWdQU0JWVUVSQlZFVmZSVlpGVGxRN1hHNWNiaUFnVzFGVlJWVkZYMVZRUkVGVVJWOU5SVlJJVDBSZEtDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdselcxQkZUa1JKVGtkZlUxUkJWRVZmVlZCRVFWUkZYU2xjYmlBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lIUm9hWE5iVUVWT1JFbE9SMTlUVkVGVVJWOVZVRVJCVkVWZElEMGdVSEp2YldselpTNXlaWE52YkhabEtDazdYRzRnSUNBZ2RHaHBjMXRRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlYwdWRHaGxiaWgwYUdselcwWk1WVk5JWDFWUVJFRlVSVjlOUlZSSVQwUmRMbUpwYm1Rb2RHaHBjeWtwTzF4dUlDQjlYRzVjYmlBZ1cwWk1WVk5JWDFWUVJFRlVSVjlOUlZSSVQwUmRLQ2tnZTF4dUlDQWdJQzh2SUZkaGN5QjBhR1VnYzNSaGRHVWdkWEJrWVhSbElHTmhibU5sYkd4bFpEOWNiaUFnSUNCcFppQW9JWFJvYVhOYlVFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVmRLVnh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVYRzRnSUNBZ2RHaHBjeTVsYldsMEtGVlFSRUZVUlY5RlZrVk9WQ2s3WEc1Y2JpQWdJQ0IwYUdselcxQkZUa1JKVGtkZlUxUkJWRVZmVlZCRVFWUkZYU0E5SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JiU1U1SlZGOU5SVlJJVDBSZEtDa2dlMXh1SUNBZ0lIUm9hWE5iVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUWFNBOUlHWmhiSE5sTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9YMnBwWWlrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0F2THlCQ2FXNWtJR0ZzYkNCamJHRnpjeUJ0WlhSb2IyUnpJSFJ2SUZ3aWRHaHBjMXdpWEc0Z0lDQWdWWFJwYkhNdVltbHVaRTFsZEdodlpITXVZMkZzYkNoMGFHbHpMQ0IwYUdsekxtTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU2s3WEc1Y2JpQWdJQ0JzWlhRZ2FtbGlJRDBnWDJwcFlpQjhmQ0I3ZlR0Y2JseHVJQ0FnSUdOdmJuTjBJR055WldGMFpVNWxkMU4wWVhSbElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJR3h2WTJGc1UzUmhkR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjNoNUtHeHZZMkZzVTNSaGRHVXNJSHRjYmlBZ0lDQWdJQ0FnWjJWME9pQW9kR0Z5WjJWMExDQndjbTl3VG1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFJiY0hKdmNFNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnpaWFE2SUNoMFlYSm5aWFFzSUhCeWIzQk9ZVzFsTENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCamRYSnlaVzUwVm1Gc2RXVWdQU0IwWVhKblpYUmJjSEp2Y0U1aGJXVmRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFZtRnNkV1VnUFQwOUlIWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTmJVMHRKVUY5VFZFRlVSVjlWVUVSQlZFVlRYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5iVVZWRlZVVmZWVkJFUVZSRlgwMUZWRWhQUkYwb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRnR3Y205d1RtRnRaVjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VTNSaGRHVlZjR1JoZEdWa0tIQnliM0JPWVcxbExDQjJZV3gxWlN3Z1kzVnljbVZ1ZEZaaGJIVmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUd4bGRDQndjbTl3Y3lBZ0lDQWdJQ0E5SUU5aWFtVmpkQzVoYzNOcFoyNG9UMkpxWldOMExtTnlaV0YwWlNodWRXeHNLU3dnYW1saUxuQnliM0J6SUh4OElIdDlLVHRjYmlBZ0lDQnNaWFFnWDJ4dlkyRnNVM1JoZEdVZ1BTQmpjbVZoZEdWT1pYZFRkR0YwWlNncE8xeHVYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1vZEdocGN5d2dlMXh1SUNBZ0lDQWdXMU5MU1ZCZlUxUkJWRVZmVlZCRVFWUkZVMTA2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCYlVFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVmRPaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnVzB4QlUxUmZVa1ZPUkVWU1gxUkpUVVZkT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSUNBZ0lDQWdJRlYwYVd4ekxtNXZkeWdwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUZ0RFFWQlVWVkpGWDFKRlJrVlNSVTVEUlY5TlJWUklUMFJUWFRvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0I3ZlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmFXUW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdhbWxpTG1sa0xGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHdjbTl3Y3ljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnY0hKdmNITXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk5vYVd4a2NtVnVKem9nZTF4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQnFhV0l1WTJocGJHUnlaVzRnZkh3Z1cxMHNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk52Ym5SbGVIUW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHcHBZaTVqYjI1MFpYaDBJSHg4SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0ozTjBZWFJsSnpvZ2UxeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdkbGREb2dJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZiRzlqWVd4VGRHRjBaVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBPaUFnSUNBZ0lDQWdJQ0FvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselZtRnNhV1JUZEdGMFpVOWlhbVZqZENoMllXeDFaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0JKYm5aaGJHbGtJSFpoYkhWbElHWnZjaUJjSW5Sb2FYTXVjM1JoZEdWY0lqb2dYQ0lrZTNaaGJIVmxmVndpTGlCUWNtOTJhV1JsWkNCY0luTjBZWFJsWENJZ2JYVnpkQ0JpWlNCaGJpQnBkR1Z5WVdKc1pTQnZZbXBsWTNRdVlDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLRjlzYjJOaGJGTjBZWFJsTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtHTm9hV3hrY21WdUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVZEYUdsc1pISmxiaTVqWVd4c0tIUm9hWE1zSUdOb2FXeGtjbVZ1S1R0Y2JpQWdmVnh1WEc0Z0lHbHpTbWxpS0haaGJIVmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHbHpTbWxpYVhOb0tIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wY25WamRFcHBZaWgyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyNXpkSEoxWTNSS2FXSW9kbUZzZFdVcE8xeHVJQ0I5WEc1Y2JpQWdjSFZ6YUZKbGJtUmxjaWh5Wlc1a1pYSlNaWE4xYkhRcElIdGNiaUFnSUNCMGFHbHpMbVZ0YVhRb1ZWQkVRVlJGWDBWV1JVNVVMQ0J5Wlc1a1pYSlNaWE4xYkhRcE8xeHVJQ0I5WEc1Y2JpQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJRzl1VUhKdmNGVndaR0YwWldRb2NISnZjRTVoYldVc0lHNWxkMVpoYkhWbExDQnZiR1JXWVd4MVpTa2dlMXh1SUNCOVhHNWNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUc5dVUzUmhkR1ZWY0dSaGRHVmtLSEJ5YjNCT1lXMWxMQ0J1WlhkV1lXeDFaU3dnYjJ4a1ZtRnNkV1VwSUh0Y2JpQWdmVnh1WEc0Z0lHTmhjSFIxY21WU1pXWmxjbVZ1WTJVb2JtRnRaU3dnYVc1MFpYSmpaWEIwYjNKRFlXeHNZbUZqYXlrZ2UxeHVJQ0FnSUd4bGRDQnRaWFJvYjJRZ1BTQjBhR2x6VzBOQlVGUlZVa1ZmVWtWR1JWSkZUa05GWDAxRlZFaFBSRk5kVzI1aGJXVmRPMXh1SUNBZ0lHbG1JQ2h0WlhSb2IyUXBYRzRnSUNBZ0lDQnlaWFIxY200Z2JXVjBhRzlrTzF4dVhHNGdJQ0FnYldWMGFHOWtJRDBnS0Y5eVpXWXNJSEJ5WlhacGIzVnpVbVZtS1NBOVBpQjdYRzRnSUNBZ0lDQnNaWFFnY21WbUlEMGdYM0psWmp0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnBiblJsY21ObGNIUnZja05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUNBZ0lDQnlaV1lnUFNCcGJuUmxjbU5sY0hSdmNrTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5d2djbVZtTENCd2NtVjJhVzkxYzFKbFppazdYRzVjYmlBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektIUm9hWE1zSUh0Y2JpQWdJQ0FnSUNBZ1cyNWhiV1ZkT2lCN1hHNGdJQ0FnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdjbVZtTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdhVzUwWlhKalpYQjBiM0pEWVd4c1ltRmpheUFoUFQwZ0oyWjFibU4wYVc5dUp5bGNiaUFnSUNBZ0lIUm9hWE5iUTBGUVZGVlNSVjlTUlVaRlVrVk9RMFZmVFVWVVNFOUVVMTBnUFNCdFpYUm9iMlE3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiV1YwYUc5a08xeHVJQ0I5WEc1Y2JpQWdabTl5WTJWVmNHUmhkR1VvS1NCN1hHNGdJQ0FnZEdocGMxdFJWVVZWUlY5VlVFUkJWRVZmVFVWVVNFOUVYU2dwTzF4dUlDQjlYRzVjYmlBZ1oyVjBVM1JoZEdVb2NISnZjR1Z5ZEhsUVlYUm9MQ0JrWldaaGRXeDBWbUZzZFdVcElIdGNiaUFnSUNCc1pYUWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxPMXh1SUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOMFlYUmxPMXh1WEc0Z0lDQWdhV1lnS0ZWMGFXeHpMbWx1YzNSaGJtTmxUMllvY0hKdmNHVnlkSGxRWVhSb0xDQW5iMkpxWldOMEp5a3BJSHRjYmlBZ0lDQWdJR3hsZENCclpYbHpJQ0FnSUNBZ0lDQTlJRTlpYW1WamRDNXJaWGx6S0hCeWIzQmxjblI1VUdGMGFDa3VZMjl1WTJGMEtFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9jSEp2Y0dWeWRIbFFZWFJvS1NrN1hHNGdJQ0FnSUNCc1pYUWdabWx1WVd4VGRHRjBaU0FnUFNCN2ZUdGNibHh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnJaWGtnUFNCclpYbHpXMmxkTzF4dUlDQWdJQ0FnSUNCc1pYUWdXeUIyWVd4MVpTd2diR0Z6ZEZCaGNuUWdYU0E5SUZWMGFXeHpMbVpsZEdOb1JHVmxjRkJ5YjNCbGNuUjVLSE4wWVhSbExDQnJaWGtzSUhCeWIzQmxjblI1VUdGMGFGdHJaWGxkTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhjM1JRWVhKMElEMDlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzVjYmlBZ0lDQWdJQ0FnWm1sdVlXeFRkR0YwWlZ0c1lYTjBVR0Z5ZEYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdacGJtRnNVM1JoZEdVN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlZkR2xzY3k1bVpYUmphRVJsWlhCUWNtOXdaWEowZVNoemRHRjBaU3dnY0hKdmNHVnlkSGxRWVhSb0xDQmtaV1poZFd4MFZtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhObGRGTjBZWFJsS0haaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0NGcGMxWmhiR2xrVTNSaGRHVlBZbXBsWTNRb2RtRnNkV1VwS1Z4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loZ1NXNTJZV3hwWkNCMllXeDFaU0JtYjNJZ1hDSjBhR2x6TG5ObGRGTjBZWFJsWENJNklGd2lKSHQyWVd4MVpYMWNJaTRnVUhKdmRtbGtaV1FnWENKemRHRjBaVndpSUcxMWMzUWdZbVVnWVc0Z2FYUmxjbUZpYkdVZ2IySnFaV04wTG1BcE8xeHVYRzRnSUNBZ1QySnFaV04wTG1GemMybG5iaWgwYUdsekxuTjBZWFJsTENCMllXeDFaU2s3WEc0Z0lIMWNibHh1SUNCelpYUlRkR0YwWlZCaGMzTnBkbVVvZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvSVdselZtRnNhV1JUZEdGMFpVOWlhbVZqZENoMllXeDFaU2twWEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0dCSmJuWmhiR2xrSUhaaGJIVmxJR1p2Y2lCY0luUm9hWE11YzJWMFUzUmhkR1ZRWVhOemFYWmxYQ0k2SUZ3aUpIdDJZV3gxWlgxY0lpNGdVSEp2ZG1sa1pXUWdYQ0p6ZEdGMFpWd2lJRzExYzNRZ1ltVWdZVzRnYVhSbGNtRmliR1VnYjJKcVpXTjBMbUFwTzF4dVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lIUm9hWE5iVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtIUm9hWE11YzNSaGRHVXNJSFpoYkhWbEtUdGNiaUFnSUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ2RHaHBjMXRUUzBsUVgxTlVRVlJGWDFWUVJFRlVSVk5kSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYzJodmRXeGtWWEJrWVhSbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNWNiaUFnWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1emRHRjBaVHRjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NWpiMjUwWlhoME8xeHVJQ0FnSUdSbGJHVjBaU0IwYUdselcwTkJVRlJWVWtWZlVrVkdSVkpGVGtORlgwMUZWRWhQUkZOZE8xeHVJQ0FnSUhSb2FYTXVZMnhsWVhKQmJHeEVaV0p2ZFc1alpYTW9LVHRjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjbGRoYVhScGJtY29LU0I3WEc0Z0lIMWNibHh1SUNCeVpXNWtaWElvWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMmhwYkdSeVpXNDdYRzRnSUgxY2JseHVJQ0IxY0dSaGRHVmtLQ2tnZTF4dUlDQjlYRzVjYmlBZ1kyOXRZbWx1WlZkcGRHZ29jMlZ3TENBdUxpNWhjbWR6S1NCN1hHNGdJQ0FnYkdWMElHWnBibUZzUVhKbmN5QTlJRzVsZHlCVFpYUW9LVHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2FXd2dQU0JoY21kekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR3hsZENCaGNtY2dQU0JoY21kelcybGRPMXh1SUNBZ0lDQWdhV1lnS0NGaGNtY3BYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1WEc0Z0lDQWdJQ0JwWmlBb1ZYUnBiSE11YVc1emRHRnVZMlZQWmloaGNtY3NJQ2R6ZEhKcGJtY25LU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkbUZzZFdWeklEMGdZWEpuTG5Od2JHbDBLSE5sY0NrdVptbHNkR1Z5S0ZWMGFXeHpMbWx6VG05MFJXMXdkSGtwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYVd3Z1BTQjJZV3gxWlhNdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0JtYVc1aGJFRnlaM011WVdSa0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dGeVp5a3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsY3lBOUlHRnlaeTVtYVd4MFpYSW9LSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hWWFJwYkhNdWFXNXpkR0Z1WTJWUFppaDJZV3gxWlN3Z0ozTjBjbWx1WnljcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRlYwYVd4ekxtbHpUbTkwUlcxd2RIa29kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYVd3Z1BTQjJZV3gxWlhNdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0JtYVc1aGJFRnlaM011WVdSa0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaFZkR2xzY3k1cGJuTjBZVzVqWlU5bUtHRnlaeXdnSjI5aWFtVmpkQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JyWlhseklEMGdUMkpxWldOMExtdGxlWE1vWVhKbktUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR3RsZVNBZ0lEMGdhMlY1YzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCaGNtZGJhMlY1WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1FYSm5jeTVrWld4bGRHVW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1FYSm5jeTVoWkdRb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQkJjbkpoZVM1bWNtOXRLR1pwYm1Gc1FYSm5jeWt1YW05cGJpaHpaWEFnZkh3Z0p5Y3BPMXh1SUNCOVhHNWNiaUFnWTJ4aGMzTmxjeWd1TGk1aGNtZHpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dFltbHVaVmRwZEdnb0p5QW5MQ0F1TGk1aGNtZHpLVHRjYmlBZ2ZWeHVYRzRnSUdWNGRISmhZM1JEYUdsc1pISmxiaWhmY0dGMGRHVnlibk1zSUdOb2FXeGtjbVZ1S1NCN1hHNGdJQ0FnYkdWMElHVjRkSEpoWTNSbFpDQTlJSHQ5TzF4dUlDQWdJR3hsZENCd1lYUjBaWEp1Y3lBZ1BTQmZjR0YwZEdWeWJuTTdYRzRnSUNBZ2JHVjBJR2x6UVhKeVlYa2dJQ0E5SUVGeWNtRjVMbWx6UVhKeVlYa29jR0YwZEdWeWJuTXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2FYTk5ZWFJqYUNBOUlDaHFhV0lwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0JxYVdKVWVYQmxJRDBnYW1saUxsUjVjR1U3WEc0Z0lDQWdJQ0JwWmlBb1ZYUnBiSE11YVc1emRHRnVZMlZQWmlocWFXSlVlWEJsTENBbmMzUnlhVzVuSnlrcFhHNGdJQ0FnSUNBZ0lHcHBZbFI1Y0dVZ1BTQnFhV0pVZVhCbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaHBjMEZ5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUhCaGRIUmxjbTV6TG14bGJtZDBhRHNnYVNBOElHbHNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NHRjBkR1Z5YmlBOUlIQmhkSFJsY201elcybGRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaFZkR2xzY3k1cGJuTjBZVzVqWlU5bUtIQmhkSFJsY200c0lDZHpkSEpwYm1jbktTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRIUmxjbTRnUFNCd1lYUjBaWEp1TG5SdlRHOTNaWEpEWVhObEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hbWxpVkhsd1pTQTlQVDBnY0dGMGRHVnliaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWGgwY21GamRHVmtXM0JoZEhSbGNtNWRJRDBnYW1saU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektIQmhkSFJsY201ektUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR3RsZVNBZ0lDQWdQU0JyWlhselcybGRPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQndZWFIwWlhKdUlEMGdjR0YwZEdWeWJuTmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRlYwYVd4ekxtbHVjM1JoYm1ObFQyWW9jR0YwZEdWeWJpd2dVbVZuUlhod0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhCaGRIUmxjbTR1ZEdWemRDaHFhV0pVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hWZEdsc2N5NXBibk4wWVc1alpVOW1LSEJoZEhSbGNtNHNJQ2R6ZEhKcGJtY25LU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlDaHdZWFIwWlhKdUxuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlHcHBZbFI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJQ2h3WVhSMFpYSnVJRDA5UFNCcWFXSlVlWEJsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEhKaFkzUmxaRnRyWlhsZElEMGdhbWxpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWlhoMGNtRmpkR1ZrTG5KbGJXRnBibWx1WjBOb2FXeGtjbVZ1SUQwZ1kyaHBiR1J5Wlc0dVptbHNkR1Z5S0NocWFXSXBJRDArSUNGcGMwMWhkR05vS0dwcFlpa3BPMXh1SUNBZ0lISmxkSFZ5YmlCbGVIUnlZV04wWldRN1hHNGdJSDFjYmx4dUlDQmtaV0p2ZFc1alpTaG1kVzVqTENCMGFXMWxMQ0JmYVdRcElIdGNiaUFnSUNCamIyNXpkQ0JqYkdWaGNsQmxibVJwYm1kVWFXMWxiM1YwSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tIQmxibVJwYm1kVWFXMWxjaUFtSmlCd1pXNWthVzVuVkdsdFpYSXVkR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2NHVnVaR2x1WjFScGJXVnlMblJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0J3Wlc1a2FXNW5WR2x0WlhJdWRHbHRaVzkxZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFpoY2lCcFpDQTlJQ2doWDJsa0tTQS9JQ2duSnlBcklHWjFibU1wSURvZ1gybGtPMXh1SUNBZ0lHbG1JQ2doZEdocGN5NWtaV0p2ZFc1alpWUnBiV1Z5Y3lrZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJvYVhNc0lDZGtaV0p2ZFc1alpWUnBiV1Z5Y3ljc0lIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnZTMwc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdjR1Z1WkdsdVoxUnBiV1Z5SUQwZ2RHaHBjeTVrWldKdmRXNWpaVlJwYldWeWMxdHBaRjA3WEc0Z0lDQWdhV1lnS0NGd1pXNWthVzVuVkdsdFpYSXBYRzRnSUNBZ0lDQndaVzVrYVc1blZHbHRaWElnUFNCMGFHbHpMbVJsWW05MWJtTmxWR2x0WlhKelcybGtYU0E5SUh0OU8xeHVYRzRnSUNBZ2NHVnVaR2x1WjFScGJXVnlMbVoxYm1NZ1BTQm1kVzVqTzF4dUlDQWdJR05zWldGeVVHVnVaR2x1WjFScGJXVnZkWFFvS1R0Y2JseHVJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdjR1Z1WkdsdVoxUnBiV1Z5TG5CeWIyMXBjMlU3WEc0Z0lDQWdhV1lnS0NGd2NtOXRhWE5sSUh4OElDRndjbTl0YVhObExuQmxibVJwYm1jb0tTa2dlMXh1SUNBZ0lDQWdiR1YwSUhOMFlYUjFjeUE5SUNkd1pXNWthVzVuSnp0Y2JpQWdJQ0FnSUd4bGRDQnlaWE52YkhabE8xeHVYRzRnSUNBZ0lDQndjbTl0YVhObElEMGdjR1Z1WkdsdVoxUnBiV1Z5TG5CeWIyMXBjMlVnUFNCdVpYY2dVSEp2YldselpTZ29YM0psYzI5c2RtVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNBOUlGOXlaWE52YkhabE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVjbVZ6YjJ4MlpTQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUjFjeUFoUFQwZ0ozQmxibVJwYm1jbktWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0J6ZEdGMGRYTWdQU0FuWm5Wc1ptbHNiR1ZrSnp0Y2JpQWdJQ0FnSUNBZ1kyeGxZWEpRWlc1a2FXNW5WR2x0Wlc5MWRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmxZbTkxYm1ObFZHbHRaWEp6VzJsa1hTQTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ3Wlc1a2FXNW5WR2x0WlhJdVpuVnVZeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWFFnUFNCd1pXNWthVzVuVkdsdFpYSXVablZ1WXk1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYUWdhVzV6ZEdGdVkyVnZaaUJRY205dGFYTmxJSHg4SUNoeVpYUWdKaVlnZEhsd1pXOW1JSEpsZEM1MGFHVnVJRDA5UFNBblpuVnVZM1JwYjI0bktTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRDNTBhR1Z1S0NoMllXeDFaU2tnUFQ0Z2NtVnpiMngyWlNoMllXeDFaU2twTzF4dUlDQWdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVjBLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVZMkZ1WTJWc0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnpkR0YwZFhNZ1BTQW5jbVZxWldOMFpXUW5PMXh1SUNBZ0lDQWdJQ0JqYkdWaGNsQmxibVJwYm1kVWFXMWxiM1YwS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWaWIzVnVZMlZVYVcxbGNuTmJhV1JkSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCd2NtOXRhWE5sTG5KbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lIQnliMjFwYzJVdWFYTlFaVzVrYVc1bklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tITjBZWFIxY3lBOVBUMGdKM0JsYm1ScGJtY25LVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjR1Z1WkdsdVoxUnBiV1Z5TG5ScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWMEtIQnliMjFwYzJVdWNtVnpiMngyWlN3Z0tIUnBiV1VnUFQwZ2JuVnNiQ2tnUHlBeU5UQWdPaUIwYVcxbEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCd2NtOXRhWE5sTzF4dUlDQjlYRzVjYmlBZ1kyeGxZWEpFWldKdmRXNWpaU2hwWkNrZ2UxeHVJQ0FnSUhaaGNpQndaVzVrYVc1blZHbHRaWElnUFNCMGFHbHpMbVJsWW05MWJtTmxWR2x0WlhKelcybGtYVHRjYmlBZ0lDQnBaaUFvY0dWdVpHbHVaMVJwYldWeUlEMDlJRzUxYkd3cFhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0JwWmlBb2NHVnVaR2x1WjFScGJXVnlMblJwYldWdmRYUXBYRzRnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvY0dWdVpHbHVaMVJwYldWeUxuUnBiV1Z2ZFhRcE8xeHVYRzRnSUNBZ2FXWWdLSEJsYm1ScGJtZFVhVzFsY2k1d2NtOXRhWE5sS1Z4dUlDQWdJQ0FnY0dWdVpHbHVaMVJwYldWeUxuQnliMjFwYzJVdVkyRnVZMlZzS0NrN1hHNGdJSDFjYmx4dUlDQmpiR1ZoY2tGc2JFUmxZbTkxYm1ObGN5Z3BJSHRjYmlBZ0lDQnNaWFFnWkdWaWIzVnVZMlZVYVcxbGNuTWdJRDBnZEdocGN5NWtaV0p2ZFc1alpWUnBiV1Z5Y3lCOGZDQjdmVHRjYmlBZ0lDQnNaWFFnYVdSeklDQWdJQ0FnSUNBZ0lDQWdJRDBnVDJKcVpXTjBMbXRsZVhNb1pHVmliM1Z1WTJWVWFXMWxjbk1wTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2FXUnpMbXhsYm1kMGFEc2dhU0E4SUdsc095QnBLeXNwWEc0Z0lDQWdJQ0IwYUdsekxtTnNaV0Z5UkdWaWIzVnVZMlVvYVdSelcybGRLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFVnNaVzFsYm5SRVlYUmhLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQnNaWFFnWkdGMFlTQTlJR1ZzWlcxbGJuUkVZWFJoUTJGamFHVXVaMlYwS0dWc1pXMWxiblFwTzF4dUlDQWdJR2xtSUNnaFpHRjBZU2tnZTF4dUlDQWdJQ0FnWkdGMFlTQTlJSHQ5TzF4dUlDQWdJQ0FnWld4bGJXVnVkRVJoZEdGRFlXTm9aUzV6WlhRb1pXeGxiV1Z1ZEN3Z1pHRjBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lIMWNibjFjYmlJc0ltTnZibk4wSUVWV1JVNVVYMHhKVTFSRlRrVlNVeUE5SUZONWJXSnZiQzVtYjNJb0owQnFhV0p6TDJWMlpXNTBjeTlzYVhOMFpXNWxjbk1uS1R0Y2JseHVaWGh3YjNKMElHTnNZWE56SUVWMlpXNTBSVzFwZEhSbGNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0hSb2FYTXNJSHRjYmlBZ0lDQWdJRnRGVmtWT1ZGOU1TVk5VUlU1RlVsTmRPaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdibVYzSUUxaGNDZ3BMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdGa1pFeHBjM1JsYm1WeUtHVjJaVzUwVG1GdFpTd2diR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR3hwYzNSbGJtVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25SWFpsYm5RZ2JHbHpkR1Z1WlhJZ2JYVnpkQ0JpWlNCaElHMWxkR2h2WkNjcE8xeHVYRzRnSUNBZ2JHVjBJR1YyWlc1MFRXRndJQ0E5SUhSb2FYTmJSVlpGVGxSZlRFbFRWRVZPUlZKVFhUdGNiaUFnSUNCc1pYUWdjMk52Y0dVZ0lDQWdJRDBnWlhabGJuUk5ZWEF1WjJWMEtHVjJaVzUwVG1GdFpTazdYRzVjYmlBZ0lDQnBaaUFvSVhOamIzQmxLU0I3WEc0Z0lDQWdJQ0J6WTI5d1pTQTlJRnRkTzF4dUlDQWdJQ0FnWlhabGJuUk5ZWEF1YzJWMEtHVjJaVzUwVG1GdFpTd2djMk52Y0dVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOamIzQmxMbkIxYzJnb2JHbHpkR1Z1WlhJcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0J5WlcxdmRtVk1hWE4wWlc1bGNpaGxkbVZ1ZEU1aGJXVXNJR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJzYVhOMFpXNWxjaUFoUFQwZ0oyWjFibU4wYVc5dUp5bGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMFYyWlc1MElHeHBjM1JsYm1WeUlHMTFjM1FnWW1VZ1lTQnRaWFJvYjJRbktUdGNibHh1SUNBZ0lHeGxkQ0JsZG1WdWRFMWhjQ0FnUFNCMGFHbHpXMFZXUlU1VVgweEpVMVJGVGtWU1UxMDdYRzRnSUNBZ2JHVjBJSE5qYjNCbElDQWdJQ0E5SUdWMlpXNTBUV0Z3TG1kbGRDaGxkbVZ1ZEU1aGJXVXBPMXh1SUNBZ0lHbG1JQ2doYzJOdmNHVXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQWdJR3hsZENCcGJtUmxlQ0E5SUhOamIzQmxMbWx1WkdWNFQyWW9iR2x6ZEdWdVpYSXBPMXh1SUNBZ0lHbG1JQ2hwYm1SbGVDQStQU0F3S1Z4dUlDQWdJQ0FnYzJOdmNHVXVjM0JzYVdObEtHbHVaR1Y0TENBeEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnY21WdGIzWmxRV3hzVEdsemRHVnVaWEp6S0dWMlpXNTBUbUZ0WlNrZ2UxeHVJQ0FnSUd4bGRDQmxkbVZ1ZEUxaGNDQWdQU0IwYUdselcwVldSVTVVWDB4SlUxUkZUa1ZTVTEwN1hHNGdJQ0FnYVdZZ0tDRmxkbVZ1ZEUxaGNDNW9ZWE1vWlhabGJuUk9ZVzFsS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVYRzRnSUNBZ1pYWmxiblJOWVhBdWMyVjBLR1YyWlc1MFRtRnRaU3dnVzEwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0JsYldsMEtHVjJaVzUwVG1GdFpTd2dMaTR1WVhKbmN5a2dlMXh1SUNBZ0lHeGxkQ0JsZG1WdWRFMWhjQ0FnUFNCMGFHbHpXMFZXUlU1VVgweEpVMVJGVGtWU1UxMDdYRzRnSUNBZ2JHVjBJSE5qYjNCbElDQWdJQ0E5SUdWMlpXNTBUV0Z3TG1kbGRDaGxkbVZ1ZEU1aGJXVXBPMXh1SUNBZ0lHbG1JQ2doYzJOdmNHVWdmSHdnYzJOdmNHVXViR1Z1WjNSb0lEMDlQU0F3S1Z4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUdsc0lEMGdjMk52Y0dVdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdiR1YwSUdWMlpXNTBRMkZzYkdKaFkyc2dQU0J6WTI5d1pWdHBYVHRjYmlBZ0lDQWdJR1YyWlc1MFEyRnNiR0poWTJzdVlYQndiSGtvZEdocGN5d2dZWEpuY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQnZibU5sS0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCc1pYUWdablZ1WXlBOUlDZ3VMaTVoY21kektTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxtOW1aaWhsZG1WdWRFNWhiV1VzSUdaMWJtTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHeHBjM1JsYm1WeUtDNHVMbUZ5WjNNcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXZiaWhsZG1WdWRFNWhiV1VzSUdaMWJtTXBPMXh1SUNCOVhHNWNiaUFnYjI0b1pYWmxiblJPWVcxbExDQnNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZrWkV4cGMzUmxibVZ5S0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0I5WEc1Y2JpQWdiMlptS0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lobGRtVnVkRTVoYldVc0lHeHBjM1JsYm1WeUtUdGNiaUFnZlZ4dVhHNGdJR1YyWlc1MFRtRnRaWE1vS1NCN1hHNGdJQ0FnY21WMGRYSnVJRUZ5Y21GNUxtWnliMjBvZEdocGMxdEZWa1ZPVkY5TVNWTlVSVTVGVWxOZExtdGxlWE1vS1NrN1hHNGdJSDFjYmx4dUlDQnNhWE4wWlc1bGNrTnZkVzUwS0dWMlpXNTBUbUZ0WlNrZ2UxeHVJQ0FnSUd4bGRDQmxkbVZ1ZEUxaGNDQWdQU0IwYUdselcwVldSVTVVWDB4SlUxUkZUa1ZTVTEwN1hHNGdJQ0FnYkdWMElITmpiM0JsSUNBZ0lDQTlJR1YyWlc1MFRXRndMbWRsZENobGRtVnVkRTVoYldVcE8xeHVJQ0FnSUdsbUlDZ2hjMk52Y0dVcFhHNGdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ6WTI5d1pTNXNaVzVuZEdnN1hHNGdJSDFjYmx4dUlDQnNhWE4wWlc1bGNuTW9aWFpsYm5ST1lXMWxLU0I3WEc0Z0lDQWdiR1YwSUdWMlpXNTBUV0Z3SUNBOUlIUm9hWE5iUlZaRlRsUmZURWxUVkVWT1JWSlRYVHRjYmlBZ0lDQnNaWFFnYzJOdmNHVWdJQ0FnSUQwZ1pYWmxiblJOWVhBdVoyVjBLR1YyWlc1MFRtRnRaU2s3WEc0Z0lDQWdhV1lnS0NGelkyOXdaU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQmJYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnpZMjl3WlM1emJHbGpaU2dwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1pHVmhaR0psWldZZ1puSnZiU0FuWkdWaFpHSmxaV1luTzF4dWFXMXdiM0owSUNvZ1lYTWdWWFJwYkhNZ1puSnZiU0FuTGk5MWRHbHNjeTVxY3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCS2FXSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaFVlWEJsTENCd2NtOXdjeXdnWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0JzWlhRZ1pHVm1ZWFZzZEZCeWIzQnpJRDBnS0ZSNWNHVWdKaVlnVkhsd1pTNXdjbTl3Y3lrZ1B5QlVlWEJsTG5CeWIzQnpJRG9nZTMwN1hHNWNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWgwYUdsekxDQjdYRzRnSUNBZ0lDQW5WSGx3WlNjNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0JVZVhCbExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHdjbTl3Y3ljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0I3SUM0dUxtUmxabUYxYkhSUWNtOXdjeXdnTGk0dUtIQnliM0J6SUh4OElIdDlLU0I5TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNkamFHbHNaSEpsYmljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0JWZEdsc2N5NW1iR0YwZEdWdVFYSnlZWGtvWTJocGJHUnlaVzRwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU2tsQ1gwSkJVbEpGVGlBZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saWN5NWlZWEp5Wlc0bktUdGNibVY0Y0c5eWRDQmpiMjV6ZENCS1NVSmZVRkpQV0ZrZ0lDQTlJRk41YldKdmJDNW1iM0lvSjBCcWFXSnpMbkJ5YjNoNUp5azdYRzVsZUhCdmNuUWdZMjl1YzNRZ1NrbENJQ0FnSUNBZ0lDQWdQU0JUZVcxaWIyd3VabTl5S0NkQWFtbGljeTVxYVdJbktUdGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1poWTNSdmNua29TbWxpUTJ4aGMzTXBJSHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNRb1gzUjVjR1VzSUhCeWIzQnpJRDBnZTMwcElIdGNiaUFnSUNCcFppQW9hWE5LYVdKcGMyZ29YM1I1Y0dVcEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25VbVZqWldsMlpXUWdZU0JxYVdJZ1luVjBJR1Y0Y0dWamRHVmtJR0VnWTI5dGNHOXVaVzUwTGljcE8xeHVYRzRnSUNBZ2JHVjBJRlI1Y0dVZ1BTQW9YM1I1Y0dVZ1BUMGdiblZzYkNrZ1B5QktTVUpmVUZKUFdGa2dPaUJmZEhsd1pUdGNibHh1SUNBZ0lHWjFibU4wYVc5dUlHSmhjbkpsYmlndUxpNWZZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQWdJR3hsZENCamFHbHNaSEpsYmlBOUlGOWphR2xzWkhKbGJqdGNibHh1SUNBZ0lDQWdablZ1WTNScGIyNGdhbWxpS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvVlhScGJITXVhVzV6ZEdGdVkyVlBaaWhVZVhCbExDQW5jSEp2YldselpTY3BJSHg4SUdOb2FXeGtjbVZ1TG5OdmJXVW9LR05vYVd4a0tTQTlQaUJWZEdsc2N5NXBibk4wWVc1alpVOW1LR05vYVd4a0xDQW5jSEp2YldselpTY3BLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG1Gc2JDaGJJRlI1Y0dVZ1hTNWpiMjVqWVhRb1kyaHBiR1J5Wlc0cEtTNTBhR1Z1S0NoaGJHd3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRlI1Y0dVZ1BTQmhiR3hiTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdsc1pISmxiaUE5SUdGc2JDNXpiR2xqWlNneEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkthV0pEYkdGemN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ZIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0hNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NtbGlRMnhoYzNNb1hHNGdJQ0FnSUNBZ0lDQWdWSGx3WlN4Y2JpQWdJQ0FnSUNBZ0lDQndjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJpeGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9hbWxpTENCN1hHNGdJQ0FnSUNBZ0lGdEtTVUpkT2lCN1hHNGdJQ0FnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JiWkdWaFpHSmxaV1l1YVdSVGVXMWRPaUI3WEc0Z0lDQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQW9LU0E5UGlCVWVYQmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCcWFXSTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1vWW1GeWNtVnVMQ0I3WEc0Z0lDQWdJQ0JiU2tsQ1gwSkJVbEpGVGwwNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJRnRrWldGa1ltVmxaaTVwWkZONWJWMDZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQW9LU0E5UGlCVWVYQmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmlZWEp5Wlc0N1hHNGdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENBa0lEMGdabUZqZEc5eWVTaEthV0lwTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FYTkthV0pwYzJnb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQW9kbUZzZFdWYlNrbENYMEpCVWxKRlRsMGdmSHdnZG1Gc2RXVmJTa2xDWFNrcFhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1NtbGlLVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnZibk4wY25WamRFcHBZaWgyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQkthV0lwWEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCcFppQW9kbUZzZFdWYlNrbENYMEpCVWxKRlRsMHBYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1VvS1NncE8xeHVJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxXMHBKUWwwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVW9LVHRjYmlBZ2ZWeHVYRzRnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oyTnZibk4wY25WamRFcHBZam9nVUhKdmRtbGtaV1FnZG1Gc2RXVWdhWE1nYm05MElHRWdTbWxpTGljcE8xeHVmVnh1WEc1bGVIQnZjblFnWVhONWJtTWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtGOWphR2xzWkhKbGJpa2dlMXh1SUNCc1pYUWdZMmhwYkdSeVpXNGdQU0JmWTJocGJHUnlaVzQ3WEc1Y2JpQWdhV1lnS0ZWMGFXeHpMbWx1YzNSaGJtTmxUMllvWTJocGJHUnlaVzRzSUNkd2NtOXRhWE5sSnlrcFhHNGdJQ0FnWTJocGJHUnlaVzRnUFNCaGQyRnBkQ0JqYUdsc1pISmxianRjYmx4dUlDQnBaaUFvSVNnb2RHaHBjeTVwYzBsMFpYSmhZbXhsUTJocGJHUWdmSHdnVlhScGJITXVhWE5KZEdWeVlXSnNaVU5vYVd4a0tTNWpZV3hzS0hSb2FYTXNJR05vYVd4a2NtVnVLU2tnSmlZZ0tHbHpTbWxpYVhOb0tHTm9hV3hrY21WdUtTQjhmQ0FvS0hSb2FYTXVhWE5XWVd4cFpFTm9hV3hrSUh4OElGVjBhV3h6TG1selZtRnNhV1JEYUdsc1pDa3VZMkZzYkNoMGFHbHpMQ0JqYUdsc1pISmxiaWtwS1NsY2JpQWdJQ0JqYUdsc1pISmxiaUE5SUZzZ1kyaHBiR1J5Wlc0Z1hUdGNibHh1SUNCc1pYUWdjSEp2YldselpYTWdQU0JWZEdsc2N5NXBkR1Z5WVhSbEtHTm9hV3hrY21WdUxDQmhjM2x1WXlBb2V5QjJZV3gxWlRvZ1gyTm9hV3hrSUgwcElEMCtJSHRjYmlBZ0lDQnNaWFFnWTJocGJHUWdQU0FvVlhScGJITXVhVzV6ZEdGdVkyVlBaaWhmWTJocGJHUXNJQ2R3Y205dGFYTmxKeWtwSUQ4Z1lYZGhhWFFnWDJOb2FXeGtJRG9nWDJOb2FXeGtPMXh1WEc0Z0lDQWdhV1lnS0dselNtbGlhWE5vS0dOb2FXeGtLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQmhkMkZwZENCamIyNXpkSEoxWTNSS2FXSW9ZMmhwYkdRcE8xeHVJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lISmxkSFZ5YmlCamFHbHNaRHRjYmlBZ2ZTazdYRzVjYmlBZ2NtVjBkWEp1SUdGM1lXbDBJRkJ5YjIxcGMyVXVZV3hzS0hCeWIyMXBjMlZ6S1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUZKdmIzUkZiR1Z0Wlc1MElIMGdabkp2YlNBbkxpOXliMjkwTFdWc1pXMWxiblF1YW5Nbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1EyOXRiV1Z1ZEVWc1pXMWxiblFnWlhoMFpXNWtjeUJTYjI5MFJXeGxiV1Z1ZENCN1hHNGdJSE4wWVhScFl5QlVXVkJGSUQwZ1VtOXZkRVZzWlcxbGJuUXVWRmxRUlY5RFQwMU5SVTVVTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dsa0xDQjJZV3gxWlN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaFNiMjkwUld4bGJXVnVkQzVVV1ZCRlgwTlBUVTFGVGxRc0lHbGtMQ0IyWVd4MVpTd2djSEp2Y0hNcE8xeHVJQ0I5WEc1OVhHNGlMQ0psZUhCdmNuUWdlMXh1SUNCRFQwNVVSVmhVWDBsRUxGeHVJQ0JTYjI5MFRtOWtaU3hjYm4wZ1puSnZiU0FuTGk5eWIyOTBMVzV2WkdVdWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdSazlTUTBWZlVrVkdURTlYSUQwZ1UzbHRZbTlzTG1admNpZ25RR3BwWW5OR2IzSmpaVkpsWm14dmR5Y3BPMXh1WEc1bGVIQnZjblFnZXlCU1pXNWtaWEpsY2lCOUlHWnliMjBnSnk0dmNtVnVaR1Z5WlhJdWFuTW5PMXh1WEc1bGVIQnZjblFnZXlCU2IyOTBSV3hsYldWdWRDQjlJR1p5YjIwZ0p5NHZjbTl2ZEMxbGJHVnRaVzUwTG1wekp6dGNibVY0Y0c5eWRDQjdJRU52YlcxbGJuUkZiR1Z0Wlc1MElIMGdabkp2YlNBbkxpOWpiMjF0Wlc1MExXVnNaVzFsYm5RdWFuTW5PMXh1Wlhod2IzSjBJSHNnVG1GMGFYWmxSV3hsYldWdWRDQjlJR1p5YjIwZ0p5NHZibUYwYVhabExXVnNaVzFsYm5RdWFuTW5PMXh1Wlhod2IzSjBJSHNnVUc5eWRHRnNSV3hsYldWdWRDQjlJR1p5YjIwZ0p5NHZjRzl5ZEdGc0xXVnNaVzFsYm5RdWFuTW5PMXh1Wlhod2IzSjBJSHNnVkdWNGRFVnNaVzFsYm5RZ2ZTQm1jbTl0SUNjdUwzUmxlSFF0Wld4bGJXVnVkQzVxY3ljN1hHNGlMQ0pwYlhCdmNuUWdleUJTYjI5MFJXeGxiV1Z1ZENCOUlHWnliMjBnSnk0dmNtOXZkQzFsYkdWdFpXNTBMbXB6Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUU1aGRHbDJaVVZzWlcxbGJuUWdaWGgwWlc1a2N5QlNiMjkwUld4bGJXVnVkQ0I3WEc0Z0lITjBZWFJwWXlCVVdWQkZJRDBnVW05dmRFVnNaVzFsYm5RdVZGbFFSVjlGVEVWTlJVNVVPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLR2xrTENCMllXeDFaU3dnY0hKdmNITXBJSHRjYmlBZ0lDQnpkWEJsY2loU2IyOTBSV3hsYldWdWRDNVVXVkJGWDBWTVJVMUZUbFFzSUdsa0xDQjJZV3gxWlN3Z2NISnZjSE1wTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QlNiMjkwUld4bGJXVnVkQ0I5SUdaeWIyMGdKeTR2Y205dmRDMWxiR1Z0Wlc1MExtcHpKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkJ2Y25SaGJFVnNaVzFsYm5RZ1pYaDBaVzVrY3lCU2IyOTBSV3hsYldWdWRDQjdYRzRnSUhOMFlYUnBZeUJVV1ZCRklEMGdVbTl2ZEVWc1pXMWxiblF1VkZsUVJWOVFUMUpVUVV3N1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXUXNJSFpoYkhWbExDQndjbTl3Y3lrZ2UxeHVJQ0FnSUhOMWNHVnlLRkp2YjNSRmJHVnRaVzUwTGxSWlVFVmZVRTlTVkVGTUxDQnBaQ3dnZG1Gc2RXVXNJSEJ5YjNCektUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnUlhabGJuUkZiV2wwZEdWeUlIMGdabkp2YlNBbkxpNHZaWFpsYm5SekxtcHpKenRjYm1sdGNHOXlkQ0FxSUdGeklGVjBhV3h6SUNBZ0lDQWdJR1p5YjIwZ0p5NHVMM1YwYVd4ekxtcHpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFTlBUbFJGV0ZSZlNVUXNYRzRnSUZKdmIzUk9iMlJsTEZ4dWZTQm1jbTl0SUNjdUwzSnZiM1F0Ym05a1pTNXFjeWM3WEc1Y2JteGxkQ0JmWTI5dWRHVjRkRWxFUTI5MWJuUmxjaUE5SURCdU8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VtVnVaR1Z5WlhJZ1pYaDBaVzVrY3lCRmRtVnVkRVZ0YVhSMFpYSWdlMXh1SUNCemRHRjBhV01nVW05dmRFNXZaR1VnUFNCU2IyOTBUbTlrWlR0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9kR2hwY3l3Z2UxeHVJQ0FnSUNBZ0oyTnZiblJsZUhRbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFEyOXVkR1Y0ZENncExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZGtaWE4wY205NWFXNW5Kem9nZTF4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNtVnVaR1Z5Um5KaGJXVW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWTNKbFlYUmxRMjl1ZEdWNGRDaHliMjkwUTI5dWRHVjRkQ3dnYjI1VmNHUmhkR1VzSUc5dVZYQmtZWFJsVkdocGN5a2dlMXh1SUNBZ0lHeGxkQ0JqYjI1MFpYaDBJQ0FnSUNBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnSUNBZ2JHVjBJRzE1UTI5dWRHVjRkRWxFSUQwZ0tISnZiM1JEYjI1MFpYaDBLU0EvSUhKdmIzUkRiMjUwWlhoMFcwTlBUbFJGV0ZSZlNVUmRJRG9nTVc0N1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliM2g1S0dOdmJuUmxlSFFzSUh0Y2JpQWdJQ0FnSUdkbGREb2dLSFJoY21kbGRDd2djSEp2Y0U1aGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNCT1lXMWxJRDA5UFNCRFQwNVVSVmhVWDBsRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIQmhjbVZ1ZEVsRUlEMGdLSEp2YjNSRGIyNTBaWGgwS1NBL0lISnZiM1JEYjI1MFpYaDBXME5QVGxSRldGUmZTVVJkSURvZ01XNDdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2h3WVhKbGJuUkpSQ0ErSUcxNVEyOXVkR1Y0ZEVsRUtTQS9JSEJoY21WdWRFbEVJRG9nYlhsRGIyNTBaWGgwU1VRN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaDBZWEpuWlhRc0lIQnliM0JPWVcxbEtTbGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSEp2YjNSRGIyNTBaWGgwS1NBL0lISnZiM1JEYjI1MFpYaDBXM0J5YjNCT1lXMWxYU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwVzNCeWIzQk9ZVzFsWFR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCelpYUTZJQ2gwWVhKblpYUXNJSEJ5YjNCT1lXMWxMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9jSEp2Y0U1aGJXVWdQVDA5SUVOUFRsUkZXRlJmU1VRcFhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRGdHdjbTl3VG1GdFpWMGdQVDA5SUhaaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYRzRnSUNBZ0lDQWdJRzE1UTI5dWRHVjRkRWxFSUQwZ0t5dGZZMjl1ZEdWNGRFbEVRMjkxYm5SbGNqdGNiaUFnSUNBZ0lDQWdkR0Z5WjJWMFczQnliM0JPWVcxbFhTQTlJSFpoYkhWbE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjI1VmNHUmhkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ0lDQWdJQ0FnYjI1VmNHUmhkR1V1WTJGc2JDaHZibFZ3WkdGMFpWUm9hWE1zSUc5dVZYQmtZWFJsVkdocGN5azdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNGlMQ0pjYm1OdmJuTjBJRlJaVUVWZlJVeEZUVVZPVkNBZ1BTQXhPMXh1WTI5dWMzUWdWRmxRUlY5VVJWaFVJQ0FnSUNBOUlETTdYRzVqYjI1emRDQlVXVkJGWDBOUFRVMUZUbFFnSUQwZ09EdGNibU52Ym5OMElGUlpVRVZmVUU5U1ZFRk1JQ0FnUFNBeE5UdGNibHh1Wlhod2IzSjBJR05zWVhOeklGSnZiM1JGYkdWdFpXNTBJSHRjYmlBZ2MzUmhkR2xqSUZSWlVFVmZSVXhGVFVWT1ZDQWdQU0JVV1ZCRlgwVk1SVTFGVGxRN1hHNWNiaUFnYzNSaGRHbGpJRlJaVUVWZlZFVllWQ0FnSUNBZ1BTQlVXVkJGWDFSRldGUTdYRzVjYmlBZ2MzUmhkR2xqSUZSWlVFVmZRMDlOVFVWT1ZDQWdQU0JVV1ZCRlgwTlBUVTFGVGxRN1hHNWNiaUFnYzNSaGRHbGpJRlJaVUVWZlVFOVNWRUZNSUNBZ1BTQlVXVkJGWDFCUFVsUkJURHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWgwZVhCbExDQnBaQ3dnZG1Gc2RXVXNJSEJ5YjNCektTQjdYRzRnSUNBZ2RHaHBjeTVwYzBwcFluTldhWEowZFdGc1JXeGxiV1Z1ZENBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k1MGVYQmxJQ0FnUFNCMGVYQmxPMXh1SUNBZ0lIUm9hWE11YVdRZ0lDQWdJRDBnYVdRN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBZ1BTQjJZV3gxWlR0Y2JpQWdJQ0IwYUdsekxuQnliM0J6SUNBOUlIQnliM0J6SUh4OElIdDlPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QlZkR2xzY3lCbWNtOXRJQ2N1TGk5MWRHbHNjeTVxY3ljN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCRFQwNVVSVmhVWDBsRUlEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZibTlrWlM5amIyNTBaWGgwU1VRbktUdGNibHh1YkdWMElIVjFhV1FnUFNBeE8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VtOXZkRTV2WkdVZ2UxeHVJQ0J6ZEdGMGFXTWdRMDlPVkVWWVZGOUpSQ0E5SUVOUFRsUkZXRlJmU1VRN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVnVaR1Z5WlhJc0lIQmhjbVZ1ZEN3Z1gyTnZiblJsZUhRcElIdGNiaUFnSUNCc1pYUWdZMjl1ZEdWNGRDQTlJSEpsYm1SbGNtVnlMbU55WldGMFpVTnZiblJsZUhRb1hHNGdJQ0FnSUNCZlkyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUNoMGFHbHpMbTl1UTI5dWRHVjRkRlZ3WkdGMFpTa2dQeUIwYUdsekxtOXVRMjl1ZEdWNGRGVndaR0YwWlNBNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdLVHRjYmx4dUlDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektIUm9hWE1zSUh0Y2JpQWdJQ0FnSUNkcFpDYzZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQjFkV2xrS3lzc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0ozSmxibVJsY21WeUp6b2dlMXh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCeVpXNWtaWEpsY2l4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNHRnlaVzUwSnpvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0J3WVhKbGJuUXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk52Ym5SbGVIUW5PaUI3WEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdaMlYwT2lBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuUmxlSFE3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lITmxkRG9nSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdlMzBzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSjNKbGJtUmxjbEJ5YjIxcGMyVW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSjJSbGMzUnliM2xwYm1jbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ2R5Wlc1a1pYSkdjbUZ0WlNjNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmtaWE4wY205NUtDa2dlMXh1SUNBZ0lIUm9hWE11WkdWemRISnZlV2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k1amIyNTBaWGgwSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdselZtRnNhV1JEYUdsc1pDaGphR2xzWkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJWZEdsc2N5NXBjMVpoYkdsa1EyaHBiR1FvWTJocGJHUXBPMXh1SUNCOVhHNWNiaUFnYVhOSmRHVnlZV0pzWlVOb2FXeGtLR05vYVd4a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZWMGFXeHpMbWx6U1hSbGNtRmliR1ZEYUdsc1pDaGphR2xzWkNrN1hHNGdJSDFjYmx4dUlDQndjbTl3YzBScFptWmxjaWh2YkdSUWNtOXdjeXdnYm1WM1VISnZjSE1zSUhOcmFYQkxaWGx6S1NCN1hHNGdJQ0FnY21WMGRYSnVJRlYwYVd4ekxuQnliM0J6UkdsbVptVnlLRzlzWkZCeWIzQnpMQ0J1WlhkUWNtOXdjeXdnYzJ0cGNFdGxlWE1wTzF4dUlDQjlYRzVjYmlBZ1kyaHBiR1J5Wlc1RWFXWm1aWElvYjJ4a1EyaHBiR1J5Wlc0c0lHNWxkME5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGVjBhV3h6TG1Ob2FXeGtjbVZ1UkdsbVptVnlLRzlzWkVOb2FXeGtjbVZ1TENCdVpYZERhR2xzWkhKbGJpazdYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QnlaVzVrWlhJb2FtbGlMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVpHVnpkSEp2ZVdsdVp5bGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JseHVJQ0FnSUhSb2FYTXVjbVZ1WkdWeVJuSmhiV1VyS3p0Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaVzVrWlhJb2FtbGlMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtWeHVJQ0FnSUNBZ0xuUm9aVzRvS0hKbGMzVnNkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJtUmxjbEJ5YjIxcGMyVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUM1allYUmphQ2dvWlhKeWIzSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5Wlc1a1pYSlFjbTl0YVhObElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlhKeWIzSTdYRzRnSUNBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUhzZ1VtOXZkRVZzWlcxbGJuUWdmU0JtY205dElDY3VMM0p2YjNRdFpXeGxiV1Z1ZEM1cWN5YzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlVaWGgwUld4bGJXVnVkQ0JsZUhSbGJtUnpJRkp2YjNSRmJHVnRaVzUwSUh0Y2JpQWdjM1JoZEdsaklGUlpVRVVnUFNCU2IyOTBSV3hsYldWdWRDNVVXVkJGWDFSRldGUTdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hV1FzSUhaaGJIVmxMQ0J3Y205d2N5a2dlMXh1SUNBZ0lITjFjR1Z5S0ZKdmIzUkZiR1Z0Wlc1MExsUlpVRVZmVkVWWVZDd2dhV1FzSUhaaGJIVmxMQ0J3Y205d2N5azdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JrWldGa1ltVmxaaUJtY205dElDZGtaV0ZrWW1WbFppYzdYRzVjYm1OdmJuTjBJRk5VVDFBZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saWMwbDBaWEpoZEdWVGRHOXdKeWs3WEc1Y2JpOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTF1WlhOMFpXUXRkR1Z5Ym1GeWVWeHVZMjl1YzNRZ1oyeHZZbUZzVTJOdmNHVWdQU0FvZEhsd1pXOW1JR2RzYjJKaGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElEOGdaMnh2WW1Gc0lEb2dLSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NBL0lIZHBibVJ2ZHlBNklIUm9hWE03WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGJuTjBZVzVqWlU5bUtHOWlhaWtnZTF4dUlDQm1kVzVqZEdsdmJpQjBaWE4wVkhsd1pTaHZZbW9zSUY5MllXd3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQnBjMFJsWm1WeWNtVmtWSGx3WlNodlltb3BJSHRjYmlBZ0lDQWdJR2xtSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJRY205dGFYTmxJSHg4SUNodlltb3VZMjl1YzNSeWRXTjBiM0lnSmlZZ2IySnFMbU52Ym5OMGNuVmpkRzl5TG01aGJXVWdQVDA5SUNkUWNtOXRhWE5sSnlrcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lDQWdJQ0F2THlCUmRXRmpheUJ4ZFdGamF5NHVMbHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2WW1vdWRHaGxiaUE5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbGIyWWdiMkpxTG1OaGRHTm9JRDA5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQjJZV3dnSUNBZ0lEMGdYM1poYkR0Y2JpQWdJQ0JzWlhRZ2RIbHdaVTltSUNBOUlDaDBlWEJsYjJZZ2IySnFLVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUdkc2IySmhiRk5qYjNCbExsTjBjbWx1WnlsY2JpQWdJQ0FnSUhaaGJDQTlJQ2R6ZEhKcGJtY25PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVUblZ0WW1WeUtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjI1MWJXSmxjaWM3WEc0Z0lDQWdaV3h6WlNCcFppQW9kbUZzSUQwOVBTQm5iRzlpWVd4VFkyOXdaUzVDYjI5c1pXRnVLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oySnZiMnhsWVc0bk8xeHVJQ0FnSUdWc2MyVWdhV1lnS0haaGJDQTlQVDBnWjJ4dlltRnNVMk52Y0dVdVJuVnVZM1JwYjI0cFhHNGdJQ0FnSUNCMllXd2dQU0FuWm5WdVkzUnBiMjRuTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1UVhKeVlYa3BYRzRnSUNBZ0lDQjJZV3dnUFNBbllYSnlZWGtuTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1VDJKcVpXTjBLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oyOWlhbVZqZENjN1hHNGdJQ0FnWld4elpTQnBaaUFvZG1Gc0lEMDlQU0JuYkc5aVlXeFRZMjl3WlM1UWNtOXRhWE5sS1Z4dUlDQWdJQ0FnZG1Gc0lEMGdKM0J5YjIxcGMyVW5PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVRbWxuU1c1MEtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjJKcFoybHVkQ2M3WEc0Z0lDQWdaV3h6WlNCcFppQW9kbUZzSUQwOVBTQm5iRzlpWVd4VFkyOXdaUzVOWVhBcFhHNGdJQ0FnSUNCMllXd2dQU0FuYldGd0p6dGNiaUFnSUNCbGJITmxJR2xtSUNoMllXd2dQVDA5SUdkc2IySmhiRk5qYjNCbExsZGxZV3ROWVhBcFhHNGdJQ0FnSUNCMllXd2dQU0FuZDJWaGEyMWhjQ2M3WEc0Z0lDQWdaV3h6WlNCcFppQW9kbUZzSUQwOVBTQm5iRzlpWVd4VFkyOXdaUzVUWlhRcFhHNGdJQ0FnSUNCMllXd2dQU0FuYzJWMEp6dGNiaUFnSUNCbGJITmxJR2xtSUNoMllXd2dQVDA5SUdkc2IySmhiRk5qYjNCbExsTjViV0p2YkNsY2JpQWdJQ0FnSUhaaGJDQTlJQ2R6ZVcxaWIyd25PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVRblZtWm1WeUtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjJKMVptWmxjaWM3WEc1Y2JpQWdJQ0JwWmlBb2RtRnNJRDA5UFNBblluVm1abVZ5SnlBbUppQm5iRzlpWVd4VFkyOXdaUzVDZFdabVpYSWdKaVlnWjJ4dlltRnNVMk52Y0dVdVFuVm1abVZ5TG1selFuVm1abVZ5S0c5aWFpa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkdWRXMWlaWEluSUNZbUlDaDBlWEJsVDJZZ1BUMDlJQ2R1ZFcxaVpYSW5JSHg4SUc5aWFpQnBibk4wWVc1alpXOW1JRTUxYldKbGNpQjhmQ0FvYjJKcUxtTnZibk4wY25WamRHOXlJQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbElEMDlQU0FuVG5WdFltVnlKeWtwS1NCN1hHNGdJQ0FnSUNCcFppQW9JV2x6Um1sdWFYUmxLRzlpYWlrcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIWmhiQ0FoUFQwZ0oyOWlhbVZqZENjZ0ppWWdkbUZzSUQwOVBTQjBlWEJsVDJZcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0JwWmlBb0tHOWlhaTVqYjI1emRISjFZM1J2Y2lBOVBUMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaUI4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblQySnFaV04wSnlrcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJQ0FnTHk4Z1RuVnNiQ0J3Y205MGIzUjVjR1VnYjI0Z2IySnFaV04wWEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVTltSUQwOVBTQW5iMkpxWldOMEp5QW1KaUFoYjJKcUxtTnZibk4wY25WamRHOXlLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2RoY25KaGVTY2dKaVlnS0VGeWNtRjVMbWx6UVhKeVlYa29iMkpxS1NCOGZDQnZZbW9nYVc1emRHRnVZMlZ2WmlCQmNuSmhlU0I4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblFYSnlZWGtuS1NrcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2dvZG1Gc0lEMDlQU0FuY0hKdmJXbHpaU2NnZkh3Z2RtRnNJRDA5UFNBblpHVm1aWEp5WldRbktTQW1KaUJwYzBSbFptVnljbVZrVkhsd1pTaHZZbW9wS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNCcFppQW9kbUZzSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUFvYjJKcUlHbHVjM1JoYm1ObGIyWWdaMnh2WW1Gc1UyTnZjR1V1VTNSeWFXNW5JSHg4SUNodlltb3VZMjl1YzNSeWRXTjBiM0lnSmlZZ2IySnFMbU52Ym5OMGNuVmpkRzl5TG01aGJXVWdQVDA5SUNkVGRISnBibWNuS1NrcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2RpYjI5c1pXRnVKeUFtSmlBb2IySnFJR2x1YzNSaGJtTmxiMllnWjJ4dlltRnNVMk52Y0dVdVFtOXZiR1ZoYmlCOGZDQW9iMkpxTG1OdmJuTjBjblZqZEc5eUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUQwOVBTQW5RbTl2YkdWaGJpY3BLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJQ0FnYVdZZ0tIWmhiQ0E5UFQwZ0oyMWhjQ2NnSmlZZ0tHOWlhaUJwYm5OMFlXNWpaVzltSUdkc2IySmhiRk5qYjNCbExrMWhjQ0I4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblRXRndKeWtwS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNCcFppQW9kbUZzSUQwOVBTQW5kMlZoYTIxaGNDY2dKaVlnS0c5aWFpQnBibk4wWVc1alpXOW1JR2RzYjJKaGJGTmpiM0JsTGxkbFlXdE5ZWEFnZkh3Z0tHOWlhaTVqYjI1emRISjFZM1J2Y2lBbUppQnZZbW91WTI5dWMzUnlkV04wYjNJdWJtRnRaU0E5UFQwZ0oxZGxZV3ROWVhBbktTa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkelpYUW5JQ1ltSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJuYkc5aVlXeFRZMjl3WlM1VFpYUWdmSHdnS0c5aWFpNWpiMjV6ZEhKMVkzUnZjaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0l1Ym1GdFpTQTlQVDBnSjFObGRDY3BLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJQ0FnYVdZZ0tIWmhiQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbFQyWWdQVDA5SUNkbWRXNWpkR2x2YmljcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUc5aWFpQnBibk4wWVc1alpXOW1JSFpoYkNsY2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHpkSEpwYm1jbklDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpQW1KaUJ2WW1vdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlNBOVBUMGdkbUZzS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JwWmlBb2IySnFJRDA5SUc1MWJHd3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F4TENCc1pXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNCcFppQW9kR1Z6ZEZSNWNHVW9iMkpxTENCaGNtZDFiV1Z1ZEhOYmFWMHBJRDA5UFNCMGNuVmxLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtOXdjMFJwWm1abGNpaHZiR1JRY205d2N5d2dibVYzVUhKdmNITXNJSE5yYVhCTFpYbHpLU0I3WEc0Z0lHbG1JQ2h2YkdSUWNtOXdjeUE5UFQwZ2JtVjNVSEp2Y0hNcFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2IyeGtVSEp2Y0hNZ0lUMDlJSFI1Y0dWdlppQnVaWGRRY205d2N5bGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCcFppQW9JVzlzWkZCeWIzQnpJQ1ltSUc1bGQxQnliM0J6S1Z4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJR2xtSUNodmJHUlFjbTl3Y3lBbUppQWhibVYzVUhKdmNITXBYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHVnhaWEZsY1Z4dUlDQnBaaUFvSVc5c1pGQnliM0J6SUNZbUlDRnVaWGRRY205d2N5QW1KaUJ2YkdSUWNtOXdjeUFoUFNCdmJHUlFjbTl3Y3lsY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0JzWlhRZ1lVdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZiR1JRY205d2N5a3VZMjl1WTJGMEtFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9iMnhrVUhKdmNITXBLVHRjYmlBZ2JHVjBJR0pMWlhseklEMGdUMkpxWldOMExtdGxlWE1vYm1WM1VISnZjSE1wTG1OdmJtTmhkQ2hQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6S0c1bGQxQnliM0J6S1NrN1hHNWNiaUFnYVdZZ0tHRkxaWGx6TG14bGJtZDBhQ0FoUFQwZ1lrdGxlWE11YkdWdVozUm9LVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3TENCcGJDQTlJR0ZMWlhsekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQnNaWFFnWVV0bGVTQTlJR0ZMWlhselcybGRPMXh1SUNBZ0lHbG1JQ2h6YTJsd1MyVjVjeUFtSmlCemEybHdTMlY1Y3k1cGJtUmxlRTltS0dGTFpYa3BJRDQ5SURBcFhHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUdsbUlDaHZiR1JRY205d2MxdGhTMlY1WFNBaFBUMGdibVYzVUhKdmNITmJZVXRsZVYwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHeGxkQ0JpUzJWNUlEMGdZa3RsZVhOYmFWMDdYRzRnSUNBZ2FXWWdLSE5yYVhCTFpYbHpJQ1ltSUhOcmFYQkxaWGx6TG1sdVpHVjRUMllvWWt0bGVTa3BYRzRnSUNBZ0lDQmpiMjUwYVc1MVpUdGNibHh1SUNBZ0lHbG1JQ2hoUzJWNUlEMDlQU0JpUzJWNUtWeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNWNiaUFnSUNCcFppQW9iMnhrVUhKdmNITmJZa3RsZVYwZ0lUMDlJRzVsZDFCeWIzQnpXMkpMWlhsZEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6YVhwbFQyWW9kbUZzZFdVcElIdGNiaUFnYVdZZ0tDRjJZV3gxWlNsY2JpQWdJQ0J5WlhSMWNtNGdNRHRjYmx4dUlDQnBaaUFvVDJKcVpXTjBMbWx6S0VsdVptbHVhWFI1S1NsY2JpQWdJQ0J5WlhSMWNtNGdNRHRjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbExteGxibWQwYUNBOVBUMGdKMjUxYldKbGNpY3BYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbXhsYm1kMGFEdGNibHh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2RtRnNkV1VwTG14bGJtZDBhRHRjYm4xY2JseHVablZ1WTNScGIyNGdYMmwwWlhKaGRHVW9iMkpxTENCallXeHNZbUZqYXlrZ2UxeHVJQ0JwWmlBb0lXOWlhaUI4ZkNCUFltcGxZM1F1YVhNb1NXNW1hVzVwZEhrcEtWeHVJQ0FnSUhKbGRIVnliaUJiWFR0Y2JseHVJQ0JzWlhRZ2NtVnpkV3gwY3lBZ0lEMGdXMTA3WEc0Z0lHeGxkQ0J6WTI5d1pTQWdJQ0FnUFNCN0lHTnZiR3hsWTNScGIyNDZJRzlpYWl3Z1UxUlBVQ0I5TzF4dUlDQnNaWFFnY21WemRXeDBPMXh1WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHOWlhaWtwSUh0Y2JpQWdJQ0J6WTI5d1pTNTBlWEJsSUQwZ0owRnljbUY1Snp0Y2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JwYkNBOUlHOWlhaTVzWlc1bmRHZzdJR2tnUENCcGJEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCelkyOXdaUzUyWVd4MVpTQTlJRzlpYWx0cFhUdGNiaUFnSUNBZ0lITmpiM0JsTG1sdVpHVjRJRDBnYzJOdmNHVXVhMlY1SUQwZ2FUdGNibHh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdZMkZzYkdKaFkyc3VZMkZzYkNoMGFHbHpMQ0J6WTI5d1pTazdYRzRnSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCVFZFOVFLVnh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdjbVZ6ZFd4MGN5NXdkWE5vS0hKbGMzVnNkQ2s3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCdlltb3VaVzUwY21sbGN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUdsbUlDaHZZbW9nYVc1emRHRnVZMlZ2WmlCVFpYUWdmSHdnYjJKcUxtTnZibk4wY25WamRHOXlMbTVoYldVZ1BUMDlJQ2RUWlhRbktTQjdYRzRnSUNBZ0lDQnpZMjl3WlM1MGVYQmxJRDBnSjFObGRDYzdYRzVjYmlBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SURBN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcGRHVnRJRzltSUc5aWFpNTJZV3gxWlhNb0tTa2dlMXh1SUNBZ0lDQWdJQ0J6WTI5d1pTNTJZV3gxWlNBOUlHbDBaVzA3WEc0Z0lDQWdJQ0FnSUhOamIzQmxMbXRsZVNBOUlHbDBaVzA3WEc0Z0lDQWdJQ0FnSUhOamIzQmxMbWx1WkdWNElEMGdhVzVrWlhnckt6dGNibHh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JqWVd4c1ltRmpheTVqWVd4c0tIUm9hWE1zSUhOamIzQmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdVMVJQVUNsY2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQnlaWE4xYkhSekxuQjFjMmdvY21WemRXeDBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MyTnZjR1V1ZEhsd1pTQTlJRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsTzF4dVhHNGdJQ0FnSUNCc1pYUWdhVzVrWlhnZ1BTQXdPMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdXeUJyWlhrc0lIWmhiSFZsSUYwZ2IyWWdiMkpxTG1WdWRISnBaWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQnpZMjl3WlM1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0J6WTI5d1pTNXJaWGtnUFNCclpYazdYRzRnSUNBZ0lDQWdJSE5qYjNCbExtbHVaR1Y0SUQwZ2FXNWtaWGdyS3p0Y2JseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmpZV3hzWW1GamF5NWpZV3hzS0hSb2FYTXNJSE5qYjNCbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ1UxUlBVQ2xjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29jbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FXWWdLR2x1YzNSaGJtTmxUMllvYjJKcUxDQW5ZbTl2YkdWaGJpY3NJQ2R1ZFcxaVpYSW5MQ0FuWW1sbmFXNTBKeXdnSjJaMWJtTjBhVzl1SnlrcFhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0J6WTI5d1pTNTBlWEJsSUQwZ0tHOWlhaTVqYjI1emRISjFZM1J2Y2lrZ1B5QnZZbW91WTI5dWMzUnlkV04wYjNJdWJtRnRaU0E2SUNkUFltcGxZM1FuTzF4dVhHNGdJQ0FnYkdWMElHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZZbW9wTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUd0bGVYTXViR1Z1WjNSb095QnBJRHdnYVd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnYkdWMElHdGxlU0FnSUQwZ2EyVjVjMXRwWFR0Y2JpQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlHOWlhbHRyWlhsZE8xeHVYRzRnSUNBZ0lDQnpZMjl3WlM1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdjMk52Y0dVdWEyVjVJRDBnYTJWNU8xeHVJQ0FnSUNBZ2MyTnZjR1V1YVc1a1pYZ2dQU0JwTzF4dVhHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCallXeHNZbUZqYXk1allXeHNLSFJvYVhNc0lITmpiM0JsS1R0Y2JpQWdJQ0FnSUdsbUlDaHlaWE4xYkhRZ1BUMDlJRk5VVDFBcFhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29jbVZ6ZFd4MEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVnpkV3gwY3p0Y2JuMWNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9YMmwwWlhKaGRHVXNJSHRjYmlBZ0oxTlVUMUFuT2lCN1hHNGdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCVFZFOVFMRnh1SUNCOUxGeHVmU2s3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwZEdWeVlYUmxJRDBnWDJsMFpYSmhkR1U3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamFHbHNaSEpsYmtScFptWmxjaWhmWTJocGJHUnlaVzR4TENCZlkyaHBiR1J5Wlc0eUtTQjdYRzRnSUd4bGRDQmphR2xzWkhKbGJqRWdQU0FvSVVGeWNtRjVMbWx6UVhKeVlYa29YMk5vYVd4a2NtVnVNU2twSUQ4Z1d5QmZZMmhwYkdSeVpXNHhJRjBnT2lCZlkyaHBiR1J5Wlc0eE8xeHVJQ0JzWlhRZ1kyaHBiR1J5Wlc0eUlEMGdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtGOWphR2xzWkhKbGJqSXBLU0EvSUZzZ1gyTm9hV3hrY21WdU1pQmRJRG9nWDJOb2FXeGtjbVZ1TWp0Y2JseHVJQ0J5WlhSMWNtNGdLR1JsWVdSaVpXVm1LQzR1TG1Ob2FXeGtjbVZ1TVNrZ0lUMDlJR1JsWVdSaVpXVm1LQzR1TG1Ob2FXeGtjbVZ1TWlrcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWm1WMFkyaEVaV1Z3VUhKdmNHVnlkSGtvYjJKcUxDQmZhMlY1TENCa1pXWmhkV3gwVm1Gc2RXVXNJR3hoYzNSUVlYSjBLU0I3WEc0Z0lHbG1JQ2h2WW1vZ1BUMGdiblZzYkNCOGZDQlBZbXBsWTNRdWFYTW9UbUZPTENCdlltb3BJSHg4SUU5aWFtVmpkQzVwY3loSmJtWnBibWwwZVN3Z2IySnFLU2xjYmlBZ0lDQnlaWFIxY200Z0tHeGhjM1JRWVhKMEtTQS9JRnNnWkdWbVlYVnNkRlpoYkhWbExDQnVkV3hzSUYwZ09pQmtaV1poZFd4MFZtRnNkV1U3WEc1Y2JpQWdhV1lnS0Y5clpYa2dQVDBnYm5Wc2JDQjhmQ0JQWW1wbFkzUXVhWE1vVG1GT0xDQmZhMlY1S1NCOGZDQlBZbXBsWTNRdWFYTW9TVzVtYVc1cGRIa3NJRjlyWlhrcEtWeHVJQ0FnSUhKbGRIVnliaUFvYkdGemRGQmhjblFwSUQ4Z1d5QmtaV1poZFd4MFZtRnNkV1VzSUc1MWJHd2dYU0E2SUdSbFptRjFiSFJXWVd4MVpUdGNibHh1SUNCc1pYUWdjR0Z5ZEhNN1hHNWNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWDJ0bGVTa3BJSHRjYmlBZ0lDQndZWEowY3lBOUlGOXJaWGs3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlGOXJaWGtnUFQwOUlDZHplVzFpYjJ3bktTQjdYRzRnSUNBZ2NHRnlkSE1nUFNCYklGOXJaWGtnWFR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCc1pYUWdhMlY1SUNBZ0lDQWdJQ0FnUFNBb0p5Y2dLeUJmYTJWNUtUdGNiaUFnSUNCc1pYUWdiR0Z6ZEVsdVpHVjRJQ0FnUFNBd08xeHVJQ0FnSUd4bGRDQnNZWE4wUTNWeWMyOXlJQ0E5SURBN1hHNWNiaUFnSUNCd1lYSjBjeUE5SUZ0ZE8xeHVYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMV052Ym5OMFlXNTBMV052Ym1ScGRHbHZibHh1SUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNCclpYa3VhVzVrWlhoUFppZ25MaWNzSUd4aGMzUkpibVJsZUNrN1hHNGdJQ0FnSUNCcFppQW9hVzVrWlhnZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUhCaGNuUnpMbkIxYzJnb2EyVjVMbk4xWW5OMGNtbHVaeWhzWVhOMFEzVnljMjl5S1NrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9hMlY1TG1Ob1lYSkJkQ2hwYm1SbGVDQXRJREVwSUQwOVBTQW5YRnhjWENjcElIdGNiaUFnSUNBZ0lDQWdiR0Z6ZEVsdVpHVjRJRDBnYVc1a1pYZ2dLeUF4TzF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NHRnlkSE11Y0hWemFDaHJaWGt1YzNWaWMzUnlhVzVuS0d4aGMzUkRkWEp6YjNJc0lHbHVaR1Y0S1NrN1hHNGdJQ0FnSUNCc1lYTjBRM1Z5YzI5eUlEMGdiR0Z6ZEVsdVpHVjRJRDBnYVc1a1pYZ2dLeUF4TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUd4bGRDQndZWEowVGlBOUlIQmhjblJ6VzNCaGNuUnpMbXhsYm1kMGFDQXRJREZkTzF4dUlDQnBaaUFvY0dGeWRITXViR1Z1WjNSb0lEMDlQU0F3S1Z4dUlDQWdJSEpsZEhWeWJpQW9iR0Z6ZEZCaGNuUXBJRDhnV3lCa1pXWmhkV3gwVm1Gc2RXVXNJSEJoY25ST0lGMGdPaUJrWldaaGRXeDBWbUZzZFdVN1hHNWNiaUFnYkdWMElHTjFjbkpsYm5SV1lXeDFaU0E5SUc5aWFqdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2NHRnlkSE11YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUd4bGRDQnJaWGtnUFNCd1lYSjBjMXRwWFR0Y2JseHVJQ0FnSUdOMWNuSmxiblJXWVd4MVpTQTlJR04xY25KbGJuUldZV3gxWlZ0clpYbGRPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBWbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0FnSUhKbGRIVnliaUFvYkdGemRGQmhjblFwSUQ4Z1d5QmtaV1poZFd4MFZtRnNkV1VzSUhCaGNuUk9JRjBnT2lCa1pXWmhkV3gwVm1Gc2RXVTdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdLR3hoYzNSUVlYSjBLU0EvSUZzZ1kzVnljbVZ1ZEZaaGJIVmxMQ0J3WVhKMFRpQmRJRG9nWTNWeWNtVnVkRlpoYkhWbE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWW1sdVpFMWxkR2h2WkhNb1gzQnliM1J2TENCemEybHdVSEp2ZEc5ektTQjdYRzRnSUd4bGRDQndjbTkwYnlBZ0lDQWdJQ0FnSUNBZ1BTQmZjSEp2ZEc4N1hHNGdJR3hsZENCaGJISmxZV1I1Vm1semFYUmxaQ0FnUFNCdVpYY2dVMlYwS0NrN1hHNWNiaUFnZDJocGJHVWdLSEJ5YjNSdktTQjdYRzRnSUNBZ2JHVjBJR1JsYzJOeWFYQjBiM0p6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjbk1vY0hKdmRHOHBPMXh1SUNBZ0lHeGxkQ0JyWlhseklDQWdJQ0FnSUNBOUlFOWlhbVZqZEM1clpYbHpLR1JsYzJOeWFYQjBiM0p6S1M1amIyNWpZWFFvVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3loa1pYTmpjbWx3ZEc5eWN5a3BPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQWdJR2xtSUNoclpYa2dQVDA5SUNkamIyNXpkSEoxWTNSdmNpY3BYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1WEc0Z0lDQWdJQ0JwWmlBb1lXeHlaV0ZrZVZacGMybDBaV1F1YUdGektHdGxlU2twWEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dVhHNGdJQ0FnSUNCaGJISmxZV1I1Vm1semFYUmxaQzVoWkdRb2EyVjVLVHRjYmx4dUlDQWdJQ0FnYkdWMElIWmhiSFZsSUQwZ2NISnZkRzliYTJWNVhUdGNibHh1SUNBZ0lDQWdMeThnVTJ0cGNDQndjbTkwYjNSNWNHVWdiMllnVDJKcVpXTjBYRzRnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0Y0hKdmRHOTBlWEJsTFdKMWFXeDBhVzV6WEc0Z0lDQWdJQ0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcElDWW1JRTlpYW1WamRDNXdjbTkwYjNSNWNHVmJhMlY1WFNBOVBUMGdkbUZzZFdVcFhHNGdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElDRTlQU0FuWm5WdVkzUnBiMjRuS1Z4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUNBZ2RHaHBjMXRyWlhsZElEMGdkbUZzZFdVdVltbHVaQ2gwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCd2NtOTBieUE5SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaHdjbTkwYnlrN1hHNGdJQ0FnYVdZZ0tIQnliM1J2SUQwOVBTQlBZbXBsWTNRdWNISnZkRzkwZVhCbEtWeHVJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0JwWmlBb2MydHBjRkJ5YjNSdmN5QW1KaUJ6YTJsd1VISnZkRzl6TG1sdVpHVjRUMllvY0hKdmRHOHBJRDQ5SURBcFhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhORmJYQjBlU2gyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0JwWmlBb1QySnFaV04wTG1sektIWmhiSFZsTENCSmJtWnBibWwwZVNrcFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaFBZbXBsWTNRdWFYTW9kbUZzZFdVc0lFNWhUaWtwWEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdhV1lnS0dsdWMzUmhibU5sVDJZb2RtRnNkV1VzSUNkemRISnBibWNuS1NsY2JpQWdJQ0J5WlhSMWNtNGdJU2d2WEZ4VEx5a3VkR1Z6ZENoMllXeDFaU2s3WEc0Z0lHVnNjMlVnYVdZZ0tHbHVjM1JoYm1ObFQyWW9kbUZzZFdVc0lDZHVkVzFpWlhJbktTQW1KaUJwYzBacGJtbDBaU2gyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCbGJITmxJR2xtSUNnaGFXNXpkR0Z1WTJWUFppaDJZV3gxWlN3Z0oySnZiMnhsWVc0bkxDQW5ZbWxuYVc1MEp5d2dKMloxYm1OMGFXOXVKeWtnSmlZZ2MybDZaVTltS0haaGJIVmxLU0E5UFQwZ01DbGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMwNXZkRVZ0Y0hSNUtIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQWhhWE5GYlhCMGVTNWpZV3hzS0hSb2FYTXNJSFpoYkhWbEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdac1lYUjBaVzVCY25KaGVTaDJZV3gxWlNrZ2UxeHVJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLVnh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmx4dUlDQnNaWFFnYm1WM1FYSnlZWGtnUFNCYlhUdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2RtRnNkV1V1YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUd4bGRDQnBkR1Z0SUQwZ2RtRnNkV1ZiYVYwN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYVhSbGJTa3BYRzRnSUNBZ0lDQnVaWGRCY25KaGVTQTlJRzVsZDBGeWNtRjVMbU52Ym1OaGRDaG1iR0YwZEdWdVFYSnlZWGtvYVhSbGJTa3BPMXh1SUNBZ0lHVnNjMlZjYmlBZ0lDQWdJRzVsZDBGeWNtRjVMbkIxYzJnb2FYUmxiU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm1WM1FYSnlZWGs3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMVpoYkdsa1EyaHBiR1FvWTJocGJHUXBJSHRjYmlBZ2FXWWdLR05vYVd4a0lEMDlJRzUxYkd3cFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyaHBiR1FnUFQwOUlDZGliMjlzWldGdUp5bGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNXBjeWhqYUdsc1pDd2dTVzVtYVc1cGRIa3BLVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQnBaaUFvVDJKcVpXTjBMbWx6S0dOb2FXeGtMQ0JPWVU0cEtWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNCeVpYUjFjbTRnZEhKMVpUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdselNYUmxjbUZpYkdWRGFHbHNaQ2hqYUdsc1pDa2dlMXh1SUNCcFppQW9ZMmhwYkdRZ1BUMGdiblZzYkNCOGZDQlBZbXBsWTNRdWFYTW9ZMmhwYkdRc0lFNWhUaWtnZkh3Z1QySnFaV04wTG1sektHTm9hV3hrTENCSmJtWnBibWwwZVNrcFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUhKbGRIVnliaUFvUVhKeVlYa3VhWE5CY25KaGVTaGphR2xzWkNrZ2ZId2dkSGx3Wlc5bUlHTm9hV3hrSUQwOVBTQW5iMkpxWldOMEp5QW1KaUFoYVc1emRHRnVZMlZQWmloamFHbHNaQ3dnSjJKdmIyeGxZVzRuTENBbmJuVnRZbVZ5Snl3Z0ozTjBjbWx1WnljcEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUc1dmR5Z3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQndaWEptYjNKdFlXNWpaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JSEJsY21admNtMWhibU5sTG01dmR5QTlQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0J5WlhSMWNtNGdjR1Z5Wm05eWJXRnVZMlV1Ym05M0tDazdYRzRnSUdWc2MyVmNiaUFnSUNCeVpYUjFjbTRnUkdGMFpTNXViM2NvS1R0Y2JuMWNiaUlzSWk4dklGUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JuWmhjaUJmWDNkbFluQmhZMnRmYlc5a2RXeGxYMk5oWTJobFgxOGdQU0I3ZlR0Y2JseHVMeThnVkdobElISmxjWFZwY21VZ1puVnVZM1JwYjI1Y2JtWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4MEx5OGdRMmhsWTJzZ2FXWWdiVzlrZFd4bElHbHpJR2x1SUdOaFkyaGxYRzVjZEhaaGNpQmpZV05vWldSTmIyUjFiR1VnUFNCZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsWDJOaFkyaGxYMTliYlc5a2RXeGxTV1JkTzF4dVhIUnBaaUFvWTJGamFHVmtUVzlrZFd4bElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdZMkZqYUdWa1RXOWtkV3hsTG1WNGNHOXlkSE03WEc1Y2RIMWNibHgwTHk4Z1EzSmxZWFJsSUdFZ2JtVjNJRzF2WkhWc1pTQW9ZVzVrSUhCMWRDQnBkQ0JwYm5SdklIUm9aU0JqWVdOb1pTbGNibHgwZG1GeUlHMXZaSFZzWlNBOUlGOWZkMlZpY0dGamExOXRiMlIxYkdWZlkyRmphR1ZmWDF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzVjZEZ4MEx5OGdibThnYlc5a2RXeGxMbWxrSUc1bFpXUmxaRnh1WEhSY2RDOHZJRzV2SUcxdlpIVnNaUzVzYjJGa1pXUWdibVZsWkdWa1hHNWNkRngwWlhod2IzSjBjem9nZTMxY2JseDBmVHRjYmx4dVhIUXZMeUJGZUdWamRYUmxJSFJvWlNCdGIyUjFiR1VnWm5WdVkzUnBiMjVjYmx4MFgxOTNaV0p3WVdOclgyMXZaSFZzWlhOZlgxdHRiMlIxYkdWSlpGMHVZMkZzYkNodGIyUjFiR1V1Wlhod2IzSjBjeXdnYlc5a2RXeGxMQ0J0YjJSMWJHVXVaWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWs3WEc1Y2JseDBMeThnVW1WMGRYSnVJSFJvWlNCbGVIQnZjblJ6SUc5bUlIUm9aU0J0YjJSMWJHVmNibHgwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVmVnh1WEc0aUxDSXZMeUJrWldacGJtVWdaMlYwZEdWeUlHWjFibU4wYVc5dWN5Qm1iM0lnYUdGeWJXOXVlU0JsZUhCdmNuUnpYRzVmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1RZ1BTQW9aWGh3YjNKMGN5d2daR1ZtYVc1cGRHbHZiaWtnUFQ0Z2UxeHVYSFJtYjNJb2RtRnlJR3RsZVNCcGJpQmtaV1pwYm1sMGFXOXVLU0I3WEc1Y2RGeDBhV1lvWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dktHUmxabWx1YVhScGIyNHNJR3RsZVNrZ0ppWWdJVjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YnlobGVIQnZjblJ6TENCclpYa3BLU0I3WEc1Y2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z2EyVjVMQ0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUdkbGREb2daR1ZtYVc1cGRHbHZibHRyWlhsZElIMHBPMXh1WEhSY2RIMWNibHgwZlZ4dWZUc2lMQ0pmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1jZ1BTQW9ablZ1WTNScGIyNG9LU0I3WEc1Y2RHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc1ZHaHBjeUE5UFQwZ0oyOWlhbVZqZENjcElISmxkSFZ5YmlCbmJHOWlZV3hVYUdsek8xeHVYSFIwY25rZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdseklIeDhJRzVsZHlCR2RXNWpkR2x2YmlnbmNtVjBkWEp1SUhSb2FYTW5LU2dwTzF4dVhIUjlJR05oZEdOb0lDaGxLU0I3WEc1Y2RGeDBhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUNkdlltcGxZM1FuS1NCeVpYUjFjbTRnZDJsdVpHOTNPMXh1WEhSOVhHNTlLU2dwT3lJc0lsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieUE5SUNodlltb3NJSEJ5YjNBcElEMCtJQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQndjbTl3S1NraUxDSXZMeUJrWldacGJtVWdYMTlsYzAxdlpIVnNaU0J2YmlCbGVIQnZjblJ6WEc1ZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSWdQU0FvWlhod2IzSjBjeWtnUFQ0Z2UxeHVYSFJwWmloMGVYQmxiMllnVTNsdFltOXNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NwSUh0Y2JseDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQW5UVzlrZFd4bEp5QjlLVHRjYmx4MGZWeHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z0oxOWZaWE5OYjJSMWJHVW5MQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1ZlRzaUxDSnBiWEJ2Y25RZ2UxeHVJQ0JLU1VKZlFrRlNVa1ZPTEZ4dUlDQktTVUpmVUZKUFdGa3NYRzRnSUVwSlFpeGNiaUFnU21saUxGeHVJQ0JtWVdOMGIzSjVMRnh1SUNBa0xGeHVJQ0JwYzBwcFltbHphQ3hjYmlBZ1kyOXVjM1J5ZFdOMFNtbGlMRnh1SUNCeVpYTnZiSFpsUTJocGJHUnlaVzRzWEc1OUlHWnliMjBnSnk0dmFtbGlMbXB6Snp0Y2JseHVaWGh3YjNKMElHTnZibk4wSUVwcFluTWdQU0I3WEc0Z0lFcEpRbDlDUVZKU1JVNHNYRzRnSUVwSlFsOVFVazlZV1N4Y2JpQWdTa2xDTEZ4dUlDQkthV0lzWEc0Z0lHbHpTbWxpYVhOb0xGeHVJQ0JqYjI1emRISjFZM1JLYVdJc1hHNGdJSEpsYzI5c2RtVkRhR2xzWkhKbGJpeGNibjA3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJRlZRUkVGVVJWOUZWa1ZPVkN4Y2JpQWdVVlZGVlVWZlZWQkVRVlJGWDAxRlZFaFBSQ3hjYmlBZ1JreFZVMGhmVlZCRVFWUkZYMDFGVkVoUFJDeGNiaUFnU1U1SlZGOU5SVlJJVDBRc1hHNGdJRk5MU1ZCZlUxUkJWRVZmVlZCRVFWUkZVeXhjYmlBZ1VFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVXNYRzRnSUV4QlUxUmZVa1ZPUkVWU1gxUkpUVVVzWEc0Z0lGQlNSVlpKVDFWVFgxTlVRVlJGTEZ4dVhHNGdJRU52YlhCdmJtVnVkQ3hjYm4wZ1puSnZiU0FuTGk5amIyMXdiMjVsYm5RdWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0Y0c5dVpXNTBjeUE5SUh0Y2JpQWdWVkJFUVZSRlgwVldSVTVVTEZ4dUlDQlJWVVZWUlY5VlVFUkJWRVZmVFVWVVNFOUVMRnh1SUNCR1RGVlRTRjlWVUVSQlZFVmZUVVZVU0U5RUxGeHVJQ0JKVGtsVVgwMUZWRWhQUkN4Y2JpQWdVMHRKVUY5VFZFRlVSVjlWVUVSQlZFVlRMRnh1SUNCUVJVNUVTVTVIWDFOVVFWUkZYMVZRUkVGVVJTeGNiaUFnVEVGVFZGOVNSVTVFUlZKZlZFbE5SU3hjYmlBZ1VGSkZWa2xQVlZOZlUxUkJWRVVzWEc1OU8xeHVYRzVwYlhCdmNuUWdlMXh1SUNCR1QxSkRSVjlTUlVaTVQxY3NYRzRnSUZKdmIzUk9iMlJsTEZ4dUlDQlNaVzVrWlhKbGNpeGNiaUFnVW05dmRFVnNaVzFsYm5Rc1hHNGdJRU52YlcxbGJuUkZiR1Z0Wlc1MExGeHVJQ0JPWVhScGRtVkZiR1Z0Wlc1MExGeHVJQ0JRYjNKMFlXeEZiR1Z0Wlc1MExGeHVJQ0JVWlhoMFJXeGxiV1Z1ZEN4Y2JuMGdabkp2YlNBbkxpOXlaVzVrWlhKbGNuTXZhVzVrWlhndWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdVbVZ1WkdWeVpYSnpJRDBnZTF4dUlDQkRUMDVVUlZoVVgwbEVPaUJTYjI5MFRtOWtaUzVEVDA1VVJWaFVYMGxFTEZ4dUlDQkdUMUpEUlY5U1JVWk1UMWNzWEc0Z0lGSnZiM1JPYjJSbExGeHVJQ0JTWlc1a1pYSmxjaXhjYmlBZ1VtOXZkRVZzWlcxbGJuUXNYRzRnSUVOdmJXMWxiblJGYkdWdFpXNTBMRnh1SUNCT1lYUnBkbVZGYkdWdFpXNTBMRnh1SUNCUWIzSjBZV3hGYkdWdFpXNTBMRnh1SUNCVVpYaDBSV3hsYldWdWRDeGNibjA3WEc1Y2JtVjRjRzl5ZENBcUlHRnpJRlYwYVd4eklHWnliMjBnSnk0dmRYUnBiSE11YW5Nbk8xeHVaWGh3YjNKMElIc2daR1ZtWVhWc2RDQmhjeUJrWldGa1ltVmxaaUI5SUdaeWIyMGdKMlJsWVdSaVpXVm1KenRjYmx4dVpYaHdiM0owSUh0Y2JpQWdabUZqZEc5eWVTeGNiaUFnSkN4Y2JpQWdRMjl0Y0c5dVpXNTBMRnh1ZlR0Y2JpSmRMQ0p1WVcxbGN5STZXMTBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgeyBET01SZW5kZXJlciB9IGZyb20gJy4vZG9tLXJlbmRlcmVyLmpzJztcbmV4cG9ydCAqIGZyb20gJ2ppYnMnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9

/***/ }),

/***/ "./lib/resource-loader.js":
/*!********************************!*\
  !*** ./lib/resource-loader.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addResourceHandler": () => (/* binding */ addResourceHandler),
/* harmony export */   "addResourceResolver": () => (/* binding */ addResourceResolver),
/* harmony export */   "cssHandler": () => (/* binding */ cssHandler),
/* harmony export */   "javascriptHandler": () => (/* binding */ javascriptHandler),
/* harmony export */   "load": () => (/* binding */ load),
/* harmony export */   "removeResourceHandler": () => (/* binding */ removeResourceHandler),
/* harmony export */   "removeResourceResolver": () => (/* binding */ removeResourceResolver),
/* harmony export */   "resolveResourcePath": () => (/* binding */ resolveResourcePath)
/* harmony export */ });
const cacheMap          = new Map();
const resourceResolvers = new Set();
const resourceHandlers  = new Set();

function addResourceResolver(callback) {
  resourceResolvers.add(callback);
}

function removeResourceResolver(callback) {
  resourceResolvers.delete(callback);
}

function addResourceHandler(test, callback) {
  let resourceObj = { test, callback };
  resourceHandlers.add(resourceObj);

  return resourceObj;
}

function removeResourceHandler(resourceObj) {
  resourceHandlers.delete(resourceObj);
}

function resolveResourcePath(resourcePath) {
  let currentPath = resourcePath;

  for (let resolver of resourceResolvers)
    currentPath = resolver(currentPath);

  return currentPath;
}

function javascriptHandler(resourcePath) {
  // eslint-disable-next-line no-eval
  return eval(`(import('${resourcePath.replace(/'/g, '\\\'')}'))`);
}

function cssHandler(resourcePath, { media = 'screen' }) {
  return new Promise((resolve, reject) => {
    let linkTag = document.createElement('link');

    linkTag.onload = () => resolve(linkTag);
    linkTag.onerror = (error) => reject(error);

    linkTag.setAttribute('rel', 'stylesheet');
    linkTag.setAttribute('type', 'text/css');
    linkTag.setAttribute('media', media);
    linkTag.setAttribute('href', resourcePath);
    document.head.appendChild(linkTag);
  });
}

function handleResource(resourcePath, _options) {
  let options = _options || {};

  for (let handler of resourceHandlers) {
    let { test, callback } = handler;
    if (!test(resourcePath, options))
      continue;

    let result = callback(resourcePath, options);
    if (result)
      return result;
  }

  throw new Error(`jibs-html-renderer:load: Unknown resource "${resourcePath}". I don't know how to handle this resource type. Please add a resource handler to manage this resource type.`);
}

function load(_resourcePath, options) {
  let resourcePath  = resolveResourcePath(_resourcePath);
  let cache         = cacheMap.get(resourcePath);

  if (cache)
    return cache;

  let promise = handleResource(resourcePath, options).then((_resource) => {
    let resource = _resource;
    if (resource && resource.default)
      resource = resource.default;

    cacheMap.set(resourcePath, resource);

    return resource;
  });

  // Set promise as cache so
  // all promises from multiple
  // load requests are consistent
  cacheMap.set(resourcePath, promise);

  return promise;
}

Object.defineProperties(load, {
  addResolver: {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        addResourceResolver,
  },
  removeResolver: {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        removeResourceResolver,
  },
  resolve: {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        resolveResourcePath,
  },
  javascriptHandler: {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        javascriptHandler,
  },
  cssHandler: {
    writable:     true,
    enumerable:   false,
    configurable: true,
    value:        cssHandler,
  },
});

addResourceHandler((resourcePath, options) => {
  if (options.type === 'javascript')
    return true;

  return (/\.[mc]?js$/i).test(resourcePath);
}, javascriptHandler);

addResourceHandler((resourcePath, options) => {
  if (options.type === 'css')
    return true;

  return (/\.css$/i).test(resourcePath);
}, cssHandler);




/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.$),
/* harmony export */   "A": () => (/* binding */ A),
/* harmony export */   "ABBR": () => (/* binding */ ABBR),
/* harmony export */   "ADDRESS": () => (/* binding */ ADDRESS),
/* harmony export */   "AREA": () => (/* binding */ AREA),
/* harmony export */   "ARTICLE": () => (/* binding */ ARTICLE),
/* harmony export */   "ASIDE": () => (/* binding */ ASIDE),
/* harmony export */   "AUDIO": () => (/* binding */ AUDIO),
/* harmony export */   "B": () => (/* binding */ B),
/* harmony export */   "BASE": () => (/* binding */ BASE),
/* harmony export */   "BDI": () => (/* binding */ BDI),
/* harmony export */   "BDO": () => (/* binding */ BDO),
/* harmony export */   "BLOCKQUOTE": () => (/* binding */ BLOCKQUOTE),
/* harmony export */   "BR": () => (/* binding */ BR),
/* harmony export */   "BUTTON": () => (/* binding */ BUTTON),
/* harmony export */   "CANVAS": () => (/* binding */ CANVAS),
/* harmony export */   "CAPTION": () => (/* binding */ CAPTION),
/* harmony export */   "CITE": () => (/* binding */ CITE),
/* harmony export */   "CODE": () => (/* binding */ CODE),
/* harmony export */   "COL": () => (/* binding */ COL),
/* harmony export */   "COLGROUP": () => (/* binding */ COLGROUP),
/* harmony export */   "Component": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Component),
/* harmony export */   "Components": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Components),
/* harmony export */   "DATA": () => (/* binding */ DATA),
/* harmony export */   "DATALIST": () => (/* binding */ DATALIST),
/* harmony export */   "DD": () => (/* binding */ DD),
/* harmony export */   "DEL": () => (/* binding */ DEL),
/* harmony export */   "DETAILS": () => (/* binding */ DETAILS),
/* harmony export */   "DFN": () => (/* binding */ DFN),
/* harmony export */   "DIALOG": () => (/* binding */ DIALOG),
/* harmony export */   "DIV": () => (/* binding */ DIV),
/* harmony export */   "DL": () => (/* binding */ DL),
/* harmony export */   "DOMRenderer": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.DOMRenderer),
/* harmony export */   "DT": () => (/* binding */ DT),
/* harmony export */   "EM": () => (/* binding */ EM),
/* harmony export */   "EMBED": () => (/* binding */ EMBED),
/* harmony export */   "FIELDSET": () => (/* binding */ FIELDSET),
/* harmony export */   "FIGCAPTION": () => (/* binding */ FIGCAPTION),
/* harmony export */   "FIGURE": () => (/* binding */ FIGURE),
/* harmony export */   "FOOTER": () => (/* binding */ FOOTER),
/* harmony export */   "FORM": () => (/* binding */ FORM),
/* harmony export */   "H1": () => (/* binding */ H1),
/* harmony export */   "H2": () => (/* binding */ H2),
/* harmony export */   "H3": () => (/* binding */ H3),
/* harmony export */   "H4": () => (/* binding */ H4),
/* harmony export */   "H5": () => (/* binding */ H5),
/* harmony export */   "H6": () => (/* binding */ H6),
/* harmony export */   "HEADER": () => (/* binding */ HEADER),
/* harmony export */   "HGROUP": () => (/* binding */ HGROUP),
/* harmony export */   "HR": () => (/* binding */ HR),
/* harmony export */   "HTMLRenderer": () => (/* binding */ HTMLRenderer),
/* harmony export */   "I": () => (/* binding */ I),
/* harmony export */   "IFRAME": () => (/* binding */ IFRAME),
/* harmony export */   "IMG": () => (/* binding */ IMG),
/* harmony export */   "INPUT": () => (/* binding */ INPUT),
/* harmony export */   "INS": () => (/* binding */ INS),
/* harmony export */   "Jibs": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Jibs),
/* harmony export */   "KBD": () => (/* binding */ KBD),
/* harmony export */   "LABEL": () => (/* binding */ LABEL),
/* harmony export */   "LEGEND": () => (/* binding */ LEGEND),
/* harmony export */   "LI": () => (/* binding */ LI),
/* harmony export */   "LINK": () => (/* binding */ LINK),
/* harmony export */   "MAIN": () => (/* binding */ MAIN),
/* harmony export */   "MAP": () => (/* binding */ MAP),
/* harmony export */   "MARK": () => (/* binding */ MARK),
/* harmony export */   "MENU": () => (/* binding */ MENU),
/* harmony export */   "META": () => (/* binding */ META),
/* harmony export */   "METER": () => (/* binding */ METER),
/* harmony export */   "NAV": () => (/* binding */ NAV),
/* harmony export */   "NOSCRIPT": () => (/* binding */ NOSCRIPT),
/* harmony export */   "OBJECT": () => (/* binding */ OBJECT),
/* harmony export */   "OL": () => (/* binding */ OL),
/* harmony export */   "OPTGROUP": () => (/* binding */ OPTGROUP),
/* harmony export */   "OPTION": () => (/* binding */ OPTION),
/* harmony export */   "OUTPUT": () => (/* binding */ OUTPUT),
/* harmony export */   "P": () => (/* binding */ P),
/* harmony export */   "PICTURE": () => (/* binding */ PICTURE),
/* harmony export */   "PRE": () => (/* binding */ PRE),
/* harmony export */   "PROGRESS": () => (/* binding */ PROGRESS),
/* harmony export */   "Q": () => (/* binding */ Q),
/* harmony export */   "RP": () => (/* binding */ RP),
/* harmony export */   "RT": () => (/* binding */ RT),
/* harmony export */   "RUBY": () => (/* binding */ RUBY),
/* harmony export */   "Renderers": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderers),
/* harmony export */   "S": () => (/* binding */ S),
/* harmony export */   "SAMP": () => (/* binding */ SAMP),
/* harmony export */   "SCRIPT": () => (/* binding */ SCRIPT),
/* harmony export */   "SECTION": () => (/* binding */ SECTION),
/* harmony export */   "SELECT": () => (/* binding */ SELECT),
/* harmony export */   "SLOT": () => (/* binding */ SLOT),
/* harmony export */   "SMALL": () => (/* binding */ SMALL),
/* harmony export */   "SOURCE": () => (/* binding */ SOURCE),
/* harmony export */   "SPAN": () => (/* binding */ SPAN),
/* harmony export */   "STRONG": () => (/* binding */ STRONG),
/* harmony export */   "STYLE": () => (/* binding */ STYLE),
/* harmony export */   "SUB": () => (/* binding */ SUB),
/* harmony export */   "SUMMARY": () => (/* binding */ SUMMARY),
/* harmony export */   "SUP": () => (/* binding */ SUP),
/* harmony export */   "TABLE": () => (/* binding */ TABLE),
/* harmony export */   "TBODY": () => (/* binding */ TBODY),
/* harmony export */   "TD": () => (/* binding */ TD),
/* harmony export */   "TEMPLATE": () => (/* binding */ TEMPLATE),
/* harmony export */   "TERM": () => (/* binding */ TERM),
/* harmony export */   "TEXTAREA": () => (/* binding */ TEXTAREA),
/* harmony export */   "TFOOT": () => (/* binding */ TFOOT),
/* harmony export */   "TH": () => (/* binding */ TH),
/* harmony export */   "THEAD": () => (/* binding */ THEAD),
/* harmony export */   "TIME": () => (/* binding */ TIME),
/* harmony export */   "TITLE": () => (/* binding */ TITLE),
/* harmony export */   "TR": () => (/* binding */ TR),
/* harmony export */   "TRACK": () => (/* binding */ TRACK),
/* harmony export */   "U": () => (/* binding */ U),
/* harmony export */   "UL": () => (/* binding */ UL),
/* harmony export */   "Utils": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Utils),
/* harmony export */   "VAR": () => (/* binding */ VAR),
/* harmony export */   "VIDEO": () => (/* binding */ VIDEO),
/* harmony export */   "WBR": () => (/* binding */ WBR),
/* harmony export */   "addResourceHandler": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.addResourceHandler),
/* harmony export */   "addResourceResolver": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.addResourceResolver),
/* harmony export */   "cssHandler": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.cssHandler),
/* harmony export */   "deadbeef": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.deadbeef),
/* harmony export */   "factory": () => (/* reexport safe */ jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.factory),
/* harmony export */   "javascriptHandler": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.javascriptHandler),
/* harmony export */   "load": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.load),
/* harmony export */   "removeResourceHandler": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.removeResourceHandler),
/* harmony export */   "removeResourceResolver": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.removeResourceResolver),
/* harmony export */   "resolveResourcePath": () => (/* reexport safe */ _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__.resolveResourcePath)
/* harmony export */ });
/* harmony import */ var jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jibs-dom-renderer */ "../jibs-dom-renderer/dist/index.js");
/* harmony import */ var _resource_loader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resource-loader.js */ "./lib/resource-loader.js");



const {
  NativeElement,
  TextElement,
  PortalElement,
  FORCE_REFLOW,
} = jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderers;

class HTMLRenderer extends jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.DOMRenderer {
  constructor(rootElement, _options) {
    super(rootElement);

    let options = {
      document: (this.rootElement && this.rootElement.ownerDocument),
      ...(_options || {}),
    };

    Object.defineProperties(this, {
      'options': {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        options || {},
      },
      'eventBindings': {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        new WeakMap(),
      },
      'elementIDMap': {
        writable:     false,
        enumerable:   false,
        configurable: false,
        value:        new Map(),
      },
    });
  }

  getDocument(context) {
    let options = this.options;
    if (options.document)
      return options.document;

    return (typeof document !== 'undefined') ? document : undefined;
  }

  getWindow(context) {
    let document = this.getDocument(context);
    if (document) {
      let window = (document.parentWindow || document.defaultView);
      if (window)
        return window;
    }

    return (typeof window !== 'undefined') ? window : undefined;
  }

  getElementFromCache(context, elementOrID) {
    let window          = this.getWindow(context);
    let virtualElement  = (elementOrID && this.elementIDMap.get(elementOrID.id)) || this.elementIDMap.get(elementOrID);
    if (!virtualElement && (elementOrID instanceof window.Node))
      return { element: elementOrID };

    return virtualElement;
  }

  addElementToCache(virtualElement) {
    if (!virtualElement)
      return;

    if (virtualElement.element)
      this.elementIDMap.set(virtualElement.element, virtualElement);

    if (virtualElement.id)
      this.elementIDMap.set(virtualElement.id, virtualElement);
  }

  removeElementFromCache(virtualElement) {
    if (!virtualElement)
      return;

    if (virtualElement.element)
      this.elementIDMap.delete(virtualElement.element);

    if (virtualElement.id)
      this.elementIDMap.delete(virtualElement.id);
  }

  _flattenAndFilterStyles(context, styles) {
    if (!styles || styles === true || Object.is(styles, Infinity) || Object.is(styles, NaN))
      return;

    if (Array.isArray(styles)) {
      let finalStyles = [];
      for (let i = 0, il = styles.length; i < il; i++) {
        let value = styles[i];
        if (!value)
          continue;

        value = this._flattenAndFilterStyles(context, styles[i]);
        if (!value)
          continue;

        if (Array.isArray(value))
          finalStyles = finalStyles.concat(value);
        else
          finalStyles.push(value);
      }

      return finalStyles;
    }

    return styles;
  }

  _parseCSSStyleString(context, styleStr) {
    const nameToPropertyName = (name) => {
      return name.replace(/^[^a-zA-Z]+/, '').replace(/[^a-zA-Z0-9]([a-zA-Z0-9-])/g, (m, p) => {
        return p.toUpperCase();
      });
    };

    let styleObj = {};

    (styleStr + '').replace(/([a-zA-Z0-9-]+)\s*:\s*([^;]+)/g, (m, name, value) => {
      styleObj[nameToPropertyName(name)] = value.replace(/^['"]/, '').replace(/['"]$/, '');
    });

    return styleObj;
  }

  _parseStyles(context, styles) {
    if (!styles)
      return {};

    let finalStyleObj = {};
    for (let i = 0, il = styles.length; i < il; i++) {
      let value = styles[i];
      if (!value || jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(value, 'number', 'boolean', 'bigint', 'function'))
        continue;

      if (jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Utils.instanceOf(value, 'string'))
        finalStyleObj = Object.assign(finalStyleObj, this._parseCSSStyleString(context, value));
      else
        finalStyleObj = Object.assign(finalStyleObj, value);
    }

    return finalStyleObj;
  }

  _flattenStyles(context, _styles) {
    let styles = this._flattenAndFilterStyles(context, _styles);
    if (!styles)
      return {};

    if (!Array.isArray(styles))
      styles = [ styles ];

    return this._parseStyles(context, styles);
  }

  bindEventMethod(context, element, propName, _extraArgs, eventCallback, props) {
    let extraArgs       = _extraArgs || [];
    let eventName       = propName.substring(2).toLowerCase();
    let currentBindings = this.eventBindings.get(element);
    if (currentBindings) {
      let eventBinding = currentBindings.get(eventName);
      if (eventBinding) {
        element.removeEventListener(eventName, eventBinding.callback);
        currentBindings.delete(eventName);
      }
    } else {
      currentBindings = new Map();
      this.eventBindings.set(element, currentBindings);
    }

    let bindingContext = {
      callback: (event) => eventCallback.call(element, { target: element, propName, event, props }),
      eventName,
      extraArgs,
    };

    currentBindings.set(eventName, bindingContext);

    element.addEventListener(eventName, bindingContext.callback, ...extraArgs);
  }

  createNativeElement(context, _type) {
    let isTerm  = (/^term$/i).test(_type);
    let type    = (isTerm) ? 'span' : _type;
    let element = this.getDocument(context).createElement(type);
    return element;
  }

  findNativeElement(context, selector) {
    return this.getDocument(context).querySelector(selector);
  }

  applyElementStyle(context, element, elementStyle, propName, _propValue, updatedStyles) {
    let propValue = _propValue;
    if (propValue == null || propValue === false || propValue === true || Object.is(propValue, Infinity) || Object.is(propValue, NaN))
      propValue = 'unset';

    if (typeof propValue === 'number' || typeof propValue === 'bigint' || (propValue instanceof Number))
      propValue = `${propValue}px`;

    if (elementStyle[propName] !== propValue) {
      updatedStyles[propName] = { previous: elementStyle[propName], current: propValue };
      elementStyle[propName] = propValue;
    }
  }

  applyElementStyles(context, element, styleObj, updatedProps) {
    if (!element || !styleObj)
      return;

    let styleProps = Object.keys(styleObj).sort((a, b) => {
      if (a.length !== b.length)
        return Math.sign(a.length - b.length);

      if (a === b)
        return 0;

      return (a < b) ? -1 : 1;
    });

    let updatedStyles = {};
    let elementStyle  = element.style;

    for (let i = 0, il = styleProps.length; i < il; i++) {
      let propName = styleProps[i];
      if (!(propName in elementStyle))
        continue;

      let propValue = styleObj[propName];
      this.applyElementStyle(context, element, elementStyle, propName, propValue, updatedStyles);
    }

    let updatedStylesKeys = Object.keys(updatedStyles);
    if (updatedStylesKeys.length > 0) {
      let stylePropUpdateOld  = {};
      let stylePropUpdateNew  = {};

      for (let i = 0, il = updatedStylesKeys.length; i < il; i++) {
        let propName    = updatedStylesKeys[i];
        let updateValue = updatedStyles[propName];

        stylePropUpdateOld[propName] = updateValue.previous;
        stylePropUpdateNew[propName] = updateValue.current;
      }

      updatedProps['style'] = { previous: stylePropUpdateOld, current: stylePropUpdateNew };
    }
  }

  formatElementProps(context, element, props) {
    return props || {};
  }

  formatToAttributeName(name) {
    let result = name.replace(/([a-z0-9]|^)([A-Z])/g, (m, p1, p2) => {
      return `${p1}-${p2}`;
    }).toLowerCase();

    return result;
  }

  formatFromAttributeName(name) {
    let result = name.replace(/-[a-z]/g, (m) => {
      return m.substring(1).toUpperCase();
    });

    return result;
  }

  handleElementProperty(context, element, propName, propValue, updatedProps) {
    if (!(propName in element))
      return false;

    if (!(/^(scrollLeft|scrollTop|value|checked|disabled|max|min|maxLength|minLength|multiple|pattern|readonly|required|autofocus|open)$/).test(propName))
      return false;

    let attributeValue = element[propName];
    if (attributeValue !== propValue) {
      if (element.nodeName === 'DIALOG' && propName === 'open' && typeof element.showModal === 'function') {
        try {
          if (propValue)
            element.showModal();
          else
            element.close();
        } catch (error) {
          setTimeout(() => {
            if (element[propName] !== attributeValue)
              return;

            if (propValue)
              element.showModal();
            else
              element.close();
          }, 5);
        }
      }

      updatedProps[propName] = { previous: attributeValue, current: propValue };
      element[propName] = propValue;
    }

    return true;
  }

  updateElementAttributes(context, element, _props) {
    let props = Object.assign({}, (_props || {}));
    if (Object.prototype.hasOwnProperty.call(props, 'style'))
      props.style = this._flattenStyles(context, props.style);
    else
      props.style = {};

    props = this.formatElementProps(context, element, props);

    let updatedProps  = {};
    let namesToDelete = [];
    let propNames     = Object.keys(props);
    let attributes    = element.getAttributeNames().reduce((attributes, attributeName) => {
      let currentAttributeValue = element.getAttribute(attributeName);
      let propName = this.formatFromAttributeName(attributeName);

      if (!Object.prototype.hasOwnProperty.call(props, propName)) {
        namesToDelete.push(attributeName);
        updatedProps[propName] = { previous: currentAttributeValue, current: undefined };
      }

      attributes[propName] = currentAttributeValue;
      return attributes;
    }, {});

    for (let i = 0, il = propNames.length; i < il; i++) {
      let propName = propNames[i];
      if (typeof propName === 'symbol')
        continue;

      if ((/^on[A-Z].*ExtraArgs$/).test(propName))
        continue;

      if ((/^(outerHTML)$/).test(propName))
        continue;

      let propValue = props[propName];

      if (propValue instanceof Boolean || propValue instanceof Number || propValue instanceof String)
        propValue = propValue.valueOf();

      if (propName === 'style') {
        this.applyElementStyles(context, element, propValue, updatedProps);
        continue;
      }

      if (propName === 'innerHTML') {
        element.innerHTML = (propValue == null) ? '' : propValue.toString();
        continue;
      } else if (this.handleElementProperty(context, element, propName, propValue, updatedProps)) {
        continue;
      }

      let typeOf = typeof propValue;
      if (propValue === true) {
        propValue = propName;
      } else if (propValue === false) {
        propValue = null;
      } else if (typeOf === 'symbol') {
        propValue = propValue.toString();
      } else if (typeOf === 'number' || typeOf === 'string' || typeOf === 'bigint') {
        propValue = '' + propValue;
      } else if (typeOf === 'function' && (/^on[A-Z]/).test(propName)) {
        this.bindEventMethod(context, element, propName, props[`${propName}ExtraArgs`], propValue, props);
        continue;
      } else if (propValue != null) {
        continue;
      }

      let attributeValue = attributes[propName];
      if (attributeValue !== propValue)
        updatedProps[propName] = { previous: attributeValue, current: propValue };
      else
        continue;

      if (propValue == null)
        element.removeAttribute(this.formatToAttributeName(propName));
      else
        element.setAttribute(this.formatToAttributeName(propName), propValue);
    }

    for (let i = 0, il = namesToDelete.length; i < il; i++) {
      let propName = namesToDelete[i];
      element.removeAttribute(propName);
    }

    return updatedProps;
  }

  destroyNativeElement(context, element) {
    if (!element.parentNode)
      return false;

    element.parentNode.removeChild(element);

    return true;
  }

  createTextElement(context, text) {
    return this.getDocument(context).createTextNode(('' + text));
  }

  updateTextElement(context, element, _text) {
    let text        = ('' + _text);
    let currentText = element.nodeValue;
    if (currentText === text)
      return false;

    element.nodeValue = text;

    return { previous: currentText, current: text };
  }

  buildIncomingElements(context, renderResult) {
    return jibs_dom_renderer__WEBPACK_IMPORTED_MODULE_0__.Utils.flattenArray(renderResult).filter((virtualElement) => {
      if (virtualElement == null || Object.is(virtualElement, NaN) || Object.is(virtualElement, Infinity))
        return false;

      return true;
    }).map((virtualElement) => {
      let elementID             = virtualElement.id;
      let cachedVirtualElement  = (elementID != null) ? this.getElementFromCache(context, virtualElement) : null;
      if (cachedVirtualElement)
        return { ...cachedVirtualElement, ...virtualElement };

      let element;
      if (virtualElement.type === NativeElement.TYPE) {
        let type = virtualElement.value;
        element = this.createNativeElement(context, type);
      } else if (virtualElement.type === TextElement.TYPE) {
        element = this.createTextElement(context, virtualElement.value);
      } else if (virtualElement.type === PortalElement.TYPE) {
        element = this.findNativeElement(context, virtualElement.value);
      } else {
        throw new TypeError(`HTMLRenderer::updateElementChildren: Unsupported virtual element type detected: ${virtualElement}`);
      }

      return { ...virtualElement, element };
    });
  }

  getNativeElementAttributes(context, element, helperCallback) {
    let attributeNames  = element.getAttributeNames();
    let props           = {};

    for (let i = 0, il = attributeNames.length; i < il; i++) {
      let attributeName = attributeNames[i];
      let value         = element.getAttribute(attributeName);

      if (typeof helperCallback === 'function') {
        let result = helperCallback(attributeName, value);
        if (result != null)
          props = { ...props, ...result };
      } else {
        props[this.formatFromAttributeName(attributeName)] = value;
      }
    }

    return props;
  }

  updateElementChildren(context, _parentVirtualElement, _renderResult, renderFrame) {
    let window                = this.getWindow(context);
    let renderResult          = _renderResult;
    let parentVirtualElement  = this.getElementFromCache(context, _parentVirtualElement) || _parentVirtualElement;
    let parentElement         = (parentVirtualElement && parentVirtualElement.element);

    if (!parentElement) {
      if (!_parentVirtualElement)
        return false;

      let [ result ] = this.buildIncomingElements(context, [ _parentVirtualElement ]);
      parentElement = (result && result.element);

      if (parentElement)
        this.addElementToCache(result);
    }

    // If this is a "term" element, then pipe it
    // through "fetchTermKey"
    if (parentVirtualElement && parentVirtualElement.type === NativeElement.TYPE && (/^term$/i).test(parentVirtualElement.value)) {
      let term = this.fetchTermKey(context, { ...(parentVirtualElement.props || {}) });
      if (term) {
        parentElement.innerHTML = term || '';
        return true;
      }
    }

    try {
      if (renderResult == null || Object.is(renderResult, NaN) || Object.is(renderResult, Infinity))
        renderResult = [];
      else if (!Array.isArray(renderResult))
        renderResult = [ renderResult ];

      let currentChildElements  = Array.from(parentElement.childNodes || []);
      let newChildElements      = this.buildIncomingElements(context, renderResult);
      let changed               = false;
      let childNodesMap         = new Map();
      let newNodesMap           = new Map();

      for (let i = 0, il = currentChildElements.length; i < il; i++) {
        let element         = currentChildElements[i];
        let virtualElement  = this.getElementFromCache(context, element);

        childNodesMap.set(virtualElement.element, virtualElement);
      }

      for (let i = 0, il = newChildElements.length; i < il; i++) {
        let virtualElement = newChildElements[i];
        newNodesMap.set(virtualElement.element, virtualElement);
      }

      // Remove children
      for (let [ element, virtualElement ] of childNodesMap) {
        if (!newNodesMap.has(element)) {
          changed = true;

          this.destroyNativeElement(context, element, virtualElement);
          this.removeElementFromCache(virtualElement);

          if (virtualElement.props && typeof virtualElement.props.ref === 'function')
            virtualElement.props.ref.call(virtualElement.element, null, virtualElement.element);
        }
      }

      // Add children
      for (let [ element, virtualElement ] of newNodesMap) {
        if (!childNodesMap.has(element)) {
          changed = true;

          parentElement.appendChild(element);
          this.addElementToCache(virtualElement);

          if (virtualElement.props && virtualElement.props[FORCE_REFLOW]) {
            // Force a reflow on the element
            element.offsetWidth;
          }

          if (element.nodeType === window.Element.ELEMENT_NODE)
            this.updateElementAttributes(context, element, virtualElement.props);

          if (virtualElement.props && typeof virtualElement.props.ref === 'function')
            virtualElement.props.ref.call(virtualElement.element, virtualElement.element, null);
        } else if (element.nodeType === window.Element.ELEMENT_NODE) {
          let didUpdated = this.updateElementAttributes(context, element, virtualElement.props);
          if (didUpdated && !changed && Object.keys(didUpdated).length > 0)
            changed = true;
        } else if (element.nodeType === window.Element.TEXT_NODE) {
          this.updateTextElement(context, element, virtualElement.value);
        }
      }

      return changed;
    } catch (error) {
      console.error(error);
    }
  }

  // eslint-disable-next-line no-unused-vars
  fetchTermKey(context, props) {
    // Return nothing means fallback
    // to standard children
  }
}



const A = 'A';
const ABBR = 'ABBR';
const ADDRESS = 'ADDRESS';
const AREA = 'AREA';
const ARTICLE = 'ARTICLE';
const ASIDE = 'ASIDE';
const AUDIO = 'AUDIO';
const B = 'B';
const BASE = 'BASE';
const BDI = 'BDI';
const BDO = 'BDO';
const BLOCKQUOTE = 'BLOCKQUOTE';
const BR = 'BR';
const BUTTON = 'BUTTON';
const CANVAS = 'CANVAS';
const CAPTION = 'CAPTION';
const CITE = 'CITE';
const CODE = 'CODE';
const COL = 'COL';
const COLGROUP = 'COLGROUP';
const DATA = 'DATA';
const DATALIST = 'DATALIST';
const DD = 'DD';
const DEL = 'DEL';
const DETAILS = 'DETAILS';
const DFN = 'DFN';
const DIALOG = 'DIALOG';
const DIV = 'DIV';
const DL = 'DL';
const DT = 'DT';
const EM = 'EM';
const EMBED = 'EMBED';
const FIELDSET = 'FIELDSET';
const FIGCAPTION = 'FIGCAPTION';
const FIGURE = 'FIGURE';
const FOOTER = 'FOOTER';
const FORM = 'FORM';
const H1 = 'H1';
const H2 = 'H2';
const H3 = 'H3';
const H4 = 'H4';
const H5 = 'H5';
const H6 = 'H6';
const HEADER = 'HEADER';
const HGROUP = 'HGROUP';
const HR = 'HR';
const I = 'I';
const IFRAME = 'IFRAME';
const IMG = 'IMG';
const INPUT = 'INPUT';
const INS = 'INS';
const KBD = 'KBD';
const LABEL = 'LABEL';
const LEGEND = 'LEGEND';
const LI = 'LI';
const LINK = 'LINK';
const MAIN = 'MAIN';
const MAP = 'MAP';
const MARK = 'MARK';
const MENU = 'MENU';
const META = 'META';
const METER = 'METER';
const NAV = 'NAV';
const NOSCRIPT = 'NOSCRIPT';
const OBJECT = 'OBJECT';
const OL = 'OL';
const OPTGROUP = 'OPTGROUP';
const OPTION = 'OPTION';
const OUTPUT = 'OUTPUT';
const P = 'P';
const PICTURE = 'PICTURE';
const PRE = 'PRE';
const PROGRESS = 'PROGRESS';
const Q = 'Q';
const RP = 'RP';
const RT = 'RT';
const RUBY = 'RUBY';
const S = 'S';
const SAMP = 'SAMP';
const SCRIPT = 'SCRIPT';
const SECTION = 'SECTION';
const SELECT = 'SELECT';
const SLOT = 'SLOT';
const SMALL = 'SMALL';
const SOURCE = 'SOURCE';
const SPAN = 'SPAN';
const STRONG = 'STRONG';
const STYLE = 'STYLE';
const SUB = 'SUB';
const SUMMARY = 'SUMMARY';
const SUP = 'SUP';
const TABLE = 'TABLE';
const TBODY = 'TBODY';
const TD = 'TD';
const TEMPLATE = 'TEMPLATE';
const TEXTAREA = 'TEXTAREA';
const TERM = 'TERM';
const TFOOT = 'TFOOT';
const TH = 'TH';
const THEAD = 'THEAD';
const TIME = 'TIME';
const TITLE = 'TITLE';
const TR = 'TR';
const TRACK = 'TRACK';
const U = 'U';
const UL = 'UL';
const VAR = 'VAR';
const VIDEO = 'VIDEO';
const WBR = 'WBR';

})();

var __webpack_exports__$ = __webpack_exports__.$;
var __webpack_exports__A = __webpack_exports__.A;
var __webpack_exports__ABBR = __webpack_exports__.ABBR;
var __webpack_exports__ADDRESS = __webpack_exports__.ADDRESS;
var __webpack_exports__AREA = __webpack_exports__.AREA;
var __webpack_exports__ARTICLE = __webpack_exports__.ARTICLE;
var __webpack_exports__ASIDE = __webpack_exports__.ASIDE;
var __webpack_exports__AUDIO = __webpack_exports__.AUDIO;
var __webpack_exports__B = __webpack_exports__.B;
var __webpack_exports__BASE = __webpack_exports__.BASE;
var __webpack_exports__BDI = __webpack_exports__.BDI;
var __webpack_exports__BDO = __webpack_exports__.BDO;
var __webpack_exports__BLOCKQUOTE = __webpack_exports__.BLOCKQUOTE;
var __webpack_exports__BR = __webpack_exports__.BR;
var __webpack_exports__BUTTON = __webpack_exports__.BUTTON;
var __webpack_exports__CANVAS = __webpack_exports__.CANVAS;
var __webpack_exports__CAPTION = __webpack_exports__.CAPTION;
var __webpack_exports__CITE = __webpack_exports__.CITE;
var __webpack_exports__CODE = __webpack_exports__.CODE;
var __webpack_exports__COL = __webpack_exports__.COL;
var __webpack_exports__COLGROUP = __webpack_exports__.COLGROUP;
var __webpack_exports__Component = __webpack_exports__.Component;
var __webpack_exports__Components = __webpack_exports__.Components;
var __webpack_exports__DATA = __webpack_exports__.DATA;
var __webpack_exports__DATALIST = __webpack_exports__.DATALIST;
var __webpack_exports__DD = __webpack_exports__.DD;
var __webpack_exports__DEL = __webpack_exports__.DEL;
var __webpack_exports__DETAILS = __webpack_exports__.DETAILS;
var __webpack_exports__DFN = __webpack_exports__.DFN;
var __webpack_exports__DIALOG = __webpack_exports__.DIALOG;
var __webpack_exports__DIV = __webpack_exports__.DIV;
var __webpack_exports__DL = __webpack_exports__.DL;
var __webpack_exports__DOMRenderer = __webpack_exports__.DOMRenderer;
var __webpack_exports__DT = __webpack_exports__.DT;
var __webpack_exports__EM = __webpack_exports__.EM;
var __webpack_exports__EMBED = __webpack_exports__.EMBED;
var __webpack_exports__FIELDSET = __webpack_exports__.FIELDSET;
var __webpack_exports__FIGCAPTION = __webpack_exports__.FIGCAPTION;
var __webpack_exports__FIGURE = __webpack_exports__.FIGURE;
var __webpack_exports__FOOTER = __webpack_exports__.FOOTER;
var __webpack_exports__FORM = __webpack_exports__.FORM;
var __webpack_exports__H1 = __webpack_exports__.H1;
var __webpack_exports__H2 = __webpack_exports__.H2;
var __webpack_exports__H3 = __webpack_exports__.H3;
var __webpack_exports__H4 = __webpack_exports__.H4;
var __webpack_exports__H5 = __webpack_exports__.H5;
var __webpack_exports__H6 = __webpack_exports__.H6;
var __webpack_exports__HEADER = __webpack_exports__.HEADER;
var __webpack_exports__HGROUP = __webpack_exports__.HGROUP;
var __webpack_exports__HR = __webpack_exports__.HR;
var __webpack_exports__HTMLRenderer = __webpack_exports__.HTMLRenderer;
var __webpack_exports__I = __webpack_exports__.I;
var __webpack_exports__IFRAME = __webpack_exports__.IFRAME;
var __webpack_exports__IMG = __webpack_exports__.IMG;
var __webpack_exports__INPUT = __webpack_exports__.INPUT;
var __webpack_exports__INS = __webpack_exports__.INS;
var __webpack_exports__Jibs = __webpack_exports__.Jibs;
var __webpack_exports__KBD = __webpack_exports__.KBD;
var __webpack_exports__LABEL = __webpack_exports__.LABEL;
var __webpack_exports__LEGEND = __webpack_exports__.LEGEND;
var __webpack_exports__LI = __webpack_exports__.LI;
var __webpack_exports__LINK = __webpack_exports__.LINK;
var __webpack_exports__MAIN = __webpack_exports__.MAIN;
var __webpack_exports__MAP = __webpack_exports__.MAP;
var __webpack_exports__MARK = __webpack_exports__.MARK;
var __webpack_exports__MENU = __webpack_exports__.MENU;
var __webpack_exports__META = __webpack_exports__.META;
var __webpack_exports__METER = __webpack_exports__.METER;
var __webpack_exports__NAV = __webpack_exports__.NAV;
var __webpack_exports__NOSCRIPT = __webpack_exports__.NOSCRIPT;
var __webpack_exports__OBJECT = __webpack_exports__.OBJECT;
var __webpack_exports__OL = __webpack_exports__.OL;
var __webpack_exports__OPTGROUP = __webpack_exports__.OPTGROUP;
var __webpack_exports__OPTION = __webpack_exports__.OPTION;
var __webpack_exports__OUTPUT = __webpack_exports__.OUTPUT;
var __webpack_exports__P = __webpack_exports__.P;
var __webpack_exports__PICTURE = __webpack_exports__.PICTURE;
var __webpack_exports__PRE = __webpack_exports__.PRE;
var __webpack_exports__PROGRESS = __webpack_exports__.PROGRESS;
var __webpack_exports__Q = __webpack_exports__.Q;
var __webpack_exports__RP = __webpack_exports__.RP;
var __webpack_exports__RT = __webpack_exports__.RT;
var __webpack_exports__RUBY = __webpack_exports__.RUBY;
var __webpack_exports__Renderers = __webpack_exports__.Renderers;
var __webpack_exports__S = __webpack_exports__.S;
var __webpack_exports__SAMP = __webpack_exports__.SAMP;
var __webpack_exports__SCRIPT = __webpack_exports__.SCRIPT;
var __webpack_exports__SECTION = __webpack_exports__.SECTION;
var __webpack_exports__SELECT = __webpack_exports__.SELECT;
var __webpack_exports__SLOT = __webpack_exports__.SLOT;
var __webpack_exports__SMALL = __webpack_exports__.SMALL;
var __webpack_exports__SOURCE = __webpack_exports__.SOURCE;
var __webpack_exports__SPAN = __webpack_exports__.SPAN;
var __webpack_exports__STRONG = __webpack_exports__.STRONG;
var __webpack_exports__STYLE = __webpack_exports__.STYLE;
var __webpack_exports__SUB = __webpack_exports__.SUB;
var __webpack_exports__SUMMARY = __webpack_exports__.SUMMARY;
var __webpack_exports__SUP = __webpack_exports__.SUP;
var __webpack_exports__TABLE = __webpack_exports__.TABLE;
var __webpack_exports__TBODY = __webpack_exports__.TBODY;
var __webpack_exports__TD = __webpack_exports__.TD;
var __webpack_exports__TEMPLATE = __webpack_exports__.TEMPLATE;
var __webpack_exports__TERM = __webpack_exports__.TERM;
var __webpack_exports__TEXTAREA = __webpack_exports__.TEXTAREA;
var __webpack_exports__TFOOT = __webpack_exports__.TFOOT;
var __webpack_exports__TH = __webpack_exports__.TH;
var __webpack_exports__THEAD = __webpack_exports__.THEAD;
var __webpack_exports__TIME = __webpack_exports__.TIME;
var __webpack_exports__TITLE = __webpack_exports__.TITLE;
var __webpack_exports__TR = __webpack_exports__.TR;
var __webpack_exports__TRACK = __webpack_exports__.TRACK;
var __webpack_exports__U = __webpack_exports__.U;
var __webpack_exports__UL = __webpack_exports__.UL;
var __webpack_exports__Utils = __webpack_exports__.Utils;
var __webpack_exports__VAR = __webpack_exports__.VAR;
var __webpack_exports__VIDEO = __webpack_exports__.VIDEO;
var __webpack_exports__WBR = __webpack_exports__.WBR;
var __webpack_exports__addResourceHandler = __webpack_exports__.addResourceHandler;
var __webpack_exports__addResourceResolver = __webpack_exports__.addResourceResolver;
var __webpack_exports__cssHandler = __webpack_exports__.cssHandler;
var __webpack_exports__deadbeef = __webpack_exports__.deadbeef;
var __webpack_exports__factory = __webpack_exports__.factory;
var __webpack_exports__javascriptHandler = __webpack_exports__.javascriptHandler;
var __webpack_exports__load = __webpack_exports__.load;
var __webpack_exports__removeResourceHandler = __webpack_exports__.removeResourceHandler;
var __webpack_exports__removeResourceResolver = __webpack_exports__.removeResourceResolver;
var __webpack_exports__resolveResourcePath = __webpack_exports__.resolveResourcePath;
export { __webpack_exports__$ as $, __webpack_exports__A as A, __webpack_exports__ABBR as ABBR, __webpack_exports__ADDRESS as ADDRESS, __webpack_exports__AREA as AREA, __webpack_exports__ARTICLE as ARTICLE, __webpack_exports__ASIDE as ASIDE, __webpack_exports__AUDIO as AUDIO, __webpack_exports__B as B, __webpack_exports__BASE as BASE, __webpack_exports__BDI as BDI, __webpack_exports__BDO as BDO, __webpack_exports__BLOCKQUOTE as BLOCKQUOTE, __webpack_exports__BR as BR, __webpack_exports__BUTTON as BUTTON, __webpack_exports__CANVAS as CANVAS, __webpack_exports__CAPTION as CAPTION, __webpack_exports__CITE as CITE, __webpack_exports__CODE as CODE, __webpack_exports__COL as COL, __webpack_exports__COLGROUP as COLGROUP, __webpack_exports__Component as Component, __webpack_exports__Components as Components, __webpack_exports__DATA as DATA, __webpack_exports__DATALIST as DATALIST, __webpack_exports__DD as DD, __webpack_exports__DEL as DEL, __webpack_exports__DETAILS as DETAILS, __webpack_exports__DFN as DFN, __webpack_exports__DIALOG as DIALOG, __webpack_exports__DIV as DIV, __webpack_exports__DL as DL, __webpack_exports__DOMRenderer as DOMRenderer, __webpack_exports__DT as DT, __webpack_exports__EM as EM, __webpack_exports__EMBED as EMBED, __webpack_exports__FIELDSET as FIELDSET, __webpack_exports__FIGCAPTION as FIGCAPTION, __webpack_exports__FIGURE as FIGURE, __webpack_exports__FOOTER as FOOTER, __webpack_exports__FORM as FORM, __webpack_exports__H1 as H1, __webpack_exports__H2 as H2, __webpack_exports__H3 as H3, __webpack_exports__H4 as H4, __webpack_exports__H5 as H5, __webpack_exports__H6 as H6, __webpack_exports__HEADER as HEADER, __webpack_exports__HGROUP as HGROUP, __webpack_exports__HR as HR, __webpack_exports__HTMLRenderer as HTMLRenderer, __webpack_exports__I as I, __webpack_exports__IFRAME as IFRAME, __webpack_exports__IMG as IMG, __webpack_exports__INPUT as INPUT, __webpack_exports__INS as INS, __webpack_exports__Jibs as Jibs, __webpack_exports__KBD as KBD, __webpack_exports__LABEL as LABEL, __webpack_exports__LEGEND as LEGEND, __webpack_exports__LI as LI, __webpack_exports__LINK as LINK, __webpack_exports__MAIN as MAIN, __webpack_exports__MAP as MAP, __webpack_exports__MARK as MARK, __webpack_exports__MENU as MENU, __webpack_exports__META as META, __webpack_exports__METER as METER, __webpack_exports__NAV as NAV, __webpack_exports__NOSCRIPT as NOSCRIPT, __webpack_exports__OBJECT as OBJECT, __webpack_exports__OL as OL, __webpack_exports__OPTGROUP as OPTGROUP, __webpack_exports__OPTION as OPTION, __webpack_exports__OUTPUT as OUTPUT, __webpack_exports__P as P, __webpack_exports__PICTURE as PICTURE, __webpack_exports__PRE as PRE, __webpack_exports__PROGRESS as PROGRESS, __webpack_exports__Q as Q, __webpack_exports__RP as RP, __webpack_exports__RT as RT, __webpack_exports__RUBY as RUBY, __webpack_exports__Renderers as Renderers, __webpack_exports__S as S, __webpack_exports__SAMP as SAMP, __webpack_exports__SCRIPT as SCRIPT, __webpack_exports__SECTION as SECTION, __webpack_exports__SELECT as SELECT, __webpack_exports__SLOT as SLOT, __webpack_exports__SMALL as SMALL, __webpack_exports__SOURCE as SOURCE, __webpack_exports__SPAN as SPAN, __webpack_exports__STRONG as STRONG, __webpack_exports__STYLE as STYLE, __webpack_exports__SUB as SUB, __webpack_exports__SUMMARY as SUMMARY, __webpack_exports__SUP as SUP, __webpack_exports__TABLE as TABLE, __webpack_exports__TBODY as TBODY, __webpack_exports__TD as TD, __webpack_exports__TEMPLATE as TEMPLATE, __webpack_exports__TERM as TERM, __webpack_exports__TEXTAREA as TEXTAREA, __webpack_exports__TFOOT as TFOOT, __webpack_exports__TH as TH, __webpack_exports__THEAD as THEAD, __webpack_exports__TIME as TIME, __webpack_exports__TITLE as TITLE, __webpack_exports__TR as TR, __webpack_exports__TRACK as TRACK, __webpack_exports__U as U, __webpack_exports__UL as UL, __webpack_exports__Utils as Utils, __webpack_exports__VAR as VAR, __webpack_exports__VIDEO as VIDEO, __webpack_exports__WBR as WBR, __webpack_exports__addResourceHandler as addResourceHandler, __webpack_exports__addResourceResolver as addResourceResolver, __webpack_exports__cssHandler as cssHandler, __webpack_exports__deadbeef as deadbeef, __webpack_exports__factory as factory, __webpack_exports__javascriptHandler as javascriptHandler, __webpack_exports__load as load, __webpack_exports__removeResourceHandler as removeResourceHandler, __webpack_exports__removeResourceResolver as removeResourceResolver, __webpack_exports__resolveResourcePath as resolveResourcePath };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSw4QkFBbUI7O0FBRXJGLDhCQUFtQjtBQUNuQixxQkFBcUIsOEJBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLDZEQUE2RCw4QkFBbUI7OztBQUdoRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDLFFBQVE7QUFDckQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlFQUF5RSxVQUFVO0FBQ25GLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVSx3Q0FBd0M7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYyxJQUFJLFlBQVk7QUFDNUQsUUFBUTtBQUNSLDRCQUE0QixjQUFjLElBQUksWUFBWTtBQUMxRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0REFBNEQsMEZBQTBGO0FBQ3RKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsaUZBQWlGLFVBQVU7QUFDM0Y7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXOztBQUVYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLDZEQUE2RCxnQ0FBbUI7QUFDaEYsMEVBQTBFLGdDQUFtQjtBQUM3RixzRUFBc0UsZ0NBQW1CO0FBQ3pGLHdFQUF3RSxnQ0FBbUI7QUFDM0Ysd0VBQXdFLGdDQUFtQjtBQUMzRiwyRUFBMkUsZ0NBQW1COzs7Ozs7Ozs7QUFTOUYsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9EQUFvRCxVQUFVO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdDQUFtQjs7QUFFckYsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsNkRBQTZELGdDQUFtQjs7O0FBR2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLCtCQUErQjtBQUN2RTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdGQUFnRixpQ0FBaUM7QUFDakg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLGNBQWM7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlJQUFpSSxzQkFBc0I7O0FBRXZKOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBLDhGQUE4RiwrQkFBK0I7O0FBRTdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBLDBGQUEwRiwyQkFBMkI7O0FBRXJIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQjtBQUNqQixPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQsUUFBUTtBQUN6RDtBQUNBLGNBQWMsZ0JBQWdCOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0MsUUFBUTtBQUN2RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLDZEQUE2RCxnQ0FBbUI7OztBQUdoRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckMsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sK0JBQStCOztBQUVyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQW1COztBQUVyRixnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qiw2REFBNkQsZ0NBQW1CO0FBQ2hGLHdFQUF3RSxnQ0FBbUI7Ozs7O0FBSzNGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxnQ0FBbUI7O0FBRXJGLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLDZEQUE2RCxnQ0FBbUI7OztBQUdoRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQW1COztBQUVyRixnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSx5Q0FBeUMsUUFBUTtBQUNqRCxVQUFVLG9CQUFvQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixlQUFlOztBQUVwQztBQUNBO0FBQ0EsbUNBQW1DLElBQUksZUFBZSxJQUFJOztBQUUxRDtBQUNBOztBQUVBLGNBQWMsT0FBTyxHQUFHLElBQUk7QUFDNUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsV0FBVyxHQUFHLGNBQWM7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7O0FBRUQ7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQSx3RUFBd0U7QUFDeEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvRUFBb0UsTUFBTTs7QUFFMUU7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0MsUUFBUTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUVBQWlFLE1BQU07O0FBRXZFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdFQUF3RSxNQUFNOztBQUU5RTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUMsUUFBUTtBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdDQUFnQyxHQUFHO0FBQzNELE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUZBQW1GLGVBQWU7QUFDbEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7Ozs7Ozs7Ozs7QUFXQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7Ozs7QUFLQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCw4QkFBOEI7QUFDOUIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOzs7QUFHQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsMENBQTBDLFNBQVM7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBOztBQUVBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBOztBQUVBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxRQUFRO0FBQzdDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx3Q0FBd0M7QUFDM0Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxpQkFBaUI7QUFDbEY7QUFDQSwwREFBMEQsYUFBYTtBQUN2RTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSwyQ0FBMkMsY0FBYzs7QUFFekQsT0FBTzs7QUFFUCxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQ0FBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsaUNBQW1CO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUNBQW1CO0FBQzdCO0FBQ0EsZUFBZSxpQ0FBbUIsd0JBQXdCLGlDQUFtQjtBQUM3RSxtREFBbUQsd0NBQXdDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlDQUFtQjtBQUM3QixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlDQUFtQjtBQUM3QjtBQUNBLGlFQUFpRSxpQkFBaUI7QUFDbEY7QUFDQSwwREFBMEQsYUFBYTtBQUN2RTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHlFQUF5RSxpQ0FBbUI7QUFDNUYsNkRBQTZELGlDQUFtQjs7OztBQUloRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyVzs7QUFFM1csMkNBQTJDLGNBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzczRnpEO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7O0FBRU87QUFDUDtBQUNBOztBQUVPO0FBQ1Asc0JBQXNCO0FBQ3RCOztBQUVBO0FBQ0E7O0FBRU87QUFDUDtBQUNBOztBQUVPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVPO0FBQ1A7QUFDQSwwQkFBMEIsbUNBQW1DO0FBQzdEOztBQUVPLG9DQUFvQyxrQkFBa0I7QUFDN0Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0VBQWdFLGFBQWE7QUFDN0U7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBSUM7Ozs7Ozs7U0M5SUY7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx5Q0FBeUMsd0NBQXdDO1VBQ2pGO1VBQ0E7VUFDQTs7Ozs7VUNQQTs7Ozs7VUNBQTtVQUNBO1VBQ0E7VUFDQSx1REFBdUQsaUJBQWlCO1VBQ3hFO1VBQ0EsZ0RBQWdELGFBQWE7VUFDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNOa0U7QUFDaEM7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLEVBQUUsd0RBQVM7O0FBRU4sMkJBQTJCLDBEQUFXO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QjtBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTs7QUFFQSx1REFBdUQ7QUFDdkQ7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQSxvQkFBb0IsK0RBQWdCO0FBQ3BDOztBQUVBLFVBQVUsK0RBQWdCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlEQUF5RCx5Q0FBeUM7QUFDbEc7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixVQUFVOztBQUUvQjtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscURBQXFELFFBQVE7QUFDN0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7QUFDekIsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsZUFBZTtBQUMvQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQztBQUNuQzs7QUFFQTtBQUNBO0FBQ0EsS0FBSyxJQUFJOztBQUVULDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1Isa0VBQWtFLFNBQVM7QUFDM0U7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0MsUUFBUTtBQUN2RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxXQUFXLGlFQUFrQjtBQUM3QjtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1IsK0dBQStHLGVBQWU7QUFDOUg7O0FBRUEsZUFBZTtBQUNmLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdELFFBQVE7QUFDeEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxvQ0FBb0MsR0FBRztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3REFBd0QsUUFBUTtBQUNoRTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0RBQW9ELFFBQVE7QUFDNUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxQzs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaWJzLWh0bWwtcmVuZGVyZXIvLi4vamlicy1kb20tcmVuZGVyZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9qaWJzLWh0bWwtcmVuZGVyZXIvLi9saWIvcmVzb3VyY2UtbG9hZGVyLmpzIiwid2VicGFjazovL2ppYnMtaHRtbC1yZW5kZXJlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9qaWJzLWh0bWwtcmVuZGVyZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2ppYnMtaHRtbC1yZW5kZXJlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ppYnMtaHRtbC1yZW5kZXJlci93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2ppYnMtaHRtbC1yZW5kZXJlci8uL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyB2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi9saWIvY29tcG9uZW50LW5vZGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvY29tcG9uZW50LW5vZGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29tcG9uZW50Tm9kZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wb25lbnROb2RlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgamlicyAqLyBcIi4uL2ppYnMvZGlzdC9pbmRleC5qc1wiKTtcblxuXG5jb25zdCB7XG4gIEpJQl9QUk9YWSxcbiAgcmVzb2x2ZUNoaWxkcmVuLFxufSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5KaWJzO1xuXG5jb25zdCB7XG4gIENPTlRFWFRfSUQsXG4gIFJvb3ROb2RlLFxufSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZW5kZXJlcnM7XG5cbmNvbnN0IHtcbiAgSU5JVF9NRVRIT0QsXG4gIFVQREFURV9FVkVOVCxcbiAgUEVORElOR19TVEFURV9VUERBVEUsXG4gIExBU1RfUkVOREVSX1RJTUUsXG4gIFNLSVBfU1RBVEVfVVBEQVRFUyxcbn0gPSBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQ29tcG9uZW50cztcblxuY2xhc3MgQ29tcG9uZW50Tm9kZSBleHRlbmRzIFJvb3ROb2RlIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgJ3Jvb3ROb2RlJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdjb21wb25lbnQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ19wZW5kaW5nQ29udGV4dFVwZGF0ZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbnVsbCxcbiAgICAgIH0sXG4gICAgICAnX2NhY2hlZFJlbmRlclJlc3VsdCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbnVsbCxcbiAgICAgIH0sXG4gICAgICAnX2NhY2hlZFJlbmRlckNvbnRleHQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ19jYWNoZWRXYWl0aW5nUmVuZGVyUmVzdWx0Jzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdfcHJldmlvdXNTdGF0ZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAge30sXG4gICAgICB9LFxuICAgICAgJ19jdXJyZW50SmliJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdfbGFzdENvbnRleHRJRCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgdGhpcy5jb250ZXh0W0NPTlRFWFRfSURdIHx8IDFuLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIG1lcmdlQ29tcG9uZW50UHJvcHMob2xkUHJvcHMsIG5ld1Byb3BzKSB7XG4gICAgbGV0IHByb3BzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBvbGRQcm9wcyB8fCB7fSwgbmV3UHJvcHMpO1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuXG4gIGZpcmVQcm9wVXBkYXRlcyhfb2xkUHJvcHMsIF9uZXdQcm9wcykge1xuICAgIGxldCBuZXdQcm9wcyAgICA9IF9uZXdQcm9wcyB8fCB7fTtcbiAgICBsZXQgYWxsUHJvcEtleXMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKG5ld1Byb3BzKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuZXdQcm9wcykpKTtcblxuICAgIGxldCBvbGRQcm9wcyAgICA9IF9vbGRQcm9wcyB8fCB7fTtcbiAgICBsZXQgb2xkUHJvcEtleXMgPSBPYmplY3Qua2V5cyhvbGRQcm9wcykuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2xkUHJvcHMpKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBvbGRQcm9wS2V5cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgICAgYWxsUHJvcEtleXMuYWRkKG9sZFByb3BLZXlzW2ldKTtcblxuICAgIGZvciAobGV0IGtleSBvZiBhbGxQcm9wS2V5cykge1xuICAgICAgbGV0IG9sZFZhbHVlICA9IG9sZFByb3BzW2tleV07XG4gICAgICBsZXQgbmV3VmFsdWUgID0gbmV3UHJvcHNba2V5XTtcblxuICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSlcbiAgICAgICAgdGhpcy5jb21wb25lbnQub25Qcm9wVXBkYXRlZChrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgc2hvdWxkUmVuZGVyKG5ld1Byb3BzLCBuZXdDaGlsZHJlbikge1xuICAgIGxldCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICBpZiAoIWNvbXBvbmVudClcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX2xhc3RDb250ZXh0SUQgPCB0aGlzLmNvbnRleHRbQ09OVEVYVF9JRF0pIHtcbiAgICAgIHRoaXMuX2xhc3RDb250ZXh0SUQgPSB0aGlzLmNvbnRleHRbQ09OVEVYVF9JRF07XG4gICAgICB0aGlzLl9wcmV2aW91c1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgY29tcG9uZW50LnN0YXRlKTtcblxuICAgICAgdGhpcy5maXJlUHJvcFVwZGF0ZXMoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcyk7XG4gICAgICBjb21wb25lbnQucHJvcHMgPSB0aGlzLm1lcmdlQ29tcG9uZW50UHJvcHMoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcyk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNoaWxkcmVuRGlmZmVyKGNvbXBvbmVudC5jaGlsZHJlbiwgbmV3Q2hpbGRyZW4pKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgY29tcG9uZW50LnN0YXRlKTtcblxuICAgICAgdGhpcy5maXJlUHJvcFVwZGF0ZXMoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcyk7XG4gICAgICBjb21wb25lbnQucHJvcHMgPSB0aGlzLm1lcmdlQ29tcG9uZW50UHJvcHMoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcyk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxldCBwcmV2aW91c1N0YXRlID0gdGhpcy5fcHJldmlvdXNTdGF0ZSB8fCB7fTtcbiAgICBsZXQgcHJvcHNEaWZmZXIgICA9IHRoaXMucHJvcHNEaWZmZXIoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcywgWyAncmVmJywgJ2tleScgXSwgdHJ1ZSk7XG4gICAgaWYgKHByb3BzRGlmZmVyICYmIGNvbXBvbmVudC5zaG91bGRVcGRhdGUobmV3UHJvcHMsIHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgY29tcG9uZW50LnN0YXRlKTtcblxuICAgICAgdGhpcy5maXJlUHJvcFVwZGF0ZXMoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcyk7XG4gICAgICBjb21wb25lbnQucHJvcHMgPSB0aGlzLm1lcmdlQ29tcG9uZW50UHJvcHMoY29tcG9uZW50LnByb3BzLCBuZXdQcm9wcyk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxldCBzdGF0ZURpZmZlcnMgPSB0aGlzLnByb3BzRGlmZmVyKHByZXZpb3VzU3RhdGUsIGNvbXBvbmVudC5zdGF0ZSk7XG4gICAgaWYgKHN0YXRlRGlmZmVycyAmJiBjb21wb25lbnQuc2hvdWxkVXBkYXRlKG5ld1Byb3BzLCBwcmV2aW91c1N0YXRlKSkge1xuICAgICAgdGhpcy5fcHJldmlvdXNTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGNvbXBvbmVudC5zdGF0ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBhc3luYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLmRlc3Ryb3lpbmcgPSB0cnVlO1xuXG4gICAgYXdhaXQgdGhpcy5yZW5kZXJQcm9taXNlO1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICBpZiAodGhpcy5fY3VycmVudEppYiAmJiB0eXBlb2YgdGhpcy5fY3VycmVudEppYi5wcm9wcy5yZWYgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRoaXMuX2N1cnJlbnRKaWIucHJvcHMucmVmLmNhbGwodGhpcy5jb21wb25lbnQsIG51bGwsIHRoaXMuY29tcG9uZW50KTtcblxuICAgICAgYXdhaXQgdGhpcy5jb21wb25lbnQuZGVzdHJveSgpO1xuICAgICAgdGhpcy5jb21wb25lbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJvb3ROb2RlKSB7XG4gICAgICBhd2FpdCB0aGlzLnJvb3ROb2RlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMucm9vdE5vZGUgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdCA9IG51bGw7XG4gICAgdGhpcy5fcHJldmlvdXNTdGF0ZSA9IG51bGw7XG4gICAgdGhpcy5fY3VycmVudEppYiA9IG51bGw7XG5cbiAgICByZXR1cm4gYXdhaXQgc3VwZXIuZGVzdHJveSgpO1xuICB9XG5cbiAgb25Db250ZXh0VXBkYXRlKCkge1xuICAgIGlmICghdGhpcy5jb21wb25lbnQgfHwgdGhpcy5jb21wb25lbnRbU0tJUF9TVEFURV9VUERBVEVTXSB8fCB0aGlzLmNvbXBvbmVudFtQRU5ESU5HX1NUQVRFX1VQREFURV0pXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLnJlbmRlcih0aGlzLl9jdXJyZW50SmliLCB0aGlzLl9jYWNoZWRSZW5kZXJDb250ZXh0IHx8IHsgaW5kZXg6IDAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXNvbHZlQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gcmVzb2x2ZUNoaWxkcmVuLmNhbGwodGhpcywgY2hpbGRyZW4pO1xuICB9XG5cbiAgYXN5bmMgc3luY0VsZW1lbnRzV2l0aFJlbmRlcmVyKG5vZGUsIHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50KVxuICAgICAgcmV0dXJuO1xuXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGFyZW50LnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKTtcbiAgICBpZiAodGhpcy5jb21wb25lbnQpXG4gICAgICB0aGlzLmNvbXBvbmVudC51cGRhdGVkKCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGFzeW5jIF9yZW5kZXIoamliLCByZW5kZXJDb250ZXh0KSB7XG4gICAgaWYgKGppYiAhPT0gdGhpcy5fY3VycmVudEppYilcbiAgICAgIHRoaXMuX2N1cnJlbnRKaWIgPSBqaWI7XG5cbiAgICB0aGlzLl9jYWNoZWRSZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcblxuICAgIGlmICghamliKVxuICAgICAgcmV0dXJuO1xuXG4gICAgbGV0IHJlbmRlckZyYW1lID0gdGhpcy5yZW5kZXJGcmFtZTtcblxuICAgIGxldCB7IFR5cGU6IENvbXBvbmVudENsYXNzLCBwcm9wcywgY2hpbGRyZW4gfSA9IGppYjtcbiAgICBqaWIuY2hpbGRyZW4gPSBhd2FpdCB0aGlzLnJlc29sdmVDaGlsZHJlbihjaGlsZHJlbik7XG5cbiAgICBjb25zdCBmaW5hbGl6ZVJlbmRlciA9IGFzeW5jIChyZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSB8fCAhdGhpcy5jb21wb25lbnQpXG4gICAgICAgIHJldHVybjtcblxuICAgICAgdGhpcy5jb21wb25lbnRbTEFTVF9SRU5ERVJfVElNRV0gPSBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbHMubm93KCk7XG5cbiAgICAgIGxldCByb290Tm9kZSA9IHRoaXMucm9vdE5vZGU7XG4gICAgICBpZiAoIXJvb3ROb2RlKVxuICAgICAgICByb290Tm9kZSA9IHRoaXMucm9vdE5vZGUgPSB0aGlzLnJlbmRlcmVyLmNvbnN0cnVjdE5vZGVGcm9tSmliKEpJQl9QUk9YWSwgdGhpcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgbGV0IGZyYWdtZW50UmVzdWx0ID0gdGhpcy5fY2FjaGVkUmVuZGVyUmVzdWx0ID0gYXdhaXQgcm9vdE5vZGUucmVuZGVyKHJlbmRlclJlc3VsdCwgcmVuZGVyQ29udGV4dCk7XG4gICAgICBhd2FpdCB0aGlzLnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcih0aGlzLCBmcmFnbWVudFJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuXG4gICAgICByZXR1cm4gZnJhZ21lbnRSZXN1bHQ7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVJlbmRlckVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcblxuICAgICAgaWYgKHRoaXMuY29tcG9uZW50KVxuICAgICAgICB0aGlzLmNvbXBvbmVudFtMQVNUX1JFTkRFUl9USU1FXSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5VdGlscy5ub3coKTtcblxuICAgICAgbGV0IHJlbmRlclJlc3VsdDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmIHR5cGVvZiB0aGlzLmNvbXBvbmVudC5yZW5kZXJFcnJvclN0YXRlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgIHJlbmRlclJlc3VsdCA9IHRoaXMuY29tcG9uZW50LnJlbmRlckVycm9yU3RhdGUoZXJyb3IpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVuZGVyUmVzdWx0ID0gWyBgJHtlcnJvci5tZXNzYWdlfVxcbiR7ZXJyb3Iuc3RhY2t9YCBdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICAgIHJlbmRlclJlc3VsdCA9IFsgYCR7ZXJyb3IubWVzc2FnZX1cXG4ke2Vycm9yLnN0YWNrfWAgXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbmFsaXplUmVuZGVyKHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmICF0aGlzLnNob3VsZFJlbmRlcihqaWIucHJvcHMsIGppYi5jaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgIGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50ID0gbmV3IENvbXBvbmVudENsYXNzKHsgLi4uamliLCBwcm9wczogdGhpcy5tZXJnZUNvbXBvbmVudFByb3BzKG51bGwsIHByb3BzKSwgY29udGV4dDogdGhpcy5jb250ZXh0LCBpZDogdGhpcy5pZCB9KTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudFtJTklUX01FVEhPRF0gPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICBjb21wb25lbnRbSU5JVF9NRVRIT0RdKCk7XG5cbiAgICAgICAgICBjb21wb25lbnQub24oVVBEQVRFX0VWRU5ULCBhc3luYyAocHVzaGVkUmVuZGVyUmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAocHVzaGVkUmVuZGVyUmVzdWx0KSB7XG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyRnJhbWUrKztcbiAgICAgICAgICAgICAgYXdhaXQgZmluYWxpemVSZW5kZXIocHVzaGVkUmVuZGVyUmVzdWx0LCB0aGlzLnJlbmRlckZyYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVuZGVyKHRoaXMuX2N1cnJlbnRKaWIsIHRoaXMuX2NhY2hlZFJlbmRlckNvbnRleHQgfHwgeyBpbmRleDogMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChwcm9wcyAmJiB0eXBlb2YgcHJvcHMucmVmID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcHJvcHMucmVmLmNhbGwoY29tcG9uZW50LCBjb21wb25lbnQsIG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIHN0YXRlIHVwZGF0ZXNcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50W1BFTkRJTkdfU1RBVEVfVVBEQVRFXSlcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudFtQRU5ESU5HX1NUQVRFX1VQREFURV0gPSBudWxsO1xuXG4gICAgICAgIGxldCByZW5kZXJSZXN1bHQgPSB0aGlzLmNvbXBvbmVudC5yZW5kZXIoamliLmNoaWxkcmVuKTtcbiAgICAgICAgaWYgKGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5VdGlscy5pbnN0YW5jZU9mKHJlbmRlclJlc3VsdCwgJ3Byb21pc2UnKSkge1xuICAgICAgICAgIGxldCB3YWl0aW5nUmVuZGVyUmVzdWx0ID0gdGhpcy5jb21wb25lbnQucmVuZGVyV2FpdGluZyh0aGlzLl9jYWNoZWRSZW5kZXJSZXN1bHQpO1xuICAgICAgICAgIGxldCByZW5kZXJDb21wbGV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGxldCBsb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxvYWRpbmdUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbHMuaW5zdGFuY2VPZih3YWl0aW5nUmVuZGVyUmVzdWx0LCAncHJvbWlzZScpKVxuICAgICAgICAgICAgICB3YWl0aW5nUmVuZGVyUmVzdWx0ID0gYXdhaXQgd2FpdGluZ1JlbmRlclJlc3VsdDtcblxuICAgICAgICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZClcbiAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICBhd2FpdCBmaW5hbGl6ZVJlbmRlcih3YWl0aW5nUmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSk7XG4gICAgICAgICAgfSwgNSk7XG5cbiAgICAgICAgICByZXR1cm4gYXdhaXQgcmVuZGVyUmVzdWx0LnRoZW4oYXN5bmMgKHJlbmRlclJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgcmVuZGVyQ29tcGxldGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGxvYWRpbmdUaW1lcikge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobG9hZGluZ1RpbWVyKTtcbiAgICAgICAgICAgICAgbG9hZGluZ1RpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZpbmFsaXplUmVuZGVyKHJlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpO1xuICAgICAgICAgIH0pLmNhdGNoKGhhbmRsZVJlbmRlckVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgZmluYWxpemVSZW5kZXIocmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZVJlbmRlckVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9kb20tcmVuZGVyZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL2RvbS1yZW5kZXJlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRE9NUmVuZGVyZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRE9NUmVuZGVyZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBqaWJzICovIFwiLi4vamlicy9kaXN0L2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9mcmFnbWVudF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ZyYWdtZW50LW5vZGUuanMgKi8gXCIuL2xpYi9mcmFnbWVudC1ub2RlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF90ZXh0X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdGV4dC1ub2RlLmpzICovIFwiLi9saWIvdGV4dC1ub2RlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9uYXRpdmVfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9uYXRpdmUtbm9kZS5qcyAqLyBcIi4vbGliL25hdGl2ZS1ub2RlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9wb3J0YWxfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wb3J0YWwtbm9kZS5qcyAqLyBcIi4vbGliL3BvcnRhbC1ub2RlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jb21wb25lbnRfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb21wb25lbnQtbm9kZS5qcyAqLyBcIi4vbGliL2NvbXBvbmVudC1ub2RlLmpzXCIpO1xuXG5cblxuXG5cblxuXG5cbmNvbnN0IHsgUmVuZGVyZXIgfSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZW5kZXJlcnM7XG5cbmNvbnN0IHtcbiAgSklCX1BST1hZLFxufSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5KaWJzO1xuXG5jbGFzcyBET01SZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcbiAgc3RhdGljIEZyYWdtZW50Tm9kZSA9IF9mcmFnbWVudF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRnJhZ21lbnROb2RlO1xuXG4gIHN0YXRpYyBUZXh0Tm9kZSA9IF90ZXh0X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5UZXh0Tm9kZTtcblxuICBzdGF0aWMgTmF0aXZlTm9kZSA9IF9uYXRpdmVfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLk5hdGl2ZU5vZGU7XG5cbiAgc3RhdGljIFBvcnRhbE5vZGUgPSBfcG9ydGFsX25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Qb3J0YWxOb2RlO1xuXG4gIHN0YXRpYyBDb21wb25lbnROb2RlID0gX2NvbXBvbmVudF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uQ29tcG9uZW50Tm9kZTtcblxuICBjb25zdHJ1Y3Rvcihyb290RWxlbWVudCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAncm9vdEVsZW1lbnQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgcm9vdEVsZW1lbnQsXG4gICAgICB9LFxuICAgICAgJ3Jvb3ROb2RlJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGlzUG9ydGFsTm9kZSh0eXBlKSB7XG4gICAgcmV0dXJuICgvW15hLXpBLVowLTk6XS8pLnRlc3QodHlwZSk7XG4gIH1cblxuICBjb25zdHJ1Y3ROb2RlRnJvbUppYihqaWIsIHBhcmVudCwgY29udGV4dCkge1xuICAgIGlmIChqaWIgPT09IEpJQl9QUk9YWSlcbiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvci5GcmFnbWVudE5vZGUodGhpcywgcGFyZW50LCBjb250ZXh0KTtcblxuICAgIGxldCB7IFR5cGUgfSA9IGppYjtcbiAgICBpZiAodHlwZW9mIFR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvci5Db21wb25lbnROb2RlKHRoaXMsIHBhcmVudCwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgVHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0aGlzLmlzUG9ydGFsTm9kZShUeXBlKSlcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yLlBvcnRhbE5vZGUodGhpcywgcGFyZW50LCBjb250ZXh0KTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yLk5hdGl2ZU5vZGUodGhpcywgcGFyZW50LCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKFR5cGUgPT0gbnVsbCB8fCBUeXBlID09PSBKSUJfUFJPWFkpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvci5GcmFnbWVudE5vZGUodGhpcywgcGFyZW50LCBjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIobm9kZSwgcmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcgfHwgcmVuZGVyRnJhbWUgPCB0aGlzLnJlbmRlckZyYW1lKVxuICAgICAgcmV0dXJuO1xuXG4gICAgYXdhaXQgdGhpcy51cGRhdGVFbGVtZW50Q2hpbGRyZW4oXG4gICAgICB0aGlzLmNvbnRleHQsXG4gICAgICB0aGlzLnJvb3RFbGVtZW50LFxuICAgICAgcmVuZGVyUmVzdWx0LFxuICAgICAgcmVuZGVyRnJhbWUsXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHJlbmRlcihqaWIpIHtcbiAgICB0aGlzLnJlbmRlckZyYW1lKys7XG4gICAgbGV0IHJlbmRlckZyYW1lID0gdGhpcy5yZW5kZXJGcmFtZTtcblxuICAgIGxldCByb290Tm9kZSA9IHRoaXMucm9vdE5vZGU7XG4gICAgaWYgKCFyb290Tm9kZSlcbiAgICAgIHJvb3ROb2RlID0gdGhpcy5yb290Tm9kZSA9IHRoaXMuY29uc3RydWN0Tm9kZUZyb21KaWIoSklCX1BST1hZLCB0aGlzLCB0aGlzLmNvbnRleHQpO1xuXG4gICAgbGV0IHJlbmRlclJlc3VsdCA9IGF3YWl0IHJvb3ROb2RlLnJlbmRlcihqaWIsIHsgaW5kZXg6IDAgfSk7XG4gICAgYXdhaXQgdGhpcy5zeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIoXG4gICAgICB0aGlzLFxuICAgICAgcmVuZGVyUmVzdWx0LFxuICAgICAgcmVuZGVyRnJhbWUsXG4gICAgKTtcblxuICAgIHJldHVybiByZW5kZXJSZXN1bHQ7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9mcmFnbWVudC1ub2RlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvZnJhZ21lbnQtbm9kZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZyYWdtZW50Tm9kZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGcmFnbWVudE5vZGUpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBqaWJzICovIFwiLi4vamlicy9kaXN0L2luZGV4LmpzXCIpO1xuXG5cbmNvbnN0IHtcbiAgaXNKaWJpc2gsXG4gIGNvbnN0cnVjdEppYixcbiAgSklCX1BST1hZLFxufSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5KaWJzO1xuXG5jb25zdCB7XG4gIFJvb3ROb2RlLFxufSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZW5kZXJlcnM7XG5cbmNvbnN0IFRFWFRfVFlQRSAgICAgPSBTeW1ib2wuZm9yKCdAamliL3RleHROb2RlJyk7XG5jb25zdCBGUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcignQGppYi9mcmFnbWVudE5vZGUnKTtcblxuY2xhc3MgRnJhZ21lbnROb2RlIGV4dGVuZHMgUm9vdE5vZGUge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAnX25vZGVDYWNoZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbmV3IE1hcCgpLFxuICAgICAgfSxcbiAgICAgICdfcmVuZGVyQ2FjaGUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95aW5nKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdGhpcy5kZXN0cm95aW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9ub2RlQ2FjaGUpIHtcbiAgICAgIGxldCBkZXN0cm95UHJvbWlzZXMgPSBbXTtcbiAgICAgIGxldCBub2RlQ2FjaGUgICAgICAgPSB0aGlzLl9ub2RlQ2FjaGU7XG5cbiAgICAgIHRoaXMuX25vZGVDYWNoZSA9IG51bGw7XG5cbiAgICAgIGZvciAobGV0IGNhY2hlZFJlc3VsdCBvZiBub2RlQ2FjaGUudmFsdWVzKCkpIHtcbiAgICAgICAgaWYgKGNhY2hlZFJlc3VsdCAmJiBjYWNoZWRSZXN1bHQubm9kZSAmJiBjYWNoZWRSZXN1bHQubm9kZS5kZXN0cm95KVxuICAgICAgICAgIGRlc3Ryb3lQcm9taXNlcy5wdXNoKGNhY2hlZFJlc3VsdC5ub2RlLmRlc3Ryb3koKSk7XG4gICAgICB9XG5cbiAgICAgIG5vZGVDYWNoZS5jbGVhcigpO1xuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChkZXN0cm95UHJvbWlzZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICBhc3luYyBzeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIobm9kZSwgcmVuZGVyUmVzdWx0LCByZW5kZXJGcmFtZSkge1xuICAgIGlmICghdGhpcy5wYXJlbnQgfHwgdGhpcy5yZW5kZXJQcm9taXNlIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgIHJldHVybjtcblxuICAgIGlmICghdGhpcy5fbm9kZUNhY2hlKVxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucGFyZW50LnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKTtcblxuICAgIGxldCByZW5kZXJSZXN1bHRzID0gW107XG4gICAgZm9yIChsZXQgWyBjYWNoZUtleSwgY2FjaGVkUmVzdWx0IF0gb2YgdGhpcy5fbm9kZUNhY2hlKSB7XG4gICAgICBpZiAoY2FjaGVkUmVzdWx0Lm5vZGUgPT09IG5vZGUpIHtcbiAgICAgICAgdGhpcy5fbm9kZUNhY2hlLnNldChjYWNoZUtleSwgeyAuLi5jYWNoZWRSZXN1bHQsIHJlbmRlclJlc3VsdCB9KTtcbiAgICAgICAgcmVuZGVyUmVzdWx0cy5wdXNoKHJlbmRlclJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW5kZXJSZXN1bHRzLnB1c2goY2FjaGVkUmVzdWx0LnJlbmRlclJlc3VsdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucGFyZW50LnN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHRzLCByZW5kZXJGcmFtZSk7XG4gIH1cblxuICBhc3luYyBfcmVuZGVyKF9jaGlsZHJlbiwgcmVuZGVyQ29udGV4dCkge1xuICAgIGxldCBpbmRleE1hcCAgICA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY2hpbGRyZW4gICAgPSBfY2hpbGRyZW47XG4gICAgbGV0IHJlbmRlckZyYW1lID0gdGhpcy5yZW5kZXJGcmFtZTtcblxuICAgIGlmIChqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbHMuaW5zdGFuY2VPZihjaGlsZHJlbiwgJ3Byb21pc2UnKSlcbiAgICAgIGNoaWxkcmVuID0gYXdhaXQgY2hpbGRyZW47XG5cbiAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJDYWNoZTtcblxuICAgIGlmICghdGhpcy5pc0l0ZXJhYmxlQ2hpbGQoY2hpbGRyZW4pICYmIChpc0ppYmlzaChjaGlsZHJlbikgfHwgdGhpcy5pc1ZhbGlkQ2hpbGQoY2hpbGRyZW4pKSlcbiAgICAgIGNoaWxkcmVuID0gWyBjaGlsZHJlbiBdO1xuXG4gICAgY29uc3QgZ2V0SW5kZXhGb3JUeXBlID0gKFR5cGUpID0+IHtcbiAgICAgIGxldCBpbmRleCA9IChpbmRleE1hcC5nZXQoVHlwZSkgfHwgMCkgKyAxO1xuICAgICAgaW5kZXhNYXAuc2V0KFR5cGUsIGluZGV4KTtcblxuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBsZXQgbG9vcFN0b3BwZWQgPSBmYWxzZTtcbiAgICBsZXQgcHJvbWlzZXMgPSBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbHMuaXRlcmF0ZShjaGlsZHJlbiwgKHsgdmFsdWU6IF9jaGlsZCwga2V5LCBpbmRleCwgU1RPUCB9KSA9PiB7XG4gICAgICBpZiAobG9vcFN0b3BwZWQgfHwgdGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSlcbiAgICAgICAgcmV0dXJuIFNUT1A7XG5cbiAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgY2hpbGQgPSAoamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlV0aWxzLmluc3RhbmNlT2YoX2NoaWxkLCAncHJvbWlzZScpKSA/IGF3YWl0IF9jaGlsZCA6IF9jaGlsZDtcbiAgICAgICAgbGV0IGNyZWF0ZWQ7XG4gICAgICAgIGxldCBjYWNoZUtleTtcbiAgICAgICAgbGV0IG5vZGU7XG4gICAgICAgIGxldCByZW5kZXJSZXN1bHQ7XG5cbiAgICAgICAgaWYgKGlzSmliaXNoKGNoaWxkKSkge1xuICAgICAgICAgIGxldCBqaWIgPSBjb25zdHJ1Y3RKaWIoY2hpbGQpO1xuICAgICAgICAgIGlmIChqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbHMuaW5zdGFuY2VPZihqaWIsICdwcm9taXNlJykpXG4gICAgICAgICAgICBqaWIgPSBhd2FpdCBqaWI7XG5cbiAgICAgICAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSkge1xuICAgICAgICAgICAgbG9vcFN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCB7IFR5cGUsIHByb3BzIH0gPSBqaWI7XG4gICAgICAgICAgaWYgKCFwcm9wcylcbiAgICAgICAgICAgIHByb3BzID0ge307XG5cbiAgICAgICAgICBsZXQgbG9jYWxLZXk7XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSBrZXkpIC8vIEluZGV4IGlzIGFuIGludGVnZXIsIGFuZCBrZXkgaXMgYSBzdHJpbmcsIG1lYW5pbmcgdGhpcyBpcyBhbiBvYmplY3RcbiAgICAgICAgICAgIGxvY2FsS2V5ID0ga2V5O1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxvY2FsS2V5ID0gKHByb3BzLmtleSA9PSBudWxsIHx8IE9iamVjdC5pcyhwcm9wcy5rZXksIE5hTikgfHwgT2JqZWN0LmlzKHByb3BzLmtleSwgSW5maW5pdHkpKSA/IGBAamliL2ludGVybmFsX2tleV8ke2dldEluZGV4Rm9yVHlwZShUeXBlKX1gIDogcHJvcHMua2V5O1xuXG4gICAgICAgICAgY2FjaGVLZXkgPSAoMCxqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uZGVhZGJlZWYpKFR5cGUsIGxvY2FsS2V5KTtcblxuICAgICAgICAgIGxldCBjYWNoZWRSZXN1bHQgPSB0aGlzLl9ub2RlQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICAgICAgICBpZiAoIWNhY2hlZFJlc3VsdCkge1xuICAgICAgICAgICAgY3JlYXRlZCA9IHRydWU7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5yZW5kZXJlci5jb25zdHJ1Y3ROb2RlRnJvbUppYihqaWIsIHRoaXMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG5vZGUgPSBjYWNoZWRSZXN1bHQubm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoVHlwZSA9PT0gSklCX1BST1hZKVxuICAgICAgICAgICAgcmVuZGVyUmVzdWx0ID0gYXdhaXQgbm9kZS5yZW5kZXIoamliLmNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZW5kZXJSZXN1bHQgPSBhd2FpdCBub2RlLnJlbmRlcihqaWIsIHJlbmRlckNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJdGVyYWJsZUNoaWxkKGNoaWxkKSkge1xuICAgICAgICAgIGlmIChqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbHMuaXNFbXB0eShjaGlsZCkpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICBjYWNoZUtleSA9ICgwLGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5kZWFkYmVlZikoYEBqaWIvaW50ZXJuYWxfZnJhZ21lbnRfJHtnZXRJbmRleEZvclR5cGUoRlJBR01FTlRfVFlQRSl9YCk7XG5cbiAgICAgICAgICBsZXQgY2FjaGVkUmVzdWx0ID0gdGhpcy5fbm9kZUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICAgICAgaWYgKCFjYWNoZWRSZXN1bHQpIHtcbiAgICAgICAgICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMucmVuZGVyZXIuY29uc3RydWN0Tm9kZUZyb21KaWIoSklCX1BST1hZLCB0aGlzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBub2RlID0gY2FjaGVkUmVzdWx0Lm5vZGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVuZGVyUmVzdWx0ID0gYXdhaXQgbm9kZS5yZW5kZXIoY2hpbGQsIHJlbmRlckNvbnRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNWYWxpZENoaWxkKGNoaWxkKSkge1xuICAgICAgICAgIGNoaWxkID0gKHR5cGVvZiBjaGlsZC52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSA/IGNoaWxkLnZhbHVlT2YoKSA6IGNoaWxkO1xuICAgICAgICAgIGNhY2hlS2V5ID0gKDAsamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmRlYWRiZWVmKShgQGppYi9pbnRlcm5hbF90ZXh0XyR7Z2V0SW5kZXhGb3JUeXBlKFRFWFRfVFlQRSl9YCk7XG5cbiAgICAgICAgICBsZXQgY2FjaGVkUmVzdWx0ID0gdGhpcy5fbm9kZUNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICAgICAgaWYgKCFjYWNoZWRSZXN1bHQpIHtcbiAgICAgICAgICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgbm9kZSA9IG5ldyB0aGlzLnJlbmRlcmVyLmNvbnN0cnVjdG9yLlRleHROb2RlKHRoaXMucmVuZGVyZXIsIHRoaXMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNyZWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG5vZGUgPSBjYWNoZWRSZXN1bHQubm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZW5kZXJSZXN1bHQgPSBhd2FpdCBub2RlLnJlbmRlcihjaGlsZCwgcmVuZGVyQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBub2RlLCBjYWNoZUtleSwgcmVuZGVyUmVzdWx0LCBjcmVhdGVkIH07XG4gICAgICB9KSgpO1xuICAgIH0pO1xuXG4gICAgbGV0IHJlbmRlclJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgcmVuZGVyUmVzdWx0cyA9IHJlbmRlclJlc3VsdHMuZmlsdGVyKChyZXN1bHQpID0+ICEhcmVzdWx0KTtcblxuICAgIGxldCBkZXN0cm95UHJvbWlzZXMgPSBbXTtcbiAgICBpZiAodGhpcy5kZXN0cm95aW5nIHx8IHJlbmRlckZyYW1lIDwgdGhpcy5yZW5kZXJGcmFtZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0gcmVuZGVyUmVzdWx0cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSByZW5kZXJSZXN1bHRzW2ldO1xuICAgICAgICBsZXQgeyBub2RlLCBjcmVhdGVkIH0gPSByZXN1bHQ7XG5cbiAgICAgICAgaWYgKGNyZWF0ZWQgJiYgbm9kZSkge1xuICAgICAgICAgIC8vIERlc3Ryb3kgbm9kZXMgc2luY2UgdGhpcyByZW5kZXIgd2FzIHJlamVjdGVkLlxuICAgICAgICAgIC8vIEJ1dCBvbmx5IG5vZGVzIHRoYXQgd2VyZSBqdXN0IGNyZWF0ZWQuLi5cbiAgICAgICAgICAvLyBhcyBleGlzdGluZyBub2RlcyBtaWdodCBzdGlsbCBuZWVkIHRvIGV4aXN0LlxuICAgICAgICAgIGRlc3Ryb3lQcm9taXNlcy5wdXNoKG5vZGUuZGVzdHJveSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGVzdHJveVByb21pc2VzLmxlbmd0aCA+IDApXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGRlc3Ryb3lQcm9taXNlcyk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJDYWNoZTtcbiAgICB9XG5cbiAgICBsZXQgbm9kZU1hcCA9IG5ldyBNYXAoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSByZW5kZXJSZXN1bHRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGxldCByZW5kZXJSZXN1bHQgPSByZW5kZXJSZXN1bHRzW2ldO1xuICAgICAgbm9kZU1hcC5zZXQocmVuZGVyUmVzdWx0LmNhY2hlS2V5LCByZW5kZXJSZXN1bHQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ub2RlQ2FjaGUpIHtcbiAgICAgIC8vIENsZWFudXBcbiAgICAgIGZvciAobGV0IFsgY2FjaGVLZXksIHJlbmRlclJlc3VsdCBdIG9mIHRoaXMuX25vZGVDYWNoZSkge1xuICAgICAgICBsZXQgaGFzQ2hpbGQgPSBub2RlTWFwLmhhcyhjYWNoZUtleSk7XG4gICAgICAgIGlmICghaGFzQ2hpbGQpIHtcbiAgICAgICAgICAvLyBUaGlzIG5vZGUgd2FzIGRlc3Ryb3llZFxuICAgICAgICAgIGRlc3Ryb3lQcm9taXNlcy5wdXNoKHJlbmRlclJlc3VsdC5ub2RlLmRlc3Ryb3koKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbm9kZUNhY2hlID0gbm9kZU1hcDtcblxuICAgICAgaWYgKGRlc3Ryb3lQcm9taXNlcy5sZW5ndGggPiAwKVxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChkZXN0cm95UHJvbWlzZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ub2RlQ2FjaGUgPSBub2RlTWFwO1xuICAgIH1cblxuICAgIGxldCByZW5kZXJSZXN1bHQgPSB0aGlzLl9yZW5kZXJDYWNoZSA9IHJlbmRlclJlc3VsdHMubWFwKChyZW5kZXJSZXN1bHQpID0+IHJlbmRlclJlc3VsdC5yZW5kZXJSZXN1bHQpLmZpbHRlcigocmVzdWx0KSA9PiAocmVzdWx0ICE9IG51bGwgJiYgIU9iamVjdC5pcyhyZXN1bHQsIE5hTikgJiYgIU9iamVjdC5pcyhyZXN1bHQsIEluZmluaXR5KSkpO1xuICAgIHJldHVybiByZW5kZXJSZXN1bHQ7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9uYXRpdmUtbm9kZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9uYXRpdmUtbm9kZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJOYXRpdmVOb2RlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE5hdGl2ZU5vZGUpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBqaWJzICovIFwiLi4vamlicy9kaXN0L2luZGV4LmpzXCIpO1xuXG5cbmNvbnN0IHtcbiAgSklCX1BST1hZLFxufSA9IGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5KaWJzO1xuXG5jb25zdCB7XG4gIFJvb3ROb2RlLFxuICBOYXRpdmVFbGVtZW50LFxuICBUZXh0RWxlbWVudCxcbn0gPSBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUmVuZGVyZXJzO1xuXG5jbGFzcyBOYXRpdmVOb2RlIGV4dGVuZHMgUm9vdE5vZGUge1xuICBzdGF0aWMgRUxFTUVOVF9DTEFTUyA9IE5hdGl2ZUVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgJ3Jvb3ROb2RlJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgICdfY3VycmVudEppYic6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbnVsbCxcbiAgICAgIH0sXG4gICAgICAnX2NhY2hlZFJlbmRlclJlc3VsdCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgeyBpZDogdGhpcy5pZCB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHN5bmNFbGVtZW50c1dpdGhSZW5kZXJlcihub2RlLCByZW5kZXJSZXN1bHQsIHJlbmRlckZyYW1lKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlcmVyIHx8IHRoaXMuZGVzdHJveWluZyB8fCByZW5kZXJGcmFtZSA8IHRoaXMucmVuZGVyRnJhbWUpXG4gICAgICByZXR1cm47XG5cbiAgICBhd2FpdCB0aGlzLnJlbmRlcmVyLnVwZGF0ZUVsZW1lbnRDaGlsZHJlbihcbiAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgIHRoaXMuX2NhY2hlZFJlbmRlclJlc3VsdCxcbiAgICAgIHJlbmRlclJlc3VsdCxcbiAgICAgIHJlbmRlckZyYW1lLFxuICAgICk7XG4gIH1cblxuICBhc3luYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lpbmcpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLmRlc3Ryb3lpbmcgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMucm9vdE5vZGUpIHtcbiAgICAgIGF3YWl0IHRoaXMucm9vdE5vZGUuZGVzdHJveSgpO1xuICAgICAgdGhpcy5yb290Tm9kZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuXG4gIGFzeW5jIF9yZW5kZXIoamliLCByZW5kZXJDb250ZXh0KSB7XG4gICAgbGV0IHtcbiAgICAgIFR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgIH0gPSB0aGlzLl9jdXJyZW50SmliID0gKGppYiB8fCB7fSk7XG5cbiAgICBpZiAoIVR5cGUpXG4gICAgICByZXR1cm47XG5cbiAgICBsZXQgcmVuZGVyRnJhbWUgPSB0aGlzLnJlbmRlckZyYW1lO1xuXG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdpbm5lckhUTUwnKSkge1xuICAgICAgbGV0IHJvb3ROb2RlID0gdGhpcy5yb290Tm9kZTtcbiAgICAgIGlmICghcm9vdE5vZGUpXG4gICAgICAgIHJvb3ROb2RlID0gdGhpcy5yb290Tm9kZSA9IHRoaXMucmVuZGVyZXIuY29uc3RydWN0Tm9kZUZyb21KaWIoSklCX1BST1hZLCB0aGlzLCB0aGlzLmNvbnRleHQpO1xuXG4gICAgICBsZXQgbmV3Q29udGV4dCA9IE9iamVjdC5jcmVhdGUocmVuZGVyQ29udGV4dCk7XG4gICAgICBuZXdDb250ZXh0LmluZGV4ID0gMDtcblxuICAgICAgcm9vdE5vZGUucmVuZGVyKGNoaWxkcmVuLCBuZXdDb250ZXh0KS50aGVuKChmcmFnbWVudFJlc3VsdCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zeW5jRWxlbWVudHNXaXRoUmVuZGVyZXIodGhpcywgZnJhZ21lbnRSZXN1bHQsIHJlbmRlckZyYW1lKTtcbiAgICAgIH0pLmNhdGNoKChfZXJyb3IpID0+IHtcbiAgICAgICAgbGV0IGVycm9yID0gX2Vycm9yO1xuICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSlcbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihlcnJvcik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0VsZW1lbnRzV2l0aFJlbmRlcmVyKHRoaXMsIFsgbmV3IFRleHRFbGVtZW50KG51bGwsIGVycm9yLCBwcm9wcykgXSwgcmVuZGVyRnJhbWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnJvb3ROb2RlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucm9vdE5vZGUuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnJvb3ROb2RlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVuZGVyUmVzdWx0ID0gdGhpcy5fY2FjaGVkUmVuZGVyUmVzdWx0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IuRUxFTUVOVF9DTEFTUyhcbiAgICAgIHRoaXMuaWQsXG4gICAgICBUeXBlLFxuICAgICAgcHJvcHMsXG4gICAgKTtcblxuICAgIHJldHVybiByZW5kZXJSZXN1bHQ7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9wb3J0YWwtbm9kZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9wb3J0YWwtbm9kZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQb3J0YWxOb2RlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFBvcnRhbE5vZGUpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBqaWJzICovIFwiLi4vamlicy9kaXN0L2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9uYXRpdmVfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9uYXRpdmUtbm9kZS5qcyAqLyBcIi4vbGliL25hdGl2ZS1ub2RlLmpzXCIpO1xuXG5cblxuXG5jb25zdCB7XG4gIFBvcnRhbEVsZW1lbnQsXG59ID0gamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJlbmRlcmVycztcblxuY2xhc3MgUG9ydGFsTm9kZSBleHRlbmRzIF9uYXRpdmVfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk5hdGl2ZU5vZGUge1xuICBzdGF0aWMgRUxFTUVOVF9DTEFTUyA9IFBvcnRhbEVsZW1lbnQ7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9saWIvdGV4dC1ub2RlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi90ZXh0LW5vZGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRleHROb2RlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHROb2RlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgamlicyAqLyBcIi4uL2ppYnMvZGlzdC9pbmRleC5qc1wiKTtcblxuXG5jb25zdCB7XG4gIFJvb3ROb2RlLFxuICBUZXh0RWxlbWVudCxcbn0gPSBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUmVuZGVyZXJzO1xuXG5jbGFzcyBUZXh0Tm9kZSBleHRlbmRzIFJvb3ROb2RlIHtcbiAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95aW5nKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdGhpcy5kZXN0cm95aW5nID0gdHJ1ZTtcblxuICAgIHJldHVybiBhd2FpdCBzdXBlci5kZXN0cm95KCk7XG4gIH1cblxuICBhc3luYyBfcmVuZGVyKHRleHQpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbGVtZW50KHRoaXMuaWQsIHRleHQpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vamlicy9kaXN0L2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuLi9qaWJzL2Rpc3QvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIiRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gX193ZWJwYWNrX2V4cG9ydHNfXyQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbXBvbmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBfX3dlYnBhY2tfZXhwb3J0c19fQ29tcG9uZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb21wb25lbnRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIF9fd2VicGFja19leHBvcnRzX19Db21wb25lbnRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJKaWJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIF9fd2VicGFja19leHBvcnRzX19KaWJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSZW5kZXJlcnNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1JlbmRlcmVycyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVXRpbHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1V0aWxzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWFkYmVlZlwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBfX3dlYnBhY2tfZXhwb3J0c19fZGVhZGJlZWYpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImZhY3RvcnlcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gX193ZWJwYWNrX2V4cG9ydHNfX2ZhY3RvcnkpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9kZWFkYmVlZi9saWIvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2RlYWRiZWVmL2xpYi9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yODRfXykge1xuXG4vLyBDb3B5cmlnaHQgMjAyMiBXeWF0dCBHcmVlbndheVxuXG5cblxuY29uc3QgdGhpc0dsb2JhbCA9ICgodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93IDogX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI4NF9fLmcpIHx8IHRoaXM7XG5jb25zdCBERUFEQkVFRl9SRUZfTUFQX0tFWSA9IFN5bWJvbC5mb3IoJ0BAZGVhZGJlZWZSZWZNYXAnKTtcbmNvbnN0IFVOSVFVRV9JRF9TWU1CT0wgPSBTeW1ib2wuZm9yKCdAQGRlYWRiZWVmVW5pcXVlSUQnKTtcbmNvbnN0IHJlZk1hcCA9ICh0aGlzR2xvYmFsW0RFQURCRUVGX1JFRl9NQVBfS0VZXSkgPyB0aGlzR2xvYmFsW0RFQURCRUVGX1JFRl9NQVBfS0VZXSA6IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBpZEhlbHBlcnMgPSBbXTtcblxuaWYgKCF0aGlzR2xvYmFsW0RFQURCRUVGX1JFRl9NQVBfS0VZXSlcbiAgdGhpc0dsb2JhbFtERUFEQkVFRl9SRUZfTUFQX0tFWV0gPSByZWZNYXA7XG5cbmxldCB1dWlkQ291bnRlciA9IDBuO1xuXG5mdW5jdGlvbiBnZXRIZWxwZXJGb3JWYWx1ZSh2YWx1ZSkge1xuICBmb3IgKGxldCBpID0gMCwgaWwgPSBpZEhlbHBlcnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgIGxldCB7IGhlbHBlciwgZ2VuZXJhdG9yIH0gPSBpZEhlbHBlcnNbaV07XG4gICAgaWYgKGhlbHBlcih2YWx1ZSkpXG4gICAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFueXRoaW5nVG9JRChfYXJnLCBfYWxyZWFkeVZpc2l0ZWQpIHtcbiAgbGV0IGFyZyA9IF9hcmc7XG4gIGlmIChhcmcgaW5zdGFuY2VvZiBOdW1iZXIgfHwgYXJnIGluc3RhbmNlb2YgU3RyaW5nIHx8IGFyZyBpbnN0YW5jZW9mIEJvb2xlYW4pXG4gICAgYXJnID0gYXJnLnZhbHVlT2YoKTtcblxuICBsZXQgdHlwZU9mID0gdHlwZW9mIGFyZztcblxuICBpZiAodHlwZU9mID09PSAnbnVtYmVyJyAmJiBhcmcgPT09IDApIHtcbiAgICBpZiAoT2JqZWN0LmlzKGFyZywgLTApKVxuICAgICAgcmV0dXJuICdudW1iZXI6LTAnO1xuXG4gICAgcmV0dXJuICdudW1iZXI6KzAnO1xuICB9XG5cbiAgaWYgKHR5cGVPZiA9PT0gJ3N5bWJvbCcpXG4gICAgcmV0dXJuIGBzeW1ib2w6JHthcmcudG9TdHJpbmcoKX1gO1xuXG4gIGlmIChhcmcgPT0gbnVsbCB8fCB0eXBlT2YgPT09ICdudW1iZXInIHx8IHR5cGVPZiA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVPZiA9PT0gJ3N0cmluZycgfHwgdHlwZU9mID09PSAnYmlnaW50Jykge1xuICAgIGlmICh0eXBlT2YgPT09ICdudW1iZXInKVxuICAgICAgcmV0dXJuIChhcmcgPCAwKSA/IGBudW1iZXI6JHthcmd9YCA6IGBudW1iZXI6KyR7YXJnfWA7XG5cbiAgICBpZiAodHlwZU9mID09PSAnYmlnaW50JyAmJiBhcmcgPT09IDBuKVxuICAgICAgcmV0dXJuICdiaWdpbnQ6KzAnO1xuXG4gICAgcmV0dXJuIGAke3R5cGVPZn06JHthcmd9YDtcbiAgfVxuXG4gIGxldCBpZEhlbHBlciA9IChpZEhlbHBlcnMubGVuZ3RoID4gMCAmJiBnZXRIZWxwZXJGb3JWYWx1ZShhcmcpKTtcbiAgaWYgKGlkSGVscGVyKVxuICAgIHJldHVybiBhbnl0aGluZ1RvSUQoaWRIZWxwZXIoYXJnKSk7XG5cbiAgaWYgKFVOSVFVRV9JRF9TWU1CT0wgaW4gYXJnICYmIHR5cGVvZiBhcmdbVU5JUVVFX0lEX1NZTUJPTF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBQcmV2ZW50IGluZmluaXRlIHJlY3Vyc2lvblxuICAgIGlmICghX2FscmVhZHlWaXNpdGVkIHx8ICFfYWxyZWFkeVZpc2l0ZWQuaGFzKGFyZykpIHtcbiAgICAgIGxldCBhbHJlYWR5VmlzaXRlZCA9IF9hbHJlYWR5VmlzaXRlZCB8fCBuZXcgU2V0KCk7XG4gICAgICBhbHJlYWR5VmlzaXRlZC5hZGQoYXJnKTtcbiAgICAgIHJldHVybiBhbnl0aGluZ1RvSUQoYXJnW1VOSVFVRV9JRF9TWU1CT0xdKCksIGFscmVhZHlWaXNpdGVkKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXJlZk1hcC5oYXMoYXJnKSkge1xuICAgIGxldCBrZXkgPSBgJHt0eXBlb2YgYXJnfTokeysrdXVpZENvdW50ZXJ9YDtcbiAgICByZWZNYXAuc2V0KGFyZywga2V5KTtcbiAgICByZXR1cm4ga2V5O1xuICB9XG5cbiAgcmV0dXJuIHJlZk1hcC5nZXQoYXJnKTtcbn1cblxuZnVuY3Rpb24gZGVhZGJlZWYoKSB7XG4gIGxldCBwYXJ0cyA9IFsgYXJndW1lbnRzLmxlbmd0aCBdO1xuICBmb3IgKGxldCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKylcbiAgICBwYXJ0cy5wdXNoKGFueXRoaW5nVG9JRChhcmd1bWVudHNbaV0pKTtcblxuICByZXR1cm4gcGFydHMuam9pbignOicpO1xufVxuXG5mdW5jdGlvbiBkZWFkYmVlZlNvcnRlZCgpIHtcbiAgbGV0IHBhcnRzID0gWyBhcmd1bWVudHMubGVuZ3RoIF07XG4gIGZvciAobGV0IGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKVxuICAgIHBhcnRzLnB1c2goYW55dGhpbmdUb0lEKGFyZ3VtZW50c1tpXSkpO1xuXG4gIHJldHVybiBwYXJ0cy5zb3J0KCkuam9pbignOicpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUlERm9yKGhlbHBlciwgZ2VuZXJhdG9yKSB7XG4gIGlkSGVscGVycy5wdXNoKHsgaGVscGVyLCBnZW5lcmF0b3IgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUlER2VuZXJhdG9yKGhlbHBlcikge1xuICBsZXQgaW5kZXggPSBpZEhlbHBlcnMuZmluZEluZGV4KChpdGVtKSA9PiAoaXRlbS5oZWxwZXIgPT09IGhlbHBlcikpO1xuICBpZiAoaW5kZXggPCAwKVxuICAgIHJldHVybjtcblxuICBpZEhlbHBlcnMuc3BsaWNlKGluZGV4LCAxKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZGVhZGJlZWYsIHtcbiAgJ2lkU3ltJzoge1xuICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogICAgICAgIFVOSVFVRV9JRF9TWU1CT0wsXG4gIH0sXG4gICdzb3J0ZWQnOiB7XG4gICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiAgICAgICAgZGVhZGJlZWZTb3J0ZWQsXG4gIH0sXG4gICdnZW5lcmF0ZUlERm9yJzoge1xuICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogICAgICAgIGdlbmVyYXRlSURGb3IsXG4gIH0sXG4gICdyZW1vdmVJREdlbmVyYXRvcic6IHtcbiAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6ICAgICAgICByZW1vdmVJREdlbmVyYXRvcixcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYWRiZWVmO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL2NvbXBvbmVudC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvY29tcG9uZW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8zNzM4X18pID0+IHtcblxuX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM3MzhfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM3MzhfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDQVBUVVJFX1JFRkVSRU5DRV9NRVRIT0RTXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENBUFRVUkVfUkVGRVJFTkNFX01FVEhPRFMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbXBvbmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wb25lbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZMVVNIX1VQREFURV9NRVRIT0RcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRkxVU0hfVVBEQVRFX01FVEhPRCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSU5JVF9NRVRIT0RcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSU5JVF9NRVRIT0QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxBU1RfUkVOREVSX1RJTUVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTEFTVF9SRU5ERVJfVElNRSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUEVORElOR19TVEFURV9VUERBVEVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUEVORElOR19TVEFURV9VUERBVEUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlBSRVZJT1VTX1NUQVRFXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFBSRVZJT1VTX1NUQVRFKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJRVUVVRV9VUERBVEVfTUVUSE9EXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFFVRVVFX1VQREFURV9NRVRIT0QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNLSVBfU1RBVEVfVVBEQVRFU1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTS0lQX1NUQVRFX1VQREFURVMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlVQREFURV9FVkVOVFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBVUERBVEVfRVZFTlQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZXZlbnRzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzczOF9fKC8qISAuL2V2ZW50cy5qcyAqLyBcIi4vbGliL2V2ZW50cy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8zNzM4X18oLyohIC4vdXRpbHMuanMgKi8gXCIuL2xpYi91dGlscy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzczOF9fKC8qISAuL2ppYi5qcyAqLyBcIi4vbGliL2ppYi5qc1wiKTtcbi8qIGdsb2JhbCBCdWZmZXIgKi9cblxuXG5cblxuXG5jb25zdCBVUERBVEVfRVZFTlQgICAgICAgICAgICAgID0gJ0BqaWJzL2NvbXBvbmVudC9ldmVudC91cGRhdGUnO1xuY29uc3QgUVVFVUVfVVBEQVRFX01FVEhPRCAgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9xdWV1ZVVwZGF0ZScpO1xuY29uc3QgRkxVU0hfVVBEQVRFX01FVEhPRCAgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9mbHVzaFVwZGF0ZScpO1xuY29uc3QgSU5JVF9NRVRIT0QgICAgICAgICAgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9fX2luaXQnKTtcbmNvbnN0IFNLSVBfU1RBVEVfVVBEQVRFUyAgICAgICAgPSBTeW1ib2wuZm9yKCdAamlicy9jb21wb25lbnQvc2tpcFN0YXRlVXBkYXRlcycpO1xuY29uc3QgUEVORElOR19TVEFURV9VUERBVEUgICAgICA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9wZW5kaW5nU3RhdGVVcGRhdGUnKTtcbmNvbnN0IExBU1RfUkVOREVSX1RJTUUgICAgICAgICAgPSBTeW1ib2wuZm9yKCdAamlicy9jb21wb25lbnQvbGFzdFJlbmRlclRpbWUnKTtcbmNvbnN0IFBSRVZJT1VTX1NUQVRFICAgICAgICAgICAgPSBTeW1ib2wuZm9yKCdAamlicy9jb21wb25lbnQvcHJldmlvdXNTdGF0ZScpO1xuY29uc3QgQ0FQVFVSRV9SRUZFUkVOQ0VfTUVUSE9EUyA9IFN5bWJvbC5mb3IoJ0BqaWJzL2NvbXBvbmVudC9wcmV2aW91c1N0YXRlJyk7XG5cbmNvbnN0IGVsZW1lbnREYXRhQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBpc1ZhbGlkU3RhdGVPYmplY3QodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChPYmplY3QuaXModmFsdWUsIE5hTikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChPYmplY3QuaXModmFsdWUsIEluZmluaXR5KSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbiB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlciB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgbGV0IHR5cGVPZiA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGVPZiA9PT0gJ3N0cmluZycgfHwgdHlwZU9mID09PSAnbnVtYmVyJyB8fCB0eXBlT2YgPT09ICdib29sZWFuJylcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyLmlzQnVmZmVyKHZhbHVlKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmNsYXNzIENvbXBvbmVudCBleHRlbmRzIF9ldmVudHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5FdmVudEVtaXR0ZXIge1xuICBzdGF0aWMgVVBEQVRFX0VWRU5UID0gVVBEQVRFX0VWRU5UO1xuXG4gIFtRVUVVRV9VUERBVEVfTUVUSE9EXSgpIHtcbiAgICBpZiAodGhpc1tQRU5ESU5HX1NUQVRFX1VQREFURV0pXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzW1BFTkRJTkdfU1RBVEVfVVBEQVRFXSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHRoaXNbUEVORElOR19TVEFURV9VUERBVEVdLnRoZW4odGhpc1tGTFVTSF9VUERBVEVfTUVUSE9EXS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIFtGTFVTSF9VUERBVEVfTUVUSE9EXSgpIHtcbiAgICAvLyBXYXMgdGhlIHN0YXRlIHVwZGF0ZSBjYW5jZWxsZWQ/XG4gICAgaWYgKCF0aGlzW1BFTkRJTkdfU1RBVEVfVVBEQVRFXSlcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMuZW1pdChVUERBVEVfRVZFTlQpO1xuXG4gICAgdGhpc1tQRU5ESU5HX1NUQVRFX1VQREFURV0gPSBudWxsO1xuICB9XG5cbiAgW0lOSVRfTUVUSE9EXSgpIHtcbiAgICB0aGlzW1NLSVBfU1RBVEVfVVBEQVRFU10gPSBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKF9qaWIpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLy8gQmluZCBhbGwgY2xhc3MgbWV0aG9kcyB0byBcInRoaXNcIlxuICAgIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmJpbmRNZXRob2RzLmNhbGwodGhpcywgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuXG4gICAgbGV0IGppYiA9IF9qaWIgfHwge307XG5cbiAgICBjb25zdCBjcmVhdGVOZXdTdGF0ZSA9ICgpID0+IHtcbiAgICAgIGxldCBsb2NhbFN0YXRlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm94eShsb2NhbFN0YXRlLCB7XG4gICAgICAgIGdldDogKHRhcmdldCwgcHJvcE5hbWUpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BOYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiAodGFyZ2V0LCBwcm9wTmFtZSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBsZXQgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BOYW1lXTtcbiAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSB2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgICAgaWYgKCF0aGlzW1NLSVBfU1RBVEVfVVBEQVRFU10pXG4gICAgICAgICAgICB0aGlzW1FVRVVFX1VQREFURV9NRVRIT0RdKCk7XG5cbiAgICAgICAgICB0YXJnZXRbcHJvcE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5vblN0YXRlVXBkYXRlZChwcm9wTmFtZSwgdmFsdWUsIGN1cnJlbnRWYWx1ZSk7XG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBsZXQgcHJvcHMgICAgICAgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIGppYi5wcm9wcyB8fCB7fSk7XG4gICAgbGV0IF9sb2NhbFN0YXRlID0gY3JlYXRlTmV3U3RhdGUoKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIFtTS0lQX1NUQVRFX1VQREFURVNdOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIHRydWUsXG4gICAgICB9LFxuICAgICAgW1BFTkRJTkdfU1RBVEVfVVBEQVRFXToge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBudWxsLFxuICAgICAgfSxcbiAgICAgIFtMQVNUX1JFTkRFUl9USU1FXToge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5ub3coKSxcbiAgICAgIH0sXG4gICAgICBbQ0FQVFVSRV9SRUZFUkVOQ0VfTUVUSE9EU106IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAge30sXG4gICAgICB9LFxuICAgICAgJ2lkJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogICAgICAgIGppYi5pZCxcbiAgICAgIH0sXG4gICAgICAncHJvcHMnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIHByb3BzLFxuICAgICAgfSxcbiAgICAgICdjaGlsZHJlbic6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgamliLmNoaWxkcmVuIHx8IFtdLFxuICAgICAgfSxcbiAgICAgICdjb250ZXh0Jzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBqaWIuY29udGV4dCB8fCBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgfSxcbiAgICAgICdzdGF0ZSc6IHtcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gX2xvY2FsU3RhdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogICAgICAgICAgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkU3RhdGVPYmplY3QodmFsdWUpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCB2YWx1ZSBmb3IgXCJ0aGlzLnN0YXRlXCI6IFwiJHt2YWx1ZX1cIi4gUHJvdmlkZWQgXCJzdGF0ZVwiIG11c3QgYmUgYW4gaXRlcmFibGUgb2JqZWN0LmApO1xuXG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihfbG9jYWxTdGF0ZSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlc29sdmVDaGlsZHJlbihjaGlsZHJlbikge1xuICAgIHJldHVybiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18ucmVzb2x2ZUNoaWxkcmVuLmNhbGwodGhpcywgY2hpbGRyZW4pO1xuICB9XG5cbiAgaXNKaWIodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmlzSmliaXNoKSh2YWx1ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RKaWIodmFsdWUpIHtcbiAgICByZXR1cm4gKDAsX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmNvbnN0cnVjdEppYikodmFsdWUpO1xuICB9XG5cbiAgcHVzaFJlbmRlcihyZW5kZXJSZXN1bHQpIHtcbiAgICB0aGlzLmVtaXQoVVBEQVRFX0VWRU5ULCByZW5kZXJSZXN1bHQpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIG9uUHJvcFVwZGF0ZWQocHJvcE5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIG9uU3RhdGVVcGRhdGVkKHByb3BOYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgfVxuXG4gIGNhcHR1cmVSZWZlcmVuY2UobmFtZSwgaW50ZXJjZXB0b3JDYWxsYmFjaykge1xuICAgIGxldCBtZXRob2QgPSB0aGlzW0NBUFRVUkVfUkVGRVJFTkNFX01FVEhPRFNdW25hbWVdO1xuICAgIGlmIChtZXRob2QpXG4gICAgICByZXR1cm4gbWV0aG9kO1xuXG4gICAgbWV0aG9kID0gKF9yZWYsIHByZXZpb3VzUmVmKSA9PiB7XG4gICAgICBsZXQgcmVmID0gX3JlZjtcblxuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvckNhbGxiYWNrID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZWYgPSBpbnRlcmNlcHRvckNhbGxiYWNrLmNhbGwodGhpcywgcmVmLCBwcmV2aW91c1JlZik7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICAgW25hbWVdOiB7XG4gICAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiAgICAgICAgcmVmLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3JDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRoaXNbQ0FQVFVSRV9SRUZFUkVOQ0VfTUVUSE9EU10gPSBtZXRob2Q7XG5cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9XG5cbiAgZm9yY2VVcGRhdGUoKSB7XG4gICAgdGhpc1tRVUVVRV9VUERBVEVfTUVUSE9EXSgpO1xuICB9XG5cbiAgZ2V0U3RhdGUocHJvcGVydHlQYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHN0YXRlO1xuXG4gICAgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YocHJvcGVydHlQYXRoLCAnb2JqZWN0JykpIHtcbiAgICAgIGxldCBrZXlzICAgICAgICA9IE9iamVjdC5rZXlzKHByb3BlcnR5UGF0aCkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydHlQYXRoKSk7XG4gICAgICBsZXQgZmluYWxTdGF0ZSAgPSB7fTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0ga2V5cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBsZXQgWyB2YWx1ZSwgbGFzdFBhcnQgXSA9IF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmZldGNoRGVlcFByb3BlcnR5KHN0YXRlLCBrZXksIHByb3BlcnR5UGF0aFtrZXldLCB0cnVlKTtcbiAgICAgICAgaWYgKGxhc3RQYXJ0ID09IG51bGwpXG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgZmluYWxTdGF0ZVtsYXN0UGFydF0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbmFsU3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5mZXRjaERlZXBQcm9wZXJ0eShzdGF0ZSwgcHJvcGVydHlQYXRoLCBkZWZhdWx0VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHNldFN0YXRlKHZhbHVlKSB7XG4gICAgaWYgKCFpc1ZhbGlkU3RhdGVPYmplY3QodmFsdWUpKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCB2YWx1ZSBmb3IgXCJ0aGlzLnNldFN0YXRlXCI6IFwiJHt2YWx1ZX1cIi4gUHJvdmlkZWQgXCJzdGF0ZVwiIG11c3QgYmUgYW4gaXRlcmFibGUgb2JqZWN0LmApO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLnN0YXRlLCB2YWx1ZSk7XG4gIH1cblxuICBzZXRTdGF0ZVBhc3NpdmUodmFsdWUpIHtcbiAgICBpZiAoIWlzVmFsaWRTdGF0ZU9iamVjdCh2YWx1ZSkpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciBcInRoaXMuc2V0U3RhdGVQYXNzaXZlXCI6IFwiJHt2YWx1ZX1cIi4gUHJvdmlkZWQgXCJzdGF0ZVwiIG11c3QgYmUgYW4gaXRlcmFibGUgb2JqZWN0LmApO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXNbU0tJUF9TVEFURV9VUERBVEVTXSA9IHRydWU7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuc3RhdGUsIHZhbHVlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpc1tTS0lQX1NUQVRFX1VQREFURVNdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgc2hvdWxkVXBkYXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBkZWxldGUgdGhpcy5zdGF0ZTtcbiAgICBkZWxldGUgdGhpcy5wcm9wcztcbiAgICBkZWxldGUgdGhpcy5jb250ZXh0O1xuICAgIGRlbGV0ZSB0aGlzW0NBUFRVUkVfUkVGRVJFTkNFX01FVEhPRFNdO1xuICAgIHRoaXMuY2xlYXJBbGxEZWJvdW5jZXMoKTtcbiAgfVxuXG4gIHJlbmRlcldhaXRpbmcoKSB7XG4gIH1cblxuICByZW5kZXIoY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICB1cGRhdGVkKCkge1xuICB9XG5cbiAgY29tYmluZVdpdGgoc2VwLCAuLi5hcmdzKSB7XG4gICAgbGV0IGZpbmFsQXJncyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBhcmdzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGxldCBhcmcgPSBhcmdzW2ldO1xuICAgICAgaWYgKCFhcmcpXG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBpZiAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihhcmcsICdzdHJpbmcnKSkge1xuICAgICAgICBsZXQgdmFsdWVzID0gYXJnLnNwbGl0KHNlcCkuZmlsdGVyKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmlzTm90RW1wdHkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICBmaW5hbEFyZ3MuYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IGFyZy5maWx0ZXIoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIGlmICghX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZih2YWx1ZSwgJ3N0cmluZycpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgcmV0dXJuIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmlzTm90RW1wdHkodmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICBmaW5hbEFyZ3MuYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKGFyZywgJ29iamVjdCcpKSB7XG4gICAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXMoYXJnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0ga2V5cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGtleSAgID0ga2V5c1tpXTtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBhcmdba2V5XTtcblxuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGZpbmFsQXJncy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpbmFsQXJncy5hZGQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbmFsQXJncykuam9pbihzZXAgfHwgJycpO1xuICB9XG5cbiAgY2xhc3NlcyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tYmluZVdpdGgoJyAnLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGV4dHJhY3RDaGlsZHJlbihfcGF0dGVybnMsIGNoaWxkcmVuKSB7XG4gICAgbGV0IGV4dHJhY3RlZCA9IHt9O1xuICAgIGxldCBwYXR0ZXJucyAgPSBfcGF0dGVybnM7XG4gICAgbGV0IGlzQXJyYXkgICA9IEFycmF5LmlzQXJyYXkocGF0dGVybnMpO1xuXG4gICAgY29uc3QgaXNNYXRjaCA9IChqaWIpID0+IHtcbiAgICAgIGxldCBqaWJUeXBlID0gamliLlR5cGU7XG4gICAgICBpZiAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihqaWJUeXBlLCAnc3RyaW5nJykpXG4gICAgICAgIGppYlR5cGUgPSBqaWJUeXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmIChpc0FycmF5KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHBhdHRlcm5zLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgICBsZXQgcGF0dGVybiA9IHBhdHRlcm5zW2ldO1xuICAgICAgICAgIGlmIChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKHBhdHRlcm4sICdzdHJpbmcnKSlcbiAgICAgICAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICBpZiAoamliVHlwZSA9PT0gcGF0dGVybikge1xuICAgICAgICAgICAgZXh0cmFjdGVkW3BhdHRlcm5dID0gamliO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKHBhdHRlcm5zKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0ga2V5cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGtleSAgICAgPSBrZXlzW2ldO1xuICAgICAgICAgIGxldCBwYXR0ZXJuID0gcGF0dGVybnNba2V5XTtcbiAgICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YocGF0dGVybiwgUmVnRXhwKSlcbiAgICAgICAgICAgIHJlc3VsdCA9IHBhdHRlcm4udGVzdChqaWJUeXBlKTtcbiAgICAgICAgICBlbHNlIGlmIChfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKHBhdHRlcm4sICdzdHJpbmcnKSlcbiAgICAgICAgICAgIHJlc3VsdCA9IChwYXR0ZXJuLnRvTG93ZXJDYXNlKCkgPT09IGppYlR5cGUpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdCA9IChwYXR0ZXJuID09PSBqaWJUeXBlKTtcblxuICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGV4dHJhY3RlZFtrZXldID0gamliO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgZXh0cmFjdGVkLnJlbWFpbmluZ0NoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKChqaWIpID0+ICFpc01hdGNoKGppYikpO1xuICAgIHJldHVybiBleHRyYWN0ZWQ7XG4gIH1cblxuICBkZWJvdW5jZShmdW5jLCB0aW1lLCBfaWQpIHtcbiAgICBjb25zdCBjbGVhclBlbmRpbmdUaW1lb3V0ID0gKCkgPT4ge1xuICAgICAgaWYgKHBlbmRpbmdUaW1lciAmJiBwZW5kaW5nVGltZXIudGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQocGVuZGluZ1RpbWVyLnRpbWVvdXQpO1xuICAgICAgICBwZW5kaW5nVGltZXIudGltZW91dCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBpZCA9ICghX2lkKSA/ICgnJyArIGZ1bmMpIDogX2lkO1xuICAgIGlmICghdGhpcy5kZWJvdW5jZVRpbWVycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkZWJvdW5jZVRpbWVycycsIHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAge30sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgcGVuZGluZ1RpbWVyID0gdGhpcy5kZWJvdW5jZVRpbWVyc1tpZF07XG4gICAgaWYgKCFwZW5kaW5nVGltZXIpXG4gICAgICBwZW5kaW5nVGltZXIgPSB0aGlzLmRlYm91bmNlVGltZXJzW2lkXSA9IHt9O1xuXG4gICAgcGVuZGluZ1RpbWVyLmZ1bmMgPSBmdW5jO1xuICAgIGNsZWFyUGVuZGluZ1RpbWVvdXQoKTtcblxuICAgIHZhciBwcm9taXNlID0gcGVuZGluZ1RpbWVyLnByb21pc2U7XG4gICAgaWYgKCFwcm9taXNlIHx8ICFwcm9taXNlLnBlbmRpbmcoKSkge1xuICAgICAgbGV0IHN0YXR1cyA9ICdwZW5kaW5nJztcbiAgICAgIGxldCByZXNvbHZlO1xuXG4gICAgICBwcm9taXNlID0gcGVuZGluZ1RpbWVyLnByb21pc2UgPSBuZXcgUHJvbWlzZSgoX3Jlc29sdmUpID0+IHtcbiAgICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UucmVzb2x2ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gJ3BlbmRpbmcnKVxuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBzdGF0dXMgPSAnZnVsZmlsbGVkJztcbiAgICAgICAgY2xlYXJQZW5kaW5nVGltZW91dCgpO1xuICAgICAgICB0aGlzLmRlYm91bmNlVGltZXJzW2lkXSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwZW5kaW5nVGltZXIuZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciByZXQgPSBwZW5kaW5nVGltZXIuZnVuYy5jYWxsKHRoaXMpO1xuICAgICAgICAgIGlmIChyZXQgaW5zdGFuY2VvZiBQcm9taXNlIHx8IChyZXQgJiYgdHlwZW9mIHJldC50aGVuID09PSAnZnVuY3Rpb24nKSlcbiAgICAgICAgICAgIHJldC50aGVuKCh2YWx1ZSkgPT4gcmVzb2x2ZSh2YWx1ZSkpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc29sdmUocmV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gKCkgPT4ge1xuICAgICAgICBzdGF0dXMgPSAncmVqZWN0ZWQnO1xuICAgICAgICBjbGVhclBlbmRpbmdUaW1lb3V0KCk7XG4gICAgICAgIHRoaXMuZGVib3VuY2VUaW1lcnNbaWRdID0gbnVsbDtcblxuICAgICAgICBwcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIH07XG5cbiAgICAgIHByb21pc2UuaXNQZW5kaW5nID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKHN0YXR1cyA9PT0gJ3BlbmRpbmcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcGVuZGluZ1RpbWVyLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHByb21pc2UucmVzb2x2ZSwgKHRpbWUgPT0gbnVsbCkgPyAyNTAgOiB0aW1lKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgY2xlYXJEZWJvdW5jZShpZCkge1xuICAgIHZhciBwZW5kaW5nVGltZXIgPSB0aGlzLmRlYm91bmNlVGltZXJzW2lkXTtcbiAgICBpZiAocGVuZGluZ1RpbWVyID09IG51bGwpXG4gICAgICByZXR1cm47XG5cbiAgICBpZiAocGVuZGluZ1RpbWVyLnRpbWVvdXQpXG4gICAgICBjbGVhclRpbWVvdXQocGVuZGluZ1RpbWVyLnRpbWVvdXQpO1xuXG4gICAgaWYgKHBlbmRpbmdUaW1lci5wcm9taXNlKVxuICAgICAgcGVuZGluZ1RpbWVyLnByb21pc2UuY2FuY2VsKCk7XG4gIH1cblxuICBjbGVhckFsbERlYm91bmNlcygpIHtcbiAgICBsZXQgZGVib3VuY2VUaW1lcnMgID0gdGhpcy5kZWJvdW5jZVRpbWVycyB8fCB7fTtcbiAgICBsZXQgaWRzICAgICAgICAgICAgID0gT2JqZWN0LmtleXMoZGVib3VuY2VUaW1lcnMpO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gaWRzLmxlbmd0aDsgaSA8IGlsOyBpKyspXG4gICAgICB0aGlzLmNsZWFyRGVib3VuY2UoaWRzW2ldKTtcbiAgfVxuXG4gIGdldEVsZW1lbnREYXRhKGVsZW1lbnQpIHtcbiAgICBsZXQgZGF0YSA9IGVsZW1lbnREYXRhQ2FjaGUuZ2V0KGVsZW1lbnQpO1xuICAgIGlmICghZGF0YSkge1xuICAgICAgZGF0YSA9IHt9O1xuICAgICAgZWxlbWVudERhdGFDYWNoZS5zZXQoZWxlbWVudCwgZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9ldmVudHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL2V2ZW50cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMTgxNjhfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMTgxNjhfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzE4MTY4X18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRXZlbnRFbWl0dGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEV2ZW50RW1pdHRlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuY29uc3QgRVZFTlRfTElTVEVORVJTID0gU3ltYm9sLmZvcignQGppYnMvZXZlbnRzL2xpc3RlbmVycycpO1xuXG5jbGFzcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBbRVZFTlRfTElTVEVORVJTXToge1xuICAgICAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG5ldyBNYXAoKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBhZGRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V2ZW50IGxpc3RlbmVyIG11c3QgYmUgYSBtZXRob2QnKTtcblxuICAgIGxldCBldmVudE1hcCAgPSB0aGlzW0VWRU5UX0xJU1RFTkVSU107XG4gICAgbGV0IHNjb3BlICAgICA9IGV2ZW50TWFwLmdldChldmVudE5hbWUpO1xuXG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgc2NvcGUgPSBbXTtcbiAgICAgIGV2ZW50TWFwLnNldChldmVudE5hbWUsIHNjb3BlKTtcbiAgICB9XG5cbiAgICBzY29wZS5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFdmVudCBsaXN0ZW5lciBtdXN0IGJlIGEgbWV0aG9kJyk7XG5cbiAgICBsZXQgZXZlbnRNYXAgID0gdGhpc1tFVkVOVF9MSVNURU5FUlNdO1xuICAgIGxldCBzY29wZSAgICAgPSBldmVudE1hcC5nZXQoZXZlbnROYW1lKTtcbiAgICBpZiAoIXNjb3BlKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBsZXQgaW5kZXggPSBzY29wZS5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggPj0gMClcbiAgICAgIHNjb3BlLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUpIHtcbiAgICBsZXQgZXZlbnRNYXAgID0gdGhpc1tFVkVOVF9MSVNURU5FUlNdO1xuICAgIGlmICghZXZlbnRNYXAuaGFzKGV2ZW50TmFtZSkpXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGV2ZW50TWFwLnNldChldmVudE5hbWUsIFtdKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZW1pdChldmVudE5hbWUsIC4uLmFyZ3MpIHtcbiAgICBsZXQgZXZlbnRNYXAgID0gdGhpc1tFVkVOVF9MSVNURU5FUlNdO1xuICAgIGxldCBzY29wZSAgICAgPSBldmVudE1hcC5nZXQoZXZlbnROYW1lKTtcbiAgICBpZiAoIXNjb3BlIHx8IHNjb3BlLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHNjb3BlLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGxldCBldmVudENhbGxiYWNrID0gc2NvcGVbaV07XG4gICAgICBldmVudENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgb25jZShldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgbGV0IGZ1bmMgPSAoLi4uYXJncykgPT4ge1xuICAgICAgdGhpcy5vZmYoZXZlbnROYW1lLCBmdW5jKTtcbiAgICAgIHJldHVybiBsaXN0ZW5lciguLi5hcmdzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMub24oZXZlbnROYW1lLCBmdW5jKTtcbiAgfVxuXG4gIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdGhpcy5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIG9mZihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudE5hbWVzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXNbRVZFTlRfTElTVEVORVJTXS5rZXlzKCkpO1xuICB9XG5cbiAgbGlzdGVuZXJDb3VudChldmVudE5hbWUpIHtcbiAgICBsZXQgZXZlbnRNYXAgID0gdGhpc1tFVkVOVF9MSVNURU5FUlNdO1xuICAgIGxldCBzY29wZSAgICAgPSBldmVudE1hcC5nZXQoZXZlbnROYW1lKTtcbiAgICBpZiAoIXNjb3BlKVxuICAgICAgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gc2NvcGUubGVuZ3RoO1xuICB9XG5cbiAgbGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgIGxldCBldmVudE1hcCAgPSB0aGlzW0VWRU5UX0xJU1RFTkVSU107XG4gICAgbGV0IHNjb3BlICAgICA9IGV2ZW50TWFwLmdldChldmVudE5hbWUpO1xuICAgIGlmICghc2NvcGUpXG4gICAgICByZXR1cm4gW107XG5cbiAgICByZXR1cm4gc2NvcGUuc2xpY2UoKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL2ppYi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvamliLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMDkyOV9fKSA9PiB7XG5cbl9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMDkyOV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjA5MjlfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCIkXCI6ICgpID0+ICgvKiBiaW5kaW5nICovICQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkpJQlwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBKSUIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkpJQl9CQVJSRU5cIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSklCX0JBUlJFTiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSklCX1BST1hZXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEpJQl9QUk9YWSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSmliXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEppYiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiY29uc3RydWN0SmliXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGNvbnN0cnVjdEppYiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZmFjdG9yeVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBmYWN0b3J5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJpc0ppYmlzaFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBpc0ppYmlzaCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwicmVzb2x2ZUNoaWxkcmVuXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIHJlc29sdmVDaGlsZHJlbilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGRlYWRiZWVmX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjA5MjlfXygvKiEgZGVhZGJlZWYgKi8gXCIuL25vZGVfbW9kdWxlcy9kZWFkYmVlZi9saWIvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjA5MjlfXygvKiEgLi91dGlscy5qcyAqLyBcIi4vbGliL3V0aWxzLmpzXCIpO1xuXG5cblxuY2xhc3MgSmliIHtcbiAgY29uc3RydWN0b3IoVHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgbGV0IGRlZmF1bHRQcm9wcyA9IChUeXBlICYmIFR5cGUucHJvcHMpID8gVHlwZS5wcm9wcyA6IHt9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgJ1R5cGUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgVHlwZSxcbiAgICAgIH0sXG4gICAgICAncHJvcHMnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgeyAuLi5kZWZhdWx0UHJvcHMsIC4uLihwcm9wcyB8fCB7fSkgfSxcbiAgICAgIH0sXG4gICAgICAnY2hpbGRyZW4nOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uZmxhdHRlbkFycmF5KGNoaWxkcmVuKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgSklCX0JBUlJFTiAgPSBTeW1ib2wuZm9yKCdAamlicy5iYXJyZW4nKTtcbmNvbnN0IEpJQl9QUk9YWSAgID0gU3ltYm9sLmZvcignQGppYnMucHJveHknKTtcbmNvbnN0IEpJQiAgICAgICAgID0gU3ltYm9sLmZvcignQGppYnMuamliJyk7XG5cbmZ1bmN0aW9uIGZhY3RvcnkoSmliQ2xhc3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICQoX3R5cGUsIHByb3BzID0ge30pIHtcbiAgICBpZiAoaXNKaWJpc2goX3R5cGUpKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVjZWl2ZWQgYSBqaWIgYnV0IGV4cGVjdGVkIGEgY29tcG9uZW50LicpO1xuXG4gICAgbGV0IFR5cGUgPSAoX3R5cGUgPT0gbnVsbCkgPyBKSUJfUFJPWFkgOiBfdHlwZTtcblxuICAgIGZ1bmN0aW9uIGJhcnJlbiguLi5fY2hpbGRyZW4pIHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IF9jaGlsZHJlbjtcblxuICAgICAgZnVuY3Rpb24gamliKCkge1xuICAgICAgICBpZiAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihUeXBlLCAncHJvbWlzZScpIHx8IGNoaWxkcmVuLnNvbWUoKGNoaWxkKSA9PiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pbnN0YW5jZU9mKGNoaWxkLCAncHJvbWlzZScpKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbIFR5cGUgXS5jb25jYXQoY2hpbGRyZW4pKS50aGVuKChhbGwpID0+IHtcbiAgICAgICAgICAgIFR5cGUgPSBhbGxbMF07XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGFsbC5zbGljZSgxKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBKaWJDbGFzcyhcbiAgICAgICAgICAgICAgVHlwZSxcbiAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgSmliQ2xhc3MoXG4gICAgICAgICAgVHlwZSxcbiAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoamliLCB7XG4gICAgICAgIFtKSUJdOiB7XG4gICAgICAgICAgd3JpdGFibGU6ICAgICBmYWxzZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6ICAgICAgICB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBbZGVhZGJlZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pZFN5bV06IHtcbiAgICAgICAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogICAgICAgICgpID0+IFR5cGUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGppYjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhiYXJyZW4sIHtcbiAgICAgIFtKSUJfQkFSUkVOXToge1xuICAgICAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogICAgICAgIHRydWUsXG4gICAgICB9LFxuICAgICAgW2RlYWRiZWVmX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaWRTeW1dOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgKCkgPT4gVHlwZSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmFycmVuO1xuICB9O1xufVxuXG5jb25zdCAkID0gZmFjdG9yeShKaWIpO1xuXG5mdW5jdGlvbiBpc0ppYmlzaCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICh2YWx1ZVtKSUJfQkFSUkVOXSB8fCB2YWx1ZVtKSUJdKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBKaWIpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RKaWIodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSmliKVxuICAgIHJldHVybiB2YWx1ZTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlW0pJQl9CQVJSRU5dKVxuICAgICAgcmV0dXJuIHZhbHVlKCkoKTtcbiAgICBlbHNlIGlmICh2YWx1ZVtKSUJdKVxuICAgICAgcmV0dXJuIHZhbHVlKCk7XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb25zdHJ1Y3RKaWI6IFByb3ZpZGVkIHZhbHVlIGlzIG5vdCBhIEppYi4nKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuKF9jaGlsZHJlbikge1xuICBsZXQgY2hpbGRyZW4gPSBfY2hpbGRyZW47XG5cbiAgaWYgKF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmluc3RhbmNlT2YoY2hpbGRyZW4sICdwcm9taXNlJykpXG4gICAgY2hpbGRyZW4gPSBhd2FpdCBjaGlsZHJlbjtcblxuICBpZiAoISgodGhpcy5pc0l0ZXJhYmxlQ2hpbGQgfHwgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaXNJdGVyYWJsZUNoaWxkKS5jYWxsKHRoaXMsIGNoaWxkcmVuKSkgJiYgKGlzSmliaXNoKGNoaWxkcmVuKSB8fCAoKHRoaXMuaXNWYWxpZENoaWxkIHx8IF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmlzVmFsaWRDaGlsZCkuY2FsbCh0aGlzLCBjaGlsZHJlbikpKSlcbiAgICBjaGlsZHJlbiA9IFsgY2hpbGRyZW4gXTtcblxuICBsZXQgcHJvbWlzZXMgPSBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5pdGVyYXRlKGNoaWxkcmVuLCBhc3luYyAoeyB2YWx1ZTogX2NoaWxkIH0pID0+IHtcbiAgICBsZXQgY2hpbGQgPSAoX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaW5zdGFuY2VPZihfY2hpbGQsICdwcm9taXNlJykpID8gYXdhaXQgX2NoaWxkIDogX2NoaWxkO1xuXG4gICAgaWYgKGlzSmliaXNoKGNoaWxkKSlcbiAgICAgIHJldHVybiBhd2FpdCBjb25zdHJ1Y3RKaWIoY2hpbGQpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgfSk7XG5cbiAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvY29tbWVudC1lbGVtZW50LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9saWIvcmVuZGVyZXJzL2NvbW1lbnQtZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2MDMyX18pID0+IHtcblxuX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2MDMyX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yNjAzMl9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbW1lbnRFbGVtZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbW1lbnRFbGVtZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2MDMyX18oLyohIC4vcm9vdC1lbGVtZW50LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3QtZWxlbWVudC5qc1wiKTtcblxuXG5jbGFzcyBDb21tZW50RWxlbWVudCBleHRlbmRzIF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Sb290RWxlbWVudCB7XG4gIHN0YXRpYyBUWVBFID0gX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfQ09NTUVOVDtcblxuICBjb25zdHJ1Y3RvcihpZCwgdmFsdWUsIHByb3BzKSB7XG4gICAgc3VwZXIoX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfQ09NTUVOVCwgaWQsIHZhbHVlLCBwcm9wcyk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3JlbmRlcmVycy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjY5NzNfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjY5NzNfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2OTczX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ09OVEVYVF9JRFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfcm9vdF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQ09OVEVYVF9JRCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29tbWVudEVsZW1lbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2NvbW1lbnRfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkNvbW1lbnRFbGVtZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJGT1JDRV9SRUZMT1dcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRk9SQ0VfUkVGTE9XKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJOYXRpdmVFbGVtZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9uYXRpdmVfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk5hdGl2ZUVsZW1lbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlBvcnRhbEVsZW1lbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3BvcnRhbF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uUG9ydGFsRWxlbWVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUmVuZGVyZXJcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3JlbmRlcmVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uUmVuZGVyZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlJvb3RFbGVtZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Sb290RWxlbWVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUm9vdE5vZGVcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3ROb2RlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJUZXh0RWxlbWVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfdGV4dF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uVGV4dEVsZW1lbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcm9vdF9ub2RlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjY5NzNfXygvKiEgLi9yb290LW5vZGUuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1ub2RlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9yZW5kZXJlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2OTczX18oLyohIC4vcmVuZGVyZXIuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcmVuZGVyZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2OTczX18oLyohIC4vcm9vdC1lbGVtZW50LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3QtZWxlbWVudC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfY29tbWVudF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjY5NzNfXygvKiEgLi9jb21tZW50LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvY29tbWVudC1lbGVtZW50LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9uYXRpdmVfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI2OTczX18oLyohIC4vbmF0aXZlLWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvbmF0aXZlLWVsZW1lbnQuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BvcnRhbF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjY5NzNfXygvKiEgLi9wb3J0YWwtZWxlbWVudC5qcyAqLyBcIi4vbGliL3JlbmRlcmVycy9wb3J0YWwtZWxlbWVudC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdGV4dF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjY5NzNfXygvKiEgLi90ZXh0LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvdGV4dC1lbGVtZW50LmpzXCIpO1xuXG5cbmNvbnN0IEZPUkNFX1JFRkxPVyA9IFN5bWJvbC5mb3IoJ0BqaWJzRm9yY2VSZWZsb3cnKTtcblxuXG5cblxuXG5cblxuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9saWIvcmVuZGVyZXJzL25hdGl2ZS1lbGVtZW50LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9yZW5kZXJlcnMvbmF0aXZlLWVsZW1lbnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI5NjA5X18pID0+IHtcblxuX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzI5NjA5X18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yOTYwOV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk5hdGl2ZUVsZW1lbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTmF0aXZlRWxlbWVudClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yOTYwOV9fKC8qISAuL3Jvb3QtZWxlbWVudC5qcyAqLyBcIi4vbGliL3JlbmRlcmVycy9yb290LWVsZW1lbnQuanNcIik7XG5cblxuY2xhc3MgTmF0aXZlRWxlbWVudCBleHRlbmRzIF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Sb290RWxlbWVudCB7XG4gIHN0YXRpYyBUWVBFID0gX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfRUxFTUVOVDtcblxuICBjb25zdHJ1Y3RvcihpZCwgdmFsdWUsIHByb3BzKSB7XG4gICAgc3VwZXIoX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50LlRZUEVfRUxFTUVOVCwgaWQsIHZhbHVlLCBwcm9wcyk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvcG9ydGFsLWVsZW1lbnQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3JlbmRlcmVycy9wb3J0YWwtZWxlbWVudC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzA1ODNfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzA1ODNfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzMwNTgzX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUG9ydGFsRWxlbWVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQb3J0YWxFbGVtZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzMwNTgzX18oLyohIC4vcm9vdC1lbGVtZW50LmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3QtZWxlbWVudC5qc1wiKTtcblxuXG5jbGFzcyBQb3J0YWxFbGVtZW50IGV4dGVuZHMgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50IHtcbiAgc3RhdGljIFRZUEUgPSBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9QT1JUQUw7XG5cbiAgY29uc3RydWN0b3IoaWQsIHZhbHVlLCBwcm9wcykge1xuICAgIHN1cGVyKF9yb290X2VsZW1lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Sb290RWxlbWVudC5UWVBFX1BPUlRBTCwgaWQsIHZhbHVlLCBwcm9wcyk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL2xpYi9yZW5kZXJlcnMvcmVuZGVyZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3JlbmRlcmVycy9yZW5kZXJlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzE1MzFfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzE1MzFfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzMxNTMxX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUmVuZGVyZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUmVuZGVyZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZXZlbnRzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzE1MzFfXygvKiEgLi4vZXZlbnRzLmpzICovIFwiLi9saWIvZXZlbnRzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzMxNTMxX18oLyohIC4uL3V0aWxzLmpzICovIFwiLi9saWIvdXRpbHMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzMxNTMxX18oLyohIC4vcm9vdC1ub2RlLmpzICovIFwiLi9saWIvcmVuZGVyZXJzL3Jvb3Qtbm9kZS5qc1wiKTtcblxuXG5cblxubGV0IF9jb250ZXh0SURDb3VudGVyID0gMG47XG5cbmNsYXNzIFJlbmRlcmVyIGV4dGVuZHMgX2V2ZW50c19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkV2ZW50RW1pdHRlciB7XG4gIHN0YXRpYyBSb290Tm9kZSA9IF9yb290X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Sb290Tm9kZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgJ2NvbnRleHQnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIHRoaXMuY3JlYXRlQ29udGV4dCgpLFxuICAgICAgfSxcbiAgICAgICdkZXN0cm95aW5nJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBmYWxzZSxcbiAgICAgIH0sXG4gICAgICAncmVuZGVyRnJhbWUnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIDAsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlQ29udGV4dChyb290Q29udGV4dCwgb25VcGRhdGUsIG9uVXBkYXRlVGhpcykge1xuICAgIGxldCBjb250ZXh0ICAgICA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGV0IG15Q29udGV4dElEID0gKHJvb3RDb250ZXh0KSA/IHJvb3RDb250ZXh0W19yb290X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5DT05URVhUX0lEXSA6IDFuO1xuXG4gICAgcmV0dXJuIG5ldyBQcm94eShjb250ZXh0LCB7XG4gICAgICBnZXQ6ICh0YXJnZXQsIHByb3BOYW1lKSA9PiB7XG4gICAgICAgIGlmIChwcm9wTmFtZSA9PT0gX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNPTlRFWFRfSUQpIHtcbiAgICAgICAgICBsZXQgcGFyZW50SUQgPSAocm9vdENvbnRleHQpID8gcm9vdENvbnRleHRbX3Jvb3Rfbm9kZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkNPTlRFWFRfSURdIDogMW47XG4gICAgICAgICAgcmV0dXJuIChwYXJlbnRJRCA+IG15Q29udGV4dElEKSA/IHBhcmVudElEIDogbXlDb250ZXh0SUQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3BOYW1lKSlcbiAgICAgICAgICByZXR1cm4gKHJvb3RDb250ZXh0KSA/IHJvb3RDb250ZXh0W3Byb3BOYW1lXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BOYW1lXTtcbiAgICAgIH0sXG4gICAgICBzZXQ6ICh0YXJnZXQsIHByb3BOYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAocHJvcE5hbWUgPT09IF9yb290X25vZGVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5DT05URVhUX0lEKVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGlmICh0YXJnZXRbcHJvcE5hbWVdID09PSB2YWx1ZSlcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBteUNvbnRleHRJRCA9ICsrX2NvbnRleHRJRENvdW50ZXI7XG4gICAgICAgIHRhcmdldFtwcm9wTmFtZV0gPSB2YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIG9uVXBkYXRlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgIG9uVXBkYXRlLmNhbGwob25VcGRhdGVUaGlzLCBvblVwZGF0ZVRoaXMpO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3JlbmRlcmVycy9yb290LWVsZW1lbnQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9yZW5kZXJlcnMvcm9vdC1lbGVtZW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzQyODFfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzQyODFfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM0MjgxX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUm9vdEVsZW1lbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUm9vdEVsZW1lbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcblxuY29uc3QgVFlQRV9FTEVNRU5UICA9IDE7XG5jb25zdCBUWVBFX1RFWFQgICAgID0gMztcbmNvbnN0IFRZUEVfQ09NTUVOVCAgPSA4O1xuY29uc3QgVFlQRV9QT1JUQUwgICA9IDE1O1xuXG5jbGFzcyBSb290RWxlbWVudCB7XG4gIHN0YXRpYyBUWVBFX0VMRU1FTlQgID0gVFlQRV9FTEVNRU5UO1xuXG4gIHN0YXRpYyBUWVBFX1RFWFQgICAgID0gVFlQRV9URVhUO1xuXG4gIHN0YXRpYyBUWVBFX0NPTU1FTlQgID0gVFlQRV9DT01NRU5UO1xuXG4gIHN0YXRpYyBUWVBFX1BPUlRBTCAgID0gVFlQRV9QT1JUQUw7XG5cbiAgY29uc3RydWN0b3IodHlwZSwgaWQsIHZhbHVlLCBwcm9wcykge1xuICAgIHRoaXMuaXNKaWJzVmlydHVhbEVsZW1lbnQgPSB0cnVlO1xuICAgIHRoaXMudHlwZSAgID0gdHlwZTtcbiAgICB0aGlzLmlkICAgICA9IGlkO1xuICAgIHRoaXMudmFsdWUgID0gdmFsdWU7XG4gICAgdGhpcy5wcm9wcyAgPSBwcm9wcyB8fCB7fTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3JlbmRlcmVycy9yb290LW5vZGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9yZW5kZXJlcnMvcm9vdC1ub2RlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzUyMjJfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzUyMjJfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM1MjIyX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ09OVEVYVF9JRFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDT05URVhUX0lEKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJSb290Tm9kZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSb290Tm9kZSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM1MjIyX18oLyohIC4uL3V0aWxzLmpzICovIFwiLi9saWIvdXRpbHMuanNcIik7XG5cblxuY29uc3QgQ09OVEVYVF9JRCA9IFN5bWJvbC5mb3IoJ0BqaWJzL25vZGUvY29udGV4dElEJyk7XG5cbmxldCB1dWlkID0gMTtcblxuY2xhc3MgUm9vdE5vZGUge1xuICBzdGF0aWMgQ09OVEVYVF9JRCA9IENPTlRFWFRfSUQ7XG5cbiAgY29uc3RydWN0b3IocmVuZGVyZXIsIHBhcmVudCwgX2NvbnRleHQpIHtcbiAgICBsZXQgY29udGV4dCA9IHJlbmRlcmVyLmNyZWF0ZUNvbnRleHQoXG4gICAgICBfY29udGV4dCxcbiAgICAgICh0aGlzLm9uQ29udGV4dFVwZGF0ZSkgPyB0aGlzLm9uQ29udGV4dFVwZGF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIHRoaXMsXG4gICAgKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgICdpZCc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICB1dWlkKyssXG4gICAgICB9LFxuICAgICAgJ3JlbmRlcmVyJzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICByZW5kZXJlcixcbiAgICAgIH0sXG4gICAgICAncGFyZW50Jzoge1xuICAgICAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBwYXJlbnQsXG4gICAgICB9LFxuICAgICAgJ2NvbnRleHQnOiB7XG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogICAgICAgICAgKCkgPT4ge30sXG4gICAgICB9LFxuICAgICAgJ3JlbmRlclByb21pc2UnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIG51bGwsXG4gICAgICB9LFxuICAgICAgJ2Rlc3Ryb3lpbmcnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogICAgICAgIGZhbHNlLFxuICAgICAgfSxcbiAgICAgICdyZW5kZXJGcmFtZSc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiAgICAgICAgMCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWluZyA9IHRydWU7XG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgfVxuXG4gIGlzVmFsaWRDaGlsZChjaGlsZCkge1xuICAgIHJldHVybiBfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc1ZhbGlkQ2hpbGQoY2hpbGQpO1xuICB9XG5cbiAgaXNJdGVyYWJsZUNoaWxkKGNoaWxkKSB7XG4gICAgcmV0dXJuIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzSXRlcmFibGVDaGlsZChjaGlsZCk7XG4gIH1cblxuICBwcm9wc0RpZmZlcihvbGRQcm9wcywgbmV3UHJvcHMsIHNraXBLZXlzKSB7XG4gICAgcmV0dXJuIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnByb3BzRGlmZmVyKG9sZFByb3BzLCBuZXdQcm9wcywgc2tpcEtleXMpO1xuICB9XG5cbiAgY2hpbGRyZW5EaWZmZXIob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuKSB7XG4gICAgcmV0dXJuIF91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmNoaWxkcmVuRGlmZmVyKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbik7XG4gIH1cblxuICBhc3luYyByZW5kZXIoamliLCByZW5kZXJDb250ZXh0KSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWluZylcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMucmVuZGVyRnJhbWUrKztcblxuICAgIHJldHVybiB0aGlzLl9yZW5kZXIoamliLCByZW5kZXJDb250ZXh0KVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICB0aGlzLnJlbmRlclByb21pc2UgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgdGhpcy5yZW5kZXJQcm9taXNlID0gbnVsbDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3JlbmRlcmVycy90ZXh0LWVsZW1lbnQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9yZW5kZXJlcnMvdGV4dC1lbGVtZW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzgyMDdfXykgPT4ge1xuXG5fX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzgyMDdfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM4MjA3X18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVGV4dEVsZW1lbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dEVsZW1lbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMzgyMDdfXygvKiEgLi9yb290LWVsZW1lbnQuanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvcm9vdC1lbGVtZW50LmpzXCIpO1xuXG5cbmNsYXNzIFRleHRFbGVtZW50IGV4dGVuZHMgX3Jvb3RfZWxlbWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJvb3RFbGVtZW50IHtcbiAgc3RhdGljIFRZUEUgPSBfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9URVhUO1xuXG4gIGNvbnN0cnVjdG9yKGlkLCB2YWx1ZSwgcHJvcHMpIHtcbiAgICBzdXBlcihfcm9vdF9lbGVtZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUm9vdEVsZW1lbnQuVFlQRV9URVhULCBpZCwgdmFsdWUsIHByb3BzKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbGliL3V0aWxzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL3V0aWxzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM5MDkzX18pID0+IHtcblxuX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM5MDkzX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8zOTA5M19fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImJpbmRNZXRob2RzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGJpbmRNZXRob2RzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJjaGlsZHJlbkRpZmZlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBjaGlsZHJlbkRpZmZlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZmV0Y2hEZWVwUHJvcGVydHlcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZmV0Y2hEZWVwUHJvcGVydHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImZsYXR0ZW5BcnJheVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBmbGF0dGVuQXJyYXkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImluc3RhbmNlT2ZcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaW5zdGFuY2VPZiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiaXNFbXB0eVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBpc0VtcHR5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJpc0l0ZXJhYmxlQ2hpbGRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaXNJdGVyYWJsZUNoaWxkKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJpc05vdEVtcHR5XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGlzTm90RW1wdHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImlzVmFsaWRDaGlsZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBpc1ZhbGlkQ2hpbGQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIml0ZXJhdGVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaXRlcmF0ZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwibm93XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIG5vdyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwicHJvcHNEaWZmZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gcHJvcHNEaWZmZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcInNpemVPZlwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBzaXplT2YpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBkZWFkYmVlZl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzM5MDkzX18oLyohIGRlYWRiZWVmICovIFwiLi9ub2RlX21vZHVsZXMvZGVhZGJlZWYvbGliL2luZGV4LmpzXCIpO1xuXG5cbmNvbnN0IFNUT1AgPSBTeW1ib2wuZm9yKCdAamlic0l0ZXJhdGVTdG9wJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuY29uc3QgZ2xvYmFsU2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpID8gZ2xvYmFsIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaW5zdGFuY2VPZihvYmopIHtcbiAgZnVuY3Rpb24gdGVzdFR5cGUob2JqLCBfdmFsKSB7XG4gICAgZnVuY3Rpb24gaXNEZWZlcnJlZFR5cGUob2JqKSB7XG4gICAgICBpZiAob2JqIGluc3RhbmNlb2YgUHJvbWlzZSB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnUHJvbWlzZScpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgLy8gUXVhY2sgcXVhY2suLi5cbiAgICAgIGlmICh0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5jYXRjaCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgdmFsICAgICA9IF92YWw7XG4gICAgbGV0IHR5cGVPZiAgPSAodHlwZW9mIG9iaik7XG5cbiAgICBpZiAodmFsID09PSBnbG9iYWxTY29wZS5TdHJpbmcpXG4gICAgICB2YWwgPSAnc3RyaW5nJztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLk51bWJlcilcbiAgICAgIHZhbCA9ICdudW1iZXInO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuQm9vbGVhbilcbiAgICAgIHZhbCA9ICdib29sZWFuJztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLkZ1bmN0aW9uKVxuICAgICAgdmFsID0gJ2Z1bmN0aW9uJztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLkFycmF5KVxuICAgICAgdmFsID0gJ2FycmF5JztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLk9iamVjdClcbiAgICAgIHZhbCA9ICdvYmplY3QnO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuUHJvbWlzZSlcbiAgICAgIHZhbCA9ICdwcm9taXNlJztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLkJpZ0ludClcbiAgICAgIHZhbCA9ICdiaWdpbnQnO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuTWFwKVxuICAgICAgdmFsID0gJ21hcCc7XG4gICAgZWxzZSBpZiAodmFsID09PSBnbG9iYWxTY29wZS5XZWFrTWFwKVxuICAgICAgdmFsID0gJ3dlYWttYXAnO1xuICAgIGVsc2UgaWYgKHZhbCA9PT0gZ2xvYmFsU2NvcGUuU2V0KVxuICAgICAgdmFsID0gJ3NldCc7XG4gICAgZWxzZSBpZiAodmFsID09PSBnbG9iYWxTY29wZS5TeW1ib2wpXG4gICAgICB2YWwgPSAnc3ltYm9sJztcbiAgICBlbHNlIGlmICh2YWwgPT09IGdsb2JhbFNjb3BlLkJ1ZmZlcilcbiAgICAgIHZhbCA9ICdidWZmZXInO1xuXG4gICAgaWYgKHZhbCA9PT0gJ2J1ZmZlcicgJiYgZ2xvYmFsU2NvcGUuQnVmZmVyICYmIGdsb2JhbFNjb3BlLkJ1ZmZlci5pc0J1ZmZlcihvYmopKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodmFsID09PSAnbnVtYmVyJyAmJiAodHlwZU9mID09PSAnbnVtYmVyJyB8fCBvYmogaW5zdGFuY2VvZiBOdW1iZXIgfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ051bWJlcicpKSkge1xuICAgICAgaWYgKCFpc0Zpbml0ZShvYmopKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh2YWwgIT09ICdvYmplY3QnICYmIHZhbCA9PT0gdHlwZU9mKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKChvYmouY29uc3RydWN0b3IgPT09IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IgfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ09iamVjdCcpKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIC8vIE51bGwgcHJvdG90eXBlIG9uIG9iamVjdFxuICAgICAgaWYgKHR5cGVPZiA9PT0gJ29iamVjdCcgJiYgIW9iai5jb25zdHJ1Y3RvcilcbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodmFsID09PSAnYXJyYXknICYmIChBcnJheS5pc0FycmF5KG9iaikgfHwgb2JqIGluc3RhbmNlb2YgQXJyYXkgfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ0FycmF5JykpKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAoKHZhbCA9PT0gJ3Byb21pc2UnIHx8IHZhbCA9PT0gJ2RlZmVycmVkJykgJiYgaXNEZWZlcnJlZFR5cGUob2JqKSlcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHZhbCA9PT0gJ3N0cmluZycgJiYgKG9iaiBpbnN0YW5jZW9mIGdsb2JhbFNjb3BlLlN0cmluZyB8fCAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSAnU3RyaW5nJykpKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodmFsID09PSAnYm9vbGVhbicgJiYgKG9iaiBpbnN0YW5jZW9mIGdsb2JhbFNjb3BlLkJvb2xlYW4gfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ0Jvb2xlYW4nKSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh2YWwgPT09ICdtYXAnICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWxTY29wZS5NYXAgfHwgKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ01hcCcpKSlcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHZhbCA9PT0gJ3dlYWttYXAnICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWxTY29wZS5XZWFrTWFwIHx8IChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdXZWFrTWFwJykpKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodmFsID09PSAnc2V0JyAmJiAob2JqIGluc3RhbmNlb2YgZ2xvYmFsU2NvcGUuU2V0IHx8IChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdTZXQnKSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh2YWwgPT09ICdmdW5jdGlvbicgJiYgdHlwZU9mID09PSAnZnVuY3Rpb24nKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiB2YWwpXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09IHZhbClcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG9iaiA9PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKHRlc3RUeXBlKG9iaiwgYXJndW1lbnRzW2ldKSA9PT0gdHJ1ZSlcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcm9wc0RpZmZlcihvbGRQcm9wcywgbmV3UHJvcHMsIHNraXBLZXlzKSB7XG4gIGlmIChvbGRQcm9wcyA9PT0gbmV3UHJvcHMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2Ygb2xkUHJvcHMgIT09IHR5cGVvZiBuZXdQcm9wcylcbiAgICByZXR1cm4gdHJ1ZTtcblxuICBpZiAoIW9sZFByb3BzICYmIG5ld1Byb3BzKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIGlmIChvbGRQcm9wcyAmJiAhbmV3UHJvcHMpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICBpZiAoIW9sZFByb3BzICYmICFuZXdQcm9wcyAmJiBvbGRQcm9wcyAhPSBvbGRQcm9wcylcbiAgICByZXR1cm4gdHJ1ZTtcblxuICBsZXQgYUtleXMgPSBPYmplY3Qua2V5cyhvbGRQcm9wcykuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2xkUHJvcHMpKTtcbiAgbGV0IGJLZXlzID0gT2JqZWN0LmtleXMobmV3UHJvcHMpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG5ld1Byb3BzKSk7XG5cbiAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIGZvciAobGV0IGkgPSAwLCBpbCA9IGFLZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICBsZXQgYUtleSA9IGFLZXlzW2ldO1xuICAgIGlmIChza2lwS2V5cyAmJiBza2lwS2V5cy5pbmRleE9mKGFLZXkpID49IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChvbGRQcm9wc1thS2V5XSAhPT0gbmV3UHJvcHNbYUtleV0pXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGxldCBiS2V5ID0gYktleXNbaV07XG4gICAgaWYgKHNraXBLZXlzICYmIHNraXBLZXlzLmluZGV4T2YoYktleSkpXG4gICAgICBjb250aW51ZTtcblxuICAgIGlmIChhS2V5ID09PSBiS2V5KVxuICAgICAgY29udGludWU7XG5cbiAgICBpZiAob2xkUHJvcHNbYktleV0gIT09IG5ld1Byb3BzW2JLZXldKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNpemVPZih2YWx1ZSkge1xuICBpZiAoIXZhbHVlKVxuICAgIHJldHVybiAwO1xuXG4gIGlmIChPYmplY3QuaXMoSW5maW5pdHkpKVxuICAgIHJldHVybiAwO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJylcbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBfaXRlcmF0ZShvYmosIGNhbGxiYWNrKSB7XG4gIGlmICghb2JqIHx8IE9iamVjdC5pcyhJbmZpbml0eSkpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGxldCByZXN1bHRzICAgPSBbXTtcbiAgbGV0IHNjb3BlICAgICA9IHsgY29sbGVjdGlvbjogb2JqLCBTVE9QIH07XG4gIGxldCByZXN1bHQ7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHNjb3BlLnR5cGUgPSAnQXJyYXknO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0gb2JqLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIHNjb3BlLnZhbHVlID0gb2JqW2ldO1xuICAgICAgc2NvcGUuaW5kZXggPSBzY29wZS5rZXkgPSBpO1xuXG4gICAgICByZXN1bHQgPSBjYWxsYmFjay5jYWxsKHRoaXMsIHNjb3BlKTtcbiAgICAgIGlmIChyZXN1bHQgPT09IFNUT1ApXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iai5lbnRyaWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIFNldCB8fCBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ1NldCcpIHtcbiAgICAgIHNjb3BlLnR5cGUgPSAnU2V0JztcblxuICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2Ygb2JqLnZhbHVlcygpKSB7XG4gICAgICAgIHNjb3BlLnZhbHVlID0gaXRlbTtcbiAgICAgICAgc2NvcGUua2V5ID0gaXRlbTtcbiAgICAgICAgc2NvcGUuaW5kZXggPSBpbmRleCsrO1xuXG4gICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwodGhpcywgc2NvcGUpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBTVE9QKVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzY29wZS50eXBlID0gb2JqLmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICBmb3IgKGxldCBbIGtleSwgdmFsdWUgXSBvZiBvYmouZW50cmllcygpKSB7XG4gICAgICAgIHNjb3BlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHNjb3BlLmtleSA9IGtleTtcbiAgICAgICAgc2NvcGUuaW5kZXggPSBpbmRleCsrO1xuXG4gICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwodGhpcywgc2NvcGUpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBTVE9QKVxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaW5zdGFuY2VPZihvYmosICdib29sZWFuJywgJ251bWJlcicsICdiaWdpbnQnLCAnZnVuY3Rpb24nKSlcbiAgICAgIHJldHVybjtcblxuICAgIHNjb3BlLnR5cGUgPSAob2JqLmNvbnN0cnVjdG9yKSA/IG9iai5jb25zdHJ1Y3Rvci5uYW1lIDogJ09iamVjdCc7XG5cbiAgICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsID0ga2V5cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICBsZXQga2V5ICAgPSBrZXlzW2ldO1xuICAgICAgbGV0IHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIHNjb3BlLnZhbHVlID0gdmFsdWU7XG4gICAgICBzY29wZS5rZXkgPSBrZXk7XG4gICAgICBzY29wZS5pbmRleCA9IGk7XG5cbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwodGhpcywgc2NvcGUpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gU1RPUClcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhfaXRlcmF0ZSwge1xuICAnU1RPUCc6IHtcbiAgICB3cml0YWJsZTogICAgIGZhbHNlLFxuICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogICAgICAgIFNUT1AsXG4gIH0sXG59KTtcblxuY29uc3QgaXRlcmF0ZSA9IF9pdGVyYXRlO1xuXG5mdW5jdGlvbiBjaGlsZHJlbkRpZmZlcihfY2hpbGRyZW4xLCBfY2hpbGRyZW4yKSB7XG4gIGxldCBjaGlsZHJlbjEgPSAoIUFycmF5LmlzQXJyYXkoX2NoaWxkcmVuMSkpID8gWyBfY2hpbGRyZW4xIF0gOiBfY2hpbGRyZW4xO1xuICBsZXQgY2hpbGRyZW4yID0gKCFBcnJheS5pc0FycmF5KF9jaGlsZHJlbjIpKSA/IFsgX2NoaWxkcmVuMiBdIDogX2NoaWxkcmVuMjtcblxuICByZXR1cm4gKGRlYWRiZWVmX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18oLi4uY2hpbGRyZW4xKSAhPT0gZGVhZGJlZWZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyguLi5jaGlsZHJlbjIpKTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hEZWVwUHJvcGVydHkob2JqLCBfa2V5LCBkZWZhdWx0VmFsdWUsIGxhc3RQYXJ0KSB7XG4gIGlmIChvYmogPT0gbnVsbCB8fCBPYmplY3QuaXMoTmFOLCBvYmopIHx8IE9iamVjdC5pcyhJbmZpbml0eSwgb2JqKSlcbiAgICByZXR1cm4gKGxhc3RQYXJ0KSA/IFsgZGVmYXVsdFZhbHVlLCBudWxsIF0gOiBkZWZhdWx0VmFsdWU7XG5cbiAgaWYgKF9rZXkgPT0gbnVsbCB8fCBPYmplY3QuaXMoTmFOLCBfa2V5KSB8fCBPYmplY3QuaXMoSW5maW5pdHksIF9rZXkpKVxuICAgIHJldHVybiAobGFzdFBhcnQpID8gWyBkZWZhdWx0VmFsdWUsIG51bGwgXSA6IGRlZmF1bHRWYWx1ZTtcblxuICBsZXQgcGFydHM7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoX2tleSkpIHtcbiAgICBwYXJ0cyA9IF9rZXk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIF9rZXkgPT09ICdzeW1ib2wnKSB7XG4gICAgcGFydHMgPSBbIF9rZXkgXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQga2V5ICAgICAgICAgPSAoJycgKyBfa2V5KTtcbiAgICBsZXQgbGFzdEluZGV4ICAgPSAwO1xuICAgIGxldCBsYXN0Q3Vyc29yICA9IDA7XG5cbiAgICBwYXJ0cyA9IFtdO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgaW5kZXggPSBrZXkuaW5kZXhPZignLicsIGxhc3RJbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHBhcnRzLnB1c2goa2V5LnN1YnN0cmluZyhsYXN0Q3Vyc29yKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5LmNoYXJBdChpbmRleCAtIDEpID09PSAnXFxcXCcpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcGFydHMucHVzaChrZXkuc3Vic3RyaW5nKGxhc3RDdXJzb3IsIGluZGV4KSk7XG4gICAgICBsYXN0Q3Vyc29yID0gbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuXG4gIGxldCBwYXJ0TiA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICBpZiAocGFydHMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiAobGFzdFBhcnQpID8gWyBkZWZhdWx0VmFsdWUsIHBhcnROIF0gOiBkZWZhdWx0VmFsdWU7XG5cbiAgbGV0IGN1cnJlbnRWYWx1ZSA9IG9iajtcbiAgZm9yIChsZXQgaSA9IDAsIGlsID0gcGFydHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgIGxldCBrZXkgPSBwYXJ0c1tpXTtcblxuICAgIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRWYWx1ZVtrZXldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbnVsbClcbiAgICAgIHJldHVybiAobGFzdFBhcnQpID8gWyBkZWZhdWx0VmFsdWUsIHBhcnROIF0gOiBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICByZXR1cm4gKGxhc3RQYXJ0KSA/IFsgY3VycmVudFZhbHVlLCBwYXJ0TiBdIDogY3VycmVudFZhbHVlO1xufVxuXG5mdW5jdGlvbiBiaW5kTWV0aG9kcyhfcHJvdG8sIHNraXBQcm90b3MpIHtcbiAgbGV0IHByb3RvICAgICAgICAgICA9IF9wcm90bztcbiAgbGV0IGFscmVhZHlWaXNpdGVkICA9IG5ldyBTZXQoKTtcblxuICB3aGlsZSAocHJvdG8pIHtcbiAgICBsZXQgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhwcm90byk7XG4gICAgbGV0IGtleXMgICAgICAgID0gT2JqZWN0LmtleXMoZGVzY3JpcHRvcnMpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGRlc2NyaXB0b3JzKSk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJylcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGlmIChhbHJlYWR5VmlzaXRlZC5oYXMoa2V5KSlcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGFscmVhZHlWaXNpdGVkLmFkZChrZXkpO1xuXG4gICAgICBsZXQgdmFsdWUgPSBwcm90b1trZXldO1xuXG4gICAgICAvLyBTa2lwIHByb3RvdHlwZSBvZiBPYmplY3RcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KGtleSkgJiYgT2JqZWN0LnByb3RvdHlwZVtrZXldID09PSB2YWx1ZSlcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICB0aGlzW2tleV0gPSB2YWx1ZS5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgICBpZiAocHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUpXG4gICAgICBicmVhaztcblxuICAgIGlmIChza2lwUHJvdG9zICYmIHNraXBQcm90b3MuaW5kZXhPZihwcm90bykgPj0gMClcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgaWYgKE9iamVjdC5pcyh2YWx1ZSwgSW5maW5pdHkpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoT2JqZWN0LmlzKHZhbHVlLCBOYU4pKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIGlmIChpbnN0YW5jZU9mKHZhbHVlLCAnc3RyaW5nJykpXG4gICAgcmV0dXJuICEoL1xcUy8pLnRlc3QodmFsdWUpO1xuICBlbHNlIGlmIChpbnN0YW5jZU9mKHZhbHVlLCAnbnVtYmVyJykgJiYgaXNGaW5pdGUodmFsdWUpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgZWxzZSBpZiAoIWluc3RhbmNlT2YodmFsdWUsICdib29sZWFuJywgJ2JpZ2ludCcsICdmdW5jdGlvbicpICYmIHNpemVPZih2YWx1ZSkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc05vdEVtcHR5KHZhbHVlKSB7XG4gIHJldHVybiAhaXNFbXB0eS5jYWxsKHRoaXMsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkFycmF5KHZhbHVlKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgcmV0dXJuIHZhbHVlO1xuXG4gIGxldCBuZXdBcnJheSA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaWwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgbGV0IGl0ZW0gPSB2YWx1ZVtpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSlcbiAgICAgIG5ld0FycmF5ID0gbmV3QXJyYXkuY29uY2F0KGZsYXR0ZW5BcnJheShpdGVtKSk7XG4gICAgZWxzZVxuICAgICAgbmV3QXJyYXkucHVzaChpdGVtKTtcbiAgfVxuXG4gIHJldHVybiBuZXdBcnJheTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZENoaWxkKGNoaWxkKSB7XG4gIGlmIChjaGlsZCA9PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChPYmplY3QuaXMoY2hpbGQsIEluZmluaXR5KSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKE9iamVjdC5pcyhjaGlsZCwgTmFOKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzSXRlcmFibGVDaGlsZChjaGlsZCkge1xuICBpZiAoY2hpbGQgPT0gbnVsbCB8fCBPYmplY3QuaXMoY2hpbGQsIE5hTikgfHwgT2JqZWN0LmlzKGNoaWxkLCBJbmZpbml0eSkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiAoQXJyYXkuaXNBcnJheShjaGlsZCkgfHwgdHlwZW9mIGNoaWxkID09PSAnb2JqZWN0JyAmJiAhaW5zdGFuY2VPZihjaGlsZCwgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ3N0cmluZycpKTtcbn1cblxuZnVuY3Rpb24gbm93KCkge1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgZWxzZVxuICAgIHJldHVybiBEYXRlLm5vdygpO1xufVxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFxuLyoqKioqKi8gLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIGZ1bmN0aW9uIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV81MTQ2NF9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdH07XG4vKioqKioqLyBcbi8qKioqKiovIFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV81MTQ2NF9fKTtcbi8qKioqKiovIFxuLyoqKioqKi8gXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyB9XG4vKioqKioqLyBcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovICgoKSA9PiB7XG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzUxNDY0X18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0aWYoX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzUxNDY0X18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfNTE0NjRfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHRfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfNTE0NjRfXy5nID0gKGZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuLyoqKioqKi8gXHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbi8qKioqKiovIFx0XHR9IGNhdGNoIChlKSB7XG4vKioqKioqLyBcdFx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0X19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzUxNDY0X18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIH0pKCk7XG4vKioqKioqLyBcbi8qKioqKiovIC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovICgoKSA9PiB7XG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzUxNDY0X18uciA9IChleHBvcnRzKSA9PiB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovIH0pKCk7XG4vKioqKioqLyBcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay5cbigoKSA9PiB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbGliL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzUxNDY0X18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV81MTQ2NF9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIiRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLiQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbXBvbmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfY29tcG9uZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQ29tcG9uZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb21wb25lbnRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbXBvbmVudHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkppYnNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSmlicyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUmVuZGVyZXJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFJlbmRlcmVycyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVXRpbHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IG1vZHVsZSBvYmplY3QgKi8gX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcImRlYWRiZWVmXCI6ICgpID0+ICgvKiByZWV4cG9ydCBkZWZhdWx0IGV4cG9ydCBmcm9tIG5hbWVkIG1vZHVsZSAqLyBkZWFkYmVlZl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJmYWN0b3J5XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5mYWN0b3J5KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzUxNDY0X18oLyohIC4vamliLmpzICovIFwiLi9saWIvamliLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jb21wb25lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV81MTQ2NF9fKC8qISAuL2NvbXBvbmVudC5qcyAqLyBcIi4vbGliL2NvbXBvbmVudC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfcmVuZGVyZXJzX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfNTE0NjRfXygvKiEgLi9yZW5kZXJlcnMvaW5kZXguanMgKi8gXCIuL2xpYi9yZW5kZXJlcnMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfNTE0NjRfXygvKiEgLi91dGlscy5qcyAqLyBcIi4vbGliL3V0aWxzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGRlYWRiZWVmX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfNTE0NjRfXygvKiEgZGVhZGJlZWYgKi8gXCIuL25vZGVfbW9kdWxlcy9kZWFkYmVlZi9saWIvaW5kZXguanNcIik7XG5cblxuY29uc3QgSmlicyA9IHtcbiAgSklCX0JBUlJFTjogX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkpJQl9CQVJSRU4sXG4gIEpJQl9QUk9YWTogX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkpJQl9QUk9YWSxcbiAgSklCOiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uSklCLFxuICBKaWI6IF9qaWJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5KaWIsXG4gIGlzSmliaXNoOiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNKaWJpc2gsXG4gIGNvbnN0cnVjdEppYjogX2ppYl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmNvbnN0cnVjdEppYixcbiAgcmVzb2x2ZUNoaWxkcmVuOiBfamliX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ucmVzb2x2ZUNoaWxkcmVuLFxufTtcblxuXG5cbmNvbnN0IENvbXBvbmVudHMgPSB7XG4gIFVQREFURV9FVkVOVDogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlVQREFURV9FVkVOVCxcbiAgUVVFVUVfVVBEQVRFX01FVEhPRDogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlFVRVVFX1VQREFURV9NRVRIT0QsXG4gIEZMVVNIX1VQREFURV9NRVRIT0Q6IF9jb21wb25lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GTFVTSF9VUERBVEVfTUVUSE9ELFxuICBJTklUX01FVEhPRDogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLklOSVRfTUVUSE9ELFxuICBTS0lQX1NUQVRFX1VQREFURVM6IF9jb21wb25lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5TS0lQX1NUQVRFX1VQREFURVMsXG4gIFBFTkRJTkdfU1RBVEVfVVBEQVRFOiBfY29tcG9uZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uUEVORElOR19TVEFURV9VUERBVEUsXG4gIExBU1RfUkVOREVSX1RJTUU6IF9jb21wb25lbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5MQVNUX1JFTkRFUl9USU1FLFxuICBQUkVWSU9VU19TVEFURTogX2NvbXBvbmVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlBSRVZJT1VTX1NUQVRFLFxufTtcblxuXG5cbmNvbnN0IFJlbmRlcmVycyA9IHtcbiAgQ09OVEVYVF9JRDogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJvb3ROb2RlLkNPTlRFWFRfSUQsXG4gIEZPUkNFX1JFRkxPVzogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkZPUkNFX1JFRkxPVyxcbiAgUm9vdE5vZGU6IF9yZW5kZXJlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Sb290Tm9kZSxcbiAgUmVuZGVyZXI6IF9yZW5kZXJlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5SZW5kZXJlcixcbiAgUm9vdEVsZW1lbnQ6IF9yZW5kZXJlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Sb290RWxlbWVudCxcbiAgQ29tbWVudEVsZW1lbnQ6IF9yZW5kZXJlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Db21tZW50RWxlbWVudCxcbiAgTmF0aXZlRWxlbWVudDogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk5hdGl2ZUVsZW1lbnQsXG4gIFBvcnRhbEVsZW1lbnQ6IF9yZW5kZXJlcnNfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Qb3J0YWxFbGVtZW50LFxuICBUZXh0RWxlbWVudDogX3JlbmRlcmVyc19pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlRleHRFbGVtZW50LFxufTtcblxuXG5cblxuXG5cbn0pKCk7XG5cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fJCA9IF9fd2VicGFja19leHBvcnRzX18uJDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQ29tcG9uZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Db21wb25lbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NvbXBvbmVudHMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkNvbXBvbmVudHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0ppYnMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkppYnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1JlbmRlcmVycyA9IF9fd2VicGFja19leHBvcnRzX18uUmVuZGVyZXJzO1xudmFyIF9fd2VicGFja19leHBvcnRzX19VdGlscyA9IF9fd2VicGFja19leHBvcnRzX18uVXRpbHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX2RlYWRiZWVmID0gX193ZWJwYWNrX2V4cG9ydHNfXy5kZWFkYmVlZjtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fZmFjdG9yeSA9IF9fd2VicGFja19leHBvcnRzX18uZmFjdG9yeTtcblxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdRVUZCUVRzN1FVRkZZVHM3UVVGRllpd3JSRUZCSzBRc2NVSkJRVTA3UVVGRGNrVTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQkxIbERRVUY1UXl4UlFVRlJPMEZCUTJwRUxGVkJRVlVzYjBKQlFXOUNPMEZCUXpsQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2NVSkJRWEZDTEdWQlFXVTdPMEZCUlhCRE8wRkJRMEU3UVVGRFFTeHRRMEZCYlVNc1NVRkJTU3hsUVVGbExFbEJRVWs3TzBGQlJURkVPMEZCUTBFN08wRkJSVUVzWTBGQll5eFBRVUZQTEVkQlFVY3NTVUZCU1R0QlFVTTFRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHbENRVUZwUWl4WFFVRlhMRWRCUVVjc1kwRkJZenRCUVVNM1F6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRExGRkJRVkU3UVVGRGFrUTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRExGRkJRVkU3UVVGRGFrUTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEcxQ1FVRnRRaXh0UWtGQmJVSTdRVUZEZEVNN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZ3NRMEZCUXpzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETDBoQk96dEJRVVV5UXp0QlFVTkVPMEZCUzNoQ096dEJRVVZZTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGVURzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVlBMSGRDUVVGM1FpeHZSRUZCV1R0QlFVTXpRenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hKUVVGSkxIVkVRVUZ6UWpzN1FVRkZNVUk3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzVTBGQlV6dEJRVU5VTEU5QlFVODdRVUZEVURzN1FVRkZRU3gzUlVGQmQwVTdRVUZEZUVVN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHpRa0ZCYzBJc01FTkJRVk03UVVGREwwSXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBKQlFYZENPMEZCUTNoQ0xFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTEc5RlFVRnZSU3hOUVVGTk96dEJRVVV4UlR0QlFVTkJMRk5CUVZNN1FVRkRWQ3hQUVVGUE8wRkJRMUFzUzBGQlN6dEJRVU5NT3p0QlFVVkJPMEZCUTBFc1YwRkJWeXg1UkVGQmIwSTdRVUZETDBJN08wRkJSVUU3UVVGRFFTeFhRVUZYTEdsRVFVRlJPMEZCUTI1Q096dEJRVVZCTzBGQlEwRXNWMEZCVnl4eFJFRkJXVHRCUVVOMlFqczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVMRTlCUVU4N1FVRkRVRHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEZGQlFWRXNhVVJCUVdkQ08wRkJRM2hDTzBGQlEwRTdPMEZCUlVFc2QwTkJRWGRETEZGQlFWRTdRVUZEYUVRN1FVRkRRU3hyUTBGQmEwTXNkMFJCUVhWQ08wRkJRM3BFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEUxQlFVMDdRVUZEVGl4aFFVRmhMSGRFUVVGMVFqdEJRVU53UXp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHBSVUZCYVVVc1RVRkJUVHM3UVVGRmRrVTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzZDBWQlFYZEZMRTFCUVUwN08wRkJSVGxGTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTFCUVUwN1FVRkRUanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSE5EUVVGelF5eFJRVUZSTzBGQlF6bERPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFZRVUZWTEdsRVFVRm5RanRCUVVNeFFpd3lRMEZCTWtNc2FVUkJRV2RDTzBGQlF6TkVMRFJEUVVFMFF5eFJRVUZSTzBGQlEzQkVPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVkU3UVVGRFVqdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1pVRkJaU3hwUkVGQlowSTdRVUZETDBJN08wRkJSVUVzYVVKQlFXbENMR2xFUVVGblFqdEJRVU5xUXl4VFFVRlRPenRCUVVWVUxEUkRRVUUwUXl4UlFVRlJPMEZCUTNCRU8wRkJRMEU3UVVGRFFUdEJRVU5CTEZGQlFWRXNVMEZCVXl4cFJFRkJaMEk3UVVGRGFrTTdRVUZEUVN3d1EwRkJNRU1zVVVGQlVUdEJRVU5zUkR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeFZRVUZWTEdsRVFVRm5RanRCUVVNeFFqczdRVUZGUVR0QlFVTkJMRGhEUVVFNFF5eFJRVUZSTzBGQlEzUkVPMEZCUTBFc1kwRkJZeXhwUkVGQlowSTdRVUZET1VJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRkZCUVZFN1FVRkRVanRCUVVOQkxEQkRRVUV3UXl4UlFVRlJPMEZCUTJ4RU8wRkJRMEU3UVVGRFFUczdRVUZGUVN4alFVRmpMR2xFUVVGblFqdEJRVU01UWp0QlFVTkJMRzFDUVVGdFFpeHBSRUZCWjBJN1FVRkRia003UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDNRa0ZCZDBJN1FVRkRlRUlzVDBGQlR6dEJRVU5RT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4UFFVRlBPenRCUVVWUU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJWVHRCUVVOV08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEhGRFFVRnhReXhSUVVGUk8wRkJRemRETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPenM3T3pzN08wRkROV1ZCT3p0QlFVVlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDFRMEZCZFVNc1VVRkJVVHRCUVVNdlF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETjBkblF6dEJRVU5KT3p0QlFVVTNRanRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2QwSkJRWGRDTEdkRFFVRm5ReXhIUVVGSE8wRkJRek5FTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxITkNRVUZ6UWl4dFJFRkJhMEk3UVVGRGVFTXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZQTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOUUxIRkRRVUZ4UXp0QlFVTnlRenRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFpRVUZaTEdsRVFVRm5RaXc0UTBGQk9FTXNhVVJCUVdkQ08wRkJRekZHTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnp0QlFVTllPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRc1UwRkJVeXd5UTBGQll6dEJRVU4yUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZDeFBRVUZQT3p0QlFVVlFPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUUxFOUJRVThzTWtOQlFXTTdRVUZEY2tJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3TzBGQlJVODdPMEZCUlVFN1FVRkRVRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVTg3UVVGRFVEczdRVUZGUVN4TlFVRk5MR2xFUVVGblFqdEJRVU4wUWpzN1FVRkZRU3hwUTBGQmFVTXNjMFJCUVhGQ0xIbEZRVUY1UlN4dFJFRkJhMEk3UVVGRGFrbzdPMEZCUlVFc2FVSkJRV2xDTERoRFFVRmhMRzlDUVVGdlFpeGxRVUZsTzBGQlEycEZMR2xDUVVGcFFpeHBSRUZCWjBJN08wRkJSV3BETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenM3UVVGRlNEdEJRVU5CT3pzN096czdPenM3T3pzN096czdPMEZEYmtwblJEczdRVUZGZWtNc05rSkJRVFpDTEhsRVFVRlhPMEZCUXk5RExHZENRVUZuUWl4elJVRkJkMEk3TzBGQlJYaERPMEZCUTBFc1ZVRkJWU3h6UlVGQmQwSTdRVUZEYkVNN1FVRkRRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFRIZENPenRCUVVWcVFqczdRVUZGYTBNN08wRkJSVTg3UVVGRFRUdEJRVU5HTzBGQlEwRTdRVUZEU2pzN096czdPenM3T3pzN096czdPenRCUTJKQk96dEJRVVY2UXl3MFFrRkJORUlzZVVSQlFWYzdRVUZET1VNc1owSkJRV2RDTEhORlFVRjNRanM3UVVGRmVFTTdRVUZEUVN4VlFVRlZMSE5GUVVGM1FqdEJRVU5zUXp0QlFVTkJPenM3T3pzN096czdPenM3T3pzN08wRkRVbWRFT3p0QlFVVjZReXcwUWtGQk5FSXNlVVJCUVZjN1FVRkRPVU1zWjBKQlFXZENMSEZGUVVGMVFqczdRVUZGZGtNN1FVRkRRU3hWUVVGVkxIRkZRVUYxUWp0QlFVTnFRenRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN1FVTlNORU03UVVGRFJEdEJRVWx1UWpzN1FVRkZlRUk3TzBGQlJVOHNkVUpCUVhWQ0xHOUVRVUZaTzBGQlF6RkRMRzlDUVVGdlFpeHRSRUZCVVRzN1FVRkZOVUk3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUUxFdEJRVXM3UVVGRFREczdRVUZGUVR0QlFVTkJPMEZCUTBFc2EwUkJRV3RFTEhGRVFVRlZPenRCUVVVMVJEdEJRVU5CTzBGQlEwRXNlVUpCUVhsQ0xIRkVRVUZWTzBGQlEyNURMSEZFUVVGeFJDeHhSRUZCVlR0QlFVTXZSRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFTeDVRa0ZCZVVJc2NVUkJRVlU3UVVGRGJrTTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFBRVUZQTzBGQlExQXNTMEZCU3p0QlFVTk1PMEZCUTBFN096czdPenM3T3pzN096czdPenM3UVVOeVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVTg3UVVGRFVEczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN096czdPenRCUTNSQ2NVTTdPMEZCUlRsQ096dEJRVVZRT3p0QlFVVlBPMEZCUTFBN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZDdzRRa0ZCT0VJN1FVRkRPVUlzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxGZEJRVmNzYlVSQlFXdENPMEZCUXpkQ096dEJRVVZCTzBGQlEwRXNWMEZCVnl4elJFRkJjVUk3UVVGRGFFTTdPMEZCUlVFN1FVRkRRU3hYUVVGWExHdEVRVUZwUWp0QlFVTTFRanM3UVVGRlFUdEJRVU5CTEZkQlFWY3NjVVJCUVc5Q08wRkJReTlDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHM3T3pzN096czdPenM3T3pzN096dEJRM0pIWjBRN08wRkJSWHBETERCQ1FVRXdRaXg1UkVGQlZ6dEJRVU0xUXl4blFrRkJaMElzYlVWQlFYRkNPenRCUVVWeVF6dEJRVU5CTEZWQlFWVXNiVVZCUVhGQ08wRkJReTlDTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5TWjBNN08wRkJSV2hET3p0QlFVVkJPMEZCUTBFc01FZEJRVEJITEZOQlFVazdPMEZCUlhaSE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzTUVOQlFUQkRMRk5CUVZNN1FVRkRia1E3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVTg3UVVGRFVEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNjVU5CUVhGRExGRkJRVkU3UVVGRE4wTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVODdRVUZEVUR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHOUNRVUZ2UWp0QlFVTndRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSEZEUVVGeFF5eFJRVUZSTzBGQlF6ZERPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hKUVVGSk8wRkJRMG83UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVFVGQlRUdEJRVU5PT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVazdRVUZEU2p0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNjME5CUVhORExGRkJRVkU3UVVGRE9VTTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTQ3hEUVVGRE96dEJRVVZOT3p0QlFVVkJPMEZCUTFBN1FVRkRRVHM3UVVGRlFTeFZRVUZWTEhGRFFVRlJMRzFDUVVGdFFpeHhRMEZCVVR0QlFVTTNRenM3UVVGRlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1NVRkJTVHRCUVVOS08wRkJRMEVzU1VGQlNUdEJRVU5LTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHhRMEZCY1VNc1VVRkJVVHRCUVVNM1F6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVlBPMEZCUTFBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2MwTkJRWE5ETEZGQlFWRTdRVUZET1VNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWUE8wRkJRMUE3UVVGRFFUczdRVUZGVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHhRMEZCY1VNc1VVRkJVVHRCUVVNM1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGVHp0QlFVTlFPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN1UwTnVZa0U3VTBGRFFUczdVMEZGUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHRUUVVOQk8xTkJRMEU3VTBGRFFUdFRRVU5CTzFOQlEwRTdVMEZEUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHM3VTBGRlFUdFRRVU5CT3p0VFFVVkJPMU5CUTBFN1UwRkRRVHM3T3pzN1ZVTjBRa0U3VlVGRFFUdFZRVU5CTzFWQlEwRTdWVUZEUVN4NVEwRkJlVU1zZDBOQlFYZERPMVZCUTJwR08xVkJRMEU3VlVGRFFUczdPenM3VlVOUVFUdFZRVU5CTzFWQlEwRTdWVUZEUVR0VlFVTkJMRWRCUVVjN1ZVRkRTRHRWUVVOQk8xVkJRMEVzUTBGQlF6czdPenM3VlVOUVJEczdPenM3VlVOQlFUdFZRVU5CTzFWQlEwRTdWVUZEUVN4MVJFRkJkVVFzYVVKQlFXbENPMVZCUTNoRk8xVkJRMEVzWjBSQlFXZEVMR0ZCUVdFN1ZVRkROMFE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEU1d0Q096dEJRVVZZTzBGQlExQXNXVUZCV1R0QlFVTmFMRmRCUVZjN1FVRkRXQ3hMUVVGTE8wRkJRMHdzUzBGQlN6dEJRVU5NTEZWQlFWVTdRVUZEVml4alFVRmpPMEZCUTJRc2FVSkJRV2xDTzBGQlEycENPenRCUVdGM1FqczdRVUZGYWtJN1FVRkRVQ3hqUVVGak8wRkJRMlFzY1VKQlFYRkNPMEZCUTNKQ0xIRkNRVUZ4UWp0QlFVTnlRaXhoUVVGaE8wRkJRMklzYjBKQlFXOUNPMEZCUTNCQ0xITkNRVUZ6UWp0QlFVTjBRaXhyUWtGQmEwSTdRVUZEYkVJc1owSkJRV2RDTzBGQlEyaENPenRCUVZjNFFqczdRVUZGZGtJN1FVRkRVQ3hqUVVGakxHOUZRVUZ0UWp0QlFVTnFReXhqUVVGak8wRkJRMlFzVlVGQlZUdEJRVU5XTEZWQlFWVTdRVUZEVml4aFFVRmhPMEZCUTJJc1owSkJRV2RDTzBGQlEyaENMR1ZCUVdVN1FVRkRaaXhsUVVGbE8wRkJRMllzWVVGQllUdEJRVU5pT3p0QlFVVnZRenRCUVVOWE96dEJRVTAzUXlJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXViMlJsWDIxdlpIVnNaWE12WkdWaFpHSmxaV1l2YkdsaUwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXNhV0l2WTI5dGNHOXVaVzUwTG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXNhV0l2WlhabGJuUnpMbXB6SWl3aWQyVmljR0ZqYXpvdkwycHBZbk12TGk5c2FXSXZhbWxpTG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdkxpOXNhV0l2Y21WdVpHVnlaWEp6TDJOdmJXMWxiblF0Wld4bGJXVnVkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM0psYm1SbGNtVnljeTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk5cWFXSnpMeTR2YkdsaUwzSmxibVJsY21WeWN5OXVZWFJwZG1VdFpXeGxiV1Z1ZEM1cWN5SXNJbmRsWW5CaFkyczZMeTlxYVdKekx5NHZiR2xpTDNKbGJtUmxjbVZ5Y3k5d2IzSjBZV3d0Wld4bGJXVnVkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM0psYm1SbGNtVnljeTl5Wlc1a1pYSmxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM0psYm1SbGNtVnljeTl5YjI5MExXVnNaVzFsYm5RdWFuTWlMQ0ozWldKd1lXTnJPaTh2YW1saWN5OHVMMnhwWWk5eVpXNWtaWEpsY25NdmNtOXZkQzF1YjJSbExtcHpJaXdpZDJWaWNHRmphem92TDJwcFluTXZMaTlzYVdJdmNtVnVaR1Z5WlhKekwzUmxlSFF0Wld4bGJXVnVkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXFhV0p6THk0dmJHbGlMM1YwYVd4ekxtcHpJaXdpZDJWaWNHRmphem92TDJwcFluTXZkMlZpY0dGamF5OWliMjkwYzNSeVlYQWlMQ0ozWldKd1lXTnJPaTh2YW1saWN5OTNaV0p3WVdOckwzSjFiblJwYldVdlpHVm1hVzVsSUhCeWIzQmxjblI1SUdkbGRIUmxjbk1pTENKM1pXSndZV05yT2k4dmFtbGljeTkzWldKd1lXTnJMM0oxYm5ScGJXVXZaMnh2WW1Gc0lpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdmQyVmljR0ZqYXk5eWRXNTBhVzFsTDJoaGMwOTNibEJ5YjNCbGNuUjVJSE5vYjNKMGFHRnVaQ0lzSW5kbFluQmhZMnM2THk5cWFXSnpMM2RsWW5CaFkyc3ZjblZ1ZEdsdFpTOXRZV3RsSUc1aGJXVnpjR0ZqWlNCdlltcGxZM1FpTENKM1pXSndZV05yT2k4dmFtbGljeTh1TDJ4cFlpOXBibVJsZUM1cWN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCRGIzQjVjbWxuYUhRZ01qQXlNaUJYZVdGMGRDQkhjbVZsYm5kaGVWeHVYRzRuZFhObElITjBjbWxqZENjN1hHNWNibU52Ym5OMElIUm9hWE5IYkc5aVlXd2dQU0FvS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbktTQS9JSGRwYm1SdmR5QTZJR2RzYjJKaGJDa2dmSHdnZEdocGN6dGNibU52Ym5OMElFUkZRVVJDUlVWR1gxSkZSbDlOUVZCZlMwVlpJRDBnVTNsdFltOXNMbVp2Y2lnblFFQmtaV0ZrWW1WbFpsSmxaazFoY0NjcE8xeHVZMjl1YzNRZ1ZVNUpVVlZGWDBsRVgxTlpUVUpQVENBOUlGTjViV0p2YkM1bWIzSW9KMEJBWkdWaFpHSmxaV1pWYm1seGRXVkpSQ2NwTzF4dVkyOXVjM1FnY21WbVRXRndJRDBnS0hSb2FYTkhiRzlpWVd4YlJFVkJSRUpGUlVaZlVrVkdYMDFCVUY5TFJWbGRLU0EvSUhSb2FYTkhiRzlpWVd4YlJFVkJSRUpGUlVaZlVrVkdYMDFCVUY5TFJWbGRJRG9nYm1WM0lGZGxZV3ROWVhBb0tUdGNibU52Ym5OMElHbGtTR1ZzY0dWeWN5QTlJRnRkTzF4dVhHNXBaaUFvSVhSb2FYTkhiRzlpWVd4YlJFVkJSRUpGUlVaZlVrVkdYMDFCVUY5TFJWbGRLVnh1SUNCMGFHbHpSMnh2WW1Gc1cwUkZRVVJDUlVWR1gxSkZSbDlOUVZCZlMwVlpYU0E5SUhKbFprMWhjRHRjYmx4dWJHVjBJSFYxYVdSRGIzVnVkR1Z5SUQwZ01HNDdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFaGxiSEJsY2tadmNsWmhiSFZsS0haaGJIVmxLU0I3WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3TENCcGJDQTlJR2xrU0dWc2NHVnljeTVzWlc1bmRHZzdJR2tnUENCcGJEc2dhU3NyS1NCN1hHNGdJQ0FnYkdWMElIc2dhR1ZzY0dWeUxDQm5aVzVsY21GMGIzSWdmU0E5SUdsa1NHVnNjR1Z5YzF0cFhUdGNiaUFnSUNCcFppQW9hR1ZzY0dWeUtIWmhiSFZsS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUJuWlc1bGNtRjBiM0k3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXNTVkR2hwYm1kVWIwbEVLRjloY21jc0lGOWhiSEpsWVdSNVZtbHphWFJsWkNrZ2UxeHVJQ0JzWlhRZ1lYSm5JRDBnWDJGeVp6dGNiaUFnYVdZZ0tHRnlaeUJwYm5OMFlXNWpaVzltSUU1MWJXSmxjaUI4ZkNCaGNtY2dhVzV6ZEdGdVkyVnZaaUJUZEhKcGJtY2dmSHdnWVhKbklHbHVjM1JoYm1ObGIyWWdRbTl2YkdWaGJpbGNiaUFnSUNCaGNtY2dQU0JoY21jdWRtRnNkV1ZQWmlncE8xeHVYRzRnSUd4bGRDQjBlWEJsVDJZZ1BTQjBlWEJsYjJZZ1lYSm5PMXh1WEc0Z0lHbG1JQ2gwZVhCbFQyWWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHRnlaeUE5UFQwZ01Da2dlMXh1SUNBZ0lHbG1JQ2hQWW1wbFkzUXVhWE1vWVhKbkxDQXRNQ2twWEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMjUxYldKbGNqb3RNQ2M3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdKMjUxYldKbGNqb3JNQ2M3WEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3WlU5bUlEMDlQU0FuYzNsdFltOXNKeWxjYmlBZ0lDQnlaWFIxY200Z1lITjViV0p2YkRva2UyRnlaeTUwYjFOMGNtbHVaeWdwZldBN1hHNWNiaUFnYVdZZ0tHRnlaeUE5UFNCdWRXeHNJSHg4SUhSNWNHVlBaaUE5UFQwZ0oyNTFiV0psY2ljZ2ZId2dkSGx3WlU5bUlEMDlQU0FuWW05dmJHVmhiaWNnZkh3Z2RIbHdaVTltSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbFQyWWdQVDA5SUNkaWFXZHBiblFuS1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1ZQWmlBOVBUMGdKMjUxYldKbGNpY3BYRzRnSUNBZ0lDQnlaWFIxY200Z0tHRnlaeUE4SURBcElEOGdZRzUxYldKbGNqb2tlMkZ5WjMxZ0lEb2dZRzUxYldKbGNqb3JKSHRoY21kOVlEdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbFQyWWdQVDA5SUNkaWFXZHBiblFuSUNZbUlHRnlaeUE5UFQwZ01HNHBYRzRnSUNBZ0lDQnlaWFIxY200Z0oySnBaMmx1ZERvck1DYzdYRzVjYmlBZ0lDQnlaWFIxY200Z1lDUjdkSGx3WlU5bWZUb2tlMkZ5WjMxZ08xeHVJQ0I5WEc1Y2JpQWdiR1YwSUdsa1NHVnNjR1Z5SUQwZ0tHbGtTR1ZzY0dWeWN5NXNaVzVuZEdnZ1BpQXdJQ1ltSUdkbGRFaGxiSEJsY2tadmNsWmhiSFZsS0dGeVp5a3BPMXh1SUNCcFppQW9hV1JJWld4d1pYSXBYRzRnSUNBZ2NtVjBkWEp1SUdGdWVYUm9hVzVuVkc5SlJDaHBaRWhsYkhCbGNpaGhjbWNwS1R0Y2JseHVJQ0JwWmlBb1ZVNUpVVlZGWDBsRVgxTlpUVUpQVENCcGJpQmhjbWNnSmlZZ2RIbHdaVzltSUdGeVoxdFZUa2xSVlVWZlNVUmZVMWxOUWs5TVhTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUM4dklGQnlaWFpsYm5RZ2FXNW1hVzVwZEdVZ2NtVmpkWEp6YVc5dVhHNGdJQ0FnYVdZZ0tDRmZZV3h5WldGa2VWWnBjMmwwWldRZ2ZId2dJVjloYkhKbFlXUjVWbWx6YVhSbFpDNW9ZWE1vWVhKbktTa2dlMXh1SUNBZ0lDQWdiR1YwSUdGc2NtVmhaSGxXYVhOcGRHVmtJRDBnWDJGc2NtVmhaSGxXYVhOcGRHVmtJSHg4SUc1bGR5QlRaWFFvS1R0Y2JpQWdJQ0FnSUdGc2NtVmhaSGxXYVhOcGRHVmtMbUZrWkNoaGNtY3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnVlWFJvYVc1blZHOUpSQ2hoY21kYlZVNUpVVlZGWDBsRVgxTlpUVUpQVEYwb0tTd2dZV3h5WldGa2VWWnBjMmwwWldRcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHbG1JQ2doY21WbVRXRndMbWhoY3loaGNtY3BLU0I3WEc0Z0lDQWdiR1YwSUd0bGVTQTlJR0FrZTNSNWNHVnZaaUJoY21kOU9pUjdLeXQxZFdsa1EyOTFiblJsY24xZ08xeHVJQ0FnSUhKbFprMWhjQzV6WlhRb1lYSm5MQ0JyWlhrcE8xeHVJQ0FnSUhKbGRIVnliaUJyWlhrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVm1UV0Z3TG1kbGRDaGhjbWNwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJrWldGa1ltVmxaaWdwSUh0Y2JpQWdiR1YwSUhCaGNuUnpJRDBnV3lCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUYwN1hHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrZ1BDQnBiRHNnYVNzcktWeHVJQ0FnSUhCaGNuUnpMbkIxYzJnb1lXNTVkR2hwYm1kVWIwbEVLR0Z5WjNWdFpXNTBjMXRwWFNrcE8xeHVYRzRnSUhKbGRIVnliaUJ3WVhKMGN5NXFiMmx1S0NjNkp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUmxZV1JpWldWbVUyOXlkR1ZrS0NrZ2UxeHVJQ0JzWlhRZ2NHRnlkSE1nUFNCYklHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1hUdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BYRzRnSUNBZ2NHRnlkSE11Y0hWemFDaGhibmwwYUdsdVoxUnZTVVFvWVhKbmRXMWxiblJ6VzJsZEtTazdYRzVjYmlBZ2NtVjBkWEp1SUhCaGNuUnpMbk52Y25Rb0tTNXFiMmx1S0NjNkp5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxibVZ5WVhSbFNVUkdiM0lvYUdWc2NHVnlMQ0JuWlc1bGNtRjBiM0lwSUh0Y2JpQWdhV1JJWld4d1pYSnpMbkIxYzJnb2V5Qm9aV3h3WlhJc0lHZGxibVZ5WVhSdmNpQjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjbVZ0YjNabFNVUkhaVzVsY21GMGIzSW9hR1ZzY0dWeUtTQjdYRzRnSUd4bGRDQnBibVJsZUNBOUlHbGtTR1ZzY0dWeWN5NW1hVzVrU1c1a1pYZ29LR2wwWlcwcElEMCtJQ2hwZEdWdExtaGxiSEJsY2lBOVBUMGdhR1ZzY0dWeUtTazdYRzRnSUdsbUlDaHBibVJsZUNBOElEQXBYRzRnSUNBZ2NtVjBkWEp1TzF4dVhHNGdJR2xrU0dWc2NHVnljeTV6Y0d4cFkyVW9hVzVrWlhnc0lERXBPMXh1ZlZ4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3loa1pXRmtZbVZsWml3Z2UxeHVJQ0FuYVdSVGVXMG5PaUI3WEc0Z0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdWVTVKVVZWRlgwbEVYMU5aVFVKUFRDeGNiaUFnZlN4Y2JpQWdKM052Y25SbFpDYzZJSHRjYmlBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQmtaV0ZrWW1WbFpsTnZjblJsWkN4Y2JpQWdmU3hjYmlBZ0oyZGxibVZ5WVhSbFNVUkdiM0luT2lCN1hHNGdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQjBjblZsTEZ4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnWjJWdVpYSmhkR1ZKUkVadmNpeGNiaUFnZlN4Y2JpQWdKM0psYlc5MlpVbEVSMlZ1WlhKaGRHOXlKem9nZTF4dUlDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCMllXeDFaVG9nSUNBZ0lDQWdJSEpsYlc5MlpVbEVSMlZ1WlhKaGRHOXlMRnh1SUNCOUxGeHVmU2s3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pHVmhaR0psWldZN1hHNGlMQ0l2S2lCbmJHOWlZV3dnUW5WbVptVnlJQ292WEc1Y2JtbHRjRzl5ZENCN0lFVjJaVzUwUlcxcGRIUmxjaUI5SUdaeWIyMGdKeTR2WlhabGJuUnpMbXB6Snp0Y2JtbHRjRzl5ZENBcUlHRnpJRlYwYVd4eklDQWdJQ0FnSUdaeWIyMGdKeTR2ZFhScGJITXVhbk1uTzF4dWFXMXdiM0owSUh0Y2JpQWdhWE5LYVdKcGMyZ3NYRzRnSUhKbGMyOXNkbVZEYUdsc1pISmxiaXhjYmlBZ1kyOXVjM1J5ZFdOMFNtbGlMRnh1ZlNCbWNtOXRJQ2N1TDJwcFlpNXFjeWM3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JWVUVSQlZFVmZSVlpGVGxRZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnSjBCcWFXSnpMMk52YlhCdmJtVnVkQzlsZG1WdWRDOTFjR1JoZEdVbk8xeHVaWGh3YjNKMElHTnZibk4wSUZGVlJWVkZYMVZRUkVGVVJWOU5SVlJJVDBRZ0lDQWdJQ0FnUFNCVGVXMWliMnd1Wm05eUtDZEFhbWxpY3k5amIyMXdiMjVsYm5RdmNYVmxkV1ZWY0dSaGRHVW5LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQkdURlZUU0Y5VlVFUkJWRVZmVFVWVVNFOUVJQ0FnSUNBZ0lEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZZMjl0Y0c5dVpXNTBMMlpzZFhOb1ZYQmtZWFJsSnlrN1hHNWxlSEJ2Y25RZ1kyOXVjM1FnU1U1SlZGOU5SVlJJVDBRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUZONWJXSnZiQzVtYjNJb0owQnFhV0p6TDJOdmJYQnZibVZ1ZEM5ZlgybHVhWFFuS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JUUzBsUVgxTlVRVlJGWDFWUVJFRlVSVk1nSUNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDNOcmFYQlRkR0YwWlZWd1pHRjBaWE1uS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDNCbGJtUnBibWRUZEdGMFpWVndaR0YwWlNjcE8xeHVaWGh3YjNKMElHTnZibk4wSUV4QlUxUmZVa1ZPUkVWU1gxUkpUVVVnSUNBZ0lDQWdJQ0FnUFNCVGVXMWliMnd1Wm05eUtDZEFhbWxpY3k5amIyMXdiMjVsYm5RdmJHRnpkRkpsYm1SbGNsUnBiV1VuS1R0Y2JtVjRjRzl5ZENCamIyNXpkQ0JRVWtWV1NVOVZVMTlUVkVGVVJTQWdJQ0FnSUNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDNCeVpYWnBiM1Z6VTNSaGRHVW5LVHRjYm1WNGNHOXlkQ0JqYjI1emRDQkRRVkJVVlZKRlgxSkZSa1ZTUlU1RFJWOU5SVlJJVDBSVElEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZZMjl0Y0c5dVpXNTBMM0J5WlhacGIzVnpVM1JoZEdVbktUdGNibHh1WTI5dWMzUWdaV3hsYldWdWRFUmhkR0ZEWVdOb1pTQTlJRzVsZHlCWFpXRnJUV0Z3S0NrN1hHNWNibVoxYm1OMGFXOXVJR2x6Vm1Gc2FXUlRkR0YwWlU5aWFtVmpkQ2gyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNWNiaUFnYVdZZ0tFOWlhbVZqZEM1cGN5aDJZV3gxWlN3Z1RtRk9LU2xjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdhV1lnS0U5aWFtVmpkQzVwY3loMllXeDFaU3dnU1c1bWFXNXBkSGtwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCQ2IyOXNaV0Z1SUh4OElIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1RuVnRZbVZ5SUh4OElIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1UzUnlhVzVuS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JzWlhRZ2RIbHdaVTltSUQwZ2RIbHdaVzltSUhaaGJIVmxPMXh1SUNCcFppQW9kSGx3WlU5bUlEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxUMllnUFQwOUlDZHVkVzFpWlhJbklIeDhJSFI1Y0dWUFppQTlQVDBnSjJKdmIyeGxZVzRuS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdRblZtWm1WeUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQkNkV1ptWlhJdWFYTkNkV1ptWlhJb2RtRnNkV1VwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFTnZiWEJ2Ym1WdWRDQmxlSFJsYm1SeklFVjJaVzUwUlcxcGRIUmxjaUI3WEc0Z0lITjBZWFJwWXlCVlVFUkJWRVZmUlZaRlRsUWdQU0JWVUVSQlZFVmZSVlpGVGxRN1hHNWNiaUFnVzFGVlJWVkZYMVZRUkVGVVJWOU5SVlJJVDBSZEtDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdselcxQkZUa1JKVGtkZlUxUkJWRVZmVlZCRVFWUkZYU2xjYmlBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lIUm9hWE5iVUVWT1JFbE9SMTlUVkVGVVJWOVZVRVJCVkVWZElEMGdVSEp2YldselpTNXlaWE52YkhabEtDazdYRzRnSUNBZ2RHaHBjMXRRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlYwdWRHaGxiaWgwYUdselcwWk1WVk5JWDFWUVJFRlVSVjlOUlZSSVQwUmRMbUpwYm1Rb2RHaHBjeWtwTzF4dUlDQjlYRzVjYmlBZ1cwWk1WVk5JWDFWUVJFRlVSVjlOUlZSSVQwUmRLQ2tnZTF4dUlDQWdJQzh2SUZkaGN5QjBhR1VnYzNSaGRHVWdkWEJrWVhSbElHTmhibU5sYkd4bFpEOWNiaUFnSUNCcFppQW9JWFJvYVhOYlVFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVmRLVnh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVYRzRnSUNBZ2RHaHBjeTVsYldsMEtGVlFSRUZVUlY5RlZrVk9WQ2s3WEc1Y2JpQWdJQ0IwYUdselcxQkZUa1JKVGtkZlUxUkJWRVZmVlZCRVFWUkZYU0E5SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JiU1U1SlZGOU5SVlJJVDBSZEtDa2dlMXh1SUNBZ0lIUm9hWE5iVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUWFNBOUlHWmhiSE5sTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9YMnBwWWlrZ2UxeHVJQ0FnSUhOMWNHVnlLQ2s3WEc1Y2JpQWdJQ0F2THlCQ2FXNWtJR0ZzYkNCamJHRnpjeUJ0WlhSb2IyUnpJSFJ2SUZ3aWRHaHBjMXdpWEc0Z0lDQWdWWFJwYkhNdVltbHVaRTFsZEdodlpITXVZMkZzYkNoMGFHbHpMQ0IwYUdsekxtTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU2s3WEc1Y2JpQWdJQ0JzWlhRZ2FtbGlJRDBnWDJwcFlpQjhmQ0I3ZlR0Y2JseHVJQ0FnSUdOdmJuTjBJR055WldGMFpVNWxkMU4wWVhSbElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJR3h2WTJGc1UzUmhkR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjNoNUtHeHZZMkZzVTNSaGRHVXNJSHRjYmlBZ0lDQWdJQ0FnWjJWME9pQW9kR0Z5WjJWMExDQndjbTl3VG1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMFlYSm5aWFJiY0hKdmNFNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnpaWFE2SUNoMFlYSm5aWFFzSUhCeWIzQk9ZVzFsTENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCamRYSnlaVzUwVm1Gc2RXVWdQU0IwWVhKblpYUmJjSEp2Y0U1aGJXVmRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MFZtRnNkV1VnUFQwOUlIWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTmJVMHRKVUY5VFZFRlVSVjlWVUVSQlZFVlRYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE5iVVZWRlZVVmZWVkJFUVZSRlgwMUZWRWhQUkYwb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRnR3Y205d1RtRnRaVjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VTNSaGRHVlZjR1JoZEdWa0tIQnliM0JPWVcxbExDQjJZV3gxWlN3Z1kzVnljbVZ1ZEZaaGJIVmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUd4bGRDQndjbTl3Y3lBZ0lDQWdJQ0E5SUU5aWFtVmpkQzVoYzNOcFoyNG9UMkpxWldOMExtTnlaV0YwWlNodWRXeHNLU3dnYW1saUxuQnliM0J6SUh4OElIdDlLVHRjYmlBZ0lDQnNaWFFnWDJ4dlkyRnNVM1JoZEdVZ1BTQmpjbVZoZEdWT1pYZFRkR0YwWlNncE8xeHVYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1vZEdocGN5d2dlMXh1SUNBZ0lDQWdXMU5MU1ZCZlUxUkJWRVZmVlZCRVFWUkZVMTA2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCYlVFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVmRPaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnVzB4QlUxUmZVa1ZPUkVWU1gxUkpUVVZkT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSUNBZ0lDQWdJRlYwYVd4ekxtNXZkeWdwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUZ0RFFWQlVWVkpGWDFKRlJrVlNSVTVEUlY5TlJWUklUMFJUWFRvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0I3ZlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmFXUW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdhbWxpTG1sa0xGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHdjbTl3Y3ljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnY0hKdmNITXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk5vYVd4a2NtVnVKem9nZTF4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQnFhV0l1WTJocGJHUnlaVzRnZkh3Z1cxMHNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk52Ym5SbGVIUW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHcHBZaTVqYjI1MFpYaDBJSHg4SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0ozTjBZWFJsSnpvZ2UxeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdkbGREb2dJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZiRzlqWVd4VGRHRjBaVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBPaUFnSUNBZ0lDQWdJQ0FvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselZtRnNhV1JUZEdGMFpVOWlhbVZqZENoMllXeDFaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0JKYm5aaGJHbGtJSFpoYkhWbElHWnZjaUJjSW5Sb2FYTXVjM1JoZEdWY0lqb2dYQ0lrZTNaaGJIVmxmVndpTGlCUWNtOTJhV1JsWkNCY0luTjBZWFJsWENJZ2JYVnpkQ0JpWlNCaGJpQnBkR1Z5WVdKc1pTQnZZbXBsWTNRdVlDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLRjlzYjJOaGJGTjBZWFJsTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtHTm9hV3hrY21WdUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVZEYUdsc1pISmxiaTVqWVd4c0tIUm9hWE1zSUdOb2FXeGtjbVZ1S1R0Y2JpQWdmVnh1WEc0Z0lHbHpTbWxpS0haaGJIVmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHbHpTbWxpYVhOb0tIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wY25WamRFcHBZaWgyWVd4MVpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCamIyNXpkSEoxWTNSS2FXSW9kbUZzZFdVcE8xeHVJQ0I5WEc1Y2JpQWdjSFZ6YUZKbGJtUmxjaWh5Wlc1a1pYSlNaWE4xYkhRcElIdGNiaUFnSUNCMGFHbHpMbVZ0YVhRb1ZWQkVRVlJGWDBWV1JVNVVMQ0J5Wlc1a1pYSlNaWE4xYkhRcE8xeHVJQ0I5WEc1Y2JpQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJRzl1VUhKdmNGVndaR0YwWldRb2NISnZjRTVoYldVc0lHNWxkMVpoYkhWbExDQnZiR1JXWVd4MVpTa2dlMXh1SUNCOVhHNWNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUc5dVUzUmhkR1ZWY0dSaGRHVmtLSEJ5YjNCT1lXMWxMQ0J1WlhkV1lXeDFaU3dnYjJ4a1ZtRnNkV1VwSUh0Y2JpQWdmVnh1WEc0Z0lHTmhjSFIxY21WU1pXWmxjbVZ1WTJVb2JtRnRaU3dnYVc1MFpYSmpaWEIwYjNKRFlXeHNZbUZqYXlrZ2UxeHVJQ0FnSUd4bGRDQnRaWFJvYjJRZ1BTQjBhR2x6VzBOQlVGUlZVa1ZmVWtWR1JWSkZUa05GWDAxRlZFaFBSRk5kVzI1aGJXVmRPMXh1SUNBZ0lHbG1JQ2h0WlhSb2IyUXBYRzRnSUNBZ0lDQnlaWFIxY200Z2JXVjBhRzlrTzF4dVhHNGdJQ0FnYldWMGFHOWtJRDBnS0Y5eVpXWXNJSEJ5WlhacGIzVnpVbVZtS1NBOVBpQjdYRzRnSUNBZ0lDQnNaWFFnY21WbUlEMGdYM0psWmp0Y2JseHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnBiblJsY21ObGNIUnZja05oYkd4aVlXTnJJRDA5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUNBZ0lDQnlaV1lnUFNCcGJuUmxjbU5sY0hSdmNrTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5d2djbVZtTENCd2NtVjJhVzkxYzFKbFppazdYRzVjYmlBZ0lDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektIUm9hWE1zSUh0Y2JpQWdJQ0FnSUNBZ1cyNWhiV1ZkT2lCN1hHNGdJQ0FnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdjbVZtTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdhVzUwWlhKalpYQjBiM0pEWVd4c1ltRmpheUFoUFQwZ0oyWjFibU4wYVc5dUp5bGNiaUFnSUNBZ0lIUm9hWE5iUTBGUVZGVlNSVjlTUlVaRlVrVk9RMFZmVFVWVVNFOUVVMTBnUFNCdFpYUm9iMlE3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiV1YwYUc5a08xeHVJQ0I5WEc1Y2JpQWdabTl5WTJWVmNHUmhkR1VvS1NCN1hHNGdJQ0FnZEdocGMxdFJWVVZWUlY5VlVFUkJWRVZmVFVWVVNFOUVYU2dwTzF4dUlDQjlYRzVjYmlBZ1oyVjBVM1JoZEdVb2NISnZjR1Z5ZEhsUVlYUm9MQ0JrWldaaGRXeDBWbUZzZFdVcElIdGNiaUFnSUNCc1pYUWdjM1JoZEdVZ1BTQjBhR2x6TG5OMFlYUmxPMXh1SUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5UFNBd0tWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOMFlYUmxPMXh1WEc0Z0lDQWdhV1lnS0ZWMGFXeHpMbWx1YzNSaGJtTmxUMllvY0hKdmNHVnlkSGxRWVhSb0xDQW5iMkpxWldOMEp5a3BJSHRjYmlBZ0lDQWdJR3hsZENCclpYbHpJQ0FnSUNBZ0lDQTlJRTlpYW1WamRDNXJaWGx6S0hCeWIzQmxjblI1VUdGMGFDa3VZMjl1WTJGMEtFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9jSEp2Y0dWeWRIbFFZWFJvS1NrN1hHNGdJQ0FnSUNCc1pYUWdabWx1WVd4VGRHRjBaU0FnUFNCN2ZUdGNibHh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnJaWGtnUFNCclpYbHpXMmxkTzF4dUlDQWdJQ0FnSUNCc1pYUWdXeUIyWVd4MVpTd2diR0Z6ZEZCaGNuUWdYU0E5SUZWMGFXeHpMbVpsZEdOb1JHVmxjRkJ5YjNCbGNuUjVLSE4wWVhSbExDQnJaWGtzSUhCeWIzQmxjblI1VUdGMGFGdHJaWGxkTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhjM1JRWVhKMElEMDlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVTdYRzVjYmlBZ0lDQWdJQ0FnWm1sdVlXeFRkR0YwWlZ0c1lYTjBVR0Z5ZEYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdacGJtRnNVM1JoZEdVN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlZkR2xzY3k1bVpYUmphRVJsWlhCUWNtOXdaWEowZVNoemRHRjBaU3dnY0hKdmNHVnlkSGxRWVhSb0xDQmtaV1poZFd4MFZtRnNkV1VwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhObGRGTjBZWFJsS0haaGJIVmxLU0I3WEc0Z0lDQWdhV1lnS0NGcGMxWmhiR2xrVTNSaGRHVlBZbXBsWTNRb2RtRnNkV1VwS1Z4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loZ1NXNTJZV3hwWkNCMllXeDFaU0JtYjNJZ1hDSjBhR2x6TG5ObGRGTjBZWFJsWENJNklGd2lKSHQyWVd4MVpYMWNJaTRnVUhKdmRtbGtaV1FnWENKemRHRjBaVndpSUcxMWMzUWdZbVVnWVc0Z2FYUmxjbUZpYkdVZ2IySnFaV04wTG1BcE8xeHVYRzRnSUNBZ1QySnFaV04wTG1GemMybG5iaWgwYUdsekxuTjBZWFJsTENCMllXeDFaU2s3WEc0Z0lIMWNibHh1SUNCelpYUlRkR0YwWlZCaGMzTnBkbVVvZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvSVdselZtRnNhV1JUZEdGMFpVOWlhbVZqZENoMllXeDFaU2twWEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0dCSmJuWmhiR2xrSUhaaGJIVmxJR1p2Y2lCY0luUm9hWE11YzJWMFUzUmhkR1ZRWVhOemFYWmxYQ0k2SUZ3aUpIdDJZV3gxWlgxY0lpNGdVSEp2ZG1sa1pXUWdYQ0p6ZEdGMFpWd2lJRzExYzNRZ1ltVWdZVzRnYVhSbGNtRmliR1VnYjJKcVpXTjBMbUFwTzF4dVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lIUm9hWE5iVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtIUm9hWE11YzNSaGRHVXNJSFpoYkhWbEtUdGNiaUFnSUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ2RHaHBjMXRUUzBsUVgxTlVRVlJGWDFWUVJFRlVSVk5kSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYzJodmRXeGtWWEJrWVhSbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNWNiaUFnWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1emRHRjBaVHRjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NWpiMjUwWlhoME8xeHVJQ0FnSUdSbGJHVjBaU0IwYUdselcwTkJVRlJWVWtWZlVrVkdSVkpGVGtORlgwMUZWRWhQUkZOZE8xeHVJQ0FnSUhSb2FYTXVZMnhsWVhKQmJHeEVaV0p2ZFc1alpYTW9LVHRjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjbGRoYVhScGJtY29LU0I3WEc0Z0lIMWNibHh1SUNCeVpXNWtaWElvWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMmhwYkdSeVpXNDdYRzRnSUgxY2JseHVJQ0IxY0dSaGRHVmtLQ2tnZTF4dUlDQjlYRzVjYmlBZ1kyOXRZbWx1WlZkcGRHZ29jMlZ3TENBdUxpNWhjbWR6S1NCN1hHNGdJQ0FnYkdWMElHWnBibUZzUVhKbmN5QTlJRzVsZHlCVFpYUW9LVHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2FXd2dQU0JoY21kekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR3hsZENCaGNtY2dQU0JoY21kelcybGRPMXh1SUNBZ0lDQWdhV1lnS0NGaGNtY3BYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1WEc0Z0lDQWdJQ0JwWmlBb1ZYUnBiSE11YVc1emRHRnVZMlZQWmloaGNtY3NJQ2R6ZEhKcGJtY25LU2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkbUZzZFdWeklEMGdZWEpuTG5Od2JHbDBLSE5sY0NrdVptbHNkR1Z5S0ZWMGFXeHpMbWx6VG05MFJXMXdkSGtwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYVd3Z1BTQjJZV3gxWlhNdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0JtYVc1aGJFRnlaM011WVdSa0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0dGeVp5a3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsY3lBOUlHRnlaeTVtYVd4MFpYSW9LSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hWWFJwYkhNdWFXNXpkR0Z1WTJWUFppaDJZV3gxWlN3Z0ozTjBjbWx1WnljcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRlYwYVd4ekxtbHpUbTkwUlcxd2RIa29kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYVd3Z1BTQjJZV3gxWlhNdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlIWmhiSFZsYzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0JtYVc1aGJFRnlaM011WVdSa0tIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaFZkR2xzY3k1cGJuTjBZVzVqWlU5bUtHRnlaeXdnSjI5aWFtVmpkQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JyWlhseklEMGdUMkpxWldOMExtdGxlWE1vWVhKbktUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR3RsZVNBZ0lEMGdhMlY1YzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCaGNtZGJhMlY1WFR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1FYSm5jeTVrWld4bGRHVW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1FYSm5jeTVoWkdRb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQkJjbkpoZVM1bWNtOXRLR1pwYm1Gc1FYSm5jeWt1YW05cGJpaHpaWEFnZkh3Z0p5Y3BPMXh1SUNCOVhHNWNiaUFnWTJ4aGMzTmxjeWd1TGk1aGNtZHpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dFltbHVaVmRwZEdnb0p5QW5MQ0F1TGk1aGNtZHpLVHRjYmlBZ2ZWeHVYRzRnSUdWNGRISmhZM1JEYUdsc1pISmxiaWhmY0dGMGRHVnlibk1zSUdOb2FXeGtjbVZ1S1NCN1hHNGdJQ0FnYkdWMElHVjRkSEpoWTNSbFpDQTlJSHQ5TzF4dUlDQWdJR3hsZENCd1lYUjBaWEp1Y3lBZ1BTQmZjR0YwZEdWeWJuTTdYRzRnSUNBZ2JHVjBJR2x6UVhKeVlYa2dJQ0E5SUVGeWNtRjVMbWx6UVhKeVlYa29jR0YwZEdWeWJuTXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2FYTk5ZWFJqYUNBOUlDaHFhV0lwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0JxYVdKVWVYQmxJRDBnYW1saUxsUjVjR1U3WEc0Z0lDQWdJQ0JwWmlBb1ZYUnBiSE11YVc1emRHRnVZMlZQWmlocWFXSlVlWEJsTENBbmMzUnlhVzVuSnlrcFhHNGdJQ0FnSUNBZ0lHcHBZbFI1Y0dVZ1BTQnFhV0pVZVhCbExuUnZURzkzWlhKRFlYTmxLQ2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaHBjMEZ5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUhCaGRIUmxjbTV6TG14bGJtZDBhRHNnYVNBOElHbHNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NHRjBkR1Z5YmlBOUlIQmhkSFJsY201elcybGRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaFZkR2xzY3k1cGJuTjBZVzVqWlU5bUtIQmhkSFJsY200c0lDZHpkSEpwYm1jbktTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRIUmxjbTRnUFNCd1lYUjBaWEp1TG5SdlRHOTNaWEpEWVhObEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hbWxpVkhsd1pTQTlQVDBnY0dGMGRHVnliaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWGgwY21GamRHVmtXM0JoZEhSbGNtNWRJRDBnYW1saU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektIQmhkSFJsY201ektUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR3RsZVNBZ0lDQWdQU0JyWlhselcybGRPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQndZWFIwWlhKdUlEMGdjR0YwZEdWeWJuTmJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRlYwYVd4ekxtbHVjM1JoYm1ObFQyWW9jR0YwZEdWeWJpd2dVbVZuUlhod0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUhCaGRIUmxjbTR1ZEdWemRDaHFhV0pVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0JsYkhObElHbG1JQ2hWZEdsc2N5NXBibk4wWVc1alpVOW1LSEJoZEhSbGNtNHNJQ2R6ZEhKcGJtY25LU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlDaHdZWFIwWlhKdUxuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlHcHBZbFI1Y0dVcE8xeHVJQ0FnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJQ2h3WVhSMFpYSnVJRDA5UFNCcWFXSlVlWEJsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Y0ZEhKaFkzUmxaRnRyWlhsZElEMGdhbWxpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWlhoMGNtRmpkR1ZrTG5KbGJXRnBibWx1WjBOb2FXeGtjbVZ1SUQwZ1kyaHBiR1J5Wlc0dVptbHNkR1Z5S0NocWFXSXBJRDArSUNGcGMwMWhkR05vS0dwcFlpa3BPMXh1SUNBZ0lISmxkSFZ5YmlCbGVIUnlZV04wWldRN1hHNGdJSDFjYmx4dUlDQmtaV0p2ZFc1alpTaG1kVzVqTENCMGFXMWxMQ0JmYVdRcElIdGNiaUFnSUNCamIyNXpkQ0JqYkdWaGNsQmxibVJwYm1kVWFXMWxiM1YwSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tIQmxibVJwYm1kVWFXMWxjaUFtSmlCd1pXNWthVzVuVkdsdFpYSXVkR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb2NHVnVaR2x1WjFScGJXVnlMblJwYldWdmRYUXBPMXh1SUNBZ0lDQWdJQ0J3Wlc1a2FXNW5WR2x0WlhJdWRHbHRaVzkxZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFpoY2lCcFpDQTlJQ2doWDJsa0tTQS9JQ2duSnlBcklHWjFibU1wSURvZ1gybGtPMXh1SUNBZ0lHbG1JQ2doZEdocGN5NWtaV0p2ZFc1alpWUnBiV1Z5Y3lrZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJvYVhNc0lDZGtaV0p2ZFc1alpWUnBiV1Z5Y3ljc0lIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnZTMwc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdjR1Z1WkdsdVoxUnBiV1Z5SUQwZ2RHaHBjeTVrWldKdmRXNWpaVlJwYldWeWMxdHBaRjA3WEc0Z0lDQWdhV1lnS0NGd1pXNWthVzVuVkdsdFpYSXBYRzRnSUNBZ0lDQndaVzVrYVc1blZHbHRaWElnUFNCMGFHbHpMbVJsWW05MWJtTmxWR2x0WlhKelcybGtYU0E5SUh0OU8xeHVYRzRnSUNBZ2NHVnVaR2x1WjFScGJXVnlMbVoxYm1NZ1BTQm1kVzVqTzF4dUlDQWdJR05zWldGeVVHVnVaR2x1WjFScGJXVnZkWFFvS1R0Y2JseHVJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdjR1Z1WkdsdVoxUnBiV1Z5TG5CeWIyMXBjMlU3WEc0Z0lDQWdhV1lnS0NGd2NtOXRhWE5sSUh4OElDRndjbTl0YVhObExuQmxibVJwYm1jb0tTa2dlMXh1SUNBZ0lDQWdiR1YwSUhOMFlYUjFjeUE5SUNkd1pXNWthVzVuSnp0Y2JpQWdJQ0FnSUd4bGRDQnlaWE52YkhabE8xeHVYRzRnSUNBZ0lDQndjbTl0YVhObElEMGdjR1Z1WkdsdVoxUnBiV1Z5TG5CeWIyMXBjMlVnUFNCdVpYY2dVSEp2YldselpTZ29YM0psYzI5c2RtVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNBOUlGOXlaWE52YkhabE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVjbVZ6YjJ4MlpTQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hOMFlYUjFjeUFoUFQwZ0ozQmxibVJwYm1jbktWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0J6ZEdGMGRYTWdQU0FuWm5Wc1ptbHNiR1ZrSnp0Y2JpQWdJQ0FnSUNBZ1kyeGxZWEpRWlc1a2FXNW5WR2x0Wlc5MWRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmxZbTkxYm1ObFZHbHRaWEp6VzJsa1hTQTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ3Wlc1a2FXNW5WR2x0WlhJdVpuVnVZeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWFFnUFNCd1pXNWthVzVuVkdsdFpYSXVablZ1WXk1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYUWdhVzV6ZEdGdVkyVnZaaUJRY205dGFYTmxJSHg4SUNoeVpYUWdKaVlnZEhsd1pXOW1JSEpsZEM1MGFHVnVJRDA5UFNBblpuVnVZM1JwYjI0bktTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRDNTBhR1Z1S0NoMllXeDFaU2tnUFQ0Z2NtVnpiMngyWlNoMllXeDFaU2twTzF4dUlDQWdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVjBLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJSEJ5YjIxcGMyVXVZMkZ1WTJWc0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnpkR0YwZFhNZ1BTQW5jbVZxWldOMFpXUW5PMXh1SUNBZ0lDQWdJQ0JqYkdWaGNsQmxibVJwYm1kVWFXMWxiM1YwS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWaWIzVnVZMlZVYVcxbGNuTmJhV1JkSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCd2NtOXRhWE5sTG5KbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lIQnliMjFwYzJVdWFYTlFaVzVrYVc1bklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tITjBZWFIxY3lBOVBUMGdKM0JsYm1ScGJtY25LVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjR1Z1WkdsdVoxUnBiV1Z5TG5ScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWMEtIQnliMjFwYzJVdWNtVnpiMngyWlN3Z0tIUnBiV1VnUFQwZ2JuVnNiQ2tnUHlBeU5UQWdPaUIwYVcxbEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCd2NtOXRhWE5sTzF4dUlDQjlYRzVjYmlBZ1kyeGxZWEpFWldKdmRXNWpaU2hwWkNrZ2UxeHVJQ0FnSUhaaGNpQndaVzVrYVc1blZHbHRaWElnUFNCMGFHbHpMbVJsWW05MWJtTmxWR2x0WlhKelcybGtYVHRjYmlBZ0lDQnBaaUFvY0dWdVpHbHVaMVJwYldWeUlEMDlJRzUxYkd3cFhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0JwWmlBb2NHVnVaR2x1WjFScGJXVnlMblJwYldWdmRYUXBYRzRnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvY0dWdVpHbHVaMVJwYldWeUxuUnBiV1Z2ZFhRcE8xeHVYRzRnSUNBZ2FXWWdLSEJsYm1ScGJtZFVhVzFsY2k1d2NtOXRhWE5sS1Z4dUlDQWdJQ0FnY0dWdVpHbHVaMVJwYldWeUxuQnliMjFwYzJVdVkyRnVZMlZzS0NrN1hHNGdJSDFjYmx4dUlDQmpiR1ZoY2tGc2JFUmxZbTkxYm1ObGN5Z3BJSHRjYmlBZ0lDQnNaWFFnWkdWaWIzVnVZMlZVYVcxbGNuTWdJRDBnZEdocGN5NWtaV0p2ZFc1alpWUnBiV1Z5Y3lCOGZDQjdmVHRjYmlBZ0lDQnNaWFFnYVdSeklDQWdJQ0FnSUNBZ0lDQWdJRDBnVDJKcVpXTjBMbXRsZVhNb1pHVmliM1Z1WTJWVWFXMWxjbk1wTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2FXUnpMbXhsYm1kMGFEc2dhU0E4SUdsc095QnBLeXNwWEc0Z0lDQWdJQ0IwYUdsekxtTnNaV0Z5UkdWaWIzVnVZMlVvYVdSelcybGRLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFVnNaVzFsYm5SRVlYUmhLR1ZzWlcxbGJuUXBJSHRjYmlBZ0lDQnNaWFFnWkdGMFlTQTlJR1ZzWlcxbGJuUkVZWFJoUTJGamFHVXVaMlYwS0dWc1pXMWxiblFwTzF4dUlDQWdJR2xtSUNnaFpHRjBZU2tnZTF4dUlDQWdJQ0FnWkdGMFlTQTlJSHQ5TzF4dUlDQWdJQ0FnWld4bGJXVnVkRVJoZEdGRFlXTm9aUzV6WlhRb1pXeGxiV1Z1ZEN3Z1pHRjBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHUmhkR0U3WEc0Z0lIMWNibjFjYmlJc0ltTnZibk4wSUVWV1JVNVVYMHhKVTFSRlRrVlNVeUE5SUZONWJXSnZiQzVtYjNJb0owQnFhV0p6TDJWMlpXNTBjeTlzYVhOMFpXNWxjbk1uS1R0Y2JseHVaWGh3YjNKMElHTnNZWE56SUVWMlpXNTBSVzFwZEhSbGNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0hSb2FYTXNJSHRjYmlBZ0lDQWdJRnRGVmtWT1ZGOU1TVk5VUlU1RlVsTmRPaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdibVYzSUUxaGNDZ3BMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdGa1pFeHBjM1JsYm1WeUtHVjJaVzUwVG1GdFpTd2diR2x6ZEdWdVpYSXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR3hwYzNSbGJtVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25SWFpsYm5RZ2JHbHpkR1Z1WlhJZ2JYVnpkQ0JpWlNCaElHMWxkR2h2WkNjcE8xeHVYRzRnSUNBZ2JHVjBJR1YyWlc1MFRXRndJQ0E5SUhSb2FYTmJSVlpGVGxSZlRFbFRWRVZPUlZKVFhUdGNiaUFnSUNCc1pYUWdjMk52Y0dVZ0lDQWdJRDBnWlhabGJuUk5ZWEF1WjJWMEtHVjJaVzUwVG1GdFpTazdYRzVjYmlBZ0lDQnBaaUFvSVhOamIzQmxLU0I3WEc0Z0lDQWdJQ0J6WTI5d1pTQTlJRnRkTzF4dUlDQWdJQ0FnWlhabGJuUk5ZWEF1YzJWMEtHVjJaVzUwVG1GdFpTd2djMk52Y0dVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOamIzQmxMbkIxYzJnb2JHbHpkR1Z1WlhJcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0J5WlcxdmRtVk1hWE4wWlc1bGNpaGxkbVZ1ZEU1aGJXVXNJR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJzYVhOMFpXNWxjaUFoUFQwZ0oyWjFibU4wYVc5dUp5bGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMFYyWlc1MElHeHBjM1JsYm1WeUlHMTFjM1FnWW1VZ1lTQnRaWFJvYjJRbktUdGNibHh1SUNBZ0lHeGxkQ0JsZG1WdWRFMWhjQ0FnUFNCMGFHbHpXMFZXUlU1VVgweEpVMVJGVGtWU1UxMDdYRzRnSUNBZ2JHVjBJSE5qYjNCbElDQWdJQ0E5SUdWMlpXNTBUV0Z3TG1kbGRDaGxkbVZ1ZEU1aGJXVXBPMXh1SUNBZ0lHbG1JQ2doYzJOdmNHVXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQWdJR3hsZENCcGJtUmxlQ0E5SUhOamIzQmxMbWx1WkdWNFQyWW9iR2x6ZEdWdVpYSXBPMXh1SUNBZ0lHbG1JQ2hwYm1SbGVDQStQU0F3S1Z4dUlDQWdJQ0FnYzJOdmNHVXVjM0JzYVdObEtHbHVaR1Y0TENBeEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnY21WdGIzWmxRV3hzVEdsemRHVnVaWEp6S0dWMlpXNTBUbUZ0WlNrZ2UxeHVJQ0FnSUd4bGRDQmxkbVZ1ZEUxaGNDQWdQU0IwYUdselcwVldSVTVVWDB4SlUxUkZUa1ZTVTEwN1hHNGdJQ0FnYVdZZ0tDRmxkbVZ1ZEUxaGNDNW9ZWE1vWlhabGJuUk9ZVzFsS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVYRzRnSUNBZ1pYWmxiblJOWVhBdWMyVjBLR1YyWlc1MFRtRnRaU3dnVzEwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0JsYldsMEtHVjJaVzUwVG1GdFpTd2dMaTR1WVhKbmN5a2dlMXh1SUNBZ0lHeGxkQ0JsZG1WdWRFMWhjQ0FnUFNCMGFHbHpXMFZXUlU1VVgweEpVMVJGVGtWU1UxMDdYRzRnSUNBZ2JHVjBJSE5qYjNCbElDQWdJQ0E5SUdWMlpXNTBUV0Z3TG1kbGRDaGxkbVZ1ZEU1aGJXVXBPMXh1SUNBZ0lHbG1JQ2doYzJOdmNHVWdmSHdnYzJOdmNHVXViR1Z1WjNSb0lEMDlQU0F3S1Z4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUdsc0lEMGdjMk52Y0dVdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdiR1YwSUdWMlpXNTBRMkZzYkdKaFkyc2dQU0J6WTI5d1pWdHBYVHRjYmlBZ0lDQWdJR1YyWlc1MFEyRnNiR0poWTJzdVlYQndiSGtvZEdocGN5d2dZWEpuY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQnZibU5sS0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCc1pYUWdablZ1WXlBOUlDZ3VMaTVoY21kektTQTlQaUI3WEc0Z0lDQWdJQ0IwYUdsekxtOW1aaWhsZG1WdWRFNWhiV1VzSUdaMWJtTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHeHBjM1JsYm1WeUtDNHVMbUZ5WjNNcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXZiaWhsZG1WdWRFNWhiV1VzSUdaMWJtTXBPMXh1SUNCOVhHNWNiaUFnYjI0b1pYWmxiblJPWVcxbExDQnNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZrWkV4cGMzUmxibVZ5S0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0I5WEc1Y2JpQWdiMlptS0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lobGRtVnVkRTVoYldVc0lHeHBjM1JsYm1WeUtUdGNiaUFnZlZ4dVhHNGdJR1YyWlc1MFRtRnRaWE1vS1NCN1hHNGdJQ0FnY21WMGRYSnVJRUZ5Y21GNUxtWnliMjBvZEdocGMxdEZWa1ZPVkY5TVNWTlVSVTVGVWxOZExtdGxlWE1vS1NrN1hHNGdJSDFjYmx4dUlDQnNhWE4wWlc1bGNrTnZkVzUwS0dWMlpXNTBUbUZ0WlNrZ2UxeHVJQ0FnSUd4bGRDQmxkbVZ1ZEUxaGNDQWdQU0IwYUdselcwVldSVTVVWDB4SlUxUkZUa1ZTVTEwN1hHNGdJQ0FnYkdWMElITmpiM0JsSUNBZ0lDQTlJR1YyWlc1MFRXRndMbWRsZENobGRtVnVkRTVoYldVcE8xeHVJQ0FnSUdsbUlDZ2hjMk52Y0dVcFhHNGdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ6WTI5d1pTNXNaVzVuZEdnN1hHNGdJSDFjYmx4dUlDQnNhWE4wWlc1bGNuTW9aWFpsYm5ST1lXMWxLU0I3WEc0Z0lDQWdiR1YwSUdWMlpXNTBUV0Z3SUNBOUlIUm9hWE5iUlZaRlRsUmZURWxUVkVWT1JWSlRYVHRjYmlBZ0lDQnNaWFFnYzJOdmNHVWdJQ0FnSUQwZ1pYWmxiblJOWVhBdVoyVjBLR1YyWlc1MFRtRnRaU2s3WEc0Z0lDQWdhV1lnS0NGelkyOXdaU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQmJYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnpZMjl3WlM1emJHbGpaU2dwTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ1pHVmhaR0psWldZZ1puSnZiU0FuWkdWaFpHSmxaV1luTzF4dWFXMXdiM0owSUNvZ1lYTWdWWFJwYkhNZ1puSnZiU0FuTGk5MWRHbHNjeTVxY3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCS2FXSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaFVlWEJsTENCd2NtOXdjeXdnWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0JzWlhRZ1pHVm1ZWFZzZEZCeWIzQnpJRDBnS0ZSNWNHVWdKaVlnVkhsd1pTNXdjbTl3Y3lrZ1B5QlVlWEJsTG5CeWIzQnpJRG9nZTMwN1hHNWNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWgwYUdsekxDQjdYRzRnSUNBZ0lDQW5WSGx3WlNjNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0JVZVhCbExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHdjbTl3Y3ljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0I3SUM0dUxtUmxabUYxYkhSUWNtOXdjeXdnTGk0dUtIQnliM0J6SUh4OElIdDlLU0I5TEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNkamFHbHNaSEpsYmljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0JWZEdsc2N5NW1iR0YwZEdWdVFYSnlZWGtvWTJocGJHUnlaVzRwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU2tsQ1gwSkJVbEpGVGlBZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saWN5NWlZWEp5Wlc0bktUdGNibVY0Y0c5eWRDQmpiMjV6ZENCS1NVSmZVRkpQV0ZrZ0lDQTlJRk41YldKdmJDNW1iM0lvSjBCcWFXSnpMbkJ5YjNoNUp5azdYRzVsZUhCdmNuUWdZMjl1YzNRZ1NrbENJQ0FnSUNBZ0lDQWdQU0JUZVcxaWIyd3VabTl5S0NkQWFtbGljeTVxYVdJbktUdGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1poWTNSdmNua29TbWxpUTJ4aGMzTXBJSHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNRb1gzUjVjR1VzSUhCeWIzQnpJRDBnZTMwcElIdGNiaUFnSUNCcFppQW9hWE5LYVdKcGMyZ29YM1I1Y0dVcEtWeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25VbVZqWldsMlpXUWdZU0JxYVdJZ1luVjBJR1Y0Y0dWamRHVmtJR0VnWTI5dGNHOXVaVzUwTGljcE8xeHVYRzRnSUNBZ2JHVjBJRlI1Y0dVZ1BTQW9YM1I1Y0dVZ1BUMGdiblZzYkNrZ1B5QktTVUpmVUZKUFdGa2dPaUJmZEhsd1pUdGNibHh1SUNBZ0lHWjFibU4wYVc5dUlHSmhjbkpsYmlndUxpNWZZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQWdJR3hsZENCamFHbHNaSEpsYmlBOUlGOWphR2xzWkhKbGJqdGNibHh1SUNBZ0lDQWdablZ1WTNScGIyNGdhbWxpS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvVlhScGJITXVhVzV6ZEdGdVkyVlBaaWhVZVhCbExDQW5jSEp2YldselpTY3BJSHg4SUdOb2FXeGtjbVZ1TG5OdmJXVW9LR05vYVd4a0tTQTlQaUJWZEdsc2N5NXBibk4wWVc1alpVOW1LR05vYVd4a0xDQW5jSEp2YldselpTY3BLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG1Gc2JDaGJJRlI1Y0dVZ1hTNWpiMjVqWVhRb1kyaHBiR1J5Wlc0cEtTNTBhR1Z1S0NoaGJHd3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRlI1Y0dVZ1BTQmhiR3hiTUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdsc1pISmxiaUE5SUdGc2JDNXpiR2xqWlNneEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkthV0pEYkdGemN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ZIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0hNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb2FXeGtjbVZ1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NtbGlRMnhoYzNNb1hHNGdJQ0FnSUNBZ0lDQWdWSGx3WlN4Y2JpQWdJQ0FnSUNBZ0lDQndjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJpeGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9hbWxpTENCN1hHNGdJQ0FnSUNBZ0lGdEtTVUpkT2lCN1hHNGdJQ0FnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JiWkdWaFpHSmxaV1l1YVdSVGVXMWRPaUI3WEc0Z0lDQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQW9LU0E5UGlCVWVYQmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCcWFXSTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1vWW1GeWNtVnVMQ0I3WEc0Z0lDQWdJQ0JiU2tsQ1gwSkJVbEpGVGwwNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJRnRrWldGa1ltVmxaaTVwWkZONWJWMDZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQW9LU0E5UGlCVWVYQmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmlZWEp5Wlc0N1hHNGdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENBa0lEMGdabUZqZEc5eWVTaEthV0lwTzF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2FYTkthV0pwYzJnb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQW9kbUZzZFdWYlNrbENYMEpCVWxKRlRsMGdmSHdnZG1Gc2RXVmJTa2xDWFNrcFhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1NtbGlLVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnZibk4wY25WamRFcHBZaWgyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQkthV0lwWEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCcFppQW9kbUZzZFdWYlNrbENYMEpCVWxKRlRsMHBYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1VvS1NncE8xeHVJQ0FnSUdWc2MyVWdhV1lnS0haaGJIVmxXMHBKUWwwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVW9LVHRjYmlBZ2ZWeHVYRzRnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oyTnZibk4wY25WamRFcHBZam9nVUhKdmRtbGtaV1FnZG1Gc2RXVWdhWE1nYm05MElHRWdTbWxpTGljcE8xeHVmVnh1WEc1bGVIQnZjblFnWVhONWJtTWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtGOWphR2xzWkhKbGJpa2dlMXh1SUNCc1pYUWdZMmhwYkdSeVpXNGdQU0JmWTJocGJHUnlaVzQ3WEc1Y2JpQWdhV1lnS0ZWMGFXeHpMbWx1YzNSaGJtTmxUMllvWTJocGJHUnlaVzRzSUNkd2NtOXRhWE5sSnlrcFhHNGdJQ0FnWTJocGJHUnlaVzRnUFNCaGQyRnBkQ0JqYUdsc1pISmxianRjYmx4dUlDQnBaaUFvSVNnb2RHaHBjeTVwYzBsMFpYSmhZbXhsUTJocGJHUWdmSHdnVlhScGJITXVhWE5KZEdWeVlXSnNaVU5vYVd4a0tTNWpZV3hzS0hSb2FYTXNJR05vYVd4a2NtVnVLU2tnSmlZZ0tHbHpTbWxpYVhOb0tHTm9hV3hrY21WdUtTQjhmQ0FvS0hSb2FYTXVhWE5XWVd4cFpFTm9hV3hrSUh4OElGVjBhV3h6TG1selZtRnNhV1JEYUdsc1pDa3VZMkZzYkNoMGFHbHpMQ0JqYUdsc1pISmxiaWtwS1NsY2JpQWdJQ0JqYUdsc1pISmxiaUE5SUZzZ1kyaHBiR1J5Wlc0Z1hUdGNibHh1SUNCc1pYUWdjSEp2YldselpYTWdQU0JWZEdsc2N5NXBkR1Z5WVhSbEtHTm9hV3hrY21WdUxDQmhjM2x1WXlBb2V5QjJZV3gxWlRvZ1gyTm9hV3hrSUgwcElEMCtJSHRjYmlBZ0lDQnNaWFFnWTJocGJHUWdQU0FvVlhScGJITXVhVzV6ZEdGdVkyVlBaaWhmWTJocGJHUXNJQ2R3Y205dGFYTmxKeWtwSUQ4Z1lYZGhhWFFnWDJOb2FXeGtJRG9nWDJOb2FXeGtPMXh1WEc0Z0lDQWdhV1lnS0dselNtbGlhWE5vS0dOb2FXeGtLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQmhkMkZwZENCamIyNXpkSEoxWTNSS2FXSW9ZMmhwYkdRcE8xeHVJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lISmxkSFZ5YmlCamFHbHNaRHRjYmlBZ2ZTazdYRzVjYmlBZ2NtVjBkWEp1SUdGM1lXbDBJRkJ5YjIxcGMyVXVZV3hzS0hCeWIyMXBjMlZ6S1R0Y2JuMWNiaUlzSW1sdGNHOXlkQ0I3SUZKdmIzUkZiR1Z0Wlc1MElIMGdabkp2YlNBbkxpOXliMjkwTFdWc1pXMWxiblF1YW5Nbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1EyOXRiV1Z1ZEVWc1pXMWxiblFnWlhoMFpXNWtjeUJTYjI5MFJXeGxiV1Z1ZENCN1hHNGdJSE4wWVhScFl5QlVXVkJGSUQwZ1VtOXZkRVZzWlcxbGJuUXVWRmxRUlY5RFQwMU5SVTVVTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dsa0xDQjJZV3gxWlN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaFNiMjkwUld4bGJXVnVkQzVVV1ZCRlgwTlBUVTFGVGxRc0lHbGtMQ0IyWVd4MVpTd2djSEp2Y0hNcE8xeHVJQ0I5WEc1OVhHNGlMQ0psZUhCdmNuUWdlMXh1SUNCRFQwNVVSVmhVWDBsRUxGeHVJQ0JTYjI5MFRtOWtaU3hjYm4wZ1puSnZiU0FuTGk5eWIyOTBMVzV2WkdVdWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdSazlTUTBWZlVrVkdURTlYSUQwZ1UzbHRZbTlzTG1admNpZ25RR3BwWW5OR2IzSmpaVkpsWm14dmR5Y3BPMXh1WEc1bGVIQnZjblFnZXlCU1pXNWtaWEpsY2lCOUlHWnliMjBnSnk0dmNtVnVaR1Z5WlhJdWFuTW5PMXh1WEc1bGVIQnZjblFnZXlCU2IyOTBSV3hsYldWdWRDQjlJR1p5YjIwZ0p5NHZjbTl2ZEMxbGJHVnRaVzUwTG1wekp6dGNibVY0Y0c5eWRDQjdJRU52YlcxbGJuUkZiR1Z0Wlc1MElIMGdabkp2YlNBbkxpOWpiMjF0Wlc1MExXVnNaVzFsYm5RdWFuTW5PMXh1Wlhod2IzSjBJSHNnVG1GMGFYWmxSV3hsYldWdWRDQjlJR1p5YjIwZ0p5NHZibUYwYVhabExXVnNaVzFsYm5RdWFuTW5PMXh1Wlhod2IzSjBJSHNnVUc5eWRHRnNSV3hsYldWdWRDQjlJR1p5YjIwZ0p5NHZjRzl5ZEdGc0xXVnNaVzFsYm5RdWFuTW5PMXh1Wlhod2IzSjBJSHNnVkdWNGRFVnNaVzFsYm5RZ2ZTQm1jbTl0SUNjdUwzUmxlSFF0Wld4bGJXVnVkQzVxY3ljN1hHNGlMQ0pwYlhCdmNuUWdleUJTYjI5MFJXeGxiV1Z1ZENCOUlHWnliMjBnSnk0dmNtOXZkQzFsYkdWdFpXNTBMbXB6Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUU1aGRHbDJaVVZzWlcxbGJuUWdaWGgwWlc1a2N5QlNiMjkwUld4bGJXVnVkQ0I3WEc0Z0lITjBZWFJwWXlCVVdWQkZJRDBnVW05dmRFVnNaVzFsYm5RdVZGbFFSVjlGVEVWTlJVNVVPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLR2xrTENCMllXeDFaU3dnY0hKdmNITXBJSHRjYmlBZ0lDQnpkWEJsY2loU2IyOTBSV3hsYldWdWRDNVVXVkJGWDBWTVJVMUZUbFFzSUdsa0xDQjJZV3gxWlN3Z2NISnZjSE1wTzF4dUlDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2V5QlNiMjkwUld4bGJXVnVkQ0I5SUdaeWIyMGdKeTR2Y205dmRDMWxiR1Z0Wlc1MExtcHpKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkJ2Y25SaGJFVnNaVzFsYm5RZ1pYaDBaVzVrY3lCU2IyOTBSV3hsYldWdWRDQjdYRzRnSUhOMFlYUnBZeUJVV1ZCRklEMGdVbTl2ZEVWc1pXMWxiblF1VkZsUVJWOVFUMUpVUVV3N1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXUXNJSFpoYkhWbExDQndjbTl3Y3lrZ2UxeHVJQ0FnSUhOMWNHVnlLRkp2YjNSRmJHVnRaVzUwTGxSWlVFVmZVRTlTVkVGTUxDQnBaQ3dnZG1Gc2RXVXNJSEJ5YjNCektUdGNiaUFnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHNnUlhabGJuUkZiV2wwZEdWeUlIMGdabkp2YlNBbkxpNHZaWFpsYm5SekxtcHpKenRjYm1sdGNHOXlkQ0FxSUdGeklGVjBhV3h6SUNBZ0lDQWdJR1p5YjIwZ0p5NHVMM1YwYVd4ekxtcHpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lFTlBUbFJGV0ZSZlNVUXNYRzRnSUZKdmIzUk9iMlJsTEZ4dWZTQm1jbTl0SUNjdUwzSnZiM1F0Ym05a1pTNXFjeWM3WEc1Y2JteGxkQ0JmWTI5dWRHVjRkRWxFUTI5MWJuUmxjaUE5SURCdU8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VtVnVaR1Z5WlhJZ1pYaDBaVzVrY3lCRmRtVnVkRVZ0YVhSMFpYSWdlMXh1SUNCemRHRjBhV01nVW05dmRFNXZaR1VnUFNCU2IyOTBUbTlrWlR0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCemRYQmxjaWdwTzF4dVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9kR2hwY3l3Z2UxeHVJQ0FnSUNBZ0oyTnZiblJsZUhRbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFEyOXVkR1Y0ZENncExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZGtaWE4wY205NWFXNW5Kem9nZTF4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNtVnVaR1Z5Um5KaGJXVW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWTNKbFlYUmxRMjl1ZEdWNGRDaHliMjkwUTI5dWRHVjRkQ3dnYjI1VmNHUmhkR1VzSUc5dVZYQmtZWFJsVkdocGN5a2dlMXh1SUNBZ0lHeGxkQ0JqYjI1MFpYaDBJQ0FnSUNBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnSUNBZ2JHVjBJRzE1UTI5dWRHVjRkRWxFSUQwZ0tISnZiM1JEYjI1MFpYaDBLU0EvSUhKdmIzUkRiMjUwWlhoMFcwTlBUbFJGV0ZSZlNVUmRJRG9nTVc0N1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliM2g1S0dOdmJuUmxlSFFzSUh0Y2JpQWdJQ0FnSUdkbGREb2dLSFJoY21kbGRDd2djSEp2Y0U1aGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNCT1lXMWxJRDA5UFNCRFQwNVVSVmhVWDBsRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIQmhjbVZ1ZEVsRUlEMGdLSEp2YjNSRGIyNTBaWGgwS1NBL0lISnZiM1JEYjI1MFpYaDBXME5QVGxSRldGUmZTVVJkSURvZ01XNDdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2h3WVhKbGJuUkpSQ0ErSUcxNVEyOXVkR1Y0ZEVsRUtTQS9JSEJoY21WdWRFbEVJRG9nYlhsRGIyNTBaWGgwU1VRN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaDBZWEpuWlhRc0lIQnliM0JPWVcxbEtTbGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSEp2YjNSRGIyNTBaWGgwS1NBL0lISnZiM1JEYjI1MFpYaDBXM0J5YjNCT1lXMWxYU0E2SUhWdVpHVm1hVzVsWkR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHRnlaMlYwVzNCeWIzQk9ZVzFsWFR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCelpYUTZJQ2gwWVhKblpYUXNJSEJ5YjNCT1lXMWxMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9jSEp2Y0U1aGJXVWdQVDA5SUVOUFRsUkZXRlJmU1VRcFhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRGdHdjbTl3VG1GdFpWMGdQVDA5SUhaaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYRzRnSUNBZ0lDQWdJRzE1UTI5dWRHVjRkRWxFSUQwZ0t5dGZZMjl1ZEdWNGRFbEVRMjkxYm5SbGNqdGNiaUFnSUNBZ0lDQWdkR0Z5WjJWMFczQnliM0JPWVcxbFhTQTlJSFpoYkhWbE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYjI1VmNHUmhkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ0lDQWdJQ0FnYjI1VmNHUmhkR1V1WTJGc2JDaHZibFZ3WkdGMFpWUm9hWE1zSUc5dVZYQmtZWFJsVkdocGN5azdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNGlMQ0pjYm1OdmJuTjBJRlJaVUVWZlJVeEZUVVZPVkNBZ1BTQXhPMXh1WTI5dWMzUWdWRmxRUlY5VVJWaFVJQ0FnSUNBOUlETTdYRzVqYjI1emRDQlVXVkJGWDBOUFRVMUZUbFFnSUQwZ09EdGNibU52Ym5OMElGUlpVRVZmVUU5U1ZFRk1JQ0FnUFNBeE5UdGNibHh1Wlhod2IzSjBJR05zWVhOeklGSnZiM1JGYkdWdFpXNTBJSHRjYmlBZ2MzUmhkR2xqSUZSWlVFVmZSVXhGVFVWT1ZDQWdQU0JVV1ZCRlgwVk1SVTFGVGxRN1hHNWNiaUFnYzNSaGRHbGpJRlJaVUVWZlZFVllWQ0FnSUNBZ1BTQlVXVkJGWDFSRldGUTdYRzVjYmlBZ2MzUmhkR2xqSUZSWlVFVmZRMDlOVFVWT1ZDQWdQU0JVV1ZCRlgwTlBUVTFGVGxRN1hHNWNiaUFnYzNSaGRHbGpJRlJaVUVWZlVFOVNWRUZNSUNBZ1BTQlVXVkJGWDFCUFVsUkJURHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWgwZVhCbExDQnBaQ3dnZG1Gc2RXVXNJSEJ5YjNCektTQjdYRzRnSUNBZ2RHaHBjeTVwYzBwcFluTldhWEowZFdGc1JXeGxiV1Z1ZENBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k1MGVYQmxJQ0FnUFNCMGVYQmxPMXh1SUNBZ0lIUm9hWE11YVdRZ0lDQWdJRDBnYVdRN1hHNGdJQ0FnZEdocGN5NTJZV3gxWlNBZ1BTQjJZV3gxWlR0Y2JpQWdJQ0IwYUdsekxuQnliM0J6SUNBOUlIQnliM0J6SUh4OElIdDlPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnS2lCaGN5QlZkR2xzY3lCbWNtOXRJQ2N1TGk5MWRHbHNjeTVxY3ljN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCRFQwNVVSVmhVWDBsRUlEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZibTlrWlM5amIyNTBaWGgwU1VRbktUdGNibHh1YkdWMElIVjFhV1FnUFNBeE8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VtOXZkRTV2WkdVZ2UxeHVJQ0J6ZEdGMGFXTWdRMDlPVkVWWVZGOUpSQ0E5SUVOUFRsUkZXRlJmU1VRN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2NtVnVaR1Z5WlhJc0lIQmhjbVZ1ZEN3Z1gyTnZiblJsZUhRcElIdGNiaUFnSUNCc1pYUWdZMjl1ZEdWNGRDQTlJSEpsYm1SbGNtVnlMbU55WldGMFpVTnZiblJsZUhRb1hHNGdJQ0FnSUNCZlkyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUNoMGFHbHpMbTl1UTI5dWRHVjRkRlZ3WkdGMFpTa2dQeUIwYUdsekxtOXVRMjl1ZEdWNGRGVndaR0YwWlNBNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdLVHRjYmx4dUlDQWdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektIUm9hWE1zSUh0Y2JpQWdJQ0FnSUNkcFpDYzZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQjFkV2xrS3lzc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0ozSmxibVJsY21WeUp6b2dlMXh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCeVpXNWtaWEpsY2l4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNHRnlaVzUwSnpvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0J3WVhKbGJuUXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk52Ym5SbGVIUW5PaUI3WEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdaMlYwT2lBZ0lDQWdJQ0FnSUNBb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOdmJuUmxlSFE3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lITmxkRG9nSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdlMzBzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSjNKbGJtUmxjbEJ5YjIxcGMyVW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSjJSbGMzUnliM2xwYm1jbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ2R5Wlc1a1pYSkdjbUZ0WlNjNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmtaWE4wY205NUtDa2dlMXh1SUNBZ0lIUm9hWE11WkdWemRISnZlV2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdkR2hwY3k1amIyNTBaWGgwSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdselZtRnNhV1JEYUdsc1pDaGphR2xzWkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJWZEdsc2N5NXBjMVpoYkdsa1EyaHBiR1FvWTJocGJHUXBPMXh1SUNCOVhHNWNiaUFnYVhOSmRHVnlZV0pzWlVOb2FXeGtLR05vYVd4a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUZWMGFXeHpMbWx6U1hSbGNtRmliR1ZEYUdsc1pDaGphR2xzWkNrN1hHNGdJSDFjYmx4dUlDQndjbTl3YzBScFptWmxjaWh2YkdSUWNtOXdjeXdnYm1WM1VISnZjSE1zSUhOcmFYQkxaWGx6S1NCN1hHNGdJQ0FnY21WMGRYSnVJRlYwYVd4ekxuQnliM0J6UkdsbVptVnlLRzlzWkZCeWIzQnpMQ0J1WlhkUWNtOXdjeXdnYzJ0cGNFdGxlWE1wTzF4dUlDQjlYRzVjYmlBZ1kyaHBiR1J5Wlc1RWFXWm1aWElvYjJ4a1EyaHBiR1J5Wlc0c0lHNWxkME5vYVd4a2NtVnVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlGVjBhV3h6TG1Ob2FXeGtjbVZ1UkdsbVptVnlLRzlzWkVOb2FXeGtjbVZ1TENCdVpYZERhR2xzWkhKbGJpazdYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QnlaVzVrWlhJb2FtbGlMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVpHVnpkSEp2ZVdsdVp5bGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JseHVJQ0FnSUhSb2FYTXVjbVZ1WkdWeVJuSmhiV1VyS3p0Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaVzVrWlhJb2FtbGlMQ0J5Wlc1a1pYSkRiMjUwWlhoMEtWeHVJQ0FnSUNBZ0xuUm9aVzRvS0hKbGMzVnNkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJtUmxjbEJ5YjIxcGMyVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUM1allYUmphQ2dvWlhKeWIzSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5Wlc1a1pYSlFjbTl0YVhObElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlhKeWIzSTdYRzRnSUNBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUhzZ1VtOXZkRVZzWlcxbGJuUWdmU0JtY205dElDY3VMM0p2YjNRdFpXeGxiV1Z1ZEM1cWN5YzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlVaWGgwUld4bGJXVnVkQ0JsZUhSbGJtUnpJRkp2YjNSRmJHVnRaVzUwSUh0Y2JpQWdjM1JoZEdsaklGUlpVRVVnUFNCU2IyOTBSV3hsYldWdWRDNVVXVkJGWDFSRldGUTdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hV1FzSUhaaGJIVmxMQ0J3Y205d2N5a2dlMXh1SUNBZ0lITjFjR1Z5S0ZKdmIzUkZiR1Z0Wlc1MExsUlpVRVZmVkVWWVZDd2dhV1FzSUhaaGJIVmxMQ0J3Y205d2N5azdYRzRnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0JrWldGa1ltVmxaaUJtY205dElDZGtaV0ZrWW1WbFppYzdYRzVjYm1OdmJuTjBJRk5VVDFBZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saWMwbDBaWEpoZEdWVGRHOXdKeWs3WEc1Y2JpOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTF1WlhOMFpXUXRkR1Z5Ym1GeWVWeHVZMjl1YzNRZ1oyeHZZbUZzVTJOdmNHVWdQU0FvZEhsd1pXOW1JR2RzYjJKaGJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElEOGdaMnh2WW1Gc0lEb2dLSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NBL0lIZHBibVJ2ZHlBNklIUm9hWE03WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGJuTjBZVzVqWlU5bUtHOWlhaWtnZTF4dUlDQm1kVzVqZEdsdmJpQjBaWE4wVkhsd1pTaHZZbW9zSUY5MllXd3BJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQnBjMFJsWm1WeWNtVmtWSGx3WlNodlltb3BJSHRjYmlBZ0lDQWdJR2xtSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJRY205dGFYTmxJSHg4SUNodlltb3VZMjl1YzNSeWRXTjBiM0lnSmlZZ2IySnFMbU52Ym5OMGNuVmpkRzl5TG01aGJXVWdQVDA5SUNkUWNtOXRhWE5sSnlrcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lDQWdJQ0F2THlCUmRXRmpheUJ4ZFdGamF5NHVMbHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2WW1vdWRHaGxiaUE5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbGIyWWdiMkpxTG1OaGRHTm9JRDA5UFNBblpuVnVZM1JwYjI0bktWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQjJZV3dnSUNBZ0lEMGdYM1poYkR0Y2JpQWdJQ0JzWlhRZ2RIbHdaVTltSUNBOUlDaDBlWEJsYjJZZ2IySnFLVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUdkc2IySmhiRk5qYjNCbExsTjBjbWx1WnlsY2JpQWdJQ0FnSUhaaGJDQTlJQ2R6ZEhKcGJtY25PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVUblZ0WW1WeUtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjI1MWJXSmxjaWM3WEc0Z0lDQWdaV3h6WlNCcFppQW9kbUZzSUQwOVBTQm5iRzlpWVd4VFkyOXdaUzVDYjI5c1pXRnVLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oySnZiMnhsWVc0bk8xeHVJQ0FnSUdWc2MyVWdhV1lnS0haaGJDQTlQVDBnWjJ4dlltRnNVMk52Y0dVdVJuVnVZM1JwYjI0cFhHNGdJQ0FnSUNCMllXd2dQU0FuWm5WdVkzUnBiMjRuTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1UVhKeVlYa3BYRzRnSUNBZ0lDQjJZV3dnUFNBbllYSnlZWGtuTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1VDJKcVpXTjBLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oyOWlhbVZqZENjN1hHNGdJQ0FnWld4elpTQnBaaUFvZG1Gc0lEMDlQU0JuYkc5aVlXeFRZMjl3WlM1UWNtOXRhWE5sS1Z4dUlDQWdJQ0FnZG1Gc0lEMGdKM0J5YjIxcGMyVW5PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVRbWxuU1c1MEtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjJKcFoybHVkQ2M3WEc0Z0lDQWdaV3h6WlNCcFppQW9kbUZzSUQwOVBTQm5iRzlpWVd4VFkyOXdaUzVOWVhBcFhHNGdJQ0FnSUNCMllXd2dQU0FuYldGd0p6dGNiaUFnSUNCbGJITmxJR2xtSUNoMllXd2dQVDA5SUdkc2IySmhiRk5qYjNCbExsZGxZV3ROWVhBcFhHNGdJQ0FnSUNCMllXd2dQU0FuZDJWaGEyMWhjQ2M3WEc0Z0lDQWdaV3h6WlNCcFppQW9kbUZzSUQwOVBTQm5iRzlpWVd4VFkyOXdaUzVUWlhRcFhHNGdJQ0FnSUNCMllXd2dQU0FuYzJWMEp6dGNiaUFnSUNCbGJITmxJR2xtSUNoMllXd2dQVDA5SUdkc2IySmhiRk5qYjNCbExsTjViV0p2YkNsY2JpQWdJQ0FnSUhaaGJDQTlJQ2R6ZVcxaWIyd25PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVRblZtWm1WeUtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjJKMVptWmxjaWM3WEc1Y2JpQWdJQ0JwWmlBb2RtRnNJRDA5UFNBblluVm1abVZ5SnlBbUppQm5iRzlpWVd4VFkyOXdaUzVDZFdabVpYSWdKaVlnWjJ4dlltRnNVMk52Y0dVdVFuVm1abVZ5TG1selFuVm1abVZ5S0c5aWFpa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkdWRXMWlaWEluSUNZbUlDaDBlWEJsVDJZZ1BUMDlJQ2R1ZFcxaVpYSW5JSHg4SUc5aWFpQnBibk4wWVc1alpXOW1JRTUxYldKbGNpQjhmQ0FvYjJKcUxtTnZibk4wY25WamRHOXlJQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbElEMDlQU0FuVG5WdFltVnlKeWtwS1NCN1hHNGdJQ0FnSUNCcFppQW9JV2x6Um1sdWFYUmxLRzlpYWlrcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIWmhiQ0FoUFQwZ0oyOWlhbVZqZENjZ0ppWWdkbUZzSUQwOVBTQjBlWEJsVDJZcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0JwWmlBb0tHOWlhaTVqYjI1emRISjFZM1J2Y2lBOVBUMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaUI4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblQySnFaV04wSnlrcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJQ0FnTHk4Z1RuVnNiQ0J3Y205MGIzUjVjR1VnYjI0Z2IySnFaV04wWEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVTltSUQwOVBTQW5iMkpxWldOMEp5QW1KaUFoYjJKcUxtTnZibk4wY25WamRHOXlLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2RoY25KaGVTY2dKaVlnS0VGeWNtRjVMbWx6UVhKeVlYa29iMkpxS1NCOGZDQnZZbW9nYVc1emRHRnVZMlZ2WmlCQmNuSmhlU0I4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblFYSnlZWGtuS1NrcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2dvZG1Gc0lEMDlQU0FuY0hKdmJXbHpaU2NnZkh3Z2RtRnNJRDA5UFNBblpHVm1aWEp5WldRbktTQW1KaUJwYzBSbFptVnljbVZrVkhsd1pTaHZZbW9wS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNCcFppQW9kbUZzSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUFvYjJKcUlHbHVjM1JoYm1ObGIyWWdaMnh2WW1Gc1UyTnZjR1V1VTNSeWFXNW5JSHg4SUNodlltb3VZMjl1YzNSeWRXTjBiM0lnSmlZZ2IySnFMbU52Ym5OMGNuVmpkRzl5TG01aGJXVWdQVDA5SUNkVGRISnBibWNuS1NrcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2RpYjI5c1pXRnVKeUFtSmlBb2IySnFJR2x1YzNSaGJtTmxiMllnWjJ4dlltRnNVMk52Y0dVdVFtOXZiR1ZoYmlCOGZDQW9iMkpxTG1OdmJuTjBjblZqZEc5eUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUQwOVBTQW5RbTl2YkdWaGJpY3BLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJQ0FnYVdZZ0tIWmhiQ0E5UFQwZ0oyMWhjQ2NnSmlZZ0tHOWlhaUJwYm5OMFlXNWpaVzltSUdkc2IySmhiRk5qYjNCbExrMWhjQ0I4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblRXRndKeWtwS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNCcFppQW9kbUZzSUQwOVBTQW5kMlZoYTIxaGNDY2dKaVlnS0c5aWFpQnBibk4wWVc1alpXOW1JR2RzYjJKaGJGTmpiM0JsTGxkbFlXdE5ZWEFnZkh3Z0tHOWlhaTVqYjI1emRISjFZM1J2Y2lBbUppQnZZbW91WTI5dWMzUnlkV04wYjNJdWJtRnRaU0E5UFQwZ0oxZGxZV3ROWVhBbktTa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkelpYUW5JQ1ltSUNodlltb2dhVzV6ZEdGdVkyVnZaaUJuYkc5aVlXeFRZMjl3WlM1VFpYUWdmSHdnS0c5aWFpNWpiMjV6ZEhKMVkzUnZjaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0l1Ym1GdFpTQTlQVDBnSjFObGRDY3BLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJQ0FnYVdZZ0tIWmhiQ0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwZVhCbFQyWWdQVDA5SUNkbWRXNWpkR2x2YmljcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUc5aWFpQnBibk4wWVc1alpXOW1JSFpoYkNsY2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHpkSEpwYm1jbklDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpQW1KaUJ2WW1vdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlNBOVBUMGdkbUZzS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JwWmlBb2IySnFJRDA5SUc1MWJHd3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F4TENCc1pXNGdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNCcFppQW9kR1Z6ZEZSNWNHVW9iMkpxTENCaGNtZDFiV1Z1ZEhOYmFWMHBJRDA5UFNCMGNuVmxLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCd2NtOXdjMFJwWm1abGNpaHZiR1JRY205d2N5d2dibVYzVUhKdmNITXNJSE5yYVhCTFpYbHpLU0I3WEc0Z0lHbG1JQ2h2YkdSUWNtOXdjeUE5UFQwZ2JtVjNVSEp2Y0hNcFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2IyeGtVSEp2Y0hNZ0lUMDlJSFI1Y0dWdlppQnVaWGRRY205d2N5bGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCcFppQW9JVzlzWkZCeWIzQnpJQ1ltSUc1bGQxQnliM0J6S1Z4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJR2xtSUNodmJHUlFjbTl3Y3lBbUppQWhibVYzVUhKdmNITXBYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHVnhaWEZsY1Z4dUlDQnBaaUFvSVc5c1pGQnliM0J6SUNZbUlDRnVaWGRRY205d2N5QW1KaUJ2YkdSUWNtOXdjeUFoUFNCdmJHUlFjbTl3Y3lsY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0JzWlhRZ1lVdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZiR1JRY205d2N5a3VZMjl1WTJGMEtFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9iMnhrVUhKdmNITXBLVHRjYmlBZ2JHVjBJR0pMWlhseklEMGdUMkpxWldOMExtdGxlWE1vYm1WM1VISnZjSE1wTG1OdmJtTmhkQ2hQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6S0c1bGQxQnliM0J6S1NrN1hHNWNiaUFnYVdZZ0tHRkxaWGx6TG14bGJtZDBhQ0FoUFQwZ1lrdGxlWE11YkdWdVozUm9LVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3TENCcGJDQTlJR0ZMWlhsekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQnNaWFFnWVV0bGVTQTlJR0ZMWlhselcybGRPMXh1SUNBZ0lHbG1JQ2h6YTJsd1MyVjVjeUFtSmlCemEybHdTMlY1Y3k1cGJtUmxlRTltS0dGTFpYa3BJRDQ5SURBcFhHNGdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUdsbUlDaHZiR1JRY205d2MxdGhTMlY1WFNBaFBUMGdibVYzVUhKdmNITmJZVXRsZVYwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lHeGxkQ0JpUzJWNUlEMGdZa3RsZVhOYmFWMDdYRzRnSUNBZ2FXWWdLSE5yYVhCTFpYbHpJQ1ltSUhOcmFYQkxaWGx6TG1sdVpHVjRUMllvWWt0bGVTa3BYRzRnSUNBZ0lDQmpiMjUwYVc1MVpUdGNibHh1SUNBZ0lHbG1JQ2hoUzJWNUlEMDlQU0JpUzJWNUtWeHVJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNWNiaUFnSUNCcFppQW9iMnhrVUhKdmNITmJZa3RsZVYwZ0lUMDlJRzVsZDFCeWIzQnpXMkpMWlhsZEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6YVhwbFQyWW9kbUZzZFdVcElIdGNiaUFnYVdZZ0tDRjJZV3gxWlNsY2JpQWdJQ0J5WlhSMWNtNGdNRHRjYmx4dUlDQnBaaUFvVDJKcVpXTjBMbWx6S0VsdVptbHVhWFI1S1NsY2JpQWdJQ0J5WlhSMWNtNGdNRHRjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbExteGxibWQwYUNBOVBUMGdKMjUxYldKbGNpY3BYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbXhsYm1kMGFEdGNibHh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2RtRnNkV1VwTG14bGJtZDBhRHRjYm4xY2JseHVablZ1WTNScGIyNGdYMmwwWlhKaGRHVW9iMkpxTENCallXeHNZbUZqYXlrZ2UxeHVJQ0JwWmlBb0lXOWlhaUI4ZkNCUFltcGxZM1F1YVhNb1NXNW1hVzVwZEhrcEtWeHVJQ0FnSUhKbGRIVnliaUJiWFR0Y2JseHVJQ0JzWlhRZ2NtVnpkV3gwY3lBZ0lEMGdXMTA3WEc0Z0lHeGxkQ0J6WTI5d1pTQWdJQ0FnUFNCN0lHTnZiR3hsWTNScGIyNDZJRzlpYWl3Z1UxUlBVQ0I5TzF4dUlDQnNaWFFnY21WemRXeDBPMXh1WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHOWlhaWtwSUh0Y2JpQWdJQ0J6WTI5d1pTNTBlWEJsSUQwZ0owRnljbUY1Snp0Y2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JwYkNBOUlHOWlhaTVzWlc1bmRHZzdJR2tnUENCcGJEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCelkyOXdaUzUyWVd4MVpTQTlJRzlpYWx0cFhUdGNiaUFnSUNBZ0lITmpiM0JsTG1sdVpHVjRJRDBnYzJOdmNHVXVhMlY1SUQwZ2FUdGNibHh1SUNBZ0lDQWdjbVZ6ZFd4MElEMGdZMkZzYkdKaFkyc3VZMkZzYkNoMGFHbHpMQ0J6WTI5d1pTazdYRzRnSUNBZ0lDQnBaaUFvY21WemRXeDBJRDA5UFNCVFZFOVFLVnh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdjbVZ6ZFd4MGN5NXdkWE5vS0hKbGMzVnNkQ2s3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCdlltb3VaVzUwY21sbGN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUdsbUlDaHZZbW9nYVc1emRHRnVZMlZ2WmlCVFpYUWdmSHdnYjJKcUxtTnZibk4wY25WamRHOXlMbTVoYldVZ1BUMDlJQ2RUWlhRbktTQjdYRzRnSUNBZ0lDQnpZMjl3WlM1MGVYQmxJRDBnSjFObGRDYzdYRzVjYmlBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SURBN1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcGRHVnRJRzltSUc5aWFpNTJZV3gxWlhNb0tTa2dlMXh1SUNBZ0lDQWdJQ0J6WTI5d1pTNTJZV3gxWlNBOUlHbDBaVzA3WEc0Z0lDQWdJQ0FnSUhOamIzQmxMbXRsZVNBOUlHbDBaVzA3WEc0Z0lDQWdJQ0FnSUhOamIzQmxMbWx1WkdWNElEMGdhVzVrWlhnckt6dGNibHh1SUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0JqWVd4c1ltRmpheTVqWVd4c0tIUm9hWE1zSUhOamIzQmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdVMVJQVUNsY2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQnlaWE4xYkhSekxuQjFjMmdvY21WemRXeDBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MyTnZjR1V1ZEhsd1pTQTlJRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsTzF4dVhHNGdJQ0FnSUNCc1pYUWdhVzVrWlhnZ1BTQXdPMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdXeUJyWlhrc0lIWmhiSFZsSUYwZ2IyWWdiMkpxTG1WdWRISnBaWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQnpZMjl3WlM1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0J6WTI5d1pTNXJaWGtnUFNCclpYazdYRzRnSUNBZ0lDQWdJSE5qYjNCbExtbHVaR1Y0SUQwZ2FXNWtaWGdyS3p0Y2JseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmpZV3hzWW1GamF5NWpZV3hzS0hSb2FYTXNJSE5qYjNCbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ1UxUlBVQ2xjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29jbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FXWWdLR2x1YzNSaGJtTmxUMllvYjJKcUxDQW5ZbTl2YkdWaGJpY3NJQ2R1ZFcxaVpYSW5MQ0FuWW1sbmFXNTBKeXdnSjJaMWJtTjBhVzl1SnlrcFhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0J6WTI5d1pTNTBlWEJsSUQwZ0tHOWlhaTVqYjI1emRISjFZM1J2Y2lrZ1B5QnZZbW91WTI5dWMzUnlkV04wYjNJdWJtRnRaU0E2SUNkUFltcGxZM1FuTzF4dVhHNGdJQ0FnYkdWMElHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHZZbW9wTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUd0bGVYTXViR1Z1WjNSb095QnBJRHdnYVd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnYkdWMElHdGxlU0FnSUQwZ2EyVjVjMXRwWFR0Y2JpQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlHOWlhbHRyWlhsZE8xeHVYRzRnSUNBZ0lDQnpZMjl3WlM1MllXeDFaU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdjMk52Y0dVdWEyVjVJRDBnYTJWNU8xeHVJQ0FnSUNBZ2MyTnZjR1V1YVc1a1pYZ2dQU0JwTzF4dVhHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCallXeHNZbUZqYXk1allXeHNLSFJvYVhNc0lITmpiM0JsS1R0Y2JpQWdJQ0FnSUdsbUlDaHlaWE4xYkhRZ1BUMDlJRk5VVDFBcFhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29jbVZ6ZFd4MEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVnpkV3gwY3p0Y2JuMWNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9YMmwwWlhKaGRHVXNJSHRjYmlBZ0oxTlVUMUFuT2lCN1hHNGdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCVFZFOVFMRnh1SUNCOUxGeHVmU2s3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JwZEdWeVlYUmxJRDBnWDJsMFpYSmhkR1U3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamFHbHNaSEpsYmtScFptWmxjaWhmWTJocGJHUnlaVzR4TENCZlkyaHBiR1J5Wlc0eUtTQjdYRzRnSUd4bGRDQmphR2xzWkhKbGJqRWdQU0FvSVVGeWNtRjVMbWx6UVhKeVlYa29YMk5vYVd4a2NtVnVNU2twSUQ4Z1d5QmZZMmhwYkdSeVpXNHhJRjBnT2lCZlkyaHBiR1J5Wlc0eE8xeHVJQ0JzWlhRZ1kyaHBiR1J5Wlc0eUlEMGdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtGOWphR2xzWkhKbGJqSXBLU0EvSUZzZ1gyTm9hV3hrY21WdU1pQmRJRG9nWDJOb2FXeGtjbVZ1TWp0Y2JseHVJQ0J5WlhSMWNtNGdLR1JsWVdSaVpXVm1LQzR1TG1Ob2FXeGtjbVZ1TVNrZ0lUMDlJR1JsWVdSaVpXVm1LQzR1TG1Ob2FXeGtjbVZ1TWlrcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWm1WMFkyaEVaV1Z3VUhKdmNHVnlkSGtvYjJKcUxDQmZhMlY1TENCa1pXWmhkV3gwVm1Gc2RXVXNJR3hoYzNSUVlYSjBLU0I3WEc0Z0lHbG1JQ2h2WW1vZ1BUMGdiblZzYkNCOGZDQlBZbXBsWTNRdWFYTW9UbUZPTENCdlltb3BJSHg4SUU5aWFtVmpkQzVwY3loSmJtWnBibWwwZVN3Z2IySnFLU2xjYmlBZ0lDQnlaWFIxY200Z0tHeGhjM1JRWVhKMEtTQS9JRnNnWkdWbVlYVnNkRlpoYkhWbExDQnVkV3hzSUYwZ09pQmtaV1poZFd4MFZtRnNkV1U3WEc1Y2JpQWdhV1lnS0Y5clpYa2dQVDBnYm5Wc2JDQjhmQ0JQWW1wbFkzUXVhWE1vVG1GT0xDQmZhMlY1S1NCOGZDQlBZbXBsWTNRdWFYTW9TVzVtYVc1cGRIa3NJRjlyWlhrcEtWeHVJQ0FnSUhKbGRIVnliaUFvYkdGemRGQmhjblFwSUQ4Z1d5QmtaV1poZFd4MFZtRnNkV1VzSUc1MWJHd2dYU0E2SUdSbFptRjFiSFJXWVd4MVpUdGNibHh1SUNCc1pYUWdjR0Z5ZEhNN1hHNWNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWDJ0bGVTa3BJSHRjYmlBZ0lDQndZWEowY3lBOUlGOXJaWGs3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlGOXJaWGtnUFQwOUlDZHplVzFpYjJ3bktTQjdYRzRnSUNBZ2NHRnlkSE1nUFNCYklGOXJaWGtnWFR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCc1pYUWdhMlY1SUNBZ0lDQWdJQ0FnUFNBb0p5Y2dLeUJmYTJWNUtUdGNiaUFnSUNCc1pYUWdiR0Z6ZEVsdVpHVjRJQ0FnUFNBd08xeHVJQ0FnSUd4bGRDQnNZWE4wUTNWeWMyOXlJQ0E5SURBN1hHNWNiaUFnSUNCd1lYSjBjeUE5SUZ0ZE8xeHVYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMV052Ym5OMFlXNTBMV052Ym1ScGRHbHZibHh1SUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNCclpYa3VhVzVrWlhoUFppZ25MaWNzSUd4aGMzUkpibVJsZUNrN1hHNGdJQ0FnSUNCcFppQW9hVzVrWlhnZ1BDQXdLU0I3WEc0Z0lDQWdJQ0FnSUhCaGNuUnpMbkIxYzJnb2EyVjVMbk4xWW5OMGNtbHVaeWhzWVhOMFEzVnljMjl5S1NrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9hMlY1TG1Ob1lYSkJkQ2hwYm1SbGVDQXRJREVwSUQwOVBTQW5YRnhjWENjcElIdGNiaUFnSUNBZ0lDQWdiR0Z6ZEVsdVpHVjRJRDBnYVc1a1pYZ2dLeUF4TzF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NHRnlkSE11Y0hWemFDaHJaWGt1YzNWaWMzUnlhVzVuS0d4aGMzUkRkWEp6YjNJc0lHbHVaR1Y0S1NrN1hHNGdJQ0FnSUNCc1lYTjBRM1Z5YzI5eUlEMGdiR0Z6ZEVsdVpHVjRJRDBnYVc1a1pYZ2dLeUF4TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUd4bGRDQndZWEowVGlBOUlIQmhjblJ6VzNCaGNuUnpMbXhsYm1kMGFDQXRJREZkTzF4dUlDQnBaaUFvY0dGeWRITXViR1Z1WjNSb0lEMDlQU0F3S1Z4dUlDQWdJSEpsZEhWeWJpQW9iR0Z6ZEZCaGNuUXBJRDhnV3lCa1pXWmhkV3gwVm1Gc2RXVXNJSEJoY25ST0lGMGdPaUJrWldaaGRXeDBWbUZzZFdVN1hHNWNiaUFnYkdWMElHTjFjbkpsYm5SV1lXeDFaU0E5SUc5aWFqdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2NHRnlkSE11YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUd4bGRDQnJaWGtnUFNCd1lYSjBjMXRwWFR0Y2JseHVJQ0FnSUdOMWNuSmxiblJXWVd4MVpTQTlJR04xY25KbGJuUldZV3gxWlZ0clpYbGRPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBWbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0FnSUhKbGRIVnliaUFvYkdGemRGQmhjblFwSUQ4Z1d5QmtaV1poZFd4MFZtRnNkV1VzSUhCaGNuUk9JRjBnT2lCa1pXWmhkV3gwVm1Gc2RXVTdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdLR3hoYzNSUVlYSjBLU0EvSUZzZ1kzVnljbVZ1ZEZaaGJIVmxMQ0J3WVhKMFRpQmRJRG9nWTNWeWNtVnVkRlpoYkhWbE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWW1sdVpFMWxkR2h2WkhNb1gzQnliM1J2TENCemEybHdVSEp2ZEc5ektTQjdYRzRnSUd4bGRDQndjbTkwYnlBZ0lDQWdJQ0FnSUNBZ1BTQmZjSEp2ZEc4N1hHNGdJR3hsZENCaGJISmxZV1I1Vm1semFYUmxaQ0FnUFNCdVpYY2dVMlYwS0NrN1hHNWNiaUFnZDJocGJHVWdLSEJ5YjNSdktTQjdYRzRnSUNBZ2JHVjBJR1JsYzJOeWFYQjBiM0p6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjbk1vY0hKdmRHOHBPMXh1SUNBZ0lHeGxkQ0JyWlhseklDQWdJQ0FnSUNBOUlFOWlhbVZqZEM1clpYbHpLR1JsYzJOeWFYQjBiM0p6S1M1amIyNWpZWFFvVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3loa1pYTmpjbWx3ZEc5eWN5a3BPMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnYTJWNWN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2EyVjVJRDBnYTJWNWMxdHBYVHRjYmlBZ0lDQWdJR2xtSUNoclpYa2dQVDA5SUNkamIyNXpkSEoxWTNSdmNpY3BYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1WEc0Z0lDQWdJQ0JwWmlBb1lXeHlaV0ZrZVZacGMybDBaV1F1YUdGektHdGxlU2twWEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dVhHNGdJQ0FnSUNCaGJISmxZV1I1Vm1semFYUmxaQzVoWkdRb2EyVjVLVHRjYmx4dUlDQWdJQ0FnYkdWMElIWmhiSFZsSUQwZ2NISnZkRzliYTJWNVhUdGNibHh1SUNBZ0lDQWdMeThnVTJ0cGNDQndjbTkwYjNSNWNHVWdiMllnVDJKcVpXTjBYRzRnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0Y0hKdmRHOTBlWEJsTFdKMWFXeDBhVzV6WEc0Z0lDQWdJQ0JwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcElDWW1JRTlpYW1WamRDNXdjbTkwYjNSNWNHVmJhMlY1WFNBOVBUMGdkbUZzZFdVcFhHNGdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElDRTlQU0FuWm5WdVkzUnBiMjRuS1Z4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUNBZ2RHaHBjMXRyWlhsZElEMGdkbUZzZFdVdVltbHVaQ2gwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCd2NtOTBieUE5SUU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaHdjbTkwYnlrN1hHNGdJQ0FnYVdZZ0tIQnliM1J2SUQwOVBTQlBZbXBsWTNRdWNISnZkRzkwZVhCbEtWeHVJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0JwWmlBb2MydHBjRkJ5YjNSdmN5QW1KaUJ6YTJsd1VISnZkRzl6TG1sdVpHVjRUMllvY0hKdmRHOHBJRDQ5SURBcFhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhORmJYQjBlU2gyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0JwWmlBb1QySnFaV04wTG1sektIWmhiSFZsTENCSmJtWnBibWwwZVNrcFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaFBZbXBsWTNRdWFYTW9kbUZzZFdVc0lFNWhUaWtwWEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdhV1lnS0dsdWMzUmhibU5sVDJZb2RtRnNkV1VzSUNkemRISnBibWNuS1NsY2JpQWdJQ0J5WlhSMWNtNGdJU2d2WEZ4VEx5a3VkR1Z6ZENoMllXeDFaU2s3WEc0Z0lHVnNjMlVnYVdZZ0tHbHVjM1JoYm1ObFQyWW9kbUZzZFdVc0lDZHVkVzFpWlhJbktTQW1KaUJwYzBacGJtbDBaU2gyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCbGJITmxJR2xtSUNnaGFXNXpkR0Z1WTJWUFppaDJZV3gxWlN3Z0oySnZiMnhsWVc0bkxDQW5ZbWxuYVc1MEp5d2dKMloxYm1OMGFXOXVKeWtnSmlZZ2MybDZaVTltS0haaGJIVmxLU0E5UFQwZ01DbGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMwNXZkRVZ0Y0hSNUtIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQWhhWE5GYlhCMGVTNWpZV3hzS0hSb2FYTXNJSFpoYkhWbEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdac1lYUjBaVzVCY25KaGVTaDJZV3gxWlNrZ2UxeHVJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLVnh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmx4dUlDQnNaWFFnYm1WM1FYSnlZWGtnUFNCYlhUdGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2RtRnNkV1V1YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUd4bGRDQnBkR1Z0SUQwZ2RtRnNkV1ZiYVYwN1hHNGdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYVhSbGJTa3BYRzRnSUNBZ0lDQnVaWGRCY25KaGVTQTlJRzVsZDBGeWNtRjVMbU52Ym1OaGRDaG1iR0YwZEdWdVFYSnlZWGtvYVhSbGJTa3BPMXh1SUNBZ0lHVnNjMlZjYmlBZ0lDQWdJRzVsZDBGeWNtRjVMbkIxYzJnb2FYUmxiU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm1WM1FYSnlZWGs3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMVpoYkdsa1EyaHBiR1FvWTJocGJHUXBJSHRjYmlBZ2FXWWdLR05vYVd4a0lEMDlJRzUxYkd3cFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyaHBiR1FnUFQwOUlDZGliMjlzWldGdUp5bGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNXBjeWhqYUdsc1pDd2dTVzVtYVc1cGRIa3BLVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQnBaaUFvVDJKcVpXTjBMbWx6S0dOb2FXeGtMQ0JPWVU0cEtWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNCeVpYUjFjbTRnZEhKMVpUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdselNYUmxjbUZpYkdWRGFHbHNaQ2hqYUdsc1pDa2dlMXh1SUNCcFppQW9ZMmhwYkdRZ1BUMGdiblZzYkNCOGZDQlBZbXBsWTNRdWFYTW9ZMmhwYkdRc0lFNWhUaWtnZkh3Z1QySnFaV04wTG1sektHTm9hV3hrTENCSmJtWnBibWwwZVNrcFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUhKbGRIVnliaUFvUVhKeVlYa3VhWE5CY25KaGVTaGphR2xzWkNrZ2ZId2dkSGx3Wlc5bUlHTm9hV3hrSUQwOVBTQW5iMkpxWldOMEp5QW1KaUFoYVc1emRHRnVZMlZQWmloamFHbHNaQ3dnSjJKdmIyeGxZVzRuTENBbmJuVnRZbVZ5Snl3Z0ozTjBjbWx1WnljcEtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUc1dmR5Z3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQndaWEptYjNKdFlXNWpaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZEhsd1pXOW1JSEJsY21admNtMWhibU5sTG01dmR5QTlQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0J5WlhSMWNtNGdjR1Z5Wm05eWJXRnVZMlV1Ym05M0tDazdYRzRnSUdWc2MyVmNiaUFnSUNCeVpYUjFjbTRnUkdGMFpTNXViM2NvS1R0Y2JuMWNiaUlzSWk4dklGUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JuWmhjaUJmWDNkbFluQmhZMnRmYlc5a2RXeGxYMk5oWTJobFgxOGdQU0I3ZlR0Y2JseHVMeThnVkdobElISmxjWFZwY21VZ1puVnVZM1JwYjI1Y2JtWjFibU4wYVc5dUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9iVzlrZFd4bFNXUXBJSHRjYmx4MEx5OGdRMmhsWTJzZ2FXWWdiVzlrZFd4bElHbHpJR2x1SUdOaFkyaGxYRzVjZEhaaGNpQmpZV05vWldSTmIyUjFiR1VnUFNCZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsWDJOaFkyaGxYMTliYlc5a2RXeGxTV1JkTzF4dVhIUnBaaUFvWTJGamFHVmtUVzlrZFd4bElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JseDBYSFJ5WlhSMWNtNGdZMkZqYUdWa1RXOWtkV3hsTG1WNGNHOXlkSE03WEc1Y2RIMWNibHgwTHk4Z1EzSmxZWFJsSUdFZ2JtVjNJRzF2WkhWc1pTQW9ZVzVrSUhCMWRDQnBkQ0JwYm5SdklIUm9aU0JqWVdOb1pTbGNibHgwZG1GeUlHMXZaSFZzWlNBOUlGOWZkMlZpY0dGamExOXRiMlIxYkdWZlkyRmphR1ZmWDF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzVjZEZ4MEx5OGdibThnYlc5a2RXeGxMbWxrSUc1bFpXUmxaRnh1WEhSY2RDOHZJRzV2SUcxdlpIVnNaUzVzYjJGa1pXUWdibVZsWkdWa1hHNWNkRngwWlhod2IzSjBjem9nZTMxY2JseDBmVHRjYmx4dVhIUXZMeUJGZUdWamRYUmxJSFJvWlNCdGIyUjFiR1VnWm5WdVkzUnBiMjVjYmx4MFgxOTNaV0p3WVdOclgyMXZaSFZzWlhOZlgxdHRiMlIxYkdWSlpGMHVZMkZzYkNodGIyUjFiR1V1Wlhod2IzSjBjeXdnYlc5a2RXeGxMQ0J0YjJSMWJHVXVaWGh3YjNKMGN5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWs3WEc1Y2JseDBMeThnVW1WMGRYSnVJSFJvWlNCbGVIQnZjblJ6SUc5bUlIUm9aU0J0YjJSMWJHVmNibHgwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVmVnh1WEc0aUxDSXZMeUJrWldacGJtVWdaMlYwZEdWeUlHWjFibU4wYVc5dWN5Qm1iM0lnYUdGeWJXOXVlU0JsZUhCdmNuUnpYRzVmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1RZ1BTQW9aWGh3YjNKMGN5d2daR1ZtYVc1cGRHbHZiaWtnUFQ0Z2UxeHVYSFJtYjNJb2RtRnlJR3RsZVNCcGJpQmtaV1pwYm1sMGFXOXVLU0I3WEc1Y2RGeDBhV1lvWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dktHUmxabWx1YVhScGIyNHNJR3RsZVNrZ0ppWWdJVjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YnlobGVIQnZjblJ6TENCclpYa3BLU0I3WEc1Y2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z2EyVjVMQ0I3SUdWdWRXMWxjbUZpYkdVNklIUnlkV1VzSUdkbGREb2daR1ZtYVc1cGRHbHZibHRyWlhsZElIMHBPMXh1WEhSY2RIMWNibHgwZlZ4dWZUc2lMQ0pmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1jZ1BTQW9ablZ1WTNScGIyNG9LU0I3WEc1Y2RHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc1ZHaHBjeUE5UFQwZ0oyOWlhbVZqZENjcElISmxkSFZ5YmlCbmJHOWlZV3hVYUdsek8xeHVYSFIwY25rZ2UxeHVYSFJjZEhKbGRIVnliaUIwYUdseklIeDhJRzVsZHlCR2RXNWpkR2x2YmlnbmNtVjBkWEp1SUhSb2FYTW5LU2dwTzF4dVhIUjlJR05oZEdOb0lDaGxLU0I3WEc1Y2RGeDBhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUNkdlltcGxZM1FuS1NCeVpYUjFjbTRnZDJsdVpHOTNPMXh1WEhSOVhHNTlLU2dwT3lJc0lsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieUE5SUNodlltb3NJSEJ5YjNBcElEMCtJQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQndjbTl3S1NraUxDSXZMeUJrWldacGJtVWdYMTlsYzAxdlpIVnNaU0J2YmlCbGVIQnZjblJ6WEc1ZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSWdQU0FvWlhod2IzSjBjeWtnUFQ0Z2UxeHVYSFJwWmloMGVYQmxiMllnVTNsdFltOXNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NwSUh0Y2JseDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQW5UVzlrZFd4bEp5QjlLVHRjYmx4MGZWeHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z0oxOWZaWE5OYjJSMWJHVW5MQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1ZlRzaUxDSnBiWEJ2Y25RZ2UxeHVJQ0JLU1VKZlFrRlNVa1ZPTEZ4dUlDQktTVUpmVUZKUFdGa3NYRzRnSUVwSlFpeGNiaUFnU21saUxGeHVJQ0JtWVdOMGIzSjVMRnh1SUNBa0xGeHVJQ0JwYzBwcFltbHphQ3hjYmlBZ1kyOXVjM1J5ZFdOMFNtbGlMRnh1SUNCeVpYTnZiSFpsUTJocGJHUnlaVzRzWEc1OUlHWnliMjBnSnk0dmFtbGlMbXB6Snp0Y2JseHVaWGh3YjNKMElHTnZibk4wSUVwcFluTWdQU0I3WEc0Z0lFcEpRbDlDUVZKU1JVNHNYRzRnSUVwSlFsOVFVazlZV1N4Y2JpQWdTa2xDTEZ4dUlDQkthV0lzWEc0Z0lHbHpTbWxpYVhOb0xGeHVJQ0JqYjI1emRISjFZM1JLYVdJc1hHNGdJSEpsYzI5c2RtVkRhR2xzWkhKbGJpeGNibjA3WEc1Y2JtbHRjRzl5ZENCN1hHNGdJRlZRUkVGVVJWOUZWa1ZPVkN4Y2JpQWdVVlZGVlVWZlZWQkVRVlJGWDAxRlZFaFBSQ3hjYmlBZ1JreFZVMGhmVlZCRVFWUkZYMDFGVkVoUFJDeGNiaUFnU1U1SlZGOU5SVlJJVDBRc1hHNGdJRk5MU1ZCZlUxUkJWRVZmVlZCRVFWUkZVeXhjYmlBZ1VFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVXNYRzRnSUV4QlUxUmZVa1ZPUkVWU1gxUkpUVVVzWEc0Z0lGQlNSVlpKVDFWVFgxTlVRVlJGTEZ4dVhHNGdJRU52YlhCdmJtVnVkQ3hjYm4wZ1puSnZiU0FuTGk5amIyMXdiMjVsYm5RdWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdRMjl0Y0c5dVpXNTBjeUE5SUh0Y2JpQWdWVkJFUVZSRlgwVldSVTVVTEZ4dUlDQlJWVVZWUlY5VlVFUkJWRVZmVFVWVVNFOUVMRnh1SUNCR1RGVlRTRjlWVUVSQlZFVmZUVVZVU0U5RUxGeHVJQ0JKVGtsVVgwMUZWRWhQUkN4Y2JpQWdVMHRKVUY5VFZFRlVSVjlWVUVSQlZFVlRMRnh1SUNCUVJVNUVTVTVIWDFOVVFWUkZYMVZRUkVGVVJTeGNiaUFnVEVGVFZGOVNSVTVFUlZKZlZFbE5SU3hjYmlBZ1VGSkZWa2xQVlZOZlUxUkJWRVVzWEc1OU8xeHVYRzVwYlhCdmNuUWdlMXh1SUNCR1QxSkRSVjlTUlVaTVQxY3NYRzRnSUZKdmIzUk9iMlJsTEZ4dUlDQlNaVzVrWlhKbGNpeGNiaUFnVW05dmRFVnNaVzFsYm5Rc1hHNGdJRU52YlcxbGJuUkZiR1Z0Wlc1MExGeHVJQ0JPWVhScGRtVkZiR1Z0Wlc1MExGeHVJQ0JRYjNKMFlXeEZiR1Z0Wlc1MExGeHVJQ0JVWlhoMFJXeGxiV1Z1ZEN4Y2JuMGdabkp2YlNBbkxpOXlaVzVrWlhKbGNuTXZhVzVrWlhndWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdVbVZ1WkdWeVpYSnpJRDBnZTF4dUlDQkRUMDVVUlZoVVgwbEVPaUJTYjI5MFRtOWtaUzVEVDA1VVJWaFVYMGxFTEZ4dUlDQkdUMUpEUlY5U1JVWk1UMWNzWEc0Z0lGSnZiM1JPYjJSbExGeHVJQ0JTWlc1a1pYSmxjaXhjYmlBZ1VtOXZkRVZzWlcxbGJuUXNYRzRnSUVOdmJXMWxiblJGYkdWdFpXNTBMRnh1SUNCT1lYUnBkbVZGYkdWdFpXNTBMRnh1SUNCUWIzSjBZV3hGYkdWdFpXNTBMRnh1SUNCVVpYaDBSV3hsYldWdWRDeGNibjA3WEc1Y2JtVjRjRzl5ZENBcUlHRnpJRlYwYVd4eklHWnliMjBnSnk0dmRYUnBiSE11YW5Nbk8xeHVaWGh3YjNKMElIc2daR1ZtWVhWc2RDQmhjeUJrWldGa1ltVmxaaUI5SUdaeWIyMGdKMlJsWVdSaVpXVm1KenRjYmx4dVpYaHdiM0owSUh0Y2JpQWdabUZqZEc5eWVTeGNiaUFnSkN4Y2JpQWdRMjl0Y0c5dVpXNTBMRnh1ZlR0Y2JpSmRMQ0p1WVcxbGN5STZXMTBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFxuLyoqKioqKi8gLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0fTtcbi8qKioqKiovIFxuLyoqKioqKi8gXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcbi8qKioqKiovIFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gfVxuLyoqKioqKi8gXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKVxuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4oKCkgPT4ge1xuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL2xpYi9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiJFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uJCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ29tcG9uZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Db21wb25lbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbXBvbmVudHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkNvbXBvbmVudHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRPTVJlbmRlcmVyXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9kb21fcmVuZGVyZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5ET01SZW5kZXJlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSmlic1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBqaWJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uSmlicyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUmVuZGVyZXJzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5SZW5kZXJlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlV0aWxzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5VdGlscyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiZGVhZGJlZWZcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmRlYWRiZWVmKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJmYWN0b3J5XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIGppYnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5mYWN0b3J5KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2RvbV9yZW5kZXJlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9kb20tcmVuZGVyZXIuanMgKi8gXCIuL2xpYi9kb20tcmVuZGVyZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgamlic19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgamlicyAqLyBcIi4uL2ppYnMvZGlzdC9pbmRleC5qc1wiKTtcblxuXG5cbn0pKCk7XG5cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fJCA9IF9fd2VicGFja19leHBvcnRzX18uJDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQ29tcG9uZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Db21wb25lbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NvbXBvbmVudHMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkNvbXBvbmVudHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0RPTVJlbmRlcmVyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5ET01SZW5kZXJlcjtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fSmlicyA9IF9fd2VicGFja19leHBvcnRzX18uSmlicztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fUmVuZGVyZXJzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5SZW5kZXJlcnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1V0aWxzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5VdGlscztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fZGVhZGJlZWYgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmRlYWRiZWVmO1xudmFyIF9fd2VicGFja19leHBvcnRzX19mYWN0b3J5ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5mYWN0b3J5O1xuZXhwb3J0IHsgX193ZWJwYWNrX2V4cG9ydHNfXyQgYXMgJCwgX193ZWJwYWNrX2V4cG9ydHNfX0NvbXBvbmVudCBhcyBDb21wb25lbnQsIF9fd2VicGFja19leHBvcnRzX19Db21wb25lbnRzIGFzIENvbXBvbmVudHMsIF9fd2VicGFja19leHBvcnRzX19ET01SZW5kZXJlciBhcyBET01SZW5kZXJlciwgX193ZWJwYWNrX2V4cG9ydHNfX0ppYnMgYXMgSmlicywgX193ZWJwYWNrX2V4cG9ydHNfX1JlbmRlcmVycyBhcyBSZW5kZXJlcnMsIF9fd2VicGFja19leHBvcnRzX19VdGlscyBhcyBVdGlscywgX193ZWJwYWNrX2V4cG9ydHNfX2RlYWRiZWVmIGFzIGRlYWRiZWVmLCBfX3dlYnBhY2tfZXhwb3J0c19fZmFjdG9yeSBhcyBmYWN0b3J5IH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenRCUVV0ak96dEJRVVZrTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVZCUVVVc1JVRkJSU3h6UTBGQlNUczdRVUZGVWp0QlFVTkJPMEZCUTBFN1FVRkRRU3hGUVVGRkxFVkJRVVVzTWtOQlFWTTdPMEZCUldJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUlN4RlFVRkZMRFJEUVVGVk96dEJRVVZRTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBKQlFYZENPMEZCUTNoQ0xFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRXNhVVZCUVdsRk8wRkJRMnBGTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN3MlEwRkJOa01zVVVGQlVUdEJRVU55UkRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxEUkRRVUUwUXpzN1FVRkZOVU03UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzTkVOQlFUUkRPenRCUVVVMVF6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNORU5CUVRSRE96dEJRVVUxUXp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRFJEUVVFMFF6dEJRVU0xUXp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzZVVWQlFYbEZMRlZCUVZVN1FVRkRia1lzUzBGQlN6dEJRVU5NT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVN4VlFVRlZMSGREUVVGM1F6dEJRVU5zUkRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNlVU5CUVhsRExESkRRVUZUT3p0QlFVVnNSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTERKRFFVRXlReXd5UTBGQlV6czdRVUZGY0VRN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3NFFrRkJPRUlzWTBGQll5eEpRVUZKTEZsQlFWazdRVUZETlVRc1VVRkJVVHRCUVVOU0xEUkNRVUUwUWl4alFVRmpMRWxCUVVrc1dVRkJXVHRCUVVNeFJEczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZGQlFWRTdRVUZEVWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTdzBSRUZCTkVRc01FWkJRVEJHTzBGQlEzUktPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4alFVRmpPMEZCUTJRc2FVWkJRV2xHTEZWQlFWVTdRVUZETTBZN1FVRkRRU3hYUVVGWE96dEJRVVZZTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4WlFVRlpMR3RFUVVGblFqdEJRVU0xUWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNaMEpCUVdkQ0xHdEVRVUZuUWp0QlFVTm9RenM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1YwRkJWenM3UVVGRldEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNWMEZCVnp0QlFVTllMRlZCUVZVN1FVRkRWanRCUVVOQk8wRkJRMEU3UVVGRFFTeE5RVUZOTzBGQlEwNDdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnhWWXpzN1FVRkZjVU03UVVGRFNqdEJRVU5GTzBGQlEwRTdRVUZEUnpzN1FVRkZjRVFzVVVGQlVTeFhRVUZYTEVWQlFVVXNNa05CUVZNN08wRkJSVGxDTzBGQlEwRTdRVUZEUVN4RlFVRkZMRVZCUVVVc2MwTkJRVWs3TzBGQlJVUTdRVUZEVUN4M1FrRkJkMElzTWtSQlFWazdPMEZCUlhCRExHOUNRVUZ2UWl4dFJFRkJVVHM3UVVGRk5VSXNjMEpCUVhOQ0xIVkVRVUZWT3p0QlFVVm9ReXh6UWtGQmMwSXNkVVJCUVZVN08wRkJSV2hETEhsQ1FVRjVRaXcyUkVGQllUczdRVUZGZEVNN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVQ3hMUVVGTE8wRkJRMHc3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4VlFVRlZMRTlCUVU4N1FVRkRha0k3UVVGRFFUdEJRVU5CTEUxQlFVMDdRVUZEVGp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVTA3UVVGRFRqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNiMFJCUVc5RUxGVkJRVlU3UVVGRE9VUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN1FVTTFSbU03TzBGQlJXUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGUVVGRkxFVkJRVVVzYzBOQlFVazdPMEZCUlZJN1FVRkRRVHRCUVVOQkxFVkJRVVVzUlVGQlJTd3lRMEZCVXpzN1FVRkZZanRCUVVOQk96dEJRVVZQTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUN4TFFVRkxPMEZCUTB3N08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBOQlFYZERMQ3RDUVVFclFqdEJRVU4yUlR0QlFVTkJMRkZCUVZFN1FVRkRVanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4UlFVRlJMR3RFUVVGblFqdEJRVU40UWpzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h0UWtGQmJVSXNLME5CUVdFc1kwRkJZeXhwUTBGQmFVTTdRVUZETDBVN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEhGQ1FVRnhRaXhyUkVGQlowSTdRVUZEY2tNN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR05CUVdNc2EwUkJRV2RDTzBGQlF6bENPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMR2RDUVVGblFpeGpRVUZqTzBGQlF6bENPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4cFNVRkJhVWtzYzBKQlFYTkNPenRCUVVWMlNpeHhRa0ZCY1VJc09FTkJRVkU3TzBGQlJUZENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzV1VGQldUdEJRVU5hTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZWQlFWVTdRVUZEVml4alFVRmpMQ3REUVVGaE8wRkJRek5DT3p0QlFVVkJMSEZDUVVGeFFpdzRRMEZCVVN3eVFrRkJNa0lzSzBKQlFTdENPenRCUVVWMlJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRmxCUVZrN1FVRkRXanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4VlFVRlZPMEZCUTFZN1FVRkRRU3h4UWtGQmNVSXNPRU5CUVZFc2RVSkJRWFZDTERKQ1FVRXlRanM3UVVGRkwwVTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3haUVVGWk8wRkJRMW83UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzYVVKQlFXbENPMEZCUTJwQ0xFOUJRVTg3UVVGRFVDeExRVUZMT3p0QlFVVk1PMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEdsRVFVRnBSQ3hSUVVGUk8wRkJRM3BFTzBGQlEwRXNZMEZCWXl4blFrRkJaMEk3TzBGQlJUbENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJMQ3REUVVFclF5eFJRVUZSTzBGQlEzWkVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFMUJRVTA3UVVGRFRqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPenM3TzBGRE0wOWpPenRCUVVWa08wRkJRMEU3UVVGRFFTeEZRVUZGTEVWQlFVVXNjME5CUVVrN08wRkJSVkk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RlFVRkZMRVZCUVVVc01rTkJRVk03TzBGQlJVNDdRVUZEVURzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkMEpCUVhkQ0xHRkJRV0U3UVVGRGNrTXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEUxQlFVMHNLMEpCUVN0Q096dEJRVVZ5UXp0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1RVRkJUVHRCUVVOT08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN096czdPenM3TzBGRGFFaGpPenRCUVVWblF6czdRVUZGT1VNN1FVRkRRVHRCUVVOQkxFVkJRVVVzUlVGQlJTd3lRMEZCVXpzN1FVRkZUaXg1UWtGQmVVSXNkVVJCUVZVN1FVRkRNVU03UVVGRFFUczdPenM3T3pzN096czdPenM3T3p0QlExWmpPenRCUVVWa08wRkJRMEU3UVVGRFFUdEJRVU5CTEVWQlFVVXNSVUZCUlN3eVEwRkJVenM3UVVGRlRqdEJRVU5RTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZEVKQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2EwUkJRV3RFTERoQ1FVRnRRanM3UVVGRmNrVTdPenM3UVVGSlFTd3JSRUZCSzBRc09FSkJRVzFDTzBGQlEyeEdPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFTeDVRMEZCZVVNc1VVRkJVVHRCUVVOcVJDeFZRVUZWTEc5Q1FVRnZRanRCUVVNNVFqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxIRkNRVUZ4UWl4bFFVRmxPenRCUVVWd1F6dEJRVU5CTzBGQlEwRXNiVU5CUVcxRExFbEJRVWtzWlVGQlpTeEpRVUZKT3p0QlFVVXhSRHRCUVVOQk96dEJRVVZCTEdOQlFXTXNUMEZCVHl4SFFVRkhMRWxCUVVrN1FVRkROVUk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHBRa0ZCYVVJc1YwRkJWeXhIUVVGSExHTkJRV003UVVGRE4wTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSGxEUVVGNVF5eFJRVUZSTzBGQlEycEVPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSGxEUVVGNVF5eFJRVUZSTzBGQlEycEVPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4dFFrRkJiVUlzYlVKQlFXMUNPMEZCUTNSRE96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklMRU5CUVVNN08wRkJSVVE3T3p0QlFVZEJMRTlCUVU4N08wRkJSVkE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4clJVRkJhMFVzSzBKQlFXMUNPenRCUVVWeVJpd3JRa0ZCYlVJN1FVRkRia0lzY1VKQlFYRkNMQ3RDUVVGdFFqdEJRVU40UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSE5DUVVGelFqdEJRVU4wUWl4dFJVRkJiVVVzSzBKQlFXMUNPMEZCUTNSR0xHdEZRVUZyUlN3clFrRkJiVUk3UVVGRGNrWXNaMFZCUVdkRkxDdENRVUZ0UWp0QlFVTnVSanM3T3pzN08wRkJUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hUUVVGVE8wRkJRMVFzVDBGQlR6dEJRVU5RT3p0QlFVVkJMSGRGUVVGM1JUdEJRVU40UlRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2QwSkJRWGRDTzBGQlEzaENMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQkxHOUZRVUZ2UlN4TlFVRk5PenRCUVVVeFJUdEJRVU5CTEZOQlFWTTdRVUZEVkN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVFzVDBGQlR6dEJRVU5RT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEhkRFFVRjNReXhSUVVGUk8wRkJRMmhFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TlFVRk5PMEZCUTA0N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4cFJVRkJhVVVzVFVGQlRUczdRVUZGZGtVN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNkMFZCUVhkRkxFMUJRVTA3TzBGQlJUbEZPMEZCUTBFN1FVRkRRVHRCUVVOQkxFMUJRVTA3UVVGRFRqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxITkRRVUZ6UXl4UlFVRlJPMEZCUXpsRE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc05FTkJRVFJETEZGQlFWRTdRVUZEY0VRN1FVRkRRVHRCUVVOQk8wRkJRMEVzVVVGQlVUdEJRVU5TTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNVMEZCVXpzN1FVRkZWQ3cwUTBGQk5FTXNVVUZCVVR0QlFVTndSRHRCUVVOQk8wRkJRMEU3UVVGRFFTeFJRVUZSTzBGQlExSTdRVUZEUVN3d1EwRkJNRU1zVVVGQlVUdEJRVU5zUkR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc09FTkJRVGhETEZGQlFWRTdRVUZEZEVRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hSUVVGUk8wRkJRMUk3UVVGRFFTd3dRMEZCTUVNc1VVRkJVVHRCUVVOc1JEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDNRa0ZCZDBJN1FVRkRlRUlzVDBGQlR6dEJRVU5RT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4UFFVRlBPenRCUVVWUU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJWVHRCUVVOV08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEhGRFFVRnhReXhSUVVGUk8wRkJRemRETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRXNUMEZCVHpzN1FVRkZVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0RlFVRnJSU3huUTBGQmJVSTdPMEZCUlhKR0xHZERRVUZ0UWp0QlFVTnVRaXh4UWtGQmNVSXNaME5CUVcxQ08wRkJRM2hETzBGQlEwRXNjMEpCUVhOQ08wRkJRM1JDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDFRMEZCZFVNc1VVRkJVVHRCUVVNdlF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN1FVRkhRU3hQUVVGUE96dEJRVVZRTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2EwVkJRV3RGTEdkRFFVRnRRanM3UVVGRmNrWXNaME5CUVcxQ08wRkJRMjVDTEhGQ1FVRnhRaXhuUTBGQmJVSTdRVUZEZUVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2MwSkJRWE5DTzBGQlEzUkNMR2xGUVVGcFJTeG5RMEZCYlVJN1FVRkRjRVlzYTBWQlFXdEZMR2REUVVGdFFqczdPenRCUVVseVJqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBKQlFYZENMR2REUVVGblF5eEhRVUZITzBGQlF6TkVMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxIRkRRVUZ4UXp0QlFVTnlRenRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnp0QlFVTllPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkN4UFFVRlBPenRCUVVWUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUFzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzYlVaQlFXMUdMR1ZCUVdVN1FVRkRiRWM3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE96dEJRVVZJTzBGQlEwRTdPenRCUVVkQkxFOUJRVTg3TzBGQlJWQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUlVGQmEwVXNaME5CUVcxQ096dEJRVVZ5Uml4blEwRkJiVUk3UVVGRGJrSXNjVUpCUVhGQ0xHZERRVUZ0UWp0QlFVTjRRenRCUVVOQkxITkNRVUZ6UWp0QlFVTjBRaXg1UlVGQmVVVXNaME5CUVcxQ096czdRVUZITlVZN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSMEVzVDBGQlR6czdRVUZGVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHdEZRVUZyUlN4blEwRkJiVUk3TzBGQlJYSkdMR2REUVVGdFFqdEJRVU51UWl4eFFrRkJjVUlzWjBOQlFXMUNPMEZCUTNoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxITkNRVUZ6UWp0QlFVTjBRaXh6UlVGQmMwVXNaME5CUVcxQ08wRkJRM3BHTEhGRlFVRnhSU3huUTBGQmJVSTdRVUZEZUVZc2VVVkJRWGxGTEdkRFFVRnRRanRCUVVNMVJpdzBSVUZCTkVVc1owTkJRVzFDTzBGQlF5OUdMREpGUVVFeVJTeG5RMEZCYlVJN1FVRkRPVVlzTWtWQlFUSkZMR2REUVVGdFFqdEJRVU01Uml4NVJVRkJlVVVzWjBOQlFXMUNPenM3UVVGSE5VWTdPenM3T3pzN096czdPMEZCVjBFc1QwRkJUenM3UVVGRlVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR3RGUVVGclJTeG5RMEZCYlVJN08wRkJSWEpHTEdkRFFVRnRRanRCUVVOdVFpeHhRa0ZCY1VJc1owTkJRVzFDTzBGQlEzaERPMEZCUTBFc2MwSkJRWE5DTzBGQlEzUkNMSGxGUVVGNVJTeG5RMEZCYlVJN096dEJRVWMxUmp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkhRU3hQUVVGUE96dEJRVVZRTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2EwVkJRV3RGTEdkRFFVRnRRanM3UVVGRmNrWXNaME5CUVcxQ08wRkJRMjVDTEhGQ1FVRnhRaXhuUTBGQmJVSTdRVUZEZUVNN1FVRkRRU3h6UWtGQmMwSTdRVUZEZEVJc2VVVkJRWGxGTEdkRFFVRnRRanM3TzBGQlJ6VkdPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQkxFOUJRVTg3TzBGQlJWQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUlVGQmEwVXNaME5CUVcxQ096dEJRVVZ5Uml4blEwRkJiVUk3UVVGRGJrSXNjVUpCUVhGQ0xHZERRVUZ0UWp0QlFVTjRRenRCUVVOQkxITkNRVUZ6UWp0QlFVTjBRaXh0UlVGQmJVVXNaME5CUVcxQ08wRkJRM1JHTEd0RlFVRnJSU3huUTBGQmJVSTdRVUZEY2tZc2MwVkJRWE5GTEdkRFFVRnRRanM3T3pzN1FVRkxla1k3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU8wRkJRMEU3T3p0QlFVZEJMRTlCUVU4N08wRkJSVkE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4clJVRkJhMFVzWjBOQlFXMUNPenRCUVVWeVJpeG5RMEZCYlVJN1FVRkRia0lzY1VKQlFYRkNMR2REUVVGdFFqdEJRVU40UXp0QlFVTkJMSE5DUVVGelFqczdRVUZGZEVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFTeFBRVUZQT3p0QlFVVlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYTBWQlFXdEZMR2REUVVGdFFqczdRVUZGY2tZc1owTkJRVzFDTzBGQlEyNUNMSEZDUVVGeFFpeG5RMEZCYlVJN1FVRkRlRU03UVVGRFFUdEJRVU5CTEhOQ1FVRnpRanRCUVVOMFFpeHJSVUZCYTBVc1owTkJRVzFDT3pzN1FVRkhja1k3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTERoQ1FVRTRRanRCUVVNNVFpeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdPenRCUVVkQkxFOUJRVTg3TzBGQlJWQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUlVGQmEwVXNaME5CUVcxQ096dEJRVVZ5Uml4blEwRkJiVUk3UVVGRGJrSXNjVUpCUVhGQ0xHZERRVUZ0UWp0QlFVTjRRenRCUVVOQkxITkNRVUZ6UWp0QlFVTjBRaXg1UlVGQmVVVXNaME5CUVcxQ096czdRVUZITlVZN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSMEVzVDBGQlR6czdRVUZGVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHdEZRVUZyUlN4blEwRkJiVUk3TzBGQlJYSkdMR2REUVVGdFFqdEJRVU51UWl4eFFrRkJjVUlzWjBOQlFXMUNPMEZCUTNoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjMEpCUVhOQ08wRkJRM1JDTEdsRlFVRnBSU3huUTBGQmJVSTdPenRCUVVkd1JqczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzTUVOQlFUQkRMRk5CUVZNN1FVRkRia1E3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNjVU5CUVhGRExGRkJRVkU3UVVGRE4wTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHOUNRVUZ2UWp0QlFVTndRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSEZEUVVGeFF5eFJRVUZSTzBGQlF6ZERPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hKUVVGSk8wRkJRMG83UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzVFVGQlRUdEJRVU5PT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVsQlFVazdRVUZEU2p0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNjME5CUVhORExGRkJRVkU3UVVGRE9VTTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTQ3hEUVVGRE96dEJRVVZFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEpRVUZKTzBGQlEwbzdRVUZEUVN4SlFVRkpPMEZCUTBvN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMSEZEUVVGeFF5eFJRVUZSTzBGQlF6ZERPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeHpRMEZCYzBNc1VVRkJVVHRCUVVNNVF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMSEZEUVVGeFF5eFJRVUZSTzBGQlF6ZERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRXNUMEZCVHpzN1FVRkZVQ3hWUVVGVk8wRkJRMVk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR3RDUVVGclFpeG5RMEZCYlVJN1FVRkRja003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4eFJrRkJjVVlzWjBOQlFXMUNPMEZCUTNoSE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGVkJRVlVzWjBOQlFXMUNPMEZCUXpkQ08wRkJRMEVzWlVGQlpTeG5RMEZCYlVJc2QwSkJRWGRDTEdkRFFVRnRRanRCUVVNM1JTeHRSRUZCYlVRc2QwTkJRWGRETzBGQlF6TkdPMEZCUTBFN1FVRkRRVHRCUVVOQkxGVkJRVlU3UVVGRFZqdEJRVU5CTzBGQlEwRTdRVUZEUVN4VlFVRlZMR2REUVVGdFFqdEJRVU0zUWp0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGaE8wRkJRMkk3UVVGRFFUdEJRVU5CTEZkQlFWYzdRVUZEV0N4VlFVRlZPMEZCUTFZN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlZTeG5RMEZCYlVJN1FVRkROMElzVlVGQlZUdEJRVU5XTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1ZVRkJWU3huUTBGQmJVSTdRVUZETjBJN1FVRkRRU3hwUlVGQmFVVXNhVUpCUVdsQ08wRkJRMnhHTzBGQlEwRXNNRVJCUVRCRUxHRkJRV0U3UVVGRGRrVTdRVUZEUVN4VlFVRlZPMEZCUTFZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2REUVVGdFFqdEJRVU51UWl4eFFrRkJjVUlzWjBOQlFXMUNPMEZCUTNoRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h6UWtGQmMwSTdRVUZEZEVJc1owVkJRV2RGTEdkRFFVRnRRanRCUVVOdVJpeHpSVUZCYzBVc1owTkJRVzFDTzBGQlEzcEdMRFJGUVVFMFJTeG5RMEZCYlVJN1FVRkRMMFlzYTBWQlFXdEZMR2REUVVGdFFqdEJRVU55Uml4cFJVRkJhVVVzWjBOQlFXMUNPenM3UVVGSGNFWTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3TzBGQlQwRXNRMEZCUXpzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUXpSVU96dEJRVVUxVkN3eVEwRkJNa01zWTBGQll6czdPenM3TzFORGFEVkVla1E3VTBGRFFUczdVMEZGUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHRUUVVOQk8xTkJRMEU3VTBGRFFUdFRRVU5CTzFOQlEwRTdVMEZEUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHM3VTBGRlFUdFRRVU5CT3p0VFFVVkJPMU5CUTBFN1UwRkRRVHM3T3pzN1ZVTjBRa0U3VlVGRFFUdFZRVU5CTzFWQlEwRTdWVUZEUVN4NVEwRkJlVU1zZDBOQlFYZERPMVZCUTJwR08xVkJRMEU3VlVGRFFUczdPenM3VlVOUVFUczdPenM3VlVOQlFUdFZRVU5CTzFWQlEwRTdWVUZEUVN4MVJFRkJkVVFzYVVKQlFXbENPMVZCUTNoRk8xVkJRMEVzWjBSQlFXZEVMR0ZCUVdFN1ZVRkROMFE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMDVuUkR0QlFVTXpRaUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwycHBZbk10Wkc5dExYSmxibVJsY21WeUx5NHZiR2xpTDJOdmJYQnZibVZ1ZEMxdWIyUmxMbXB6SWl3aWQyVmljR0ZqYXpvdkwycHBZbk10Wkc5dExYSmxibVJsY21WeUx5NHZiR2xpTDJSdmJTMXlaVzVrWlhKbGNpNXFjeUlzSW5kbFluQmhZMnM2THk5cWFXSnpMV1J2YlMxeVpXNWtaWEpsY2k4dUwyeHBZaTltY21GbmJXVnVkQzF1YjJSbExtcHpJaXdpZDJWaWNHRmphem92TDJwcFluTXRaRzl0TFhKbGJtUmxjbVZ5THk0dmJHbGlMMjVoZEdsMlpTMXViMlJsTG1weklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdFpHOXRMWEpsYm1SbGNtVnlMeTR2YkdsaUwzQnZjblJoYkMxdWIyUmxMbXB6SWl3aWQyVmljR0ZqYXpvdkwycHBZbk10Wkc5dExYSmxibVJsY21WeUx5NHZiR2xpTDNSbGVIUXRibTlrWlM1cWN5SXNJbmRsWW5CaFkyczZMeTlxYVdKekxXUnZiUzF5Wlc1a1pYSmxjaTh1TGk5cWFXSnpMMlJwYzNRdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZhbWxpY3kxa2IyMHRjbVZ1WkdWeVpYSXZkMlZpY0dGamF5OWliMjkwYzNSeVlYQWlMQ0ozWldKd1lXTnJPaTh2YW1saWN5MWtiMjB0Y21WdVpHVnlaWEl2ZDJWaWNHRmpheTl5ZFc1MGFXMWxMMlJsWm1sdVpTQndjbTl3WlhKMGVTQm5aWFIwWlhKeklpd2lkMlZpY0dGamF6b3ZMMnBwWW5NdFpHOXRMWEpsYm1SbGNtVnlMM2RsWW5CaFkyc3ZjblZ1ZEdsdFpTOW9ZWE5QZDI1UWNtOXdaWEowZVNCemFHOXlkR2hoYm1RaUxDSjNaV0p3WVdOck9pOHZhbWxpY3kxa2IyMHRjbVZ1WkdWeVpYSXZkMlZpY0dGamF5OXlkVzUwYVcxbEwyMWhhMlVnYm1GdFpYTndZV05sSUc5aWFtVmpkQ0lzSW5kbFluQmhZMnM2THk5cWFXSnpMV1J2YlMxeVpXNWtaWEpsY2k4dUwyeHBZaTlwYm1SbGVDNXFjeUpkTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZTF4dUlDQkthV0p6TEZ4dUlDQkRiMjF3YjI1bGJuUnpMRnh1SUNCU1pXNWtaWEpsY25Nc1hHNGdJRlYwYVd4ekxGeHVmU0JtY205dElDZHFhV0p6Snp0Y2JseHVZMjl1YzNRZ2UxeHVJQ0JLU1VKZlVGSlBXRmtzWEc0Z0lISmxjMjlzZG1WRGFHbHNaSEpsYml4Y2JuMGdQU0JLYVdKek8xeHVYRzVqYjI1emRDQjdYRzRnSUVOUFRsUkZXRlJmU1VRc1hHNGdJRkp2YjNST2IyUmxMRnh1ZlNBOUlGSmxibVJsY21WeWN6dGNibHh1WTI5dWMzUWdlMXh1SUNCSlRrbFVYMDFGVkVoUFJDeGNiaUFnVlZCRVFWUkZYMFZXUlU1VUxGeHVJQ0JRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlN4Y2JpQWdURUZUVkY5U1JVNUVSVkpmVkVsTlJTeGNiaUFnVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUTEZ4dWZTQTlJRU52YlhCdmJtVnVkSE03WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJEYjIxd2IyNWxiblJPYjJSbElHVjRkR1Z1WkhNZ1VtOXZkRTV2WkdVZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lndUxpNWhjbWR6S1NCN1hHNGdJQ0FnYzNWd1pYSW9MaTR1WVhKbmN5azdYRzVjYmlBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3loMGFHbHpMQ0I3WEc0Z0lDQWdJQ0FuY205dmRFNXZaR1VuT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSUNBZ0lDQWdJRzUxYkd3c1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0oyTnZiWEJ2Ym1WdWRDYzZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQWdJQ0FnSUNBZ2JuVnNiQ3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FuWDNCbGJtUnBibWREYjI1MFpYaDBWWEJrWVhSbEp6b2dlMXh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCdWRXeHNMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ2RmWTJGamFHVmtVbVZ1WkdWeVVtVnpkV3gwSnpvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0J1ZFd4c0xGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZGZZMkZqYUdWa1VtVnVaR1Z5UTI5dWRHVjRkQ2M2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdiblZzYkN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBblgyTmhZMmhsWkZkaGFYUnBibWRTWlc1a1pYSlNaWE4xYkhRbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUc1MWJHd3NYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMTl3Y21WMmFXOTFjMU4wWVhSbEp6b2dlMXh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQW5YMk4xY25KbGJuUkthV0luT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSUNBZ0lDQWdJRzUxYkd3c1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0oxOXNZWE4wUTI5dWRHVjRkRWxFSnpvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJsZUhSYlEwOU9WRVZZVkY5SlJGMGdmSHdnTVc0c1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdiV1Z5WjJWRGIyMXdiMjVsYm5SUWNtOXdjeWh2YkdSUWNtOXdjeXdnYm1WM1VISnZjSE1wSUh0Y2JpQWdJQ0JzWlhRZ2NISnZjSE1nUFNCUFltcGxZM1F1WVhOemFXZHVLRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2tzSUc5c1pGQnliM0J6SUh4OElIdDlMQ0J1WlhkUWNtOXdjeWs3WEc0Z0lDQWdjbVYwZFhKdUlIQnliM0J6TzF4dUlDQjlYRzVjYmlBZ1ptbHlaVkJ5YjNCVmNHUmhkR1Z6S0Y5dmJHUlFjbTl3Y3l3Z1gyNWxkMUJ5YjNCektTQjdYRzRnSUNBZ2JHVjBJRzVsZDFCeWIzQnpJQ0FnSUQwZ1gyNWxkMUJ5YjNCeklIeDhJSHQ5TzF4dUlDQWdJR3hsZENCaGJHeFFjbTl3UzJWNWN5QTlJRzVsZHlCVFpYUW9UMkpxWldOMExtdGxlWE1vYm1WM1VISnZjSE1wTG1OdmJtTmhkQ2hQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6S0c1bGQxQnliM0J6S1NrcE8xeHVYRzRnSUNBZ2JHVjBJRzlzWkZCeWIzQnpJQ0FnSUQwZ1gyOXNaRkJ5YjNCeklIeDhJSHQ5TzF4dUlDQWdJR3hsZENCdmJHUlFjbTl3UzJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0c5c1pGQnliM0J6S1M1amIyNWpZWFFvVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lodmJHUlFjbTl3Y3lrcE8xeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JwYkNBOUlHOXNaRkJ5YjNCTFpYbHpMbXhsYm1kMGFEc2dhU0E4SUdsc095QnBLeXNwWEc0Z0lDQWdJQ0JoYkd4UWNtOXdTMlY1Y3k1aFpHUW9iMnhrVUhKdmNFdGxlWE5iYVYwcE8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2EyVjVJRzltSUdGc2JGQnliM0JMWlhsektTQjdYRzRnSUNBZ0lDQnNaWFFnYjJ4a1ZtRnNkV1VnSUQwZ2IyeGtVSEp2Y0hOYmEyVjVYVHRjYmlBZ0lDQWdJR3hsZENCdVpYZFdZV3gxWlNBZ1BTQnVaWGRRY205d2MxdHJaWGxkTzF4dVhHNGdJQ0FnSUNCcFppQW9iMnhrVm1Gc2RXVWdJVDA5SUc1bGQxWmhiSFZsS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YlhCdmJtVnVkQzV2YmxCeWIzQlZjR1JoZEdWa0tHdGxlU3dnYm1WM1ZtRnNkV1VzSUc5c1pGWmhiSFZsS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCemFHOTFiR1JTWlc1a1pYSW9ibVYzVUhKdmNITXNJRzVsZDBOb2FXeGtjbVZ1S1NCN1hHNGdJQ0FnYkdWMElHTnZiWEJ2Ym1WdWRDQTlJSFJvYVhNdVkyOXRjRzl1Wlc1ME8xeHVJQ0FnSUdsbUlDZ2hZMjl0Y0c5dVpXNTBLVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmYkdGemRFTnZiblJsZUhSSlJDQThJSFJvYVhNdVkyOXVkR1Y0ZEZ0RFQwNVVSVmhVWDBsRVhTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmJHRnpkRU52Ym5SbGVIUkpSQ0E5SUhSb2FYTXVZMjl1ZEdWNGRGdERUMDVVUlZoVVgwbEVYVHRjYmlBZ0lDQWdJSFJvYVhNdVgzQnlaWFpwYjNWelUzUmhkR1VnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCamIyMXdiMjVsYm5RdWMzUmhkR1VwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbVpwY21WUWNtOXdWWEJrWVhSbGN5aGpiMjF3YjI1bGJuUXVjSEp2Y0hNc0lHNWxkMUJ5YjNCektUdGNiaUFnSUNBZ0lHTnZiWEJ2Ym1WdWRDNXdjbTl3Y3lBOUlIUm9hWE11YldWeVoyVkRiMjF3YjI1bGJuUlFjbTl3Y3loamIyMXdiMjVsYm5RdWNISnZjSE1zSUc1bGQxQnliM0J6S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVkyaHBiR1J5Wlc1RWFXWm1aWElvWTI5dGNHOXVaVzUwTG1Ob2FXeGtjbVZ1TENCdVpYZERhR2xzWkhKbGJpa3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzQnlaWFpwYjNWelUzUmhkR1VnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCamIyMXdiMjVsYm5RdWMzUmhkR1VwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbVpwY21WUWNtOXdWWEJrWVhSbGN5aGpiMjF3YjI1bGJuUXVjSEp2Y0hNc0lHNWxkMUJ5YjNCektUdGNiaUFnSUNBZ0lHTnZiWEJ2Ym1WdWRDNXdjbTl3Y3lBOUlIUm9hWE11YldWeVoyVkRiMjF3YjI1bGJuUlFjbTl3Y3loamIyMXdiMjVsYm5RdWNISnZjSE1zSUc1bGQxQnliM0J6S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJSEJ5WlhacGIzVnpVM1JoZEdVZ1BTQjBhR2x6TGw5d2NtVjJhVzkxYzFOMFlYUmxJSHg4SUh0OU8xeHVJQ0FnSUd4bGRDQndjbTl3YzBScFptWmxjaUFnSUQwZ2RHaHBjeTV3Y205d2MwUnBabVpsY2loamIyMXdiMjVsYm5RdWNISnZjSE1zSUc1bGQxQnliM0J6TENCYklDZHlaV1luTENBbmEyVjVKeUJkTENCMGNuVmxLVHRjYmlBZ0lDQnBaaUFvY0hKdmNITkVhV1ptWlhJZ0ppWWdZMjl0Y0c5dVpXNTBMbk5vYjNWc1pGVndaR0YwWlNodVpYZFFjbTl3Y3l3Z2NISmxkbWx2ZFhOVGRHRjBaU2twSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0J5WlhacGIzVnpVM1JoZEdVZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQmpiMjF3YjI1bGJuUXVjM1JoZEdVcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TG1acGNtVlFjbTl3VlhCa1lYUmxjeWhqYjIxd2IyNWxiblF1Y0hKdmNITXNJRzVsZDFCeWIzQnpLVHRjYmlBZ0lDQWdJR052YlhCdmJtVnVkQzV3Y205d2N5QTlJSFJvYVhNdWJXVnlaMlZEYjIxd2IyNWxiblJRY205d2N5aGpiMjF3YjI1bGJuUXVjSEp2Y0hNc0lHNWxkMUJ5YjNCektUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUhOMFlYUmxSR2xtWm1WeWN5QTlJSFJvYVhNdWNISnZjSE5FYVdabVpYSW9jSEpsZG1sdmRYTlRkR0YwWlN3Z1kyOXRjRzl1Wlc1MExuTjBZWFJsS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1ZFYVdabVpYSnpJQ1ltSUdOdmJYQnZibVZ1ZEM1emFHOTFiR1JWY0dSaGRHVW9ibVYzVUhKdmNITXNJSEJ5WlhacGIzVnpVM1JoZEdVcEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5d2NtVjJhVzkxYzFOMFlYUmxJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnWTI5dGNHOXVaVzUwTG5OMFlYUmxLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lHRnplVzVqSUdSbGMzUnliM2tvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WkdWemRISnZlV2x1WnlsY2JpQWdJQ0FnSUhKbGRIVnlianRjYmx4dUlDQWdJSFJvYVhNdVpHVnpkSEp2ZVdsdVp5QTlJSFJ5ZFdVN1hHNWNiaUFnSUNCaGQyRnBkQ0IwYUdsekxuSmxibVJsY2xCeWIyMXBjMlU3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVqYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amRYSnlaVzUwU21saUlDWW1JSFI1Y0dWdlppQjBhR2x6TGw5amRYSnlaVzUwU21saUxuQnliM0J6TG5KbFppQTlQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRXBwWWk1d2NtOXdjeTV5WldZdVkyRnNiQ2gwYUdsekxtTnZiWEJ2Ym1WdWRDd2diblZzYkN3Z2RHaHBjeTVqYjIxd2IyNWxiblFwTzF4dVhHNGdJQ0FnSUNCaGQyRnBkQ0IwYUdsekxtTnZiWEJ2Ym1WdWRDNWtaWE4wY205NUtDazdYRzRnSUNBZ0lDQjBhR2x6TG1OdmJYQnZibVZ1ZENBOUlHNTFiR3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTXVjbTl2ZEU1dlpHVXBJSHRjYmlBZ0lDQWdJR0YzWVdsMElIUm9hWE11Y205dmRFNXZaR1V1WkdWemRISnZlU2dwTzF4dUlDQWdJQ0FnZEdocGN5NXliMjkwVG05a1pTQTlJRzUxYkd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NWZZMkZqYUdWa1VtVnVaR1Z5VW1WemRXeDBJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbDl3Y21WMmFXOTFjMU4wWVhSbElEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFNtbGlJRDBnYm5Wc2JEdGNibHh1SUNBZ0lISmxkSFZ5YmlCaGQyRnBkQ0J6ZFhCbGNpNWtaWE4wY205NUtDazdYRzRnSUgxY2JseHVJQ0J2YmtOdmJuUmxlSFJWY0dSaGRHVW9LU0I3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbU52YlhCdmJtVnVkQ0I4ZkNCMGFHbHpMbU52YlhCdmJtVnVkRnRUUzBsUVgxTlVRVlJGWDFWUVJFRlVSVk5kSUh4OElIUm9hWE11WTI5dGNHOXVaVzUwVzFCRlRrUkpUa2RmVTFSQlZFVmZWVkJFUVZSRlhTbGNiaUFnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LUzUwYUdWdUtHRnplVzVqSUNncElEMCtJSHRjYmlBZ0lDQWdJR0YzWVdsMElIUm9hWE11Y21WdVpHVnlLSFJvYVhNdVgyTjFjbkpsYm5SS2FXSXNJSFJvYVhNdVgyTmhZMmhsWkZKbGJtUmxja052Ym5SbGVIUWdmSHdnZXlCcGJtUmxlRG9nTUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSEpsYzI5c2RtVkRhR2xzWkhKbGJpaGphR2xzWkhKbGJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCeVpYTnZiSFpsUTJocGJHUnlaVzR1WTJGc2JDaDBhR2x6TENCamFHbHNaSEpsYmlrN1hHNGdJSDFjYmx4dUlDQmhjM2x1WXlCemVXNWpSV3hsYldWdWRITlhhWFJvVW1WdVpHVnlaWElvYm05a1pTd2djbVZ1WkdWeVVtVnpkV3gwTENCeVpXNWtaWEpHY21GdFpTa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXdZWEpsYm5RcFhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ1lYZGhhWFFnZEdocGN5NXdZWEpsYm5RdWMzbHVZMFZzWlcxbGJuUnpWMmwwYUZKbGJtUmxjbVZ5S0c1dlpHVXNJSEpsYm1SbGNsSmxjM1ZzZEN3Z2NtVnVaR1Z5Um5KaGJXVXBPMXh1SUNBZ0lHbG1JQ2gwYUdsekxtTnZiWEJ2Ym1WdWRDbGNiaUFnSUNBZ0lIUm9hWE11WTI5dGNHOXVaVzUwTG5Wd1pHRjBaV1FvS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JseHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUFnWVhONWJtTWdYM0psYm1SbGNpaHFhV0lzSUhKbGJtUmxja052Ym5SbGVIUXBJSHRjYmlBZ0lDQnBaaUFvYW1saUlDRTlQU0IwYUdsekxsOWpkWEp5Wlc1MFNtbGlLVnh1SUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVwcFlpQTlJR3BwWWp0Y2JseHVJQ0FnSUhSb2FYTXVYMk5oWTJobFpGSmxibVJsY2tOdmJuUmxlSFFnUFNCeVpXNWtaWEpEYjI1MFpYaDBPMXh1WEc0Z0lDQWdhV1lnS0NGcWFXSXBYRzRnSUNBZ0lDQnlaWFIxY200N1hHNWNiaUFnSUNCc1pYUWdjbVZ1WkdWeVJuSmhiV1VnUFNCMGFHbHpMbkpsYm1SbGNrWnlZVzFsTzF4dVhHNGdJQ0FnYkdWMElIc2dWSGx3WlRvZ1EyOXRjRzl1Wlc1MFEyeGhjM01zSUhCeWIzQnpMQ0JqYUdsc1pISmxiaUI5SUQwZ2FtbGlPMXh1SUNBZ0lHcHBZaTVqYUdsc1pISmxiaUE5SUdGM1lXbDBJSFJvYVhNdWNtVnpiMngyWlVOb2FXeGtjbVZ1S0dOb2FXeGtjbVZ1S1R0Y2JseHVJQ0FnSUdOdmJuTjBJR1pwYm1Gc2FYcGxVbVZ1WkdWeUlEMGdZWE41Ym1NZ0tISmxibVJsY2xKbGMzVnNkQ3dnY21WdVpHVnlSbkpoYldVcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVJsYzNSeWIzbHBibWNnZkh3Z2NtVnVaR1Z5Um5KaGJXVWdQQ0IwYUdsekxuSmxibVJsY2taeVlXMWxJSHg4SUNGMGFHbHpMbU52YlhCdmJtVnVkQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0IwYUdsekxtTnZiWEJ2Ym1WdWRGdE1RVk5VWDFKRlRrUkZVbDlVU1UxRlhTQTlJRlYwYVd4ekxtNXZkeWdwTzF4dVhHNGdJQ0FnSUNCc1pYUWdjbTl2ZEU1dlpHVWdQU0IwYUdsekxuSnZiM1JPYjJSbE8xeHVJQ0FnSUNBZ2FXWWdLQ0Z5YjI5MFRtOWtaU2xjYmlBZ0lDQWdJQ0FnY205dmRFNXZaR1VnUFNCMGFHbHpMbkp2YjNST2IyUmxJRDBnZEdocGN5NXlaVzVrWlhKbGNpNWpiMjV6ZEhKMVkzUk9iMlJsUm5KdmJVcHBZaWhLU1VKZlVGSlBXRmtzSUhSb2FYTXNJSFJvYVhNdVkyOXVkR1Y0ZENrN1hHNWNiaUFnSUNBZ0lHeGxkQ0JtY21GbmJXVnVkRkpsYzNWc2RDQTlJSFJvYVhNdVgyTmhZMmhsWkZKbGJtUmxjbEpsYzNWc2RDQTlJR0YzWVdsMElISnZiM1JPYjJSbExuSmxibVJsY2loeVpXNWtaWEpTWlhOMWJIUXNJSEpsYm1SbGNrTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ1lYZGhhWFFnZEdocGN5NXplVzVqUld4bGJXVnVkSE5YYVhSb1VtVnVaR1Z5WlhJb2RHaHBjeXdnWm5KaFoyMWxiblJTWlhOMWJIUXNJSEpsYm1SbGNrWnlZVzFsS1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdaeVlXZHRaVzUwVW1WemRXeDBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCb1lXNWtiR1ZTWlc1a1pYSkZjbkp2Y2lBOUlDaGxjbkp2Y2lrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVaR1Z6ZEhKdmVXbHVaeUI4ZkNCeVpXNWtaWEpHY21GdFpTQThJSFJvYVhNdWNtVnVaR1Z5Um5KaGJXVXBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lobGNuSnZjaWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJYQnZibVZ1ZENsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxd2IyNWxiblJiVEVGVFZGOVNSVTVFUlZKZlZFbE5SVjBnUFNCVmRHbHNjeTV1YjNjb0tUdGNibHh1SUNBZ0lDQWdiR1YwSUhKbGJtUmxjbEpsYzNWc2REdGNibHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXRjRzl1Wlc1MElDWW1JSFI1Y0dWdlppQjBhR2x6TG1OdmJYQnZibVZ1ZEM1eVpXNWtaWEpGY25KdmNsTjBZWFJsSUQwOVBTQW5ablZ1WTNScGIyNG5LVnh1SUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbEpsYzNWc2RDQTlJSFJvYVhNdVkyOXRjRzl1Wlc1MExuSmxibVJsY2tWeWNtOXlVM1JoZEdVb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNCbGJITmxYRzRnSUNBZ0lDQWdJQ0FnY21WdVpHVnlVbVZ6ZFd4MElEMGdXeUJnSkh0bGNuSnZjaTV0WlhOellXZGxmVnhjYmlSN1pYSnliM0l1YzNSaFkydDlZQ0JkTzF4dUlDQWdJQ0FnZlNCallYUmphQ0FvWlhKeWIzSXlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGJtUmxjbEpsYzNWc2RDQTlJRnNnWUNSN1pYSnliM0l1YldWemMyRm5aWDFjWEc0a2UyVnljbTl5TG5OMFlXTnJmV0FnWFR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdacGJtRnNhWHBsVW1WdVpHVnlLSEpsYm1SbGNsSmxjM1ZzZEN3Z2NtVnVaR1Z5Um5KaGJXVXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WTI5dGNHOXVaVzUwSUNZbUlDRjBhR2x6TG5Ob2IzVnNaRkpsYm1SbGNpaHFhV0l1Y0hKdmNITXNJR3BwWWk1amFHbHNaSEpsYmlrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJOaFkyaGxaRkpsYm1SbGNsSmxjM1ZzZER0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMjF3YjI1bGJuUWdQU0IwYUdsekxtTnZiWEJ2Ym1WdWREdGNiaUFnSUNBZ0lDQWdhV1lnS0NGamIyMXdiMjVsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVrWlhOMGNtOTVhVzVuSUh4OElISmxibVJsY2taeVlXMWxJRHdnZEdocGN5NXlaVzVrWlhKR2NtRnRaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQWdJR052YlhCdmJtVnVkQ0E5SUhSb2FYTXVZMjl0Y0c5dVpXNTBJRDBnYm1WM0lFTnZiWEJ2Ym1WdWRFTnNZWE56S0hzZ0xpNHVhbWxpTENCd2NtOXdjem9nZEdocGN5NXRaWEpuWlVOdmJYQnZibVZ1ZEZCeWIzQnpLRzUxYkd3c0lIQnliM0J6S1N3Z1kyOXVkR1Y0ZERvZ2RHaHBjeTVqYjI1MFpYaDBMQ0JwWkRvZ2RHaHBjeTVwWkNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJYQnZibVZ1ZEZ0SlRrbFVYMDFGVkVoUFJGMGdQVDA5SUNkbWRXNWpkR2x2YmljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjIxd2IyNWxiblJiU1U1SlZGOU5SVlJJVDBSZEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCamIyMXdiMjVsYm5RdWIyNG9WVkJFUVZSRlgwVldSVTVVTENCaGMzbHVZeUFvY0hWemFHVmtVbVZ1WkdWeVVtVnpkV3gwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSFZ6YUdWa1VtVnVaR1Z5VW1WemRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5Um5KaGJXVXJLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZWGRoYVhRZ1ptbHVZV3hwZW1WU1pXNWtaWElvY0hWemFHVmtVbVZ1WkdWeVVtVnpkV3gwTENCMGFHbHpMbkpsYm1SbGNrWnlZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjNZV2wwSUhSb2FYTXVjbVZ1WkdWeUtIUm9hWE11WDJOMWNuSmxiblJLYVdJc0lIUm9hWE11WDJOaFkyaGxaRkpsYm1SbGNrTnZiblJsZUhRZ2ZId2dleUJwYm1SbGVEb2dNQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTl3Y3lBbUppQjBlWEJsYjJZZ2NISnZjSE11Y21WbUlEMDlQU0FuWm5WdVkzUnBiMjRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0hNdWNtVm1MbU5oYkd3b1kyOXRjRzl1Wlc1MExDQmpiMjF3YjI1bGJuUXNJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EyRnVZMlZzSUdGdWVTQndaVzVrYVc1bklITjBZWFJsSUhWd1pHRjBaWE5jYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTI5dGNHOXVaVzUwVzFCRlRrUkpUa2RmVTFSQlZFVmZWVkJFUVZSRlhTbGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiWEJ2Ym1WdWRGdFFSVTVFU1U1SFgxTlVRVlJGWDFWUVJFRlVSVjBnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaVzVrWlhKU1pYTjFiSFFnUFNCMGFHbHpMbU52YlhCdmJtVnVkQzV5Wlc1a1pYSW9hbWxpTG1Ob2FXeGtjbVZ1S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLRlYwYVd4ekxtbHVjM1JoYm1ObFQyWW9jbVZ1WkdWeVVtVnpkV3gwTENBbmNISnZiV2x6WlNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIZGhhWFJwYm1kU1pXNWtaWEpTWlhOMWJIUWdQU0IwYUdsekxtTnZiWEJ2Ym1WdWRDNXlaVzVrWlhKWFlXbDBhVzVuS0hSb2FYTXVYMk5oWTJobFpGSmxibVJsY2xKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsYm1SbGNrTnZiWEJzWlhSbFpDQTlJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHeHZZV1JwYm1kVWFXMWxjaUE5SUhObGRGUnBiV1Z2ZFhRb1lYTjVibU1nS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWhaR2x1WjFScGJXVnlJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRlYwYVd4ekxtbHVjM1JoYm1ObFQyWW9kMkZwZEdsdVoxSmxibVJsY2xKbGMzVnNkQ3dnSjNCeWIyMXBjMlVuS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJGcGRHbHVaMUpsYm1SbGNsSmxjM1ZzZENBOUlHRjNZV2wwSUhkaGFYUnBibWRTWlc1a1pYSlNaWE4xYkhRN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaVzVrWlhKRGIyMXdiR1YwWldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZWGRoYVhRZ1ptbHVZV3hwZW1WU1pXNWtaWElvZDJGcGRHbHVaMUpsYm1SbGNsSmxjM1ZzZEN3Z2NtVnVaR1Z5Um5KaGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwc0lEVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGM1lXbDBJSEpsYm1SbGNsSmxjM1ZzZEM1MGFHVnVLR0Z6ZVc1aklDaHlaVzVrWlhKU1pYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxja052YlhCc1pYUmxaQ0E5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzYjJGa2FXNW5WR2x0WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLR3h2WVdScGJtZFVhVzFsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4dllXUnBibWRVYVcxbGNpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmhkMkZwZENCbWFXNWhiR2w2WlZKbGJtUmxjaWh5Wlc1a1pYSlNaWE4xYkhRc0lISmxibVJsY2taeVlXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtTNWpZWFJqYUNob1lXNWtiR1ZTWlc1a1pYSkZjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHRjNZV2wwSUdacGJtRnNhWHBsVW1WdVpHVnlLSEpsYm1SbGNsSmxjM1ZzZEN3Z2NtVnVaR1Z5Um5KaGJXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JqWVhSamFDQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGQyRnBkQ0JvWVc1a2JHVlNaVzVrWlhKRmNuSnZjaWhsY25KdmNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMXh1SUNCS2FXSnpMRnh1SUNCU1pXNWtaWEpsY25Nc1hHNTlJR1p5YjIwZ0oycHBZbk1uTzF4dVhHNXBiWEJ2Y25RZ2V5QkdjbUZuYldWdWRFNXZaR1VnZlNBZ1puSnZiU0FuTGk5bWNtRm5iV1Z1ZEMxdWIyUmxMbXB6Snp0Y2JtbHRjRzl5ZENCN0lGUmxlSFJPYjJSbElIMGdJQ0FnSUNCbWNtOXRJQ2N1TDNSbGVIUXRibTlrWlM1cWN5YzdYRzVwYlhCdmNuUWdleUJPWVhScGRtVk9iMlJsSUgwZ0lDQWdabkp2YlNBbkxpOXVZWFJwZG1VdGJtOWtaUzVxY3ljN1hHNXBiWEJ2Y25RZ2V5QlFiM0owWVd4T2IyUmxJSDBnSUNBZ1puSnZiU0FuTGk5d2IzSjBZV3d0Ym05a1pTNXFjeWM3WEc1cGJYQnZjblFnZXlCRGIyMXdiMjVsYm5ST2IyUmxJSDBnWm5KdmJTQW5MaTlqYjIxd2IyNWxiblF0Ym05a1pTNXFjeWM3WEc1Y2JtTnZibk4wSUhzZ1VtVnVaR1Z5WlhJZ2ZTQTlJRkpsYm1SbGNtVnljenRjYmx4dVkyOXVjM1FnZTF4dUlDQktTVUpmVUZKUFdGa3NYRzU5SUQwZ1NtbGljenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRVJQVFZKbGJtUmxjbVZ5SUdWNGRHVnVaSE1nVW1WdVpHVnlaWElnZTF4dUlDQnpkR0YwYVdNZ1JuSmhaMjFsYm5ST2IyUmxJRDBnUm5KaFoyMWxiblJPYjJSbE8xeHVYRzRnSUhOMFlYUnBZeUJVWlhoMFRtOWtaU0E5SUZSbGVIUk9iMlJsTzF4dVhHNGdJSE4wWVhScFl5Qk9ZWFJwZG1WT2IyUmxJRDBnVG1GMGFYWmxUbTlrWlR0Y2JseHVJQ0J6ZEdGMGFXTWdVRzl5ZEdGc1RtOWtaU0E5SUZCdmNuUmhiRTV2WkdVN1hHNWNiaUFnYzNSaGRHbGpJRU52YlhCdmJtVnVkRTV2WkdVZ1BTQkRiMjF3YjI1bGJuUk9iMlJsTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKdmIzUkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JseHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLSFJvYVhNc0lIdGNiaUFnSUNBZ0lDZHliMjkwUld4bGJXVnVkQ2M2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0J5YjI5MFJXeGxiV1Z1ZEN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNtOXZkRTV2WkdVbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUc1MWJHd3NYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnYVhOUWIzSjBZV3hPYjJSbEtIUjVjR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLQzliWG1FdGVrRXRXakF0T1RwZEx5a3VkR1Z6ZENoMGVYQmxLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBjblZqZEU1dlpHVkdjbTl0U21saUtHcHBZaXdnY0dGeVpXNTBMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdhV1lnS0dwcFlpQTlQVDBnU2tsQ1gxQlNUMWhaS1Z4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TGtaeVlXZHRaVzUwVG05a1pTaDBhR2x6TENCd1lYSmxiblFzSUdOdmJuUmxlSFFwTzF4dVhHNGdJQ0FnYkdWMElIc2dWSGx3WlNCOUlEMGdhbWxpTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnVkhsd1pTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QjBhR2x6TG1OdmJuTjBjblZqZEc5eUxrTnZiWEJ2Ym1WdWRFNXZaR1VvZEdocGN5d2djR0Z5Wlc1MExDQmpiMjUwWlhoMEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCVWVYQmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFYTlFiM0owWVd4T2IyUmxLRlI1Y0dVcEtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJSFJvYVhNdVkyOXVjM1J5ZFdOMGIzSXVVRzl5ZEdGc1RtOWtaU2gwYUdsekxDQndZWEpsYm5Rc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0l1VG1GMGFYWmxUbTlrWlNoMGFHbHpMQ0J3WVhKbGJuUXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9WSGx3WlNBOVBTQnVkV3hzSUh4OElGUjVjR1VnUFQwOUlFcEpRbDlRVWs5WVdTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUIwYUdsekxtTnZibk4wY25WamRHOXlMa1p5WVdkdFpXNTBUbTlrWlNoMGFHbHpMQ0J3WVhKbGJuUXNJR052Ym5SbGVIUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR0Z6ZVc1aklITjVibU5GYkdWdFpXNTBjMWRwZEdoU1pXNWtaWEpsY2lodWIyUmxMQ0J5Wlc1a1pYSlNaWE4xYkhRc0lISmxibVJsY2taeVlXMWxLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVaR1Z6ZEhKdmVXbHVaeUI4ZkNCeVpXNWtaWEpHY21GdFpTQThJSFJvYVhNdWNtVnVaR1Z5Um5KaGJXVXBYRzRnSUNBZ0lDQnlaWFIxY200N1hHNWNiaUFnSUNCaGQyRnBkQ0IwYUdsekxuVndaR0YwWlVWc1pXMWxiblJEYUdsc1pISmxiaWhjYmlBZ0lDQWdJSFJvYVhNdVkyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUhSb2FYTXVjbTl2ZEVWc1pXMWxiblFzWEc0Z0lDQWdJQ0J5Wlc1a1pYSlNaWE4xYkhRc1hHNGdJQ0FnSUNCeVpXNWtaWEpHY21GdFpTeGNiaUFnSUNBcE8xeHVJQ0I5WEc1Y2JpQWdZWE41Ym1NZ2NtVnVaR1Z5S0dwcFlpa2dlMXh1SUNBZ0lIUm9hWE11Y21WdVpHVnlSbkpoYldVckt6dGNiaUFnSUNCc1pYUWdjbVZ1WkdWeVJuSmhiV1VnUFNCMGFHbHpMbkpsYm1SbGNrWnlZVzFsTzF4dVhHNGdJQ0FnYkdWMElISnZiM1JPYjJSbElEMGdkR2hwY3k1eWIyOTBUbTlrWlR0Y2JpQWdJQ0JwWmlBb0lYSnZiM1JPYjJSbEtWeHVJQ0FnSUNBZ2NtOXZkRTV2WkdVZ1BTQjBhR2x6TG5KdmIzUk9iMlJsSUQwZ2RHaHBjeTVqYjI1emRISjFZM1JPYjJSbFJuSnZiVXBwWWloS1NVSmZVRkpQV0Zrc0lIUm9hWE1zSUhSb2FYTXVZMjl1ZEdWNGRDazdYRzVjYmlBZ0lDQnNaWFFnY21WdVpHVnlVbVZ6ZFd4MElEMGdZWGRoYVhRZ2NtOXZkRTV2WkdVdWNtVnVaR1Z5S0dwcFlpd2dleUJwYm1SbGVEb2dNQ0I5S1R0Y2JpQWdJQ0JoZDJGcGRDQjBhR2x6TG5ONWJtTkZiR1Z0Wlc1MGMxZHBkR2hTWlc1a1pYSmxjaWhjYmlBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNCeVpXNWtaWEpTWlhOMWJIUXNYRzRnSUNBZ0lDQnlaVzVrWlhKR2NtRnRaU3hjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISmxibVJsY2xKbGMzVnNkRHRjYmlBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUh0Y2JpQWdTbWxpY3l4Y2JpQWdVbVZ1WkdWeVpYSnpMRnh1SUNCVmRHbHNjeXhjYmlBZ1pHVmhaR0psWldZc1hHNTlJR1p5YjIwZ0oycHBZbk1uTzF4dVhHNWpiMjV6ZENCN1hHNGdJR2x6U21saWFYTm9MRnh1SUNCamIyNXpkSEoxWTNSS2FXSXNYRzRnSUVwSlFsOVFVazlZV1N4Y2JuMGdQU0JLYVdKek8xeHVYRzVqYjI1emRDQjdYRzRnSUZKdmIzUk9iMlJsTEZ4dWZTQTlJRkpsYm1SbGNtVnljenRjYmx4dVkyOXVjM1FnVkVWWVZGOVVXVkJGSUNBZ0lDQTlJRk41YldKdmJDNW1iM0lvSjBCcWFXSXZkR1Y0ZEU1dlpHVW5LVHRjYm1OdmJuTjBJRVpTUVVkTlJVNVVYMVJaVUVVZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saUwyWnlZV2R0Wlc1MFRtOWtaU2NwTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUm5KaFoyMWxiblJPYjJSbElHVjRkR1Z1WkhNZ1VtOXZkRTV2WkdVZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lndUxpNWhjbWR6S1NCN1hHNGdJQ0FnYzNWd1pYSW9MaTR1WVhKbmN5azdYRzVjYmlBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3loMGFHbHpMQ0I3WEc0Z0lDQWdJQ0FuWDI1dlpHVkRZV05vWlNjNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnYm1WM0lFMWhjQ2dwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNkZmNtVnVaR1Z5UTJGamFHVW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1lYTjVibU1nWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVrWlhOMGNtOTVhVzVuS1Z4dUlDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdkR2hwY3k1a1pYTjBjbTk1YVc1bklEMGdkSEoxWlR0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TGw5dWIyUmxRMkZqYUdVcElIdGNiaUFnSUNBZ0lHeGxkQ0JrWlhOMGNtOTVVSEp2YldselpYTWdQU0JiWFR0Y2JpQWdJQ0FnSUd4bGRDQnViMlJsUTJGamFHVWdJQ0FnSUNBZ1BTQjBhR2x6TGw5dWIyUmxRMkZqYUdVN1hHNWNiaUFnSUNBZ0lIUm9hWE11WDI1dlpHVkRZV05vWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdOaFkyaGxaRkpsYzNWc2RDQnZaaUJ1YjJSbFEyRmphR1V1ZG1Gc2RXVnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05oWTJobFpGSmxjM1ZzZENBbUppQmpZV05vWldSU1pYTjFiSFF1Ym05a1pTQW1KaUJqWVdOb1pXUlNaWE4xYkhRdWJtOWtaUzVrWlhOMGNtOTVLVnh1SUNBZ0lDQWdJQ0FnSUdSbGMzUnliM2xRY205dGFYTmxjeTV3ZFhOb0tHTmhZMmhsWkZKbGMzVnNkQzV1YjJSbExtUmxjM1J5YjNrb0tTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJRzV2WkdWRFlXTm9aUzVqYkdWaGNpZ3BPMXh1WEc0Z0lDQWdJQ0JoZDJGcGRDQlFjbTl0YVhObExtRnNiQ2hrWlhOMGNtOTVVSEp2YldselpYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCaGQyRnBkQ0J6ZFhCbGNpNWtaWE4wY205NUtDazdYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QnplVzVqUld4bGJXVnVkSE5YYVhSb1VtVnVaR1Z5WlhJb2JtOWtaU3dnY21WdVpHVnlVbVZ6ZFd4MExDQnlaVzVrWlhKR2NtRnRaU2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTV3WVhKbGJuUWdmSHdnZEdocGN5NXlaVzVrWlhKUWNtOXRhWE5sSUh4OElISmxibVJsY2taeVlXMWxJRHdnZEdocGN5NXlaVzVrWlhKR2NtRnRaU2xjYmlBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lHbG1JQ2doZEdocGN5NWZibTlrWlVOaFkyaGxLVnh1SUNBZ0lDQWdjbVYwZFhKdUlHRjNZV2wwSUhSb2FYTXVjR0Z5Wlc1MExuTjVibU5GYkdWdFpXNTBjMWRwZEdoU1pXNWtaWEpsY2lodWIyUmxMQ0J5Wlc1a1pYSlNaWE4xYkhRc0lISmxibVJsY2taeVlXMWxLVHRjYmx4dUlDQWdJR3hsZENCeVpXNWtaWEpTWlhOMWJIUnpJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaHNaWFFnV3lCallXTm9aVXRsZVN3Z1kyRmphR1ZrVW1WemRXeDBJRjBnYjJZZ2RHaHBjeTVmYm05a1pVTmhZMmhsS1NCN1hHNGdJQ0FnSUNCcFppQW9ZMkZqYUdWa1VtVnpkV3gwTG01dlpHVWdQVDA5SUc1dlpHVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZibTlrWlVOaFkyaGxMbk5sZENoallXTm9aVXRsZVN3Z2V5QXVMaTVqWVdOb1pXUlNaWE4xYkhRc0lISmxibVJsY2xKbGMzVnNkQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVnVaR1Z5VW1WemRXeDBjeTV3ZFhOb0tISmxibVJsY2xKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSlNaWE4xYkhSekxuQjFjMmdvWTJGamFHVmtVbVZ6ZFd4MExuSmxibVJsY2xKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHRjNZV2wwSUhSb2FYTXVjR0Z5Wlc1MExuTjVibU5GYkdWdFpXNTBjMWRwZEdoU1pXNWtaWEpsY2lodWIyUmxMQ0J5Wlc1a1pYSlNaWE4xYkhSekxDQnlaVzVrWlhKR2NtRnRaU2s3WEc0Z0lIMWNibHh1SUNCaGMzbHVZeUJmY21WdVpHVnlLRjlqYUdsc1pISmxiaXdnY21WdVpHVnlRMjl1ZEdWNGRDa2dlMXh1SUNBZ0lHeGxkQ0JwYm1SbGVFMWhjQ0FnSUNBOUlHNWxkeUJOWVhBb0tUdGNiaUFnSUNCc1pYUWdZMmhwYkdSeVpXNGdJQ0FnUFNCZlkyaHBiR1J5Wlc0N1hHNGdJQ0FnYkdWMElISmxibVJsY2taeVlXMWxJRDBnZEdocGN5NXlaVzVrWlhKR2NtRnRaVHRjYmx4dUlDQWdJR2xtSUNoVmRHbHNjeTVwYm5OMFlXNWpaVTltS0dOb2FXeGtjbVZ1TENBbmNISnZiV2x6WlNjcEtWeHVJQ0FnSUNBZ1kyaHBiR1J5Wlc0Z1BTQmhkMkZwZENCamFHbHNaSEpsYmp0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1SbGMzUnliM2xwYm1jZ2ZId2djbVZ1WkdWeVJuSmhiV1VnUENCMGFHbHpMbkpsYm1SbGNrWnlZVzFsS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxibVJsY2tOaFkyaGxPMXh1WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbWx6U1hSbGNtRmliR1ZEYUdsc1pDaGphR2xzWkhKbGJpa2dKaVlnS0dselNtbGlhWE5vS0dOb2FXeGtjbVZ1S1NCOGZDQjBhR2x6TG1selZtRnNhV1JEYUdsc1pDaGphR2xzWkhKbGJpa3BLVnh1SUNBZ0lDQWdZMmhwYkdSeVpXNGdQU0JiSUdOb2FXeGtjbVZ1SUYwN1hHNWNiaUFnSUNCamIyNXpkQ0JuWlhSSmJtUmxlRVp2Y2xSNWNHVWdQU0FvVkhsd1pTa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ0tHbHVaR1Y0VFdGd0xtZGxkQ2hVZVhCbEtTQjhmQ0F3S1NBcklERTdYRzRnSUNBZ0lDQnBibVJsZUUxaGNDNXpaWFFvVkhsd1pTd2dhVzVrWlhncE8xeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2FXNWtaWGc3WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR3hsZENCc2IyOXdVM1J2Y0hCbFpDQTlJR1poYkhObE8xeHVJQ0FnSUd4bGRDQndjbTl0YVhObGN5QTlJRlYwYVd4ekxtbDBaWEpoZEdVb1kyaHBiR1J5Wlc0c0lDaDdJSFpoYkhWbE9pQmZZMmhwYkdRc0lHdGxlU3dnYVc1a1pYZ3NJRk5VVDFBZ2ZTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHeHZiM0JUZEc5d2NHVmtJSHg4SUhSb2FYTXVaR1Z6ZEhKdmVXbHVaeUI4ZkNCeVpXNWtaWEpHY21GdFpTQThJSFJvYVhNdWNtVnVaR1Z5Um5KaGJXVXBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlRWRTlRTzF4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnS0dGemVXNWpJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdiR1YwSUdOb2FXeGtJRDBnS0ZWMGFXeHpMbWx1YzNSaGJtTmxUMllvWDJOb2FXeGtMQ0FuY0hKdmJXbHpaU2NwS1NBL0lHRjNZV2wwSUY5amFHbHNaQ0E2SUY5amFHbHNaRHRjYmlBZ0lDQWdJQ0FnYkdWMElHTnlaV0YwWldRN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqWVdOb1pVdGxlVHRjYmlBZ0lDQWdJQ0FnYkdWMElHNXZaR1U3WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaVzVrWlhKU1pYTjFiSFE3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6U21saWFYTm9LR05vYVd4a0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnFhV0lnUFNCamIyNXpkSEoxWTNSS2FXSW9ZMmhwYkdRcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoVmRHbHNjeTVwYm5OMFlXNWpaVTltS0dwcFlpd2dKM0J5YjIxcGMyVW5LU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHBZaUE5SUdGM1lXbDBJR3BwWWp0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVJsYzNSeWIzbHBibWNnZkh3Z2NtVnVaR1Z5Um5KaGJXVWdQQ0IwYUdsekxuSmxibVJsY2taeVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMjl3VTNSdmNIQmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIc2dWSGx3WlN3Z2NISnZjSE1nZlNBOUlHcHBZanRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JWEJ5YjNCektWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNITWdQU0I3ZlR0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCc2IyTmhiRXRsZVR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dJVDA5SUd0bGVTa2dMeThnU1c1a1pYZ2dhWE1nWVc0Z2FXNTBaV2RsY2l3Z1lXNWtJR3RsZVNCcGN5QmhJSE4wY21sdVp5d2diV1ZoYm1sdVp5QjBhR2x6SUdseklHRnVJRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5allXeExaWGtnUFNCclpYazdYRzRnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkc5allXeExaWGtnUFNBb2NISnZjSE11YTJWNUlEMDlJRzUxYkd3Z2ZId2dUMkpxWldOMExtbHpLSEJ5YjNCekxtdGxlU3dnVG1GT0tTQjhmQ0JQWW1wbFkzUXVhWE1vY0hKdmNITXVhMlY1TENCSmJtWnBibWwwZVNrcElEOGdZRUJxYVdJdmFXNTBaWEp1WVd4ZmEyVjVYeVI3WjJWMFNXNWtaWGhHYjNKVWVYQmxLRlI1Y0dVcGZXQWdPaUJ3Y205d2N5NXJaWGs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpZV05vWlV0bGVTQTlJR1JsWVdSaVpXVm1LRlI1Y0dVc0lHeHZZMkZzUzJWNUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmpZV05vWldSU1pYTjFiSFFnUFNCMGFHbHpMbDl1YjJSbFEyRmphR1V1WjJWMEtHTmhZMmhsUzJWNUtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXTmhZMmhsWkZKbGMzVnNkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZM0psWVhSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbElEMGdkR2hwY3k1eVpXNWtaWEpsY2k1amIyNXpkSEoxWTNST2IyUmxSbkp2YlVwcFlpaHFhV0lzSUhSb2FYTXNJSFJvYVhNdVkyOXVkR1Y0ZENrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOeVpXRjBaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZaR1VnUFNCallXTm9aV1JTWlhOMWJIUXVibTlrWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9WSGx3WlNBOVBUMGdTa2xDWDFCU1QxaFpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5VW1WemRXeDBJRDBnWVhkaGFYUWdibTlrWlM1eVpXNWtaWElvYW1saUxtTm9hV3hrY21WdUxDQnlaVzVrWlhKRGIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaVzVrWlhKU1pYTjFiSFFnUFNCaGQyRnBkQ0J1YjJSbExuSmxibVJsY2locWFXSXNJSEpsYm1SbGNrTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdWFYTkpkR1Z5WVdKc1pVTm9hV3hrS0dOb2FXeGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hWZEdsc2N5NXBjMFZ0Y0hSNUtHTm9hV3hrS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0FnSUdOaFkyaGxTMlY1SUQwZ1pHVmhaR0psWldZb1lFQnFhV0l2YVc1MFpYSnVZV3hmWm5KaFoyMWxiblJmSkh0blpYUkpibVJsZUVadmNsUjVjR1VvUmxKQlIwMUZUbFJmVkZsUVJTbDlZQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWTJGamFHVmtVbVZ6ZFd4MElEMGdkR2hwY3k1ZmJtOWtaVU5oWTJobExtZGxkQ2hqWVdOb1pVdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqWVdOb1pXUlNaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOeVpXRjBaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaU0E5SUhSb2FYTXVjbVZ1WkdWeVpYSXVZMjl1YzNSeWRXTjBUbTlrWlVaeWIyMUthV0lvU2tsQ1gxQlNUMWhaTENCMGFHbHpMQ0IwYUdsekxtTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamNtVmhkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViMlJsSUQwZ1kyRmphR1ZrVW1WemRXeDBMbTV2WkdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5VW1WemRXeDBJRDBnWVhkaGFYUWdibTlrWlM1eVpXNWtaWElvWTJocGJHUXNJSEpsYm1SbGNrTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdWFYTldZV3hwWkVOb2FXeGtLR05vYVd4a0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOb2FXeGtJRDBnS0hSNWNHVnZaaUJqYUdsc1pDNTJZV3gxWlU5bUlEMDlQU0FuWm5WdVkzUnBiMjRuS1NBL0lHTm9hV3hrTG5aaGJIVmxUMllvS1NBNklHTm9hV3hrTzF4dUlDQWdJQ0FnSUNBZ0lHTmhZMmhsUzJWNUlEMGdaR1ZoWkdKbFpXWW9ZRUJxYVdJdmFXNTBaWEp1WVd4ZmRHVjRkRjhrZTJkbGRFbHVaR1Y0Um05eVZIbHdaU2hVUlZoVVgxUlpVRVVwZldBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHTmhZMmhsWkZKbGMzVnNkQ0E5SUhSb2FYTXVYMjV2WkdWRFlXTm9aUzVuWlhRb1kyRmphR1ZMWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyRmphR1ZrVW1WemRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpjbVZoZEdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVZ1BTQnVaWGNnZEdocGN5NXlaVzVrWlhKbGNpNWpiMjV6ZEhKMVkzUnZjaTVVWlhoMFRtOWtaU2gwYUdsekxuSmxibVJsY21WeUxDQjBhR2x6TENCMGFHbHpMbU52Ym5SbGVIUXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpjbVZoZEdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbElEMGdZMkZqYUdWa1VtVnpkV3gwTG01dlpHVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdjbVZ1WkdWeVVtVnpkV3gwSUQwZ1lYZGhhWFFnYm05a1pTNXlaVzVrWlhJb1kyaHBiR1FzSUhKbGJtUmxja052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhzZ2JtOWtaU3dnWTJGamFHVkxaWGtzSUhKbGJtUmxjbEpsYzNWc2RDd2dZM0psWVhSbFpDQjlPMXh1SUNBZ0lDQWdmU2tvS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUd4bGRDQnlaVzVrWlhKU1pYTjFiSFJ6SUQwZ1lYZGhhWFFnVUhKdmJXbHpaUzVoYkd3b2NISnZiV2x6WlhNcE8xeHVJQ0FnSUhKbGJtUmxjbEpsYzNWc2RITWdQU0J5Wlc1a1pYSlNaWE4xYkhSekxtWnBiSFJsY2lnb2NtVnpkV3gwS1NBOVBpQWhJWEpsYzNWc2RDazdYRzVjYmlBZ0lDQnNaWFFnWkdWemRISnZlVkJ5YjIxcGMyVnpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WkdWemRISnZlV2x1WnlCOGZDQnlaVzVrWlhKR2NtRnRaU0E4SUhSb2FYTXVjbVZ1WkdWeVJuSmhiV1VwSUh0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JwYkNBOUlISmxibVJsY2xKbGMzVnNkSE11YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnY21WdVpHVnlVbVZ6ZFd4MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYkdWMElIc2dibTlrWlN3Z1kzSmxZWFJsWkNCOUlEMGdjbVZ6ZFd4ME8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoamNtVmhkR1ZrSUNZbUlHNXZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJFWlhOMGNtOTVJRzV2WkdWeklITnBibU5sSUhSb2FYTWdjbVZ1WkdWeUlIZGhjeUJ5WldwbFkzUmxaQzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkNkWFFnYjI1c2VTQnViMlJsY3lCMGFHRjBJSGRsY21VZ2FuVnpkQ0JqY21WaGRHVmtMaTR1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZWE1nWlhocGMzUnBibWNnYm05a1pYTWdiV2xuYUhRZ2MzUnBiR3dnYm1WbFpDQjBieUJsZUdsemRDNWNiaUFnSUNBZ0lDQWdJQ0JrWlhOMGNtOTVVSEp2YldselpYTXVjSFZ6YUNodWIyUmxMbVJsYzNSeWIza29LU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR1JsYzNSeWIzbFFjbTl0YVhObGN5NXNaVzVuZEdnZ1BpQXdLVnh1SUNBZ0lDQWdJQ0JoZDJGcGRDQlFjbTl0YVhObExtRnNiQ2hrWlhOMGNtOTVVSEp2YldselpYTXBPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNtVnVaR1Z5UTJGamFHVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJRzV2WkdWTllYQWdQU0J1WlhjZ1RXRndLQ2s3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHbHNJRDBnY21WdVpHVnlVbVZ6ZFd4MGN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2NtVnVaR1Z5VW1WemRXeDBJRDBnY21WdVpHVnlVbVZ6ZFd4MGMxdHBYVHRjYmlBZ0lDQWdJRzV2WkdWTllYQXVjMlYwS0hKbGJtUmxjbEpsYzNWc2RDNWpZV05vWlV0bGVTd2djbVZ1WkdWeVVtVnpkV3gwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVmYm05a1pVTmhZMmhsS1NCN1hHNGdJQ0FnSUNBdkx5QkRiR1ZoYm5Wd1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCYklHTmhZMmhsUzJWNUxDQnlaVzVrWlhKU1pYTjFiSFFnWFNCdlppQjBhR2x6TGw5dWIyUmxRMkZqYUdVcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUdoaGMwTm9hV3hrSUQwZ2JtOWtaVTFoY0M1b1lYTW9ZMkZqYUdWTFpYa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXaGhjME5vYVd4a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJ1YjJSbElIZGhjeUJrWlhOMGNtOTVaV1JjYmlBZ0lDQWdJQ0FnSUNCa1pYTjBjbTk1VUhKdmJXbHpaWE11Y0hWemFDaHlaVzVrWlhKU1pYTjFiSFF1Ym05a1pTNWtaWE4wY205NUtDa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhSb2FYTXVYMjV2WkdWRFlXTm9aU0E5SUc1dlpHVk5ZWEE3WEc1Y2JpQWdJQ0FnSUdsbUlDaGtaWE4wY205NVVISnZiV2x6WlhNdWJHVnVaM1JvSUQ0Z01DbGNiaUFnSUNBZ0lDQWdZWGRoYVhRZ1VISnZiV2x6WlM1aGJHd29aR1Z6ZEhKdmVWQnliMjFwYzJWektUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWZibTlrWlVOaFkyaGxJRDBnYm05a1pVMWhjRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnY21WdVpHVnlVbVZ6ZFd4MElEMGdkR2hwY3k1ZmNtVnVaR1Z5UTJGamFHVWdQU0J5Wlc1a1pYSlNaWE4xYkhSekxtMWhjQ2dvY21WdVpHVnlVbVZ6ZFd4MEtTQTlQaUJ5Wlc1a1pYSlNaWE4xYkhRdWNtVnVaR1Z5VW1WemRXeDBLUzVtYVd4MFpYSW9LSEpsYzNWc2RDa2dQVDRnS0hKbGMzVnNkQ0FoUFNCdWRXeHNJQ1ltSUNGUFltcGxZM1F1YVhNb2NtVnpkV3gwTENCT1lVNHBJQ1ltSUNGUFltcGxZM1F1YVhNb2NtVnpkV3gwTENCSmJtWnBibWwwZVNrcEtUdGNiaUFnSUNCeVpYUjFjbTRnY21WdVpHVnlVbVZ6ZFd4ME8xeHVJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMXh1SUNCS2FXSnpMRnh1SUNCU1pXNWtaWEpsY25Nc1hHNGdJRlYwYVd4ekxGeHVmU0JtY205dElDZHFhV0p6Snp0Y2JseHVZMjl1YzNRZ2UxeHVJQ0JLU1VKZlVGSlBXRmtzWEc1OUlEMGdTbWxpY3p0Y2JseHVZMjl1YzNRZ2UxeHVJQ0JTYjI5MFRtOWtaU3hjYmlBZ1RtRjBhWFpsUld4bGJXVnVkQ3hjYmlBZ1ZHVjRkRVZzWlcxbGJuUXNYRzU5SUQwZ1VtVnVaR1Z5WlhKek8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1RtRjBhWFpsVG05a1pTQmxlSFJsYm1SeklGSnZiM1JPYjJSbElIdGNiaUFnYzNSaGRHbGpJRVZNUlUxRlRsUmZRMHhCVTFNZ1BTQk9ZWFJwZG1WRmJHVnRaVzUwTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0M0dUxtRnlaM01wSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3VMaTVoY21kektUdGNibHh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0hSb2FYTXNJSHRjYmlBZ0lDQWdJQ2R5YjI5MFRtOWtaU2M2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdiblZzYkN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBblgyTjFjbkpsYm5SS2FXSW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSjE5allXTm9aV1JTWlc1a1pYSlNaWE4xYkhRbk9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUhzZ2FXUTZJSFJvYVhNdWFXUWdmU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCaGMzbHVZeUJ6ZVc1alJXeGxiV1Z1ZEhOWGFYUm9VbVZ1WkdWeVpYSW9ibTlrWlN3Z2NtVnVaR1Z5VW1WemRXeDBMQ0J5Wlc1a1pYSkdjbUZ0WlNrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1eVpXNWtaWEpsY2lCOGZDQjBhR2x6TG1SbGMzUnliM2xwYm1jZ2ZId2djbVZ1WkdWeVJuSmhiV1VnUENCMGFHbHpMbkpsYm1SbGNrWnlZVzFsS1Z4dUlDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdZWGRoYVhRZ2RHaHBjeTV5Wlc1a1pYSmxjaTUxY0dSaGRHVkZiR1Z0Wlc1MFEyaHBiR1J5Wlc0b1hHNGdJQ0FnSUNCMGFHbHpMbU52Ym5SbGVIUXNYRzRnSUNBZ0lDQjBhR2x6TGw5allXTm9aV1JTWlc1a1pYSlNaWE4xYkhRc1hHNGdJQ0FnSUNCeVpXNWtaWEpTWlhOMWJIUXNYRzRnSUNBZ0lDQnlaVzVrWlhKR2NtRnRaU3hjYmlBZ0lDQXBPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdaR1Z6ZEhKdmVTZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWtaWE4wY205NWFXNW5LVnh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVYRzRnSUNBZ2RHaHBjeTVrWlhOMGNtOTVhVzVuSUQwZ2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbkp2YjNST2IyUmxLU0I3WEc0Z0lDQWdJQ0JoZDJGcGRDQjBhR2x6TG5KdmIzUk9iMlJsTG1SbGMzUnliM2tvS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjbTl2ZEU1dlpHVWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJoZDJGcGRDQnpkWEJsY2k1a1pYTjBjbTk1S0NrN1hHNGdJSDFjYmx4dUlDQmhjM2x1WXlCZmNtVnVaR1Z5S0dwcFlpd2djbVZ1WkdWeVEyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUd4bGRDQjdYRzRnSUNBZ0lDQlVlWEJsTEZ4dUlDQWdJQ0FnY0hKdmNITXNYRzRnSUNBZ0lDQmphR2xzWkhKbGJpeGNiaUFnSUNCOUlEMGdkR2hwY3k1ZlkzVnljbVZ1ZEVwcFlpQTlJQ2hxYVdJZ2ZId2dlMzBwTzF4dVhHNGdJQ0FnYVdZZ0tDRlVlWEJsS1Z4dUlDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdiR1YwSUhKbGJtUmxja1p5WVcxbElEMGdkR2hwY3k1eVpXNWtaWEpHY21GdFpUdGNibHh1SUNBZ0lHbG1JQ2doVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0hCeWIzQnpMQ0FuYVc1dVpYSklWRTFNSnlrcElIdGNiaUFnSUNBZ0lHeGxkQ0J5YjI5MFRtOWtaU0E5SUhSb2FYTXVjbTl2ZEU1dlpHVTdYRzRnSUNBZ0lDQnBaaUFvSVhKdmIzUk9iMlJsS1Z4dUlDQWdJQ0FnSUNCeWIyOTBUbTlrWlNBOUlIUm9hWE11Y205dmRFNXZaR1VnUFNCMGFHbHpMbkpsYm1SbGNtVnlMbU52Ym5OMGNuVmpkRTV2WkdWR2NtOXRTbWxpS0VwSlFsOVFVazlZV1N3Z2RHaHBjeXdnZEdocGN5NWpiMjUwWlhoMEtUdGNibHh1SUNBZ0lDQWdiR1YwSUc1bGQwTnZiblJsZUhRZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0hKbGJtUmxja052Ym5SbGVIUXBPMXh1SUNBZ0lDQWdibVYzUTI5dWRHVjRkQzVwYm1SbGVDQTlJREE3WEc1Y2JpQWdJQ0FnSUhKdmIzUk9iMlJsTG5KbGJtUmxjaWhqYUdsc1pISmxiaXdnYm1WM1EyOXVkR1Y0ZENrdWRHaGxiaWdvWm5KaFoyMWxiblJTWlhOMWJIUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM2x1WTBWc1pXMWxiblJ6VjJsMGFGSmxibVJsY21WeUtIUm9hWE1zSUdaeVlXZHRaVzUwVW1WemRXeDBMQ0J5Wlc1a1pYSkdjbUZ0WlNrN1hHNGdJQ0FnSUNCOUtTNWpZWFJqYUNnb1gyVnljbTl5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGNuSnZjaUE5SUY5bGNuSnZjanRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9aWEp5YjNJZ2FXNXpkR0Z1WTJWdlppQkZjbkp2Y2lrcFhHNGdJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQnVaWGNnUlhKeWIzSW9aWEp5YjNJcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ONWJtTkZiR1Z0Wlc1MGMxZHBkR2hTWlc1a1pYSmxjaWgwYUdsekxDQmJJRzVsZHlCVVpYaDBSV3hsYldWdWRDaHVkV3hzTENCbGNuSnZjaXdnY0hKdmNITXBJRjBzSUhKbGJtUmxja1p5WVcxbEtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1eWIyOTBUbTlrWlNrZ2UxeHVJQ0FnSUNBZ0lDQmhkMkZwZENCMGFHbHpMbkp2YjNST2IyUmxMbVJsYzNSeWIza29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwVG05a1pTQTlJRzUxYkd3N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElISmxibVJsY2xKbGMzVnNkQ0E5SUhSb2FYTXVYMk5oWTJobFpGSmxibVJsY2xKbGMzVnNkQ0E5SUc1bGR5QjBhR2x6TG1OdmJuTjBjblZqZEc5eUxrVk1SVTFGVGxSZlEweEJVMU1vWEc0Z0lDQWdJQ0IwYUdsekxtbGtMRnh1SUNBZ0lDQWdWSGx3WlN4Y2JpQWdJQ0FnSUhCeWIzQnpMRnh1SUNBZ0lDazdYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVnVaR1Z5VW1WemRXeDBPMXh1SUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZTF4dUlDQlNaVzVrWlhKbGNuTXNYRzU5SUdaeWIyMGdKMnBwWW5Nbk8xeHVYRzVwYlhCdmNuUWdleUJPWVhScGRtVk9iMlJsSUgwZ1puSnZiU0FuTGk5dVlYUnBkbVV0Ym05a1pTNXFjeWM3WEc1Y2JtTnZibk4wSUh0Y2JpQWdVRzl5ZEdGc1JXeGxiV1Z1ZEN4Y2JuMGdQU0JTWlc1a1pYSmxjbk03WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJRYjNKMFlXeE9iMlJsSUdWNGRHVnVaSE1nVG1GMGFYWmxUbTlrWlNCN1hHNGdJSE4wWVhScFl5QkZURVZOUlU1VVgwTk1RVk5USUQwZ1VHOXlkR0ZzUld4bGJXVnVkRHRjYm4xY2JpSXNJbWx0Y0c5eWRDQjdYRzRnSUZKbGJtUmxjbVZ5Y3l4Y2JuMGdabkp2YlNBbmFtbGljeWM3WEc1Y2JtTnZibk4wSUh0Y2JpQWdVbTl2ZEU1dlpHVXNYRzRnSUZSbGVIUkZiR1Z0Wlc1MExGeHVmU0E5SUZKbGJtUmxjbVZ5Y3p0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZSbGVIUk9iMlJsSUdWNGRHVnVaSE1nVW05dmRFNXZaR1VnZTF4dUlDQmhjM2x1WXlCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1SbGMzUnliM2xwYm1jcFhHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0IwYUdsekxtUmxjM1J5YjNscGJtY2dQU0IwY25WbE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdGM1lXbDBJSE4xY0dWeUxtUmxjM1J5YjNrb0tUdGNiaUFnZlZ4dVhHNGdJR0Z6ZVc1aklGOXlaVzVrWlhJb2RHVjRkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVkdWNGRFVnNaVzFsYm5Rb2RHaHBjeTVwWkN3Z2RHVjRkQ2s3WEc0Z0lIMWNibjFjYmlJc0lpOHFLaW9xS2lvdklIWmhjaUJmWDNkbFluQmhZMnRmYlc5a2RXeGxjMTlmSUQwZ0tIdGNibHh1THlvcUtpOGdYQ0l1TDI1dlpHVmZiVzlrZFd4bGN5OWtaV0ZrWW1WbFppOXNhV0l2YVc1a1pYZ3Vhbk5jSWpwY2JpOHFJU29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FJU3BjWEZ4dUlDQWhLaW9xSUM0dmJtOWtaVjl0YjJSMWJHVnpMMlJsWVdSaVpXVm1MMnhwWWk5cGJtUmxlQzVxY3lBcUtpb2hYRzRnSUZ4Y0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNHZLaW9xTHlBb1puVnVZM1JwYjI0b2JXOWtkV3hsTENCZlgzVnVkWE5sWkY5M1pXSndZV05yWDJWNGNHOXlkSE1zSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cElIdGNibHh1THk4Z1EyOXdlWEpwWjJoMElESXdNaklnVjNsaGRIUWdSM0psWlc1M1lYbGNibHh1WEc1Y2JtTnZibk4wSUhSb2FYTkhiRzlpWVd3Z1BTQW9LSFI1Y0dWdlppQjNhVzVrYjNjZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NBL0lIZHBibVJ2ZHlBNklGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaeWtnZkh3Z2RHaHBjenRjYm1OdmJuTjBJRVJGUVVSQ1JVVkdYMUpGUmw5TlFWQmZTMFZaSUQwZ1UzbHRZbTlzTG1admNpZ25RRUJrWldGa1ltVmxabEpsWmsxaGNDY3BPMXh1WTI5dWMzUWdWVTVKVVZWRlgwbEVYMU5aVFVKUFRDQTlJRk41YldKdmJDNW1iM0lvSjBCQVpHVmhaR0psWldaVmJtbHhkV1ZKUkNjcE8xeHVZMjl1YzNRZ2NtVm1UV0Z3SUQwZ0tIUm9hWE5IYkc5aVlXeGJSRVZCUkVKRlJVWmZVa1ZHWDAxQlVGOUxSVmxkS1NBL0lIUm9hWE5IYkc5aVlXeGJSRVZCUkVKRlJVWmZVa1ZHWDAxQlVGOUxSVmxkSURvZ2JtVjNJRmRsWVd0TllYQW9LVHRjYm1OdmJuTjBJR2xrU0dWc2NHVnljeUE5SUZ0ZE8xeHVYRzVwWmlBb0lYUm9hWE5IYkc5aVlXeGJSRVZCUkVKRlJVWmZVa1ZHWDAxQlVGOUxSVmxkS1Z4dUlDQjBhR2x6UjJ4dlltRnNXMFJGUVVSQ1JVVkdYMUpGUmw5TlFWQmZTMFZaWFNBOUlISmxaazFoY0R0Y2JseHViR1YwSUhWMWFXUkRiM1Z1ZEdWeUlEMGdNRzQ3WEc1Y2JtWjFibU4wYVc5dUlHZGxkRWhsYkhCbGNrWnZjbFpoYkhWbEtIWmhiSFZsS1NCN1hHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUdsa1NHVnNjR1Z5Y3k1c1pXNW5kR2c3SUdrZ1BDQnBiRHNnYVNzcktTQjdYRzRnSUNBZ2JHVjBJSHNnYUdWc2NHVnlMQ0JuWlc1bGNtRjBiM0lnZlNBOUlHbGtTR1ZzY0dWeWMxdHBYVHRjYmlBZ0lDQnBaaUFvYUdWc2NHVnlLSFpoYkhWbEtTbGNiaUFnSUNBZ0lISmxkSFZ5YmlCblpXNWxjbUYwYjNJN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdZVzU1ZEdocGJtZFViMGxFS0Y5aGNtY3NJRjloYkhKbFlXUjVWbWx6YVhSbFpDa2dlMXh1SUNCc1pYUWdZWEpuSUQwZ1gyRnlaenRjYmlBZ2FXWWdLR0Z5WnlCcGJuTjBZVzVqWlc5bUlFNTFiV0psY2lCOGZDQmhjbWNnYVc1emRHRnVZMlZ2WmlCVGRISnBibWNnZkh3Z1lYSm5JR2x1YzNSaGJtTmxiMllnUW05dmJHVmhiaWxjYmlBZ0lDQmhjbWNnUFNCaGNtY3VkbUZzZFdWUFppZ3BPMXh1WEc0Z0lHeGxkQ0IwZVhCbFQyWWdQU0IwZVhCbGIyWWdZWEpuTzF4dVhHNGdJR2xtSUNoMGVYQmxUMllnUFQwOUlDZHVkVzFpWlhJbklDWW1JR0Z5WnlBOVBUMGdNQ2tnZTF4dUlDQWdJR2xtSUNoUFltcGxZM1F1YVhNb1lYSm5MQ0F0TUNrcFhHNGdJQ0FnSUNCeVpYUjFjbTRnSjI1MWJXSmxjam90TUNjN1hHNWNiaUFnSUNCeVpYUjFjbTRnSjI1MWJXSmxjam9yTUNjN1hHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pVOW1JRDA5UFNBbmMzbHRZbTlzSnlsY2JpQWdJQ0J5WlhSMWNtNGdZSE41YldKdmJEb2tlMkZ5Wnk1MGIxTjBjbWx1WnlncGZXQTdYRzVjYmlBZ2FXWWdLR0Z5WnlBOVBTQnVkV3hzSUh4OElIUjVjR1ZQWmlBOVBUMGdKMjUxYldKbGNpY2dmSHdnZEhsd1pVOW1JRDA5UFNBblltOXZiR1ZoYmljZ2ZId2dkSGx3WlU5bUlEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxUMllnUFQwOUlDZGlhV2RwYm5RbktTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWUFppQTlQVDBnSjI1MWJXSmxjaWNwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdLR0Z5WnlBOElEQXBJRDhnWUc1MWJXSmxjam9rZTJGeVozMWdJRG9nWUc1MWJXSmxjam9ySkh0aGNtZDlZRHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxUMllnUFQwOUlDZGlhV2RwYm5RbklDWW1JR0Z5WnlBOVBUMGdNRzRwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMkpwWjJsdWREb3JNQ2M3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZQ1I3ZEhsd1pVOW1mVG9rZTJGeVozMWdPMXh1SUNCOVhHNWNiaUFnYkdWMElHbGtTR1ZzY0dWeUlEMGdLR2xrU0dWc2NHVnljeTVzWlc1bmRHZ2dQaUF3SUNZbUlHZGxkRWhsYkhCbGNrWnZjbFpoYkhWbEtHRnlaeWtwTzF4dUlDQnBaaUFvYVdSSVpXeHdaWElwWEc0Z0lDQWdjbVYwZFhKdUlHRnVlWFJvYVc1blZHOUpSQ2hwWkVobGJIQmxjaWhoY21jcEtUdGNibHh1SUNCcFppQW9WVTVKVVZWRlgwbEVYMU5aVFVKUFRDQnBiaUJoY21jZ0ppWWdkSGx3Wlc5bUlHRnlaMXRWVGtsUlZVVmZTVVJmVTFsTlFrOU1YU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDOHZJRkJ5WlhabGJuUWdhVzVtYVc1cGRHVWdjbVZqZFhKemFXOXVYRzRnSUNBZ2FXWWdLQ0ZmWVd4eVpXRmtlVlpwYzJsMFpXUWdmSHdnSVY5aGJISmxZV1I1Vm1semFYUmxaQzVvWVhNb1lYSm5LU2tnZTF4dUlDQWdJQ0FnYkdWMElHRnNjbVZoWkhsV2FYTnBkR1ZrSUQwZ1gyRnNjbVZoWkhsV2FYTnBkR1ZrSUh4OElHNWxkeUJUWlhRb0tUdGNiaUFnSUNBZ0lHRnNjbVZoWkhsV2FYTnBkR1ZrTG1Ga1pDaGhjbWNwTzF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z1ZVhSb2FXNW5WRzlKUkNoaGNtZGJWVTVKVVZWRlgwbEVYMU5aVFVKUFRGMG9LU3dnWVd4eVpXRmtlVlpwYzJsMFpXUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2xtSUNnaGNtVm1UV0Z3TG1oaGN5aGhjbWNwS1NCN1hHNGdJQ0FnYkdWMElHdGxlU0E5SUdBa2UzUjVjR1Z2WmlCaGNtZDlPaVI3S3l0MWRXbGtRMjkxYm5SbGNuMWdPMXh1SUNBZ0lISmxaazFoY0M1elpYUW9ZWEpuTENCclpYa3BPMXh1SUNBZ0lISmxkSFZ5YmlCclpYazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZtVFdGd0xtZGxkQ2hoY21jcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pXRmtZbVZsWmlncElIdGNiaUFnYkdWMElIQmhjblJ6SUQwZ1d5QmhjbWQxYldWdWRITXViR1Z1WjNSb0lGMDdYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JwYkNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLVnh1SUNBZ0lIQmhjblJ6TG5CMWMyZ29ZVzU1ZEdocGJtZFViMGxFS0dGeVozVnRaVzUwYzF0cFhTa3BPMXh1WEc0Z0lISmxkSFZ5YmlCd1lYSjBjeTVxYjJsdUtDYzZKeWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1JsWVdSaVpXVm1VMjl5ZEdWa0tDa2dlMXh1SUNCc1pYUWdjR0Z5ZEhNZ1BTQmJJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dYVHRjYmlBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUdsc0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU0E4SUdsc095QnBLeXNwWEc0Z0lDQWdjR0Z5ZEhNdWNIVnphQ2hoYm5sMGFHbHVaMVJ2U1VRb1lYSm5kVzFsYm5SelcybGRLU2s3WEc1Y2JpQWdjbVYwZFhKdUlIQmhjblJ6TG5OdmNuUW9LUzVxYjJsdUtDYzZKeWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsYm1WeVlYUmxTVVJHYjNJb2FHVnNjR1Z5TENCblpXNWxjbUYwYjNJcElIdGNiaUFnYVdSSVpXeHdaWEp6TG5CMWMyZ29leUJvWld4d1pYSXNJR2RsYm1WeVlYUnZjaUI5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WdGIzWmxTVVJIWlc1bGNtRjBiM0lvYUdWc2NHVnlLU0I3WEc0Z0lHeGxkQ0JwYm1SbGVDQTlJR2xrU0dWc2NHVnljeTVtYVc1a1NXNWtaWGdvS0dsMFpXMHBJRDArSUNocGRHVnRMbWhsYkhCbGNpQTlQVDBnYUdWc2NHVnlLU2s3WEc0Z0lHbG1JQ2hwYm1SbGVDQThJREFwWEc0Z0lDQWdjbVYwZFhKdU8xeHVYRzRnSUdsa1NHVnNjR1Z5Y3k1emNHeHBZMlVvYVc1a1pYZ3NJREVwTzF4dWZWeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aGtaV0ZrWW1WbFppd2dlMXh1SUNBbmFXUlRlVzBuT2lCN1hHNGdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQjBjblZsTEZ4dUlDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnVlU1SlVWVkZYMGxFWDFOWlRVSlBUQ3hjYmlBZ2ZTeGNiaUFnSjNOdmNuUmxaQ2M2SUh0Y2JpQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0JrWldGa1ltVmxabE52Y25SbFpDeGNiaUFnZlN4Y2JpQWdKMmRsYm1WeVlYUmxTVVJHYjNJbk9pQjdYRzRnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJSFpoYkhWbE9pQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWSlJFWnZjaXhjYmlBZ2ZTeGNiaUFnSjNKbGJXOTJaVWxFUjJWdVpYSmhkRzl5SnpvZ2UxeHVJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUhKbGJXOTJaVWxFUjJWdVpYSmhkRzl5TEZ4dUlDQjlMRnh1ZlNrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaR1ZoWkdKbFpXWTdYRzVjYmx4dUx5b3FLaThnZlNrc1hHNWNiaThxS2lvdklGd2lMaTlzYVdJdlkyOXRjRzl1Wlc1MExtcHpYQ0k2WEc0dktpRXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpRXFYRnhjYmlBZ0lTb3FLaUF1TDJ4cFlpOWpiMjF3YjI1bGJuUXVhbk1nS2lvcUlWeHVJQ0JjWENvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dUx5b3FLaThnS0NoZlgzVnVkWE5sWkY5M1pXSndZV05yWDE5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWHl3Z1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnUFQ0Z2UxeHVYRzVmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5Jb1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5azdYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9YMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeXdnZTF4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdJQ0JjSWtOQlVGUlZVa1ZmVWtWR1JWSkZUa05GWDAxRlZFaFBSRk5jSWpvZ0tDa2dQVDRnS0M4cUlHSnBibVJwYm1jZ0tpOGdRMEZRVkZWU1JWOVNSVVpGVWtWT1EwVmZUVVZVU0U5RVV5a3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lRMjl0Y0c5dVpXNTBYQ0k2SUNncElEMCtJQ2d2S2lCaWFXNWthVzVuSUNvdklFTnZiWEJ2Ym1WdWRDa3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lSa3hWVTBoZlZWQkVRVlJGWDAxRlZFaFBSRndpT2lBb0tTQTlQaUFvTHlvZ1ltbHVaR2x1WnlBcUx5QkdURlZUU0Y5VlVFUkJWRVZmVFVWVVNFOUVLU3hjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pKVGtsVVgwMUZWRWhQUkZ3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJKVGtsVVgwMUZWRWhQUkNrc1hHNHZLaUJvWVhKdGIyNTVJR1Y0Y0c5eWRDQXFMeUFnSUZ3aVRFRlRWRjlTUlU1RVJWSmZWRWxOUlZ3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJNUVZOVVgxSkZUa1JGVWw5VVNVMUZLU3hjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlZ3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJRUlU1RVNVNUhYMU5VUVZSRlgxVlFSRUZVUlNrc1hHNHZLaUJvWVhKdGIyNTVJR1Y0Y0c5eWRDQXFMeUFnSUZ3aVVGSkZWa2xQVlZOZlUxUkJWRVZjSWpvZ0tDa2dQVDRnS0M4cUlHSnBibVJwYm1jZ0tpOGdVRkpGVmtsUFZWTmZVMVJCVkVVcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0lsRlZSVlZGWDFWUVJFRlVSVjlOUlZSSVQwUmNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z1VWVkZWVVZmVlZCRVFWUkZYMDFGVkVoUFJDa3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lVMHRKVUY5VFZFRlVSVjlWVUVSQlZFVlRYQ0k2SUNncElEMCtJQ2d2S2lCaWFXNWthVzVuSUNvdklGTkxTVkJmVTFSQlZFVmZWVkJFUVZSRlV5a3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lWVkJFUVZSRlgwVldSVTVVWENJNklDZ3BJRDArSUNndktpQmlhVzVrYVc1bklDb3ZJRlZRUkVGVVJWOUZWa1ZPVkNsY2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJSDBwTzF4dUx5b2dhR0Z5Ylc5dWVTQnBiWEJ2Y25RZ0tpOGdkbUZ5SUY5bGRtVnVkSE5mYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpCZlh5QTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTHlvaElDNHZaWFpsYm5SekxtcHpJQ292SUZ3aUxpOXNhV0l2WlhabGJuUnpMbXB6WENJcE8xeHVMeW9nYUdGeWJXOXVlU0JwYlhCdmNuUWdLaThnZG1GeUlGOTFkR2xzYzE5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1WOWZJRDBnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlndktpRWdMaTkxZEdsc2N5NXFjeUFxTHlCY0lpNHZiR2xpTDNWMGFXeHpMbXB6WENJcE8xeHVMeW9nYUdGeWJXOXVlU0JwYlhCdmNuUWdLaThnZG1GeUlGOXFhV0pmYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpKZlh5QTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTHlvaElDNHZhbWxpTG1weklDb3ZJRndpTGk5c2FXSXZhbWxpTG1welhDSXBPMXh1THlvZ1oyeHZZbUZzSUVKMVptWmxjaUFxTDF4dVhHNWNibHh1WEc1Y2JtTnZibk4wSUZWUVJFRlVSVjlGVmtWT1ZDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBblFHcHBZbk12WTI5dGNHOXVaVzUwTDJWMlpXNTBMM1Z3WkdGMFpTYzdYRzVqYjI1emRDQlJWVVZWUlY5VlVFUkJWRVZmVFVWVVNFOUVJQ0FnSUNBZ0lEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZZMjl0Y0c5dVpXNTBMM0YxWlhWbFZYQmtZWFJsSnlrN1hHNWpiMjV6ZENCR1RGVlRTRjlWVUVSQlZFVmZUVVZVU0U5RUlDQWdJQ0FnSUQwZ1UzbHRZbTlzTG1admNpZ25RR3BwWW5NdlkyOXRjRzl1Wlc1MEwyWnNkWE5vVlhCa1lYUmxKeWs3WEc1amIyNXpkQ0JKVGtsVVgwMUZWRWhQUkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk12WTI5dGNHOXVaVzUwTDE5ZmFXNXBkQ2NwTzF4dVkyOXVjM1FnVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUSUNBZ0lDQWdJQ0E5SUZONWJXSnZiQzVtYjNJb0owQnFhV0p6TDJOdmJYQnZibVZ1ZEM5emEybHdVM1JoZEdWVmNHUmhkR1Z6SnlrN1hHNWpiMjV6ZENCUVJVNUVTVTVIWDFOVVFWUkZYMVZRUkVGVVJTQWdJQ0FnSUQwZ1UzbHRZbTlzTG1admNpZ25RR3BwWW5NdlkyOXRjRzl1Wlc1MEwzQmxibVJwYm1kVGRHRjBaVlZ3WkdGMFpTY3BPMXh1WTI5dWMzUWdURUZUVkY5U1JVNUVSVkpmVkVsTlJTQWdJQ0FnSUNBZ0lDQTlJRk41YldKdmJDNW1iM0lvSjBCcWFXSnpMMk52YlhCdmJtVnVkQzlzWVhOMFVtVnVaR1Z5VkdsdFpTY3BPMXh1WTI5dWMzUWdVRkpGVmtsUFZWTmZVMVJCVkVVZ0lDQWdJQ0FnSUNBZ0lDQTlJRk41YldKdmJDNW1iM0lvSjBCcWFXSnpMMk52YlhCdmJtVnVkQzl3Y21WMmFXOTFjMU4wWVhSbEp5azdYRzVqYjI1emRDQkRRVkJVVlZKRlgxSkZSa1ZTUlU1RFJWOU5SVlJJVDBSVElEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXZZMjl0Y0c5dVpXNTBMM0J5WlhacGIzVnpVM1JoZEdVbktUdGNibHh1WTI5dWMzUWdaV3hsYldWdWRFUmhkR0ZEWVdOb1pTQTlJRzVsZHlCWFpXRnJUV0Z3S0NrN1hHNWNibVoxYm1OMGFXOXVJR2x6Vm1Gc2FXUlRkR0YwWlU5aWFtVmpkQ2gyWVd4MVpTa2dlMXh1SUNCcFppQW9kbUZzZFdVZ1BUMGdiblZzYkNsY2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNWNiaUFnYVdZZ0tFOWlhbVZqZEM1cGN5aDJZV3gxWlN3Z1RtRk9LU2xjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdhV1lnS0U5aWFtVmpkQzVwY3loMllXeDFaU3dnU1c1bWFXNXBkSGtwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCQ2IyOXNaV0Z1SUh4OElIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1RuVnRZbVZ5SUh4OElIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1UzUnlhVzVuS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JzWlhRZ2RIbHdaVTltSUQwZ2RIbHdaVzltSUhaaGJIVmxPMXh1SUNCcFppQW9kSGx3WlU5bUlEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxUMllnUFQwOUlDZHVkVzFpWlhJbklIeDhJSFI1Y0dWUFppQTlQVDBnSjJKdmIyeGxZVzRuS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdRblZtWm1WeUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQkNkV1ptWlhJdWFYTkNkV1ptWlhJb2RtRnNkV1VwS1Z4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMWNibHh1WTJ4aGMzTWdRMjl0Y0c5dVpXNTBJR1Y0ZEdWdVpITWdYMlYyWlc1MGMxOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNRjlmTGtWMlpXNTBSVzFwZEhSbGNpQjdYRzRnSUhOMFlYUnBZeUJWVUVSQlZFVmZSVlpGVGxRZ1BTQlZVRVJCVkVWZlJWWkZUbFE3WEc1Y2JpQWdXMUZWUlZWRlgxVlFSRUZVUlY5TlJWUklUMFJkS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6VzFCRlRrUkpUa2RmVTFSQlZFVmZWVkJFUVZSRlhTbGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JseHVJQ0FnSUhSb2FYTmJVRVZPUkVsT1IxOVRWRUZVUlY5VlVFUkJWRVZkSUQwZ1VISnZiV2x6WlM1eVpYTnZiSFpsS0NrN1hHNGdJQ0FnZEdocGMxdFFSVTVFU1U1SFgxTlVRVlJGWDFWUVJFRlVSVjB1ZEdobGJpaDBhR2x6VzBaTVZWTklYMVZRUkVGVVJWOU5SVlJJVDBSZExtSnBibVFvZEdocGN5a3BPMXh1SUNCOVhHNWNiaUFnVzBaTVZWTklYMVZRUkVGVVJWOU5SVlJJVDBSZEtDa2dlMXh1SUNBZ0lDOHZJRmRoY3lCMGFHVWdjM1JoZEdVZ2RYQmtZWFJsSUdOaGJtTmxiR3hsWkQ5Y2JpQWdJQ0JwWmlBb0lYUm9hWE5iVUVWT1JFbE9SMTlUVkVGVVJWOVZVRVJCVkVWZEtWeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnZEdocGN5NWxiV2wwS0ZWUVJFRlVSVjlGVmtWT1ZDazdYRzVjYmlBZ0lDQjBhR2x6VzFCRlRrUkpUa2RmVTFSQlZFVmZWVkJFUVZSRlhTQTlJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQmJTVTVKVkY5TlJWUklUMFJkS0NrZ2UxeHVJQ0FnSUhSb2FYTmJVMHRKVUY5VFZFRlVSVjlWVUVSQlZFVlRYU0E5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnWTI5dWMzUnlkV04wYjNJb1gycHBZaWtnZTF4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQXZMeUJDYVc1a0lHRnNiQ0JqYkdGemN5QnRaWFJvYjJSeklIUnZJRndpZEdocGMxd2lYRzRnSUNBZ1gzVjBhV3h6WDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4eFgxOHVZbWx1WkUxbGRHaHZaSE11WTJGc2JDaDBhR2x6TENCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlNrN1hHNWNiaUFnSUNCc1pYUWdhbWxpSUQwZ1gycHBZaUI4ZkNCN2ZUdGNibHh1SUNBZ0lHTnZibk4wSUdOeVpXRjBaVTVsZDFOMFlYUmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdiR1YwSUd4dlkyRnNVM1JoZEdVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIzaDVLR3h2WTJGc1UzUmhkR1VzSUh0Y2JpQWdJQ0FnSUNBZ1oyVjBPaUFvZEdGeVoyVjBMQ0J3Y205d1RtRnRaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBZWEpuWlhSYmNISnZjRTVoYldWZE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6WlhRNklDaDBZWEpuWlhRc0lIQnliM0JPWVcxbExDQjJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmpkWEp5Wlc1MFZtRnNkV1VnUFNCMFlYSm5aWFJiY0hKdmNFNWhiV1ZkTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBWbUZzZFdVZ1BUMDlJSFpoYkhWbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE5iVTB0SlVGOVRWRUZVUlY5VlVFUkJWRVZUWFNsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOYlVWVkZWVVZmVlZCRVFWUkZYMDFGVkVoUFJGMG9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIUmhjbWRsZEZ0d2NtOXdUbUZ0WlYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVUzUmhkR1ZWY0dSaGRHVmtLSEJ5YjNCT1lXMWxMQ0IyWVd4MVpTd2dZM1Z5Y21WdWRGWmhiSFZsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHeGxkQ0J3Y205d2N5QWdJQ0FnSUNBOUlFOWlhbVZqZEM1aGMzTnBaMjRvVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1N3Z2FtbGlMbkJ5YjNCeklIeDhJSHQ5S1R0Y2JpQWdJQ0JzWlhRZ1gyeHZZMkZzVTNSaGRHVWdQU0JqY21WaGRHVk9aWGRUZEdGMFpTZ3BPMXh1WEc0Z0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb2RHaHBjeXdnZTF4dUlDQWdJQ0FnVzFOTFNWQmZVMVJCVkVWZlZWQkVRVlJGVTEwNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQmJVRVZPUkVsT1IxOVRWRUZVUlY5VlVFUkJWRVZkT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSUNBZ0lDQWdJRzUxYkd3c1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ1cweEJVMVJmVWtWT1JFVlNYMVJKVFVWZE9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWlc1MWJXVnlZV0pzWlRvZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUY5MWRHbHNjMTlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTVY5ZkxtNXZkeWdwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUZ0RFFWQlVWVkpGWDFKRlJrVlNSVTVEUlY5TlJWUklUMFJUWFRvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0I3ZlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmFXUW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdhbWxpTG1sa0xGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHdjbTl3Y3ljNklIdGNiaUFnSUNBZ0lDQWdkM0pwZEdGaWJHVTZJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnY0hKdmNITXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk5vYVd4a2NtVnVKem9nZTF4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQnFhV0l1WTJocGJHUnlaVzRnZkh3Z1cxMHNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMk52Ym5SbGVIUW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lHcHBZaTVqYjI1MFpYaDBJSHg4SUU5aWFtVmpkQzVqY21WaGRHVW9iblZzYkNrc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0ozTjBZWFJsSnpvZ2UxeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdkbGREb2dJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZiRzlqWVd4VGRHRjBaVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2MyVjBPaUFnSUNBZ0lDQWdJQ0FvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdselZtRnNhV1JUZEdGMFpVOWlhbVZqZENoMllXeDFaU2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0JKYm5aaGJHbGtJSFpoYkhWbElHWnZjaUJjSW5Sb2FYTXVjM1JoZEdWY0lqb2dYQ0lrZTNaaGJIVmxmVndpTGlCUWNtOTJhV1JsWkNCY0luTjBZWFJsWENJZ2JYVnpkQ0JpWlNCaGJpQnBkR1Z5WVdKc1pTQnZZbXBsWTNRdVlDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WVhOemFXZHVLRjlzYjJOaGJGTjBZWFJsTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtHTm9hV3hrY21WdUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUY5cWFXSmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekpmWHk1eVpYTnZiSFpsUTJocGJHUnlaVzR1WTJGc2JDaDBhR2x6TENCamFHbHNaSEpsYmlrN1hHNGdJSDFjYmx4dUlDQnBjMHBwWWloMllXeDFaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9NQ3hmYW1saVgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHlYMTh1YVhOS2FXSnBjMmdwS0haaGJIVmxLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBjblZqZEVwcFlpaDJZV3gxWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvTUN4ZmFtbGlYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh5WDE4dVkyOXVjM1J5ZFdOMFNtbGlLU2gyWVd4MVpTazdYRzRnSUgxY2JseHVJQ0J3ZFhOb1VtVnVaR1Z5S0hKbGJtUmxjbEpsYzNWc2RDa2dlMXh1SUNBZ0lIUm9hWE11WlcxcGRDaFZVRVJCVkVWZlJWWkZUbFFzSUhKbGJtUmxjbEpsYzNWc2RDazdYRzRnSUgxY2JseHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUFnYjI1UWNtOXdWWEJrWVhSbFpDaHdjbTl3VG1GdFpTd2dibVYzVm1Gc2RXVXNJRzlzWkZaaGJIVmxLU0I3WEc0Z0lIMWNibHh1SUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ2IyNVRkR0YwWlZWd1pHRjBaV1FvY0hKdmNFNWhiV1VzSUc1bGQxWmhiSFZsTENCdmJHUldZV3gxWlNrZ2UxeHVJQ0I5WEc1Y2JpQWdZMkZ3ZEhWeVpWSmxabVZ5Wlc1alpTaHVZVzFsTENCcGJuUmxjbU5sY0hSdmNrTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2JHVjBJRzFsZEdodlpDQTlJSFJvYVhOYlEwRlFWRlZTUlY5U1JVWkZVa1ZPUTBWZlRVVlVTRTlFVTExYmJtRnRaVjA3WEc0Z0lDQWdhV1lnS0cxbGRHaHZaQ2xjYmlBZ0lDQWdJSEpsZEhWeWJpQnRaWFJvYjJRN1hHNWNiaUFnSUNCdFpYUm9iMlFnUFNBb1gzSmxaaXdnY0hKbGRtbHZkWE5TWldZcElEMCtJSHRjYmlBZ0lDQWdJR3hsZENCeVpXWWdQU0JmY21WbU8xeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2x1ZEdWeVkyVndkRzl5UTJGc2JHSmhZMnNnUFQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ0lDQWdJSEpsWmlBOUlHbHVkR1Z5WTJWd2RHOXlRMkZzYkdKaFkyc3VZMkZzYkNoMGFHbHpMQ0J5WldZc0lIQnlaWFpwYjNWelVtVm1LVHRjYmx4dUlDQWdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9kR2hwY3l3Z2UxeHVJQ0FnSUNBZ0lDQmJibUZ0WlYwNklIdGNiaUFnSUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0J5WldZc1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJwYm5SbGNtTmxjSFJ2Y2tOaGJHeGlZV05ySUNFOVBTQW5ablZ1WTNScGIyNG5LVnh1SUNBZ0lDQWdkR2hwYzF0RFFWQlVWVkpGWDFKRlJrVlNSVTVEUlY5TlJWUklUMFJUWFNBOUlHMWxkR2h2WkR0Y2JseHVJQ0FnSUhKbGRIVnliaUJ0WlhSb2IyUTdYRzRnSUgxY2JseHVJQ0JtYjNKalpWVndaR0YwWlNncElIdGNiaUFnSUNCMGFHbHpXMUZWUlZWRlgxVlFSRUZVUlY5TlJWUklUMFJkS0NrN1hHNGdJSDFjYmx4dUlDQm5aWFJUZEdGMFpTaHdjbTl3WlhKMGVWQmhkR2dzSUdSbFptRjFiSFJXWVd4MVpTa2dlMXh1SUNBZ0lHeGxkQ0J6ZEdGMFpTQTlJSFJvYVhNdWMzUmhkR1U3WEc0Z0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlEQXBYRzRnSUNBZ0lDQnlaWFIxY200Z2MzUmhkR1U3WEc1Y2JpQWdJQ0JwWmlBb1gzVjBhV3h6WDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4eFgxOHVhVzV6ZEdGdVkyVlBaaWh3Y205d1pYSjBlVkJoZEdnc0lDZHZZbXBsWTNRbktTa2dlMXh1SUNBZ0lDQWdiR1YwSUd0bGVYTWdJQ0FnSUNBZ0lEMGdUMkpxWldOMExtdGxlWE1vY0hKdmNHVnlkSGxRWVhSb0tTNWpiMjVqWVhRb1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aHdjbTl3WlhKMGVWQmhkR2dwS1R0Y2JpQWdJQ0FnSUd4bGRDQm1hVzVoYkZOMFlYUmxJQ0E5SUh0OU8xeHVYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2FXd2dQU0JyWlhsekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHdGxlU0E5SUd0bGVYTmJhVjA3WEc0Z0lDQWdJQ0FnSUd4bGRDQmJJSFpoYkhWbExDQnNZWE4wVUdGeWRDQmRJRDBnWDNWMGFXeHpYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh4WDE4dVptVjBZMmhFWldWd1VISnZjR1Z5ZEhrb2MzUmhkR1VzSUd0bGVTd2djSEp2Y0dWeWRIbFFZWFJvVzJ0bGVWMHNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYkdGemRGQmhjblFnUFQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUNBZ0lDQm1hVzVoYkZOMFlYUmxXMnhoYzNSUVlYSjBYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabWx1WVd4VGRHRjBaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUY5MWRHbHNjMTlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTVY5ZkxtWmxkR05vUkdWbGNGQnliM0JsY25SNUtITjBZWFJsTENCd2NtOXdaWEowZVZCaGRHZ3NJR1JsWm1GMWJIUldZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2MyVjBVM1JoZEdVb2RtRnNkV1VwSUh0Y2JpQWdJQ0JwWmlBb0lXbHpWbUZzYVdSVGRHRjBaVTlpYW1WamRDaDJZV3gxWlNrcFhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtHQkpiblpoYkdsa0lIWmhiSFZsSUdadmNpQmNJblJvYVhNdWMyVjBVM1JoZEdWY0lqb2dYQ0lrZTNaaGJIVmxmVndpTGlCUWNtOTJhV1JsWkNCY0luTjBZWFJsWENJZ2JYVnpkQ0JpWlNCaGJpQnBkR1Z5WVdKc1pTQnZZbXBsWTNRdVlDazdYRzVjYmlBZ0lDQlBZbXBsWTNRdVlYTnphV2R1S0hSb2FYTXVjM1JoZEdVc0lIWmhiSFZsS1R0Y2JpQWdmVnh1WEc0Z0lITmxkRk4wWVhSbFVHRnpjMmwyWlNoMllXeDFaU2tnZTF4dUlDQWdJR2xtSUNnaGFYTldZV3hwWkZOMFlYUmxUMkpxWldOMEtIWmhiSFZsS1NsY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1lFbHVkbUZzYVdRZ2RtRnNkV1VnWm05eUlGd2lkR2hwY3k1elpYUlRkR0YwWlZCaGMzTnBkbVZjSWpvZ1hDSWtlM1poYkhWbGZWd2lMaUJRY205MmFXUmxaQ0JjSW5OMFlYUmxYQ0lnYlhWemRDQmlaU0JoYmlCcGRHVnlZV0pzWlNCdlltcGxZM1F1WUNrN1hHNWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdkR2hwYzF0VFMwbFFYMU5VUVZSRlgxVlFSRUZVUlZOZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9kR2hwY3k1emRHRjBaU3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQjBhR2x6VzFOTFNWQmZVMVJCVkVWZlZWQkVRVlJGVTEwZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCemFHOTFiR1JWY0dSaGRHVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCa1pYTjBjbTk1S0NrZ2UxeHVJQ0FnSUdSbGJHVjBaU0IwYUdsekxuTjBZWFJsTzF4dUlDQWdJR1JsYkdWMFpTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbU52Ym5SbGVIUTdYRzRnSUNBZ1pHVnNaWFJsSUhSb2FYTmJRMEZRVkZWU1JWOVNSVVpGVWtWT1EwVmZUVVZVU0U5RVUxMDdYRzRnSUNBZ2RHaHBjeTVqYkdWaGNrRnNiRVJsWW05MWJtTmxjeWdwTzF4dUlDQjlYRzVjYmlBZ2NtVnVaR1Z5VjJGcGRHbHVaeWdwSUh0Y2JpQWdmVnh1WEc0Z0lISmxibVJsY2loamFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYUdsc1pISmxianRjYmlBZ2ZWeHVYRzRnSUhWd1pHRjBaV1FvS1NCN1hHNGdJSDFjYmx4dUlDQmpiMjFpYVc1bFYybDBhQ2h6WlhBc0lDNHVMbUZ5WjNNcElIdGNiaUFnSUNCc1pYUWdabWx1WVd4QmNtZHpJRDBnYm1WM0lGTmxkQ2dwTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUdGeVozTXViR1Z1WjNSb095QnBJRHdnYVd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnYkdWMElHRnlaeUE5SUdGeVozTmJhVjA3WEc0Z0lDQWdJQ0JwWmlBb0lXRnlaeWxjYmlBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc1Y2JpQWdJQ0FnSUdsbUlDaGZkWFJwYkhOZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6RmZYeTVwYm5OMFlXNWpaVTltS0dGeVp5d2dKM04wY21sdVp5Y3BLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlhNZ1BTQmhjbWN1YzNCc2FYUW9jMlZ3S1M1bWFXeDBaWElvWDNWMGFXeHpYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh4WDE4dWFYTk9iM1JGYlhCMGVTazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUhaaGJIVmxjeTVzWlc1bmRHZzdJR2tnUENCcGJEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhaaGJIVmxJRDBnZG1Gc2RXVnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lHWnBibUZzUVhKbmN5NWhaR1FvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZWEpuS1NrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnZG1Gc2RXVnpJRDBnWVhKbkxtWnBiSFJsY2lnb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lYWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGZmRYUnBiSE5mYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpGZlh5NXBibk4wWVc1alpVOW1LSFpoYkhWbExDQW5jM1J5YVc1bkp5a3BYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNWMGFXeHpYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh4WDE4dWFYTk9iM1JGYlhCMGVTaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdMQ0JwYkNBOUlIWmhiSFZsY3k1c1pXNW5kR2c3SUdrZ1BDQnBiRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsSUQwZ2RtRnNkV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJR1pwYm1Gc1FYSm5jeTVoWkdRb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGOTFkR2xzYzE5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1WOWZMbWx1YzNSaGJtTmxUMllvWVhKbkxDQW5iMkpxWldOMEp5a3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aGhjbWNwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYVd3Z1BTQnJaWGx6TG14bGJtZDBhRHNnYVNBOElHbHNPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2EyVjVJQ0FnUFNCclpYbHpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0IyWVd4MVpTQTlJR0Z5WjF0clpYbGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHVZV3hCY21kekxtUmxiR1YwWlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1ptbHVZV3hCY21kekxtRmtaQ2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbVp5YjIwb1ptbHVZV3hCY21kektTNXFiMmx1S0hObGNDQjhmQ0FuSnlrN1hHNGdJSDFjYmx4dUlDQmpiR0Z6YzJWektDNHVMbUZ5WjNNcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiMjFpYVc1bFYybDBhQ2duSUNjc0lDNHVMbUZ5WjNNcE8xeHVJQ0I5WEc1Y2JpQWdaWGgwY21GamRFTm9hV3hrY21WdUtGOXdZWFIwWlhKdWN5d2dZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQnNaWFFnWlhoMGNtRmpkR1ZrSUQwZ2UzMDdYRzRnSUNBZ2JHVjBJSEJoZEhSbGNtNXpJQ0E5SUY5d1lYUjBaWEp1Y3p0Y2JpQWdJQ0JzWlhRZ2FYTkJjbkpoZVNBZ0lEMGdRWEp5WVhrdWFYTkJjbkpoZVNod1lYUjBaWEp1Y3lrN1hHNWNiaUFnSUNCamIyNXpkQ0JwYzAxaGRHTm9JRDBnS0dwcFlpa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElHcHBZbFI1Y0dVZ1BTQnFhV0l1Vkhsd1pUdGNiaUFnSUNBZ0lHbG1JQ2hmZFhScGJITmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekZmWHk1cGJuTjBZVzVqWlU5bUtHcHBZbFI1Y0dVc0lDZHpkSEpwYm1jbktTbGNiaUFnSUNBZ0lDQWdhbWxpVkhsd1pTQTlJR3BwWWxSNWNHVXVkRzlNYjNkbGNrTmhjMlVvS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLR2x6UVhKeVlYa3BJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2NHRjBkR1Z5Ym5NdWJHVnVaM1JvT3lCcElEd2dhV3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQndZWFIwWlhKdUlEMGdjR0YwZEdWeWJuTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRjkxZEdsc2MxOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNVjlmTG1sdWMzUmhibU5sVDJZb2NHRjBkR1Z5Yml3Z0ozTjBjbWx1WnljcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnliaUE5SUhCaGRIUmxjbTR1ZEc5TWIzZGxja05oYzJVb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHFhV0pVZVhCbElEMDlQU0J3WVhSMFpYSnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxlSFJ5WVdOMFpXUmJjR0YwZEdWeWJsMGdQU0JxYVdJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR3hsZENCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2NHRjBkR1Z5Ym5NcE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2FXd2dQU0JyWlhsekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdhMlY1SUNBZ0lDQTlJR3RsZVhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIQmhkSFJsY200Z1BTQndZWFIwWlhKdWMxdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUTdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9YM1YwYVd4elgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHhYMTh1YVc1emRHRnVZMlZQWmlod1lYUjBaWEp1TENCU1pXZEZlSEFwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdjR0YwZEdWeWJpNTBaWE4wS0dwcFlsUjVjR1VwTzF4dUlDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tGOTFkR2xzYzE5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1WOWZMbWx1YzNSaGJtTmxUMllvY0dGMGRHVnliaXdnSjNOMGNtbHVaeWNwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdLSEJoZEhSbGNtNHVkRzlNYjNkbGNrTmhjMlVvS1NBOVBUMGdhbWxpVkhsd1pTazdYRzRnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJRDBnS0hCaGRIUmxjbTRnUFQwOUlHcHBZbFI1Y0dVcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhoMGNtRmpkR1ZrVzJ0bGVWMGdQU0JxYVdJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNCbGVIUnlZV04wWldRdWNtVnRZV2x1YVc1blEyaHBiR1J5Wlc0Z1BTQmphR2xzWkhKbGJpNW1hV3gwWlhJb0tHcHBZaWtnUFQ0Z0lXbHpUV0YwWTJnb2FtbGlLU2s3WEc0Z0lDQWdjbVYwZFhKdUlHVjRkSEpoWTNSbFpEdGNiaUFnZlZ4dVhHNGdJR1JsWW05MWJtTmxLR1oxYm1Nc0lIUnBiV1VzSUY5cFpDa2dlMXh1SUNBZ0lHTnZibk4wSUdOc1pXRnlVR1Z1WkdsdVoxUnBiV1Z2ZFhRZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9jR1Z1WkdsdVoxUnBiV1Z5SUNZbUlIQmxibVJwYm1kVWFXMWxjaTUwYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaHdaVzVrYVc1blZHbHRaWEl1ZEdsdFpXOTFkQ2s3WEc0Z0lDQWdJQ0FnSUhCbGJtUnBibWRVYVcxbGNpNTBhVzFsYjNWMElEMGdiblZzYkR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnZG1GeUlHbGtJRDBnS0NGZmFXUXBJRDhnS0NjbklDc2dablZ1WXlrZ09pQmZhV1E3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbVJsWW05MWJtTmxWR2x0WlhKektTQjdYRzRnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dKMlJsWW05MWJtTmxWR2x0WlhKekp5d2dlMXh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nSUNBZ0lIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklDQWdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ3Wlc1a2FXNW5WR2x0WlhJZ1BTQjBhR2x6TG1SbFltOTFibU5sVkdsdFpYSnpXMmxrWFR0Y2JpQWdJQ0JwWmlBb0lYQmxibVJwYm1kVWFXMWxjaWxjYmlBZ0lDQWdJSEJsYm1ScGJtZFVhVzFsY2lBOUlIUm9hWE11WkdWaWIzVnVZMlZVYVcxbGNuTmJhV1JkSUQwZ2UzMDdYRzVjYmlBZ0lDQndaVzVrYVc1blZHbHRaWEl1Wm5WdVl5QTlJR1oxYm1NN1hHNGdJQ0FnWTJ4bFlYSlFaVzVrYVc1blZHbHRaVzkxZENncE8xeHVYRzRnSUNBZ2RtRnlJSEJ5YjIxcGMyVWdQU0J3Wlc1a2FXNW5WR2x0WlhJdWNISnZiV2x6WlR0Y2JpQWdJQ0JwWmlBb0lYQnliMjFwYzJVZ2ZId2dJWEJ5YjIxcGMyVXVjR1Z1WkdsdVp5Z3BLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2MzUmhkSFZ6SUQwZ0ozQmxibVJwYm1jbk8xeHVJQ0FnSUNBZ2JHVjBJSEpsYzI5c2RtVTdYRzVjYmlBZ0lDQWdJSEJ5YjIxcGMyVWdQU0J3Wlc1a2FXNW5WR2x0WlhJdWNISnZiV2x6WlNBOUlHNWxkeUJRY205dGFYTmxLQ2hmY21WemIyeDJaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaWE52YkhabElEMGdYM0psYzI5c2RtVTdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnY0hKdmJXbHpaUzV5WlhOdmJIWmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2MzUmhkSFZ6SUNFOVBTQW5jR1Z1WkdsdVp5Y3BYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUhOMFlYUjFjeUE5SUNkbWRXeG1hV3hzWldRbk8xeHVJQ0FnSUNBZ0lDQmpiR1ZoY2xCbGJtUnBibWRVYVcxbGIzVjBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1ZpYjNWdVkyVlVhVzFsY25OYmFXUmRJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhCbGJtUnBibWRVYVcxbGNpNW1kVzVqSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJSEpsZENBOUlIQmxibVJwYm1kVWFXMWxjaTVtZFc1akxtTmhiR3dvZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxkQ0JwYm5OMFlXNWpaVzltSUZCeWIyMXBjMlVnZkh3Z0tISmxkQ0FtSmlCMGVYQmxiMllnY21WMExuUm9aVzRnUFQwOUlDZG1kVzVqZEdsdmJpY3BLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBMblJvWlc0b0tIWmhiSFZsS1NBOVBpQnlaWE52YkhabEtIWmhiSFZsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWFFwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnY0hKdmJXbHpaUzVqWVc1alpXd2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSE4wWVhSMWN5QTlJQ2R5WldwbFkzUmxaQ2M3WEc0Z0lDQWdJQ0FnSUdOc1pXRnlVR1Z1WkdsdVoxUnBiV1Z2ZFhRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pXSnZkVzVqWlZScGJXVnljMXRwWkYwZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lIQnliMjFwYzJVdWNtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdjSEp2YldselpTNXBjMUJsYm1ScGJtY2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9jM1JoZEhWeklEMDlQU0FuY0dWdVpHbHVaeWNwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3Wlc1a2FXNW5WR2x0WlhJdWRHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9jSEp2YldselpTNXlaWE52YkhabExDQW9kR2x0WlNBOVBTQnVkV3hzS1NBL0lESTFNQ0E2SUhScGJXVXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIQnliMjFwYzJVN1hHNGdJSDFjYmx4dUlDQmpiR1ZoY2tSbFltOTFibU5sS0dsa0tTQjdYRzRnSUNBZ2RtRnlJSEJsYm1ScGJtZFVhVzFsY2lBOUlIUm9hWE11WkdWaWIzVnVZMlZVYVcxbGNuTmJhV1JkTzF4dUlDQWdJR2xtSUNod1pXNWthVzVuVkdsdFpYSWdQVDBnYm5Wc2JDbGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JseHVJQ0FnSUdsbUlDaHdaVzVrYVc1blZHbHRaWEl1ZEdsdFpXOTFkQ2xjYmlBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENod1pXNWthVzVuVkdsdFpYSXVkR2x0Wlc5MWRDazdYRzVjYmlBZ0lDQnBaaUFvY0dWdVpHbHVaMVJwYldWeUxuQnliMjFwYzJVcFhHNGdJQ0FnSUNCd1pXNWthVzVuVkdsdFpYSXVjSEp2YldselpTNWpZVzVqWld3b0tUdGNiaUFnZlZ4dVhHNGdJR05zWldGeVFXeHNSR1ZpYjNWdVkyVnpLQ2tnZTF4dUlDQWdJR3hsZENCa1pXSnZkVzVqWlZScGJXVnljeUFnUFNCMGFHbHpMbVJsWW05MWJtTmxWR2x0WlhKeklIeDhJSHQ5TzF4dUlDQWdJR3hsZENCcFpITWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCUFltcGxZM1F1YTJWNWN5aGtaV0p2ZFc1alpWUnBiV1Z5Y3lrN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNQ3dnYVd3Z1BTQnBaSE11YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lsY2JpQWdJQ0FnSUhSb2FYTXVZMnhsWVhKRVpXSnZkVzVqWlNocFpITmJhVjBwTzF4dUlDQjlYRzVjYmlBZ1oyVjBSV3hsYldWdWRFUmhkR0VvWld4bGJXVnVkQ2tnZTF4dUlDQWdJR3hsZENCa1lYUmhJRDBnWld4bGJXVnVkRVJoZEdGRFlXTm9aUzVuWlhRb1pXeGxiV1Z1ZENrN1hHNGdJQ0FnYVdZZ0tDRmtZWFJoS1NCN1hHNGdJQ0FnSUNCa1lYUmhJRDBnZTMwN1hHNGdJQ0FnSUNCbGJHVnRaVzUwUkdGMFlVTmhZMmhsTG5ObGRDaGxiR1Z0Wlc1MExDQmtZWFJoS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdaR0YwWVR0Y2JpQWdmVnh1ZlZ4dVhHNWNiaThxS2lvdklIMHBMRnh1WEc0dktpb3FMeUJjSWk0dmJHbGlMMlYyWlc1MGN5NXFjMXdpT2x4dUx5b2hLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvaEtseGNYRzRnSUNFcUtpb2dMaTlzYVdJdlpYWmxiblJ6TG1weklDb3FLaUZjYmlBZ1hGd3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JpOHFLaW92SUNnb1gxOTFiblZ6WldSZmQyVmljR0ZqYTE5ZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsWDE4c0lGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHNJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThwSUQwK0lIdGNibHh1WDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eUtGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHBPMXh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThzSUh0Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKRmRtVnVkRVZ0YVhSMFpYSmNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z1JYWmxiblJGYldsMGRHVnlLVnh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z2ZTazdYRzVqYjI1emRDQkZWa1ZPVkY5TVNWTlVSVTVGVWxNZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saWN5OWxkbVZ1ZEhNdmJHbHpkR1Z1WlhKekp5azdYRzVjYm1Oc1lYTnpJRVYyWlc1MFJXMXBkSFJsY2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLSFJvYVhNc0lIdGNiaUFnSUNBZ0lGdEZWa1ZPVkY5TVNWTlVSVTVGVWxOZE9pQjdYRzRnSUNBZ0lDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQWdJQ0FnSUNBZ2JtVjNJRTFoY0NncExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR0ZrWkV4cGMzUmxibVZ5S0dWMlpXNTBUbUZ0WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHeHBjM1JsYm1WeUlDRTlQU0FuWm5WdVkzUnBiMjRuS1Z4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblJYWmxiblFnYkdsemRHVnVaWElnYlhWemRDQmlaU0JoSUcxbGRHaHZaQ2NwTzF4dVhHNGdJQ0FnYkdWMElHVjJaVzUwVFdGd0lDQTlJSFJvYVhOYlJWWkZUbFJmVEVsVFZFVk9SVkpUWFR0Y2JpQWdJQ0JzWlhRZ2MyTnZjR1VnSUNBZ0lEMGdaWFpsYm5STllYQXVaMlYwS0dWMlpXNTBUbUZ0WlNrN1hHNWNiaUFnSUNCcFppQW9JWE5qYjNCbEtTQjdYRzRnSUNBZ0lDQnpZMjl3WlNBOUlGdGRPMXh1SUNBZ0lDQWdaWFpsYm5STllYQXVjMlYwS0dWMlpXNTBUbUZ0WlN3Z2MyTnZjR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5qYjNCbExuQjFjMmdvYkdsemRHVnVaWElwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYmx4dUlDQnlaVzF2ZG1WTWFYTjBaVzVsY2lobGRtVnVkRTVoYldVc0lHeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnNhWE4wWlc1bGNpQWhQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owVjJaVzUwSUd4cGMzUmxibVZ5SUcxMWMzUWdZbVVnWVNCdFpYUm9iMlFuS1R0Y2JseHVJQ0FnSUd4bGRDQmxkbVZ1ZEUxaGNDQWdQU0IwYUdselcwVldSVTVVWDB4SlUxUkZUa1ZTVTEwN1hHNGdJQ0FnYkdWMElITmpiM0JsSUNBZ0lDQTlJR1YyWlc1MFRXRndMbWRsZENobGRtVnVkRTVoYldVcE8xeHVJQ0FnSUdsbUlDZ2hjMk52Y0dVcFhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0JwYm1SbGVDQTlJSE5qYjNCbExtbHVaR1Y0VDJZb2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUdsbUlDaHBibVJsZUNBK1BTQXdLVnh1SUNBZ0lDQWdjMk52Y0dVdWMzQnNhV05sS0dsdVpHVjRMQ0F4S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdjbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpLR1YyWlc1MFRtRnRaU2tnZTF4dUlDQWdJR3hsZENCbGRtVnVkRTFoY0NBZ1BTQjBhR2x6VzBWV1JVNVVYMHhKVTFSRlRrVlNVMTA3WEc0Z0lDQWdhV1lnS0NGbGRtVnVkRTFoY0M1b1lYTW9aWFpsYm5ST1lXMWxLU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dVhHNGdJQ0FnWlhabGJuUk5ZWEF1YzJWMEtHVjJaVzUwVG1GdFpTd2dXMTBwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYmx4dUlDQmxiV2wwS0dWMlpXNTBUbUZ0WlN3Z0xpNHVZWEpuY3lrZ2UxeHVJQ0FnSUd4bGRDQmxkbVZ1ZEUxaGNDQWdQU0IwYUdselcwVldSVTVVWDB4SlUxUkZUa1ZTVTEwN1hHNGdJQ0FnYkdWMElITmpiM0JsSUNBZ0lDQTlJR1YyWlc1MFRXRndMbWRsZENobGRtVnVkRTVoYldVcE8xeHVJQ0FnSUdsbUlDZ2hjMk52Y0dVZ2ZId2djMk52Y0dVdWJHVnVaM1JvSUQwOVBTQXdLVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ2MyTnZjR1V1YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJR1YyWlc1MFEyRnNiR0poWTJzZ1BTQnpZMjl3WlZ0cFhUdGNiaUFnSUNBZ0lHVjJaVzUwUTJGc2JHSmhZMnN1WVhCd2JIa29kR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCdmJtTmxLR1YyWlc1MFRtRnRaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0JzWlhRZ1puVnVZeUE5SUNndUxpNWhjbWR6S1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG05bVppaGxkbVZ1ZEU1aGJXVXNJR1oxYm1NcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUd4cGMzUmxibVZ5S0M0dUxtRnlaM01wTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dmJpaGxkbVZ1ZEU1aGJXVXNJR1oxYm1NcE8xeHVJQ0I5WEc1Y2JpQWdiMjRvWlhabGJuUk9ZVzFsTENCc2FYTjBaVzVsY2lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtRmtaRXhwYzNSbGJtVnlLR1YyWlc1MFRtRnRaU3dnYkdsemRHVnVaWElwTzF4dUlDQjlYRzVjYmlBZ2IyWm1LR1YyWlc1MFRtRnRaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXMXZkbVZNYVhOMFpXNWxjaWhsZG1WdWRFNWhiV1VzSUd4cGMzUmxibVZ5S1R0Y2JpQWdmVnh1WEc0Z0lHVjJaVzUwVG1GdFpYTW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlFRnljbUY1TG1aeWIyMG9kR2hwYzF0RlZrVk9WRjlNU1ZOVVJVNUZVbE5kTG10bGVYTW9LU2s3WEc0Z0lIMWNibHh1SUNCc2FYTjBaVzVsY2tOdmRXNTBLR1YyWlc1MFRtRnRaU2tnZTF4dUlDQWdJR3hsZENCbGRtVnVkRTFoY0NBZ1BTQjBhR2x6VzBWV1JVNVVYMHhKVTFSRlRrVlNVMTA3WEc0Z0lDQWdiR1YwSUhOamIzQmxJQ0FnSUNBOUlHVjJaVzUwVFdGd0xtZGxkQ2hsZG1WdWRFNWhiV1VwTzF4dUlDQWdJR2xtSUNnaGMyTnZjR1VwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmx4dUlDQWdJSEpsZEhWeWJpQnpZMjl3WlM1c1pXNW5kR2c3WEc0Z0lIMWNibHh1SUNCc2FYTjBaVzVsY25Nb1pYWmxiblJPWVcxbEtTQjdYRzRnSUNBZ2JHVjBJR1YyWlc1MFRXRndJQ0E5SUhSb2FYTmJSVlpGVGxSZlRFbFRWRVZPUlZKVFhUdGNiaUFnSUNCc1pYUWdjMk52Y0dVZ0lDQWdJRDBnWlhabGJuUk5ZWEF1WjJWMEtHVjJaVzUwVG1GdFpTazdYRzRnSUNBZ2FXWWdLQ0Z6WTI5d1pTbGNiaUFnSUNBZ0lISmxkSFZ5YmlCYlhUdGNibHh1SUNBZ0lISmxkSFZ5YmlCelkyOXdaUzV6YkdsalpTZ3BPMXh1SUNCOVhHNTlYRzVjYmx4dUx5b3FLaThnZlNrc1hHNWNiaThxS2lvdklGd2lMaTlzYVdJdmFtbGlMbXB6WENJNlhHNHZLaUVxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lFcVhGeGNiaUFnSVNvcUtpQXVMMnhwWWk5cWFXSXVhbk1nS2lvcUlWeHVJQ0JjWENvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVMeW9xS2k4Z0tDaGZYM1Z1ZFhObFpGOTNaV0p3WVdOclgxOWZkMlZpY0dGamExOXRiMlIxYkdWZlh5d2dYMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ1BUNGdlMXh1WEc1ZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSW9YMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeWs3WEc0dktpQm9ZWEp0YjI1NUlHVjRjRzl5ZENBcUx5QmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFvWDE5M1pXSndZV05yWDJWNGNHOXlkSE5mWHl3Z2UxeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0lpUmNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z0pDa3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lTa2xDWENJNklDZ3BJRDArSUNndktpQmlhVzVrYVc1bklDb3ZJRXBKUWlrc1hHNHZLaUJvWVhKdGIyNTVJR1Y0Y0c5eWRDQXFMeUFnSUZ3aVNrbENYMEpCVWxKRlRsd2lPaUFvS1NBOVBpQW9MeW9nWW1sdVpHbHVaeUFxTHlCS1NVSmZRa0ZTVWtWT0tTeGNiaThxSUdoaGNtMXZibmtnWlhod2IzSjBJQ292SUNBZ1hDSktTVUpmVUZKUFdGbGNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z1NrbENYMUJTVDFoWktTeGNiaThxSUdoaGNtMXZibmtnWlhod2IzSjBJQ292SUNBZ1hDSkthV0pjSWpvZ0tDa2dQVDRnS0M4cUlHSnBibVJwYm1jZ0tpOGdTbWxpS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKamIyNXpkSEoxWTNSS2FXSmNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z1kyOXVjM1J5ZFdOMFNtbGlLU3hjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0ptWVdOMGIzSjVYQ0k2SUNncElEMCtJQ2d2S2lCaWFXNWthVzVuSUNvdklHWmhZM1J2Y25rcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0ltbHpTbWxpYVhOb1hDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUdselNtbGlhWE5vS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKeVpYTnZiSFpsUTJocGJHUnlaVzVjSWpvZ0tDa2dQVDRnS0M4cUlHSnBibVJwYm1jZ0tpOGdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtWeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnZlNrN1hHNHZLaUJvWVhKdGIyNTVJR2x0Y0c5eWRDQXFMeUIyWVhJZ1pHVmhaR0psWldaZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpCZlh5QTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTHlvaElHUmxZV1JpWldWbUlDb3ZJRndpTGk5dWIyUmxYMjF2WkhWc1pYTXZaR1ZoWkdKbFpXWXZiR2xpTDJsdVpHVjRMbXB6WENJcE8xeHVMeW9nYUdGeWJXOXVlU0JwYlhCdmNuUWdLaThnZG1GeUlGOTFkR2xzYzE5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1WOWZJRDBnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlndktpRWdMaTkxZEdsc2N5NXFjeUFxTHlCY0lpNHZiR2xpTDNWMGFXeHpMbXB6WENJcE8xeHVYRzVjYmx4dVkyeGhjM01nU21saUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb1ZIbHdaU3dnY0hKdmNITXNJR05vYVd4a2NtVnVLU0I3WEc0Z0lDQWdiR1YwSUdSbFptRjFiSFJRY205d2N5QTlJQ2hVZVhCbElDWW1JRlI1Y0dVdWNISnZjSE1wSUQ4Z1ZIbHdaUzV3Y205d2N5QTZJSHQ5TzF4dVhHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9kR2hwY3l3Z2UxeHVJQ0FnSUNBZ0oxUjVjR1VuT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdWSGx3WlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNISnZjSE1uT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdleUF1TGk1a1pXWmhkV3gwVUhKdmNITXNJQzR1TGlod2NtOXdjeUI4ZkNCN2ZTa2dmU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FuWTJocGJHUnlaVzRuT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdYM1YwYVd4elgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHhYMTh1Wm14aGRIUmxia0Z5Y21GNUtHTm9hV3hrY21WdUtTeGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1WTI5dWMzUWdTa2xDWDBKQlVsSkZUaUFnUFNCVGVXMWliMnd1Wm05eUtDZEFhbWxpY3k1aVlYSnlaVzRuS1R0Y2JtTnZibk4wSUVwSlFsOVFVazlZV1NBZ0lEMGdVM2x0WW05c0xtWnZjaWduUUdwcFluTXVjSEp2ZUhrbktUdGNibU52Ym5OMElFcEpRaUFnSUNBZ0lDQWdJRDBnVTNsdFltOXNMbVp2Y2lnblFHcHBZbk11YW1saUp5azdYRzVjYm1aMWJtTjBhVzl1SUdaaFkzUnZjbmtvU21saVEyeGhjM01wSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDUW9YM1I1Y0dVc0lIQnliM0J6SUQwZ2UzMHBJSHRjYmlBZ0lDQnBaaUFvYVhOS2FXSnBjMmdvWDNSNWNHVXBLVnh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVW1WalpXbDJaV1FnWVNCcWFXSWdZblYwSUdWNGNHVmpkR1ZrSUdFZ1kyOXRjRzl1Wlc1MExpY3BPMXh1WEc0Z0lDQWdiR1YwSUZSNWNHVWdQU0FvWDNSNWNHVWdQVDBnYm5Wc2JDa2dQeUJLU1VKZlVGSlBXRmtnT2lCZmRIbHdaVHRjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR0poY25KbGJpZ3VMaTVmWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0FnSUd4bGRDQmphR2xzWkhKbGJpQTlJRjlqYUdsc1pISmxianRjYmx4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnYW1saUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1gzVjBhV3h6WDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4eFgxOHVhVzV6ZEdGdVkyVlBaaWhVZVhCbExDQW5jSEp2YldselpTY3BJSHg4SUdOb2FXeGtjbVZ1TG5OdmJXVW9LR05vYVd4a0tTQTlQaUJmZFhScGJITmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekZmWHk1cGJuTjBZVzVqWlU5bUtHTm9hV3hrTENBbmNISnZiV2x6WlNjcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbUZzYkNoYklGUjVjR1VnWFM1amIyNWpZWFFvWTJocGJHUnlaVzRwS1M1MGFHVnVLQ2hoYkd3cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGUjVjR1VnUFNCaGJHeGJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR2xzWkhKbGJpQTlJR0ZzYkM1emJHbGpaU2d4S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCS2FXSkRiR0Z6Y3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnVkhsd1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05vYVd4a2NtVnVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU21saVEyeGhjM01vWEc0Z0lDQWdJQ0FnSUNBZ1ZIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNCd2NtOXdjeXhjYmlBZ0lDQWdJQ0FnSUNCamFHbHNaSEpsYml4Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb2FtbGlMQ0I3WEc0Z0lDQWdJQ0FnSUZ0S1NVSmRPaUI3WEc0Z0lDQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmJaR1ZoWkdKbFpXWmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6QmZYeTVwWkZONWJWMDZJSHRjYmlBZ0lDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lDZ3BJRDArSUZSNWNHVXNYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdwcFlqdGNiaUFnSUNCOVhHNWNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhpWVhKeVpXNHNJSHRjYmlBZ0lDQWdJRnRLU1VKZlFrRlNVa1ZPWFRvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JsYm5WdFpYSmhZbXhsT2lBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0lDQWdJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdXMlJsWVdSaVpXVm1YMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHdYMTh1YVdSVGVXMWRPaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdLQ2tnUFQ0Z1ZIbHdaU3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZbUZ5Y21WdU8xeHVJQ0I5TzF4dWZWeHVYRzVqYjI1emRDQWtJRDBnWm1GamRHOXllU2hLYVdJcE8xeHVYRzVtZFc1amRHbHZiaUJwYzBwcFltbHphQ2gyWVd4MVpTa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNoMllXeDFaVnRLU1VKZlFrRlNVa1ZPWFNCOGZDQjJZV3gxWlZ0S1NVSmRLU2xjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQnBaaUFvZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJLYVdJcFhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCamIyNXpkSEoxWTNSS2FXSW9kbUZzZFdVcElIdGNiaUFnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1NtbGlLVnh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaVHRjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnYVdZZ0tIWmhiSFZsVzBwSlFsOUNRVkpTUlU1ZEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxLQ2tvS1R0Y2JpQWdJQ0JsYkhObElHbG1JQ2gyWVd4MVpWdEtTVUpkS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbEtDazdYRzRnSUgxY2JseHVJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkamIyNXpkSEoxWTNSS2FXSTZJRkJ5YjNacFpHVmtJSFpoYkhWbElHbHpJRzV2ZENCaElFcHBZaTRuS1R0Y2JuMWNibHh1WVhONWJtTWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpVTm9hV3hrY21WdUtGOWphR2xzWkhKbGJpa2dlMXh1SUNCc1pYUWdZMmhwYkdSeVpXNGdQU0JmWTJocGJHUnlaVzQ3WEc1Y2JpQWdhV1lnS0Y5MWRHbHNjMTlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTVY5ZkxtbHVjM1JoYm1ObFQyWW9ZMmhwYkdSeVpXNHNJQ2R3Y205dGFYTmxKeWtwWEc0Z0lDQWdZMmhwYkdSeVpXNGdQU0JoZDJGcGRDQmphR2xzWkhKbGJqdGNibHh1SUNCcFppQW9JU2dvZEdocGN5NXBjMGwwWlhKaFlteGxRMmhwYkdRZ2ZId2dYM1YwYVd4elgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHhYMTh1YVhOSmRHVnlZV0pzWlVOb2FXeGtLUzVqWVd4c0tIUm9hWE1zSUdOb2FXeGtjbVZ1S1NrZ0ppWWdLR2x6U21saWFYTm9LR05vYVd4a2NtVnVLU0I4ZkNBb0tIUm9hWE11YVhOV1lXeHBaRU5vYVd4a0lIeDhJRjkxZEdsc2MxOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNVjlmTG1selZtRnNhV1JEYUdsc1pDa3VZMkZzYkNoMGFHbHpMQ0JqYUdsc1pISmxiaWtwS1NsY2JpQWdJQ0JqYUdsc1pISmxiaUE5SUZzZ1kyaHBiR1J5Wlc0Z1hUdGNibHh1SUNCc1pYUWdjSEp2YldselpYTWdQU0JmZFhScGJITmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekZmWHk1cGRHVnlZWFJsS0dOb2FXeGtjbVZ1TENCaGMzbHVZeUFvZXlCMllXeDFaVG9nWDJOb2FXeGtJSDBwSUQwK0lIdGNiaUFnSUNCc1pYUWdZMmhwYkdRZ1BTQW9YM1YwYVd4elgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHhYMTh1YVc1emRHRnVZMlZQWmloZlkyaHBiR1FzSUNkd2NtOXRhWE5sSnlrcElEOGdZWGRoYVhRZ1gyTm9hV3hrSURvZ1gyTm9hV3hrTzF4dVhHNGdJQ0FnYVdZZ0tHbHpTbWxpYVhOb0tHTm9hV3hrS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUJoZDJGcGRDQmpiMjV6ZEhKMVkzUkthV0lvWTJocGJHUXBPMXh1SUNBZ0lHVnNjMlZjYmlBZ0lDQWdJSEpsZEhWeWJpQmphR2xzWkR0Y2JpQWdmU2s3WEc1Y2JpQWdjbVYwZFhKdUlHRjNZV2wwSUZCeWIyMXBjMlV1WVd4c0tIQnliMjFwYzJWektUdGNibjFjYmx4dVhHNHZLaW9xTHlCOUtTeGNibHh1THlvcUtpOGdYQ0l1TDJ4cFlpOXlaVzVrWlhKbGNuTXZZMjl0YldWdWRDMWxiR1Z0Wlc1MExtcHpYQ0k2WEc0dktpRXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvaEtseGNYRzRnSUNFcUtpb2dMaTlzYVdJdmNtVnVaR1Z5WlhKekwyTnZiVzFsYm5RdFpXeGxiV1Z1ZEM1cWN5QXFLaW9oWEc0Z0lGeGNLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUwxeHVMeW9xS2k4Z0tDaGZYM1Z1ZFhObFpGOTNaV0p3WVdOclgxOWZkMlZpY0dGamExOXRiMlIxYkdWZlh5d2dYMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeXdnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlrZ1BUNGdlMXh1WEc1ZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSW9YMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeWs3WEc0dktpQm9ZWEp0YjI1NUlHVjRjRzl5ZENBcUx5QmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFvWDE5M1pXSndZV05yWDJWNGNHOXlkSE5mWHl3Z2UxeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0lrTnZiVzFsYm5SRmJHVnRaVzUwWENJNklDZ3BJRDArSUNndktpQmlhVzVrYVc1bklDb3ZJRU52YlcxbGJuUkZiR1Z0Wlc1MEtWeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnZlNrN1hHNHZLaUJvWVhKdGIyNTVJR2x0Y0c5eWRDQXFMeUIyWVhJZ1gzSnZiM1JmWld4bGJXVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZklEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd2S2lFZ0xpOXliMjkwTFdWc1pXMWxiblF1YW5NZ0tpOGdYQ0l1TDJ4cFlpOXlaVzVrWlhKbGNuTXZjbTl2ZEMxbGJHVnRaVzUwTG1welhDSXBPMXh1WEc1Y2JtTnNZWE56SUVOdmJXMWxiblJGYkdWdFpXNTBJR1Y0ZEdWdVpITWdYM0p2YjNSZlpXeGxiV1Z1ZEY5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1GOWZMbEp2YjNSRmJHVnRaVzUwSUh0Y2JpQWdjM1JoZEdsaklGUlpVRVVnUFNCZmNtOXZkRjlsYkdWdFpXNTBYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4dVVtOXZkRVZzWlcxbGJuUXVWRmxRUlY5RFQwMU5SVTVVTzF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dsa0xDQjJZV3gxWlN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaGZjbTl2ZEY5bGJHVnRaVzUwWDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4d1gxOHVVbTl2ZEVWc1pXMWxiblF1VkZsUVJWOURUMDFOUlU1VUxDQnBaQ3dnZG1Gc2RXVXNJSEJ5YjNCektUdGNiaUFnZlZ4dWZWeHVYRzVjYmk4cUtpb3ZJSDBwTEZ4dVhHNHZLaW9xTHlCY0lpNHZiR2xpTDNKbGJtUmxjbVZ5Y3k5cGJtUmxlQzVxYzF3aU9seHVMeW9oS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb2hLbHhjWEc0Z0lDRXFLaW9nTGk5c2FXSXZjbVZ1WkdWeVpYSnpMMmx1WkdWNExtcHpJQ29xS2lGY2JpQWdYRndxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNiaThxS2lvdklDZ29YMTkxYm5WelpXUmZkMlZpY0dGamExOWZYM2RsWW5CaFkydGZiVzlrZFd4bFgxOHNJRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThzSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cElEMCtJSHRjYmx4dVgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXlLRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThwTzF4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrS0Y5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE4c0lIdGNiaThxSUdoaGNtMXZibmtnWlhod2IzSjBJQ292SUNBZ1hDSkRUMDVVUlZoVVgwbEVYQ0k2SUNncElEMCtJQ2d2S2lCeVpXVjRjRzl5ZENCellXWmxJQ292SUY5eWIyOTBYMjV2WkdWZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6QmZYeTVEVDA1VVJWaFVYMGxFS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKRGIyMXRaVzUwUld4bGJXVnVkRndpT2lBb0tTQTlQaUFvTHlvZ2NtVmxlSEJ2Y25RZ2MyRm1aU0FxTHlCZlkyOXRiV1Z1ZEY5bGJHVnRaVzUwWDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4elgxOHVRMjl0YldWdWRFVnNaVzFsYm5RcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0lrWlBVa05GWDFKRlJreFBWMXdpT2lBb0tTQTlQaUFvTHlvZ1ltbHVaR2x1WnlBcUx5QkdUMUpEUlY5U1JVWk1UMWNwTEZ4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdJQ0JjSWs1aGRHbDJaVVZzWlcxbGJuUmNJam9nS0NrZ1BUNGdLQzhxSUhKbFpYaHdiM0owSUhOaFptVWdLaThnWDI1aGRHbDJaVjlsYkdWdFpXNTBYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjgwWDE4dVRtRjBhWFpsUld4bGJXVnVkQ2tzWEc0dktpQm9ZWEp0YjI1NUlHVjRjRzl5ZENBcUx5QWdJRndpVUc5eWRHRnNSV3hsYldWdWRGd2lPaUFvS1NBOVBpQW9MeW9nY21WbGVIQnZjblFnYzJGbVpTQXFMeUJmY0c5eWRHRnNYMlZzWlcxbGJuUmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYelZmWHk1UWIzSjBZV3hGYkdWdFpXNTBLU3hjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pTWlc1a1pYSmxjbHdpT2lBb0tTQTlQaUFvTHlvZ2NtVmxlSEJ2Y25RZ2MyRm1aU0FxTHlCZmNtVnVaR1Z5WlhKZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6RmZYeTVTWlc1a1pYSmxjaWtzWEc0dktpQm9ZWEp0YjI1NUlHVjRjRzl5ZENBcUx5QWdJRndpVW05dmRFVnNaVzFsYm5SY0lqb2dLQ2tnUFQ0Z0tDOHFJSEpsWlhod2IzSjBJSE5oWm1VZ0tpOGdYM0p2YjNSZlpXeGxiV1Z1ZEY5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1sOWZMbEp2YjNSRmJHVnRaVzUwS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKU2IyOTBUbTlrWlZ3aU9pQW9LU0E5UGlBb0x5b2djbVZsZUhCdmNuUWdjMkZtWlNBcUx5QmZjbTl2ZEY5dWIyUmxYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4dVVtOXZkRTV2WkdVcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0lsUmxlSFJGYkdWdFpXNTBYQ0k2SUNncElEMCtJQ2d2S2lCeVpXVjRjRzl5ZENCellXWmxJQ292SUY5MFpYaDBYMlZzWlcxbGJuUmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYelpmWHk1VVpYaDBSV3hsYldWdWRDbGNiaThxSUdoaGNtMXZibmtnWlhod2IzSjBJQ292SUgwcE8xeHVMeW9nYUdGeWJXOXVlU0JwYlhCdmNuUWdLaThnZG1GeUlGOXliMjkwWDI1dlpHVmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHlBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9MeW9oSUM0dmNtOXZkQzF1YjJSbExtcHpJQ292SUZ3aUxpOXNhV0l2Y21WdVpHVnlaWEp6TDNKdmIzUXRibTlrWlM1cWMxd2lLVHRjYmk4cUlHaGhjbTF2Ym5rZ2FXMXdiM0owSUNvdklIWmhjaUJmY21WdVpHVnlaWEpmYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpGZlh5QTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTHlvaElDNHZjbVZ1WkdWeVpYSXVhbk1nS2k4Z1hDSXVMMnhwWWk5eVpXNWtaWEpsY25NdmNtVnVaR1Z5WlhJdWFuTmNJaWs3WEc0dktpQm9ZWEp0YjI1NUlHbHRjRzl5ZENBcUx5QjJZWElnWDNKdmIzUmZaV3hsYldWdWRGOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNbDlmSUQwZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3ZLaUVnTGk5eWIyOTBMV1ZzWlcxbGJuUXVhbk1nS2k4Z1hDSXVMMnhwWWk5eVpXNWtaWEpsY25NdmNtOXZkQzFsYkdWdFpXNTBMbXB6WENJcE8xeHVMeW9nYUdGeWJXOXVlU0JwYlhCdmNuUWdLaThnZG1GeUlGOWpiMjF0Wlc1MFgyVnNaVzFsYm5SZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6TmZYeUE5SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b0x5b2hJQzR2WTI5dGJXVnVkQzFsYkdWdFpXNTBMbXB6SUNvdklGd2lMaTlzYVdJdmNtVnVaR1Z5WlhKekwyTnZiVzFsYm5RdFpXeGxiV1Z1ZEM1cWMxd2lLVHRjYmk4cUlHaGhjbTF2Ym5rZ2FXMXdiM0owSUNvdklIWmhjaUJmYm1GMGFYWmxYMlZzWlcxbGJuUmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYelJmWHlBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9MeW9oSUM0dmJtRjBhWFpsTFdWc1pXMWxiblF1YW5NZ0tpOGdYQ0l1TDJ4cFlpOXlaVzVrWlhKbGNuTXZibUYwYVhabExXVnNaVzFsYm5RdWFuTmNJaWs3WEc0dktpQm9ZWEp0YjI1NUlHbHRjRzl5ZENBcUx5QjJZWElnWDNCdmNuUmhiRjlsYkdWdFpXNTBYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjgxWDE4Z1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLQzhxSVNBdUwzQnZjblJoYkMxbGJHVnRaVzUwTG1weklDb3ZJRndpTGk5c2FXSXZjbVZ1WkdWeVpYSnpMM0J2Y25SaGJDMWxiR1Z0Wlc1MExtcHpYQ0lwTzF4dUx5b2dhR0Z5Ylc5dWVTQnBiWEJ2Y25RZ0tpOGdkbUZ5SUY5MFpYaDBYMlZzWlcxbGJuUmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYelpmWHlBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9MeW9oSUM0dmRHVjRkQzFsYkdWdFpXNTBMbXB6SUNvdklGd2lMaTlzYVdJdmNtVnVaR1Z5WlhKekwzUmxlSFF0Wld4bGJXVnVkQzVxYzF3aUtUdGNibHh1WEc1amIyNXpkQ0JHVDFKRFJWOVNSVVpNVDFjZ1BTQlRlVzFpYjJ3dVptOXlLQ2RBYW1saWMwWnZjbU5sVW1WbWJHOTNKeWs3WEc1Y2JseHVYRzVjYmx4dVhHNWNibHh1WEc1Y2JpOHFLaW92SUgwcExGeHVYRzR2S2lvcUx5QmNJaTR2YkdsaUwzSmxibVJsY21WeWN5OXVZWFJwZG1VdFpXeGxiV1Z1ZEM1cWMxd2lPbHh1THlvaEtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9oS2x4Y1hHNGdJQ0VxS2lvZ0xpOXNhV0l2Y21WdVpHVnlaWEp6TDI1aGRHbDJaUzFsYkdWdFpXNTBMbXB6SUNvcUtpRmNiaUFnWEZ3cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmk4cUtpb3ZJQ2dvWDE5MWJuVnpaV1JmZDJWaWNHRmphMTlmWDNkbFluQmhZMnRmYlc5a2RXeGxYMThzSUY5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE4c0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJRDArSUh0Y2JseHVYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV5S0Y5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE4cE8xeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0tGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHNJSHRjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pPWVhScGRtVkZiR1Z0Wlc1MFhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUU1aGRHbDJaVVZzWlcxbGJuUXBYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlCOUtUdGNiaThxSUdoaGNtMXZibmtnYVcxd2IzSjBJQ292SUhaaGNpQmZjbTl2ZEY5bGJHVnRaVzUwWDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4d1gxOGdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0M4cUlTQXVMM0p2YjNRdFpXeGxiV1Z1ZEM1cWN5QXFMeUJjSWk0dmJHbGlMM0psYm1SbGNtVnljeTl5YjI5MExXVnNaVzFsYm5RdWFuTmNJaWs3WEc1Y2JseHVZMnhoYzNNZ1RtRjBhWFpsUld4bGJXVnVkQ0JsZUhSbGJtUnpJRjl5YjI5MFgyVnNaVzFsYm5SZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6QmZYeTVTYjI5MFJXeGxiV1Z1ZENCN1hHNGdJSE4wWVhScFl5QlVXVkJGSUQwZ1gzSnZiM1JmWld4bGJXVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZkxsSnZiM1JGYkdWdFpXNTBMbFJaVUVWZlJVeEZUVVZPVkR0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2locFpDd2dkbUZzZFdVc0lIQnliM0J6S1NCN1hHNGdJQ0FnYzNWd1pYSW9YM0p2YjNSZlpXeGxiV1Z1ZEY5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1GOWZMbEp2YjNSRmJHVnRaVzUwTGxSWlVFVmZSVXhGVFVWT1ZDd2dhV1FzSUhaaGJIVmxMQ0J3Y205d2N5azdYRzRnSUgxY2JuMWNibHh1WEc0dktpb3FMeUI5S1N4Y2JseHVMeW9xS2k4Z1hDSXVMMnhwWWk5eVpXNWtaWEpsY25NdmNHOXlkR0ZzTFdWc1pXMWxiblF1YW5OY0lqcGNiaThxSVNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FJU3BjWEZ4dUlDQWhLaW9xSUM0dmJHbGlMM0psYm1SbGNtVnljeTl3YjNKMFlXd3RaV3hsYldWdWRDNXFjeUFxS2lvaFhHNGdJRnhjS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYRzR2S2lvcUx5QW9LRjlmZFc1MWMyVmtYM2RsWW5CaFkydGZYMTkzWldKd1lXTnJYMjF2WkhWc1pWOWZMQ0JmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmTENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktTQTlQaUI3WEc1Y2JsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjaWhmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmS1R0Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNoZlgzZGxZbkJoWTJ0ZlpYaHdiM0owYzE5ZkxDQjdYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lVRzl5ZEdGc1JXeGxiV1Z1ZEZ3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJRYjNKMFlXeEZiR1Z0Wlc1MEtWeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnZlNrN1hHNHZLaUJvWVhKdGIyNTVJR2x0Y0c5eWRDQXFMeUIyWVhJZ1gzSnZiM1JmWld4bGJXVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZklEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd2S2lFZ0xpOXliMjkwTFdWc1pXMWxiblF1YW5NZ0tpOGdYQ0l1TDJ4cFlpOXlaVzVrWlhKbGNuTXZjbTl2ZEMxbGJHVnRaVzUwTG1welhDSXBPMXh1WEc1Y2JtTnNZWE56SUZCdmNuUmhiRVZzWlcxbGJuUWdaWGgwWlc1a2N5QmZjbTl2ZEY5bGJHVnRaVzUwWDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4d1gxOHVVbTl2ZEVWc1pXMWxiblFnZTF4dUlDQnpkR0YwYVdNZ1ZGbFFSU0E5SUY5eWIyOTBYMlZzWlcxbGJuUmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHk1U2IyOTBSV3hsYldWdWRDNVVXVkJGWDFCUFVsUkJURHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwWkN3Z2RtRnNkV1VzSUhCeWIzQnpLU0I3WEc0Z0lDQWdjM1Z3WlhJb1gzSnZiM1JmWld4bGJXVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZkxsSnZiM1JGYkdWdFpXNTBMbFJaVUVWZlVFOVNWRUZNTENCcFpDd2dkbUZzZFdVc0lIQnliM0J6S1R0Y2JpQWdmVnh1ZlZ4dVhHNWNiaThxS2lvdklIMHBMRnh1WEc0dktpb3FMeUJjSWk0dmJHbGlMM0psYm1SbGNtVnljeTl5Wlc1a1pYSmxjaTVxYzF3aU9seHVMeW9oS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9oS2x4Y1hHNGdJQ0VxS2lvZ0xpOXNhV0l2Y21WdVpHVnlaWEp6TDNKbGJtUmxjbVZ5TG1weklDb3FLaUZjYmlBZ1hGd3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNiaThxS2lvdklDZ29YMTkxYm5WelpXUmZkMlZpY0dGamExOWZYM2RsWW5CaFkydGZiVzlrZFd4bFgxOHNJRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThzSUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4cElEMCtJSHRjYmx4dVgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXlLRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThwTzF4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrS0Y5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE4c0lIdGNiaThxSUdoaGNtMXZibmtnWlhod2IzSjBJQ292SUNBZ1hDSlNaVzVrWlhKbGNsd2lPaUFvS1NBOVBpQW9MeW9nWW1sdVpHbHVaeUFxTHlCU1pXNWtaWEpsY2lsY2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJSDBwTzF4dUx5b2dhR0Z5Ylc5dWVTQnBiWEJ2Y25RZ0tpOGdkbUZ5SUY5bGRtVnVkSE5mYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpCZlh5QTlJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvTHlvaElDNHVMMlYyWlc1MGN5NXFjeUFxTHlCY0lpNHZiR2xpTDJWMlpXNTBjeTVxYzF3aUtUdGNiaThxSUdoaGNtMXZibmtnYVcxd2IzSjBJQ292SUhaaGNpQmZkWFJwYkhOZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6RmZYeUE5SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b0x5b2hJQzR1TDNWMGFXeHpMbXB6SUNvdklGd2lMaTlzYVdJdmRYUnBiSE11YW5OY0lpazdYRzR2S2lCb1lYSnRiMjU1SUdsdGNHOXlkQ0FxTHlCMllYSWdYM0p2YjNSZmJtOWtaVjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTWw5ZklEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd2S2lFZ0xpOXliMjkwTFc1dlpHVXVhbk1nS2k4Z1hDSXVMMnhwWWk5eVpXNWtaWEpsY25NdmNtOXZkQzF1YjJSbExtcHpYQ0lwTzF4dVhHNWNibHh1WEc1c1pYUWdYMk52Ym5SbGVIUkpSRU52ZFc1MFpYSWdQU0F3Ymp0Y2JseHVZMnhoYzNNZ1VtVnVaR1Z5WlhJZ1pYaDBaVzVrY3lCZlpYWmxiblJ6WDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4d1gxOHVSWFpsYm5SRmJXbDBkR1Z5SUh0Y2JpQWdjM1JoZEdsaklGSnZiM1JPYjJSbElEMGdYM0p2YjNSZmJtOWtaVjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTWw5ZkxsSnZiM1JPYjJSbE8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNWNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWgwYUdsekxDQjdYRzRnSUNBZ0lDQW5ZMjl1ZEdWNGRDYzZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQWdJQ0FnSUNBZ2RHaHBjeTVqY21WaGRHVkRiMjUwWlhoMEtDa3NYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKMlJsYzNSeWIzbHBibWNuT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCMllXeDFaVG9nSUNBZ0lDQWdJR1poYkhObExGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHlaVzVrWlhKR2NtRnRaU2M2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdNQ3hjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCamNtVmhkR1ZEYjI1MFpYaDBLSEp2YjNSRGIyNTBaWGgwTENCdmJsVndaR0YwWlN3Z2IyNVZjR1JoZEdWVWFHbHpLU0I3WEc0Z0lDQWdiR1YwSUdOdmJuUmxlSFFnSUNBZ0lEMGdUMkpxWldOMExtTnlaV0YwWlNodWRXeHNLVHRjYmlBZ0lDQnNaWFFnYlhsRGIyNTBaWGgwU1VRZ1BTQW9jbTl2ZEVOdmJuUmxlSFFwSUQ4Z2NtOXZkRU52Ym5SbGVIUmJYM0p2YjNSZmJtOWtaVjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTWw5ZkxrTlBUbFJGV0ZSZlNVUmRJRG9nTVc0N1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliM2g1S0dOdmJuUmxlSFFzSUh0Y2JpQWdJQ0FnSUdkbGREb2dLSFJoY21kbGRDd2djSEp2Y0U1aGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YjNCT1lXMWxJRDA5UFNCZmNtOXZkRjl1YjJSbFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHlYMTh1UTA5T1ZFVllWRjlKUkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCd1lYSmxiblJKUkNBOUlDaHliMjkwUTI5dWRHVjRkQ2tnUHlCeWIyOTBRMjl1ZEdWNGRGdGZjbTl2ZEY5dWIyUmxYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh5WDE4dVEwOU9WRVZZVkY5SlJGMGdPaUF4Ymp0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tIQmhjbVZ1ZEVsRUlENGdiWGxEYjI1MFpYaDBTVVFwSUQ4Z2NHRnlaVzUwU1VRZ09pQnRlVU52Ym5SbGVIUkpSRHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0hSaGNtZGxkQ3dnY0hKdmNFNWhiV1VwS1Z4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2NtOXZkRU52Ym5SbGVIUXBJRDhnY205dmRFTnZiblJsZUhSYmNISnZjRTVoYldWZElEb2dkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwWVhKblpYUmJjSEp2Y0U1aGJXVmRPMXh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJSE5sZERvZ0tIUmhjbWRsZEN3Z2NISnZjRTVoYldVc0lIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOXdUbUZ0WlNBOVBUMGdYM0p2YjNSZmJtOWtaVjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTWw5ZkxrTlBUbFJGV0ZSZlNVUXBYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkRnR3Y205d1RtRnRaVjBnUFQwOUlIWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUcxNVEyOXVkR1Y0ZEVsRUlEMGdLeXRmWTI5dWRHVjRkRWxFUTI5MWJuUmxjanRjYmlBZ0lDQWdJQ0FnZEdGeVoyVjBXM0J5YjNCT1lXMWxYU0E5SUhaaGJIVmxPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IyNVZjR1JoZEdVZ1BUMDlJQ2RtZFc1amRHbHZiaWNwWEc0Z0lDQWdJQ0FnSUNBZ2IyNVZjR1JoZEdVdVkyRnNiQ2h2YmxWd1pHRjBaVlJvYVhNc0lHOXVWWEJrWVhSbFZHaHBjeWs3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlYRzVjYmx4dUx5b3FLaThnZlNrc1hHNWNiaThxS2lvdklGd2lMaTlzYVdJdmNtVnVaR1Z5WlhKekwzSnZiM1F0Wld4bGJXVnVkQzVxYzF3aU9seHVMeW9oS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUlTcGNYRnh1SUNBaEtpb3FJQzR2YkdsaUwzSmxibVJsY21WeWN5OXliMjkwTFdWc1pXMWxiblF1YW5NZ0tpb3FJVnh1SUNCY1hDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljYmk4cUtpb3ZJQ2dvWDE5MWJuVnpaV1JmZDJWaWNHRmphMTlmWDNkbFluQmhZMnRmYlc5a2RXeGxYMThzSUY5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE4c0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBJRDArSUh0Y2JseHVYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV5S0Y5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE4cE8xeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0tGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHNJSHRjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pTYjI5MFJXeGxiV1Z1ZEZ3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJTYjI5MFJXeGxiV1Z1ZENsY2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJSDBwTzF4dVhHNWpiMjV6ZENCVVdWQkZYMFZNUlUxRlRsUWdJRDBnTVR0Y2JtTnZibk4wSUZSWlVFVmZWRVZZVkNBZ0lDQWdQU0F6TzF4dVkyOXVjM1FnVkZsUVJWOURUMDFOUlU1VUlDQTlJRGc3WEc1amIyNXpkQ0JVV1ZCRlgxQlBVbFJCVENBZ0lEMGdNVFU3WEc1Y2JtTnNZWE56SUZKdmIzUkZiR1Z0Wlc1MElIdGNiaUFnYzNSaGRHbGpJRlJaVUVWZlJVeEZUVVZPVkNBZ1BTQlVXVkJGWDBWTVJVMUZUbFE3WEc1Y2JpQWdjM1JoZEdsaklGUlpVRVZmVkVWWVZDQWdJQ0FnUFNCVVdWQkZYMVJGV0ZRN1hHNWNiaUFnYzNSaGRHbGpJRlJaVUVWZlEwOU5UVVZPVkNBZ1BTQlVXVkJGWDBOUFRVMUZUbFE3WEc1Y2JpQWdjM1JoZEdsaklGUlpVRVZmVUU5U1ZFRk1JQ0FnUFNCVVdWQkZYMUJQVWxSQlREdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaDBlWEJsTENCcFpDd2dkbUZzZFdVc0lIQnliM0J6S1NCN1hHNGdJQ0FnZEdocGN5NXBjMHBwWW5OV2FYSjBkV0ZzUld4bGJXVnVkQ0E5SUhSeWRXVTdYRzRnSUNBZ2RHaHBjeTUwZVhCbElDQWdQU0IwZVhCbE8xeHVJQ0FnSUhSb2FYTXVhV1FnSUNBZ0lEMGdhV1E3WEc0Z0lDQWdkR2hwY3k1MllXeDFaU0FnUFNCMllXeDFaVHRjYmlBZ0lDQjBhR2x6TG5CeWIzQnpJQ0E5SUhCeWIzQnpJSHg4SUh0OU8xeHVJQ0I5WEc1OVhHNWNibHh1THlvcUtpOGdmU2tzWEc1Y2JpOHFLaW92SUZ3aUxpOXNhV0l2Y21WdVpHVnlaWEp6TDNKdmIzUXRibTlrWlM1cWMxd2lPbHh1THlvaEtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUlTcGNYRnh1SUNBaEtpb3FJQzR2YkdsaUwzSmxibVJsY21WeWN5OXliMjkwTFc1dlpHVXVhbk1nS2lvcUlWeHVJQ0JjWENvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2JpOHFLaW92SUNnb1gxOTFiblZ6WldSZmQyVmljR0ZqYTE5ZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsWDE4c0lGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHNJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThwSUQwK0lIdGNibHh1WDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eUtGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHBPMXh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThzSUh0Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKRFQwNVVSVmhVWDBsRVhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUVOUFRsUkZXRlJmU1VRcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0lsSnZiM1JPYjJSbFhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUZKdmIzUk9iMlJsS1Z4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdmU2s3WEc0dktpQm9ZWEp0YjI1NUlHbHRjRzl5ZENBcUx5QjJZWElnWDNWMGFXeHpYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4Z1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLQzhxSVNBdUxpOTFkR2xzY3k1cWN5QXFMeUJjSWk0dmJHbGlMM1YwYVd4ekxtcHpYQ0lwTzF4dVhHNWNibU52Ym5OMElFTlBUbFJGV0ZSZlNVUWdQU0JUZVcxaWIyd3VabTl5S0NkQWFtbGljeTl1YjJSbEwyTnZiblJsZUhSSlJDY3BPMXh1WEc1c1pYUWdkWFZwWkNBOUlERTdYRzVjYm1Oc1lYTnpJRkp2YjNST2IyUmxJSHRjYmlBZ2MzUmhkR2xqSUVOUFRsUkZXRlJmU1VRZ1BTQkRUMDVVUlZoVVgwbEVPMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSEpsYm1SbGNtVnlMQ0J3WVhKbGJuUXNJRjlqYjI1MFpYaDBLU0I3WEc0Z0lDQWdiR1YwSUdOdmJuUmxlSFFnUFNCeVpXNWtaWEpsY2k1amNtVmhkR1ZEYjI1MFpYaDBLRnh1SUNBZ0lDQWdYMk52Ym5SbGVIUXNYRzRnSUNBZ0lDQW9kR2hwY3k1dmJrTnZiblJsZUhSVmNHUmhkR1VwSUQ4Z2RHaHBjeTV2YmtOdmJuUmxlSFJWY0dSaGRHVWdPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0IwYUdsekxGeHVJQ0FnSUNrN1hHNWNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWgwYUdsekxDQjdYRzRnSUNBZ0lDQW5hV1FuT2lCN1hHNGdJQ0FnSUNBZ0lIZHlhWFJoWW14bE9pQWdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnZFhWcFpDc3JMRnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ2R5Wlc1a1pYSmxjaWM2SUh0Y2JpQWdJQ0FnSUNBZ2QzSnBkR0ZpYkdVNklDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUFnSUNBZ0lDQWdjbVZ1WkdWeVpYSXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdKM0JoY21WdWRDYzZJSHRjYmlBZ0lDQWdJQ0FnZDNKcGRHRmliR1U2SUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQWdJQ0FnSUNBZ2NHRnlaVzUwTEZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNkamIyNTBaWGgwSnpvZ2UxeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUFnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUdkbGREb2dJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiMjUwWlhoME8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6WlhRNklDQWdJQ0FnSUNBZ0lDZ3BJRDArSUh0OUxGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZHlaVzVrWlhKUWNtOXRhWE5sSnpvZ2UxeHVJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dJQ0FnSUhSeWRXVXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUNBZ0lDQWdJQ0J1ZFd4c0xGeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDZGtaWE4wY205NWFXNW5Kem9nZTF4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ0lDQWdJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ0FnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBbmNtVnVaR1Z5Um5KaGJXVW5PaUI3WEc0Z0lDQWdJQ0FnSUhkeWFYUmhZbXhsT2lBZ0lDQWdkSEoxWlN4Y2JpQWdJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dJQ0JtWVd4elpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWkdWemRISnZlU2dwSUh0Y2JpQWdJQ0IwYUdsekxtUmxjM1J5YjNscGJtY2dQU0IwY25WbE8xeHVJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDQTlJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnBjMVpoYkdsa1EyaHBiR1FvWTJocGJHUXBJSHRjYmlBZ0lDQnlaWFIxY200Z1gzVjBhV3h6WDJwelgxOVhSVUpRUVVOTFgwbE5VRTlTVkVWRVgwMVBSRlZNUlY4d1gxOHVhWE5XWVd4cFpFTm9hV3hrS0dOb2FXeGtLVHRjYmlBZ2ZWeHVYRzRnSUdselNYUmxjbUZpYkdWRGFHbHNaQ2hqYUdsc1pDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZmRYUnBiSE5mYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpCZlh5NXBjMGwwWlhKaFlteGxRMmhwYkdRb1kyaHBiR1FwTzF4dUlDQjlYRzVjYmlBZ2NISnZjSE5FYVdabVpYSW9iMnhrVUhKdmNITXNJRzVsZDFCeWIzQnpMQ0J6YTJsd1MyVjVjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQmZkWFJwYkhOZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6QmZYeTV3Y205d2MwUnBabVpsY2lodmJHUlFjbTl3Y3l3Z2JtVjNVSEp2Y0hNc0lITnJhWEJMWlhsektUdGNiaUFnZlZ4dVhHNGdJR05vYVd4a2NtVnVSR2xtWm1WeUtHOXNaRU5vYVd4a2NtVnVMQ0J1WlhkRGFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJmZFhScGJITmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHk1amFHbHNaSEpsYmtScFptWmxjaWh2YkdSRGFHbHNaSEpsYml3Z2JtVjNRMmhwYkdSeVpXNHBPMXh1SUNCOVhHNWNiaUFnWVhONWJtTWdjbVZ1WkdWeUtHcHBZaXdnY21WdVpHVnlRMjl1ZEdWNGRDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtUmxjM1J5YjNscGJtY3BYRzRnSUNBZ0lDQnlaWFIxY200N1hHNWNiaUFnSUNCMGFHbHpMbkpsYm1SbGNrWnlZVzFsS3lzN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjbVZ1WkdWeUtHcHBZaXdnY21WdVpHVnlRMjl1ZEdWNGRDbGNiaUFnSUNBZ0lDNTBhR1Z1S0NoeVpYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXNWtaWEpRY205dGFYTmxJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdVkyRjBZMmdvS0dWeWNtOXlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WdVpHVnlVSEp2YldselpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdWeWNtOXlPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lIMWNibjFjYmx4dVhHNHZLaW9xTHlCOUtTeGNibHh1THlvcUtpOGdYQ0l1TDJ4cFlpOXlaVzVrWlhKbGNuTXZkR1Y0ZEMxbGJHVnRaVzUwTG1welhDSTZYRzR2S2lFcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb2hLbHhjWEc0Z0lDRXFLaW9nTGk5c2FXSXZjbVZ1WkdWeVpYSnpMM1JsZUhRdFpXeGxiV1Z1ZEM1cWN5QXFLaW9oWEc0Z0lGeGNLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dUx5b3FLaThnS0NoZlgzVnVkWE5sWkY5M1pXSndZV05yWDE5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWHl3Z1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnUFQ0Z2UxeHVYRzVmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5Jb1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5azdYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9YMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeXdnZTF4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdJQ0JjSWxSbGVIUkZiR1Z0Wlc1MFhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUZSbGVIUkZiR1Z0Wlc1MEtWeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnZlNrN1hHNHZLaUJvWVhKdGIyNTVJR2x0Y0c5eWRDQXFMeUIyWVhJZ1gzSnZiM1JmWld4bGJXVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZklEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd2S2lFZ0xpOXliMjkwTFdWc1pXMWxiblF1YW5NZ0tpOGdYQ0l1TDJ4cFlpOXlaVzVrWlhKbGNuTXZjbTl2ZEMxbGJHVnRaVzUwTG1welhDSXBPMXh1WEc1Y2JtTnNZWE56SUZSbGVIUkZiR1Z0Wlc1MElHVjRkR1Z1WkhNZ1gzSnZiM1JmWld4bGJXVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZkxsSnZiM1JGYkdWdFpXNTBJSHRjYmlBZ2MzUmhkR2xqSUZSWlVFVWdQU0JmY205dmRGOWxiR1Z0Wlc1MFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHdYMTh1VW05dmRFVnNaVzFsYm5RdVZGbFFSVjlVUlZoVU8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHbGtMQ0IyWVd4MVpTd2djSEp2Y0hNcElIdGNiaUFnSUNCemRYQmxjaWhmY205dmRGOWxiR1Z0Wlc1MFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHdYMTh1VW05dmRFVnNaVzFsYm5RdVZGbFFSVjlVUlZoVUxDQnBaQ3dnZG1Gc2RXVXNJSEJ5YjNCektUdGNiaUFnZlZ4dWZWeHVYRzVjYmk4cUtpb3ZJSDBwTEZ4dVhHNHZLaW9xTHlCY0lpNHZiR2xpTDNWMGFXeHpMbXB6WENJNlhHNHZLaUVxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUlTcGNYRnh1SUNBaEtpb3FJQzR2YkdsaUwzVjBhV3h6TG1weklDb3FLaUZjYmlBZ1hGd3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4dUx5b3FLaThnS0NoZlgzVnVkWE5sWkY5M1pXSndZV05yWDE5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWHl3Z1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5d2dYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWtnUFQ0Z2UxeHVYRzVmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5Jb1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5azdYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9YMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeXdnZTF4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdJQ0JjSW1KcGJtUk5aWFJvYjJSelhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUdKcGJtUk5aWFJvYjJSektTeGNiaThxSUdoaGNtMXZibmtnWlhod2IzSjBJQ292SUNBZ1hDSmphR2xzWkhKbGJrUnBabVpsY2x3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJqYUdsc1pISmxia1JwWm1abGNpa3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2labVYwWTJoRVpXVndVSEp2Y0dWeWRIbGNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z1ptVjBZMmhFWldWd1VISnZjR1Z5ZEhrcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0ltWnNZWFIwWlc1QmNuSmhlVndpT2lBb0tTQTlQaUFvTHlvZ1ltbHVaR2x1WnlBcUx5Qm1iR0YwZEdWdVFYSnlZWGtwTEZ4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdJQ0JjSW1sdWMzUmhibU5sVDJaY0lqb2dLQ2tnUFQ0Z0tDOHFJR0pwYm1ScGJtY2dLaThnYVc1emRHRnVZMlZQWmlrc1hHNHZLaUJvWVhKdGIyNTVJR1Y0Y0c5eWRDQXFMeUFnSUZ3aWFYTkZiWEIwZVZ3aU9pQW9LU0E5UGlBb0x5b2dZbWx1WkdsdVp5QXFMeUJwYzBWdGNIUjVLU3hjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pwYzBsMFpYSmhZbXhsUTJocGJHUmNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z2FYTkpkR1Z5WVdKc1pVTm9hV3hrS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKcGMwNXZkRVZ0Y0hSNVhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUdselRtOTBSVzF3ZEhrcExGeHVMeW9nYUdGeWJXOXVlU0JsZUhCdmNuUWdLaThnSUNCY0ltbHpWbUZzYVdSRGFHbHNaRndpT2lBb0tTQTlQaUFvTHlvZ1ltbHVaR2x1WnlBcUx5QnBjMVpoYkdsa1EyaHBiR1FwTEZ4dUx5b2dhR0Z5Ylc5dWVTQmxlSEJ2Y25RZ0tpOGdJQ0JjSW1sMFpYSmhkR1ZjSWpvZ0tDa2dQVDRnS0M4cUlHSnBibVJwYm1jZ0tpOGdhWFJsY21GMFpTa3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2libTkzWENJNklDZ3BJRDArSUNndktpQmlhVzVrYVc1bklDb3ZJRzV2ZHlrc1hHNHZLaUJvWVhKdGIyNTVJR1Y0Y0c5eWRDQXFMeUFnSUZ3aWNISnZjSE5FYVdabVpYSmNJam9nS0NrZ1BUNGdLQzhxSUdKcGJtUnBibWNnS2k4Z2NISnZjSE5FYVdabVpYSXBMRnh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z0lDQmNJbk5wZW1WUFpsd2lPaUFvS1NBOVBpQW9MeW9nWW1sdVpHbHVaeUFxTHlCemFYcGxUMllwWEc0dktpQm9ZWEp0YjI1NUlHVjRjRzl5ZENBcUx5QjlLVHRjYmk4cUlHaGhjbTF2Ym5rZ2FXMXdiM0owSUNvdklIWmhjaUJrWldGa1ltVmxabDlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNRjlmSUQwZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5Z3ZLaUVnWkdWaFpHSmxaV1lnS2k4Z1hDSXVMMjV2WkdWZmJXOWtkV3hsY3k5a1pXRmtZbVZsWmk5c2FXSXZhVzVrWlhndWFuTmNJaWs3WEc1Y2JseHVZMjl1YzNRZ1UxUlBVQ0E5SUZONWJXSnZiQzVtYjNJb0owQnFhV0p6U1hSbGNtRjBaVk4wYjNBbktUdGNibHh1THk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxXNWxjM1JsWkMxMFpYSnVZWEo1WEc1amIyNXpkQ0JuYkc5aVlXeFRZMjl3WlNBOUlDaDBlWEJsYjJZZ1oyeHZZbUZzSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnUHlCbmJHOWlZV3dnT2lBb2RIbHdaVzltSUhkcGJtUnZkeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJRDhnZDJsdVpHOTNJRG9nZFc1a1pXWnBibVZrTzF4dVhHNW1kVzVqZEdsdmJpQnBibk4wWVc1alpVOW1LRzlpYWlrZ2UxeHVJQ0JtZFc1amRHbHZiaUIwWlhOMFZIbHdaU2h2WW1vc0lGOTJZV3dwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJwYzBSbFptVnljbVZrVkhsd1pTaHZZbW9wSUh0Y2JpQWdJQ0FnSUdsbUlDaHZZbW9nYVc1emRHRnVZMlZ2WmlCUWNtOXRhWE5sSUh4OElDaHZZbW91WTI5dWMzUnlkV04wYjNJZ0ppWWdiMkpxTG1OdmJuTjBjblZqZEc5eUxtNWhiV1VnUFQwOUlDZFFjbTl0YVhObEp5a3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJQ0FnSUNBdkx5QlJkV0ZqYXlCeGRXRmpheTR1TGx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlltb3VkR2hsYmlBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCMGVYQmxiMllnYjJKcUxtTmhkR05vSUQwOVBTQW5ablZ1WTNScGIyNG5LVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0IyWVd3Z0lDQWdJRDBnWDNaaGJEdGNiaUFnSUNCc1pYUWdkSGx3WlU5bUlDQTlJQ2gwZVhCbGIyWWdiMkpxS1R0Y2JseHVJQ0FnSUdsbUlDaDJZV3dnUFQwOUlHZHNiMkpoYkZOamIzQmxMbE4wY21sdVp5bGNiaUFnSUNBZ0lIWmhiQ0E5SUNkemRISnBibWNuTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1VG5WdFltVnlLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oyNTFiV0psY2ljN1hHNGdJQ0FnWld4elpTQnBaaUFvZG1Gc0lEMDlQU0JuYkc5aVlXeFRZMjl3WlM1Q2IyOXNaV0Z1S1Z4dUlDQWdJQ0FnZG1Gc0lEMGdKMkp2YjJ4bFlXNG5PMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIWmhiQ0E5UFQwZ1oyeHZZbUZzVTJOdmNHVXVSblZ1WTNScGIyNHBYRzRnSUNBZ0lDQjJZV3dnUFNBblpuVnVZM1JwYjI0bk8xeHVJQ0FnSUdWc2MyVWdhV1lnS0haaGJDQTlQVDBnWjJ4dlltRnNVMk52Y0dVdVFYSnlZWGtwWEc0Z0lDQWdJQ0IyWVd3Z1BTQW5ZWEp5WVhrbk8xeHVJQ0FnSUdWc2MyVWdhV1lnS0haaGJDQTlQVDBnWjJ4dlltRnNVMk52Y0dVdVQySnFaV04wS1Z4dUlDQWdJQ0FnZG1Gc0lEMGdKMjlpYW1WamRDYzdYRzRnSUNBZ1pXeHpaU0JwWmlBb2RtRnNJRDA5UFNCbmJHOWlZV3hUWTI5d1pTNVFjbTl0YVhObEtWeHVJQ0FnSUNBZ2RtRnNJRDBnSjNCeWIyMXBjMlVuTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1UW1sblNXNTBLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oySnBaMmx1ZENjN1hHNGdJQ0FnWld4elpTQnBaaUFvZG1Gc0lEMDlQU0JuYkc5aVlXeFRZMjl3WlM1TllYQXBYRzRnSUNBZ0lDQjJZV3dnUFNBbmJXRndKenRjYmlBZ0lDQmxiSE5sSUdsbUlDaDJZV3dnUFQwOUlHZHNiMkpoYkZOamIzQmxMbGRsWVd0TllYQXBYRzRnSUNBZ0lDQjJZV3dnUFNBbmQyVmhhMjFoY0NjN1hHNGdJQ0FnWld4elpTQnBaaUFvZG1Gc0lEMDlQU0JuYkc5aVlXeFRZMjl3WlM1VFpYUXBYRzRnSUNBZ0lDQjJZV3dnUFNBbmMyVjBKenRjYmlBZ0lDQmxiSE5sSUdsbUlDaDJZV3dnUFQwOUlHZHNiMkpoYkZOamIzQmxMbE41YldKdmJDbGNiaUFnSUNBZ0lIWmhiQ0E5SUNkemVXMWliMnduTzF4dUlDQWdJR1ZzYzJVZ2FXWWdLSFpoYkNBOVBUMGdaMnh2WW1Gc1UyTnZjR1V1UW5WbVptVnlLVnh1SUNBZ0lDQWdkbUZzSUQwZ0oySjFabVpsY2ljN1hHNWNiaUFnSUNCcFppQW9kbUZzSUQwOVBTQW5ZblZtWm1WeUp5QW1KaUJuYkc5aVlXeFRZMjl3WlM1Q2RXWm1aWElnSmlZZ1oyeHZZbUZzVTJOdmNHVXVRblZtWm1WeUxtbHpRblZtWm1WeUtHOWlhaWtwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUdsbUlDaDJZV3dnUFQwOUlDZHVkVzFpWlhJbklDWW1JQ2gwZVhCbFQyWWdQVDA5SUNkdWRXMWlaWEluSUh4OElHOWlhaUJwYm5OMFlXNWpaVzltSUU1MWJXSmxjaUI4ZkNBb2IySnFMbU52Ym5OMGNuVmpkRzl5SUNZbUlHOWlhaTVqYjI1emRISjFZM1J2Y2k1dVlXMWxJRDA5UFNBblRuVnRZbVZ5SnlrcEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVdselJtbHVhWFJsS0c5aWFpa3BYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFpoYkNBaFBUMGdKMjlpYW1WamRDY2dKaVlnZG1Gc0lEMDlQU0IwZVhCbFQyWXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNCcFppQW9LRzlpYWk1amIyNXpkSEoxWTNSdmNpQTlQVDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2lCOGZDQW9iMkpxTG1OdmJuTjBjblZqZEc5eUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUQwOVBTQW5UMkpxWldOMEp5a3BLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0x5OGdUblZzYkNCd2NtOTBiM1I1Y0dVZ2IyNGdiMkpxWldOMFhHNGdJQ0FnSUNCcFppQW9kSGx3WlU5bUlEMDlQU0FuYjJKcVpXTjBKeUFtSmlBaGIySnFMbU52Ym5OMGNuVmpkRzl5S1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkaGNuSmhlU2NnSmlZZ0tFRnljbUY1TG1selFYSnlZWGtvYjJKcUtTQjhmQ0J2WW1vZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNCOGZDQW9iMkpxTG1OdmJuTjBjblZqZEc5eUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUQwOVBTQW5RWEp5WVhrbktTa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNnb2RtRnNJRDA5UFNBbmNISnZiV2x6WlNjZ2ZId2dkbUZzSUQwOVBTQW5aR1ZtWlhKeVpXUW5LU0FtSmlCcGMwUmxabVZ5Y21Wa1ZIbHdaU2h2WW1vcEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0lDQnBaaUFvZG1Gc0lEMDlQU0FuYzNSeWFXNW5KeUFtSmlBb2IySnFJR2x1YzNSaGJtTmxiMllnWjJ4dlltRnNVMk52Y0dVdVUzUnlhVzVuSUh4OElDaHZZbW91WTI5dWMzUnlkV04wYjNJZ0ppWWdiMkpxTG1OdmJuTjBjblZqZEc5eUxtNWhiV1VnUFQwOUlDZFRkSEpwYm1jbktTa3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMllXd2dQVDA5SUNkaWIyOXNaV0Z1SnlBbUppQW9iMkpxSUdsdWMzUmhibU5sYjJZZ1oyeHZZbUZzVTJOdmNHVXVRbTl2YkdWaGJpQjhmQ0FvYjJKcUxtTnZibk4wY25WamRHOXlJQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaTV1WVcxbElEMDlQU0FuUW05dmJHVmhiaWNwS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYRzRnSUNBZ2FXWWdLSFpoYkNBOVBUMGdKMjFoY0NjZ0ppWWdLRzlpYWlCcGJuTjBZVzVqWlc5bUlHZHNiMkpoYkZOamIzQmxMazFoY0NCOGZDQW9iMkpxTG1OdmJuTjBjblZqZEc5eUlDWW1JRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUQwOVBTQW5UV0Z3SnlrcEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0lDQnBaaUFvZG1Gc0lEMDlQU0FuZDJWaGEyMWhjQ2NnSmlZZ0tHOWlhaUJwYm5OMFlXNWpaVzltSUdkc2IySmhiRk5qYjNCbExsZGxZV3ROWVhBZ2ZId2dLRzlpYWk1amIyNXpkSEoxWTNSdmNpQW1KaUJ2WW1vdVkyOXVjM1J5ZFdOMGIzSXVibUZ0WlNBOVBUMGdKMWRsWVd0TllYQW5LU2twWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0FnSUdsbUlDaDJZV3dnUFQwOUlDZHpaWFFuSUNZbUlDaHZZbW9nYVc1emRHRnVZMlZ2WmlCbmJHOWlZV3hUWTI5d1pTNVRaWFFnZkh3Z0tHOWlhaTVqYjI1emRISjFZM1J2Y2lBbUppQnZZbW91WTI5dWMzUnlkV04wYjNJdWJtRnRaU0E5UFQwZ0oxTmxkQ2NwS1NsY2JpQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVYRzRnSUNBZ2FXWWdLSFpoYkNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCMGVYQmxUMllnUFQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHOWlhaUJwYm5OMFlXNWpaVzltSUhaaGJDbGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd3Z1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUc5aWFpNWpiMjV6ZEhKMVkzUnZjaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0l1Ym1GdFpTQTlQVDBnZG1Gc0tWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCcFppQW9iMkpxSUQwOUlHNTFiR3dwWEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBeExDQnNaVzRnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvZEdWemRGUjVjR1VvYjJKcUxDQmhjbWQxYldWdWRITmJhVjBwSUQwOVBTQjBjblZsS1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1ptRnNjMlU3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJ5YjNCelJHbG1abVZ5S0c5c1pGQnliM0J6TENCdVpYZFFjbTl3Y3l3Z2MydHBjRXRsZVhNcElIdGNiaUFnYVdZZ0tHOXNaRkJ5YjNCeklEMDlQU0J1WlhkUWNtOXdjeWxjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJ2YkdSUWNtOXdjeUFoUFQwZ2RIbHdaVzltSUc1bGQxQnliM0J6S1Z4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJR2xtSUNnaGIyeGtVSEp2Y0hNZ0ppWWdibVYzVUhKdmNITXBYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzVjYmlBZ2FXWWdLRzlzWkZCeWIzQnpJQ1ltSUNGdVpYZFFjbTl3Y3lsY2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JseHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnWlhGbGNXVnhYRzRnSUdsbUlDZ2hiMnhrVUhKdmNITWdKaVlnSVc1bGQxQnliM0J6SUNZbUlHOXNaRkJ5YjNCeklDRTlJRzlzWkZCeWIzQnpLVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1WEc0Z0lHeGxkQ0JoUzJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0c5c1pGQnliM0J6S1M1amIyNWpZWFFvVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzY3lodmJHUlFjbTl3Y3lrcE8xeHVJQ0JzWlhRZ1lrdGxlWE1nUFNCUFltcGxZM1F1YTJWNWN5aHVaWGRRY205d2N5a3VZMjl1WTJGMEtFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9ibVYzVUhKdmNITXBLVHRjYmx4dUlDQnBaaUFvWVV0bGVYTXViR1Z1WjNSb0lDRTlQU0JpUzJWNWN5NXNaVzVuZEdncFhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQXNJR2xzSUQwZ1lVdGxlWE11YkdWdVozUm9PeUJwSUR3Z2FXdzdJR2tyS3lrZ2UxeHVJQ0FnSUd4bGRDQmhTMlY1SUQwZ1lVdGxlWE5iYVYwN1hHNGdJQ0FnYVdZZ0tITnJhWEJMWlhseklDWW1JSE5yYVhCTFpYbHpMbWx1WkdWNFQyWW9ZVXRsZVNrZ1BqMGdNQ2xjYmlBZ0lDQWdJR052Ym5ScGJuVmxPMXh1WEc0Z0lDQWdhV1lnS0c5c1pGQnliM0J6VzJGTFpYbGRJQ0U5UFNCdVpYZFFjbTl3YzF0aFMyVjVYU2xjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dVhHNGdJQ0FnYkdWMElHSkxaWGtnUFNCaVMyVjVjMXRwWFR0Y2JpQWdJQ0JwWmlBb2MydHBjRXRsZVhNZ0ppWWdjMnRwY0V0bGVYTXVhVzVrWlhoUFppaGlTMlY1S1NsY2JpQWdJQ0FnSUdOdmJuUnBiblZsTzF4dVhHNGdJQ0FnYVdZZ0tHRkxaWGtnUFQwOUlHSkxaWGtwWEc0Z0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmx4dUlDQWdJR2xtSUNodmJHUlFjbTl3YzF0aVMyVjVYU0FoUFQwZ2JtVjNVSEp2Y0hOYllrdGxlVjBwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMmw2WlU5bUtIWmhiSFZsS1NCN1hHNGdJR2xtSUNnaGRtRnNkV1VwWEc0Z0lDQWdjbVYwZFhKdUlEQTdYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNXBjeWhKYm1acGJtbDBlU2twWEc0Z0lDQWdjbVYwZFhKdUlEQTdYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlM1c1pXNW5kR2dnUFQwOUlDZHVkVzFpWlhJbktWeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNXNaVzVuZEdnN1hHNWNiaUFnY21WMGRYSnVJRTlpYW1WamRDNXJaWGx6S0haaGJIVmxLUzVzWlc1bmRHZzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOXBkR1Z5WVhSbEtHOWlhaXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdhV1lnS0NGdlltb2dmSHdnVDJKcVpXTjBMbWx6S0VsdVptbHVhWFI1S1NsY2JpQWdJQ0J5WlhSMWNtNGdXMTA3WEc1Y2JpQWdiR1YwSUhKbGMzVnNkSE1nSUNBOUlGdGRPMXh1SUNCc1pYUWdjMk52Y0dVZ0lDQWdJRDBnZXlCamIyeHNaV04wYVc5dU9pQnZZbW9zSUZOVVQxQWdmVHRjYmlBZ2JHVjBJSEpsYzNWc2REdGNibHh1SUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNodlltb3BLU0I3WEc0Z0lDQWdjMk52Y0dVdWRIbHdaU0E5SUNkQmNuSmhlU2M3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2dhV3dnUFNCdlltb3ViR1Z1WjNSb095QnBJRHdnYVd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnYzJOdmNHVXVkbUZzZFdVZ1BTQnZZbXBiYVYwN1hHNGdJQ0FnSUNCelkyOXdaUzVwYm1SbGVDQTlJSE5qYjNCbExtdGxlU0E5SUdrN1hHNWNiaUFnSUNBZ0lISmxjM1ZzZENBOUlHTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5d2djMk52Y0dVcE8xeHVJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQTlQVDBnVTFSUFVDbGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNBZ0lISmxjM1ZzZEhNdWNIVnphQ2h5WlhOMWJIUXBPMXh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYjJKcUxtVnVkSEpwWlhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0JwWmlBb2IySnFJR2x1YzNSaGJtTmxiMllnVTJWMElIeDhJRzlpYWk1amIyNXpkSEoxWTNSdmNpNXVZVzFsSUQwOVBTQW5VMlYwSnlrZ2UxeHVJQ0FnSUNBZ2MyTnZjR1V1ZEhsd1pTQTlJQ2RUWlhRbk8xeHVYRzRnSUNBZ0lDQnNaWFFnYVc1a1pYZ2dQU0F3TzF4dUlDQWdJQ0FnWm05eUlDaHNaWFFnYVhSbGJTQnZaaUJ2WW1vdWRtRnNkV1Z6S0NrcElIdGNiaUFnSUNBZ0lDQWdjMk52Y0dVdWRtRnNkV1VnUFNCcGRHVnRPMXh1SUNBZ0lDQWdJQ0J6WTI5d1pTNXJaWGtnUFNCcGRHVnRPMXh1SUNBZ0lDQWdJQ0J6WTI5d1pTNXBibVJsZUNBOUlHbHVaR1Y0S3lzN1hHNWNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdZMkZzYkdKaFkyc3VZMkZzYkNoMGFHbHpMQ0J6WTI5d1pTazdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwOUlGTlVUMUFwWEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc1Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwY3k1d2RYTm9LSEpsYzNWc2RDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOamIzQmxMblI1Y0dVZ1BTQnZZbW91WTI5dWMzUnlkV04wYjNJdWJtRnRaVHRjYmx4dUlDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ01EdGNiaUFnSUNBZ0lHWnZjaUFvYkdWMElGc2dhMlY1TENCMllXeDFaU0JkSUc5bUlHOWlhaTVsYm5SeWFXVnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ2MyTnZjR1V1ZG1Gc2RXVWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdjMk52Y0dVdWEyVjVJRDBnYTJWNU8xeHVJQ0FnSUNBZ0lDQnpZMjl3WlM1cGJtUmxlQ0E5SUdsdVpHVjRLeXM3WEc1Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ1kyRnNiR0poWTJzdVkyRnNiQ2gwYUdsekxDQnpZMjl3WlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUZOVVQxQXBYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnY21WemRXeDBjeTV3ZFhOb0tISmxjM1ZzZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaHBibk4wWVc1alpVOW1LRzlpYWl3Z0oySnZiMnhsWVc0bkxDQW5iblZ0WW1WeUp5d2dKMkpwWjJsdWRDY3NJQ2RtZFc1amRHbHZiaWNwS1Z4dUlDQWdJQ0FnY21WMGRYSnVPMXh1WEc0Z0lDQWdjMk52Y0dVdWRIbHdaU0E5SUNodlltb3VZMjl1YzNSeWRXTjBiM0lwSUQ4Z2IySnFMbU52Ym5OMGNuVmpkRzl5TG01aGJXVWdPaUFuVDJKcVpXTjBKenRjYmx4dUlDQWdJR3hsZENCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb2IySnFLVHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2FXd2dQU0JyWlhsekxteGxibWQwYURzZ2FTQThJR2xzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR3hsZENCclpYa2dJQ0E5SUd0bGVYTmJhVjA3WEc0Z0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCdlltcGJhMlY1WFR0Y2JseHVJQ0FnSUNBZ2MyTnZjR1V1ZG1Gc2RXVWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lITmpiM0JsTG10bGVTQTlJR3RsZVR0Y2JpQWdJQ0FnSUhOamIzQmxMbWx1WkdWNElEMGdhVHRjYmx4dUlDQWdJQ0FnY21WemRXeDBJRDBnWTJGc2JHSmhZMnN1WTJGc2JDaDBhR2x6TENCelkyOXdaU2s3WEc0Z0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQlRWRTlRS1Z4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnY21WemRXeDBjeTV3ZFhOb0tISmxjM1ZzZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkSE03WEc1OVhHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWektGOXBkR1Z5WVhSbExDQjdYRzRnSUNkVFZFOVFKem9nZTF4dUlDQWdJSGR5YVhSaFlteGxPaUFnSUNBZ1ptRnNjMlVzWEc0Z0lDQWdaVzUxYldWeVlXSnNaVG9nSUNCbVlXeHpaU3hjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lIWmhiSFZsT2lBZ0lDQWdJQ0FnVTFSUFVDeGNiaUFnZlN4Y2JuMHBPMXh1WEc1amIyNXpkQ0JwZEdWeVlYUmxJRDBnWDJsMFpYSmhkR1U3WEc1Y2JtWjFibU4wYVc5dUlHTm9hV3hrY21WdVJHbG1abVZ5S0Y5amFHbHNaSEpsYmpFc0lGOWphR2xzWkhKbGJqSXBJSHRjYmlBZ2JHVjBJR05vYVd4a2NtVnVNU0E5SUNnaFFYSnlZWGt1YVhOQmNuSmhlU2hmWTJocGJHUnlaVzR4S1NrZ1B5QmJJRjlqYUdsc1pISmxiakVnWFNBNklGOWphR2xzWkhKbGJqRTdYRzRnSUd4bGRDQmphR2xzWkhKbGJqSWdQU0FvSVVGeWNtRjVMbWx6UVhKeVlYa29YMk5vYVd4a2NtVnVNaWtwSUQ4Z1d5QmZZMmhwYkdSeVpXNHlJRjBnT2lCZlkyaHBiR1J5Wlc0eU8xeHVYRzRnSUhKbGRIVnliaUFvWkdWaFpHSmxaV1pmWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHlndUxpNWphR2xzWkhKbGJqRXBJQ0U5UFNCa1pXRmtZbVZsWmw5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTUY5ZktDNHVMbU5vYVd4a2NtVnVNaWtwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJtWlhSamFFUmxaWEJRY205d1pYSjBlU2h2WW1vc0lGOXJaWGtzSUdSbFptRjFiSFJXWVd4MVpTd2diR0Z6ZEZCaGNuUXBJSHRjYmlBZ2FXWWdLRzlpYWlBOVBTQnVkV3hzSUh4OElFOWlhbVZqZEM1cGN5aE9ZVTRzSUc5aWFpa2dmSHdnVDJKcVpXTjBMbWx6S0VsdVptbHVhWFI1TENCdlltb3BLVnh1SUNBZ0lISmxkSFZ5YmlBb2JHRnpkRkJoY25RcElEOGdXeUJrWldaaGRXeDBWbUZzZFdVc0lHNTFiR3dnWFNBNklHUmxabUYxYkhSV1lXeDFaVHRjYmx4dUlDQnBaaUFvWDJ0bGVTQTlQU0J1ZFd4c0lIeDhJRTlpYW1WamRDNXBjeWhPWVU0c0lGOXJaWGtwSUh4OElFOWlhbVZqZEM1cGN5aEpibVpwYm1sMGVTd2dYMnRsZVNrcFhHNGdJQ0FnY21WMGRYSnVJQ2hzWVhOMFVHRnlkQ2tnUHlCYklHUmxabUYxYkhSV1lXeDFaU3dnYm5Wc2JDQmRJRG9nWkdWbVlYVnNkRlpoYkhWbE8xeHVYRzRnSUd4bGRDQndZWEowY3p0Y2JseHVJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hmYTJWNUtTa2dlMXh1SUNBZ0lIQmhjblJ6SUQwZ1gydGxlVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1gydGxlU0E5UFQwZ0ozTjViV0p2YkNjcElIdGNiaUFnSUNCd1lYSjBjeUE5SUZzZ1gydGxlU0JkTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUd4bGRDQnJaWGtnSUNBZ0lDQWdJQ0E5SUNnbkp5QXJJRjlyWlhrcE8xeHVJQ0FnSUd4bGRDQnNZWE4wU1c1a1pYZ2dJQ0E5SURBN1hHNGdJQ0FnYkdWMElHeGhjM1JEZFhKemIzSWdJRDBnTUR0Y2JseHVJQ0FnSUhCaGNuUnpJRDBnVzEwN1hHNWNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRZMjl1YzNSaGJuUXRZMjl1WkdsMGFXOXVYRzRnSUNBZ2QyaHBiR1VnS0hSeWRXVXBJSHRjYmlBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SUd0bGVTNXBibVJsZUU5bUtDY3VKeXdnYkdGemRFbHVaR1Y0S1R0Y2JpQWdJQ0FnSUdsbUlDaHBibVJsZUNBOElEQXBJSHRjYmlBZ0lDQWdJQ0FnY0dGeWRITXVjSFZ6YUNoclpYa3VjM1ZpYzNSeWFXNW5LR3hoYzNSRGRYSnpiM0lwS1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHJaWGt1WTJoaGNrRjBLR2x1WkdWNElDMGdNU2tnUFQwOUlDZGNYRnhjSnlrZ2UxeHVJQ0FnSUNBZ0lDQnNZWE4wU1c1a1pYZ2dQU0JwYm1SbGVDQXJJREU3WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCd1lYSjBjeTV3ZFhOb0tHdGxlUzV6ZFdKemRISnBibWNvYkdGemRFTjFjbk52Y2l3Z2FXNWtaWGdwS1R0Y2JpQWdJQ0FnSUd4aGMzUkRkWEp6YjNJZ1BTQnNZWE4wU1c1a1pYZ2dQU0JwYm1SbGVDQXJJREU3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYkdWMElIQmhjblJPSUQwZ2NHRnlkSE5iY0dGeWRITXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lHbG1JQ2h3WVhKMGN5NXNaVzVuZEdnZ1BUMDlJREFwWEc0Z0lDQWdjbVYwZFhKdUlDaHNZWE4wVUdGeWRDa2dQeUJiSUdSbFptRjFiSFJXWVd4MVpTd2djR0Z5ZEU0Z1hTQTZJR1JsWm1GMWJIUldZV3gxWlR0Y2JseHVJQ0JzWlhRZ1kzVnljbVZ1ZEZaaGJIVmxJRDBnYjJKcU8xeHVJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Dd2dhV3dnUFNCd1lYSjBjeTVzWlc1bmRHZzdJR2tnUENCcGJEc2dhU3NyS1NCN1hHNGdJQ0FnYkdWMElHdGxlU0E5SUhCaGNuUnpXMmxkTzF4dVhHNGdJQ0FnWTNWeWNtVnVkRlpoYkhWbElEMGdZM1Z5Y21WdWRGWmhiSFZsVzJ0bGVWMDdYRzRnSUNBZ2FXWWdLR04xY25KbGJuUldZV3gxWlNBOVBTQnVkV3hzS1Z4dUlDQWdJQ0FnY21WMGRYSnVJQ2hzWVhOMFVHRnlkQ2tnUHlCYklHUmxabUYxYkhSV1lXeDFaU3dnY0dGeWRFNGdYU0E2SUdSbFptRjFiSFJXWVd4MVpUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQW9iR0Z6ZEZCaGNuUXBJRDhnV3lCamRYSnlaVzUwVm1Gc2RXVXNJSEJoY25ST0lGMGdPaUJqZFhKeVpXNTBWbUZzZFdVN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdKcGJtUk5aWFJvYjJSektGOXdjbTkwYnl3Z2MydHBjRkJ5YjNSdmN5a2dlMXh1SUNCc1pYUWdjSEp2ZEc4Z0lDQWdJQ0FnSUNBZ0lEMGdYM0J5YjNSdk8xeHVJQ0JzWlhRZ1lXeHlaV0ZrZVZacGMybDBaV1FnSUQwZ2JtVjNJRk5sZENncE8xeHVYRzRnSUhkb2FXeGxJQ2h3Y205MGJ5a2dlMXh1SUNBZ0lHeGxkQ0JrWlhOamNtbHdkRzl5Y3lBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0p6S0hCeWIzUnZLVHRjYmlBZ0lDQnNaWFFnYTJWNWN5QWdJQ0FnSUNBZ1BTQlBZbXBsWTNRdWEyVjVjeWhrWlhOamNtbHdkRzl5Y3lrdVkyOXVZMkYwS0U5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNb1pHVnpZM0pwY0hSdmNuTXBLVHRjYmx4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUd0bGVYTXViR1Z1WjNSb095QnBJRHdnYVd3N0lHa3JLeWtnZTF4dUlDQWdJQ0FnYkdWMElHdGxlU0E5SUd0bGVYTmJhVjA3WEc0Z0lDQWdJQ0JwWmlBb2EyVjVJRDA5UFNBblkyOXVjM1J5ZFdOMGIzSW5LVnh1SUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmx4dUlDQWdJQ0FnYVdZZ0tHRnNjbVZoWkhsV2FYTnBkR1ZrTG1oaGN5aHJaWGtwS1Z4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JseHVJQ0FnSUNBZ1lXeHlaV0ZrZVZacGMybDBaV1F1WVdSa0tHdGxlU2s3WEc1Y2JpQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlIQnliM1J2VzJ0bGVWMDdYRzVjYmlBZ0lDQWdJQzh2SUZOcmFYQWdjSEp2ZEc5MGVYQmxJRzltSUU5aWFtVmpkRnh1SUNBZ0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRzV2TFhCeWIzUnZkSGx3WlMxaWRXbHNkR2x1YzF4dUlDQWdJQ0FnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGtvYTJWNUtTQW1KaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxXMnRsZVYwZ1BUMDlJSFpoYkhWbEtWeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNibHh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQWhQVDBnSjJaMWJtTjBhVzl1SnlsY2JpQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNWNiaUFnSUNBZ0lIUm9hWE5iYTJWNVhTQTlJSFpoYkhWbExtSnBibVFvZEdocGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NISnZkRzhnUFNCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9jSEp2ZEc4cE8xeHVJQ0FnSUdsbUlDaHdjbTkwYnlBOVBUMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTbGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dVhHNGdJQ0FnYVdZZ0tITnJhWEJRY205MGIzTWdKaVlnYzJ0cGNGQnliM1J2Y3k1cGJtUmxlRTltS0hCeWIzUnZLU0ErUFNBd0tWeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTkZiWEIwZVNoMllXeDFaU2tnZTF4dUlDQnBaaUFvZG1Gc2RXVWdQVDBnYm5Wc2JDbGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNibHh1SUNCcFppQW9UMkpxWldOMExtbHpLSFpoYkhWbExDQkpibVpwYm1sMGVTa3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lHbG1JQ2hQWW1wbFkzUXVhWE1vZG1Gc2RXVXNJRTVoVGlrcFhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tHbHVjM1JoYm1ObFQyWW9kbUZzZFdVc0lDZHpkSEpwYm1jbktTbGNiaUFnSUNCeVpYUjFjbTRnSVNndlhGeFRMeWt1ZEdWemRDaDJZV3gxWlNrN1hHNGdJR1ZzYzJVZ2FXWWdLR2x1YzNSaGJtTmxUMllvZG1Gc2RXVXNJQ2R1ZFcxaVpYSW5LU0FtSmlCcGMwWnBibWwwWlNoMllXeDFaU2twWEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQmxiSE5sSUdsbUlDZ2hhVzV6ZEdGdVkyVlBaaWgyWVd4MVpTd2dKMkp2YjJ4bFlXNG5MQ0FuWW1sbmFXNTBKeXdnSjJaMWJtTjBhVzl1SnlrZ0ppWWdjMmw2WlU5bUtIWmhiSFZsS1NBOVBUMGdNQ2xjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmx4dUlDQnlaWFIxY200Z1ptRnNjMlU3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6VG05MFJXMXdkSGtvZG1Gc2RXVXBJSHRjYmlBZ2NtVjBkWEp1SUNGcGMwVnRjSFI1TG1OaGJHd29kR2hwY3l3Z2RtRnNkV1VwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJtYkdGMGRHVnVRWEp5WVhrb2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLSFpoYkhWbEtTbGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzVjYmlBZ2JHVjBJRzVsZDBGeWNtRjVJRDBnVzEwN1hHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnBiQ0E5SUhaaGJIVmxMbXhsYm1kMGFEc2dhU0E4SUdsc095QnBLeXNwSUh0Y2JpQWdJQ0JzWlhRZ2FYUmxiU0E5SUhaaGJIVmxXMmxkTzF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR2wwWlcwcEtWeHVJQ0FnSUNBZ2JtVjNRWEp5WVhrZ1BTQnVaWGRCY25KaGVTNWpiMjVqWVhRb1pteGhkSFJsYmtGeWNtRjVLR2wwWlcwcEtUdGNiaUFnSUNCbGJITmxYRzRnSUNBZ0lDQnVaWGRCY25KaGVTNXdkWE5vS0dsMFpXMHBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRzVsZDBGeWNtRjVPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMVpoYkdsa1EyaHBiR1FvWTJocGJHUXBJSHRjYmlBZ2FXWWdLR05vYVd4a0lEMDlJRzUxYkd3cFhHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyaHBiR1FnUFQwOUlDZGliMjlzWldGdUp5bGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNXBjeWhqYUdsc1pDd2dTVzVtYVc1cGRIa3BLVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQnBaaUFvVDJKcVpXTjBMbWx6S0dOb2FXeGtMQ0JPWVU0cEtWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNCeVpYUjFjbTRnZEhKMVpUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTkpkR1Z5WVdKc1pVTm9hV3hrS0dOb2FXeGtLU0I3WEc0Z0lHbG1JQ2hqYUdsc1pDQTlQU0J1ZFd4c0lIeDhJRTlpYW1WamRDNXBjeWhqYUdsc1pDd2dUbUZPS1NCOGZDQlBZbXBsWTNRdWFYTW9ZMmhwYkdRc0lFbHVabWx1YVhSNUtTbGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ2NtVjBkWEp1SUNoQmNuSmhlUzVwYzBGeWNtRjVLR05vYVd4a0tTQjhmQ0IwZVhCbGIyWWdZMmhwYkdRZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUNGcGJuTjBZVzVqWlU5bUtHTm9hV3hrTENBblltOXZiR1ZoYmljc0lDZHVkVzFpWlhJbkxDQW5jM1J5YVc1bkp5a3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnViM2NvS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnY0dWeVptOXliV0Z1WTJVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIUjVjR1Z2WmlCd1pYSm1iM0p0WVc1alpTNXViM2NnUFQwOUlDZG1kVzVqZEdsdmJpY3BYRzRnSUNBZ2NtVjBkWEp1SUhCbGNtWnZjbTFoYm1ObExtNXZkeWdwTzF4dUlDQmxiSE5sWEc0Z0lDQWdjbVYwZFhKdUlFUmhkR1V1Ym05M0tDazdYRzU5WEc1Y2JseHVMeW9xS2k4Z2ZTbGNibHh1THlvcUtpb3FLaThnZlNrN1hHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1THlvcUtpb3FLaThnTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dUx5b3FLaW9xS2k4Z2RtRnlJRjlmZDJWaWNHRmphMTl0YjJSMWJHVmZZMkZqYUdWZlh5QTlJSHQ5TzF4dUx5b3FLaW9xS2k4Z1hHNHZLaW9xS2lvcUx5QXZMeUJVYUdVZ2NtVnhkV2x5WlNCbWRXNWpkR2x2Ymx4dUx5b3FLaW9xS2k4Z1puVnVZM1JwYjI0Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aHRiMlIxYkdWSlpDa2dlMXh1THlvcUtpb3FLaThnWEhRdkx5QkRhR1ZqYXlCcFppQnRiMlIxYkdVZ2FYTWdhVzRnWTJGamFHVmNiaThxS2lvcUtpb3ZJRngwZG1GeUlHTmhZMmhsWkUxdlpIVnNaU0E5SUY5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWTJGamFHVmZYMXR0YjJSMWJHVkpaRjA3WEc0dktpb3FLaW9xTHlCY2RHbG1JQ2hqWVdOb1pXUk5iMlIxYkdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUx5b3FLaW9xS2k4Z1hIUmNkSEpsZEhWeWJpQmpZV05vWldSTmIyUjFiR1V1Wlhod2IzSjBjenRjYmk4cUtpb3FLaW92SUZ4MGZWeHVMeW9xS2lvcUtpOGdYSFF2THlCRGNtVmhkR1VnWVNCdVpYY2diVzlrZFd4bElDaGhibVFnY0hWMElHbDBJR2x1ZEc4Z2RHaGxJR05oWTJobEtWeHVMeW9xS2lvcUtpOGdYSFIyWVhJZ2JXOWtkV3hsSUQwZ1gxOTNaV0p3WVdOclgyMXZaSFZzWlY5allXTm9aVjlmVzIxdlpIVnNaVWxrWFNBOUlIdGNiaThxS2lvcUtpb3ZJRngwWEhRdkx5QnVieUJ0YjJSMWJHVXVhV1FnYm1WbFpHVmtYRzR2S2lvcUtpb3FMeUJjZEZ4MEx5OGdibThnYlc5a2RXeGxMbXh2WVdSbFpDQnVaV1ZrWldSY2JpOHFLaW9xS2lvdklGeDBYSFJsZUhCdmNuUnpPaUI3ZlZ4dUx5b3FLaW9xS2k4Z1hIUjlPMXh1THlvcUtpb3FLaThnWEc0dktpb3FLaW9xTHlCY2RDOHZJRVY0WldOMWRHVWdkR2hsSUcxdlpIVnNaU0JtZFc1amRHbHZibHh1THlvcUtpb3FLaThnWEhSZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZlcyMXZaSFZzWlVsa1hTNWpZV3hzS0cxdlpIVnNaUzVsZUhCdmNuUnpMQ0J0YjJSMWJHVXNJRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLVHRjYmk4cUtpb3FLaW92SUZ4dUx5b3FLaW9xS2k4Z1hIUXZMeUJTWlhSMWNtNGdkR2hsSUdWNGNHOXlkSE1nYjJZZ2RHaGxJRzF2WkhWc1pWeHVMeW9xS2lvcUtpOGdYSFJ5WlhSMWNtNGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNHZLaW9xS2lvcUx5QjlYRzR2S2lvcUtpb3FMeUJjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhHNHZLaW9xS2lvcUx5QXZLaUIzWldKd1lXTnJMM0oxYm5ScGJXVXZaR1ZtYVc1bElIQnliM0JsY25SNUlHZGxkSFJsY25NZ0tpOWNiaThxS2lvcUtpb3ZJQ2dvS1NBOVBpQjdYRzR2S2lvcUtpb3FMeUJjZEM4dklHUmxabWx1WlNCblpYUjBaWElnWm5WdVkzUnBiMjV6SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JpOHFLaW9xS2lvdklGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrSUQwZ0tHVjRjRzl5ZEhNc0lHUmxabWx1YVhScGIyNHBJRDArSUh0Y2JpOHFLaW9xS2lvdklGeDBYSFJtYjNJb2RtRnlJR3RsZVNCcGJpQmtaV1pwYm1sMGFXOXVLU0I3WEc0dktpb3FLaW9xTHlCY2RGeDBYSFJwWmloZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOG9aR1ZtYVc1cGRHbHZiaXdnYTJWNUtTQW1KaUFoWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dktHVjRjRzl5ZEhNc0lHdGxlU2twSUh0Y2JpOHFLaW9xS2lvdklGeDBYSFJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJR3RsZVN3Z2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQm5aWFE2SUdSbFptbHVhWFJwYjI1YmEyVjVYU0I5S1R0Y2JpOHFLaW9xS2lvdklGeDBYSFJjZEgxY2JpOHFLaW9xS2lvdklGeDBYSFI5WEc0dktpb3FLaW9xTHlCY2RIMDdYRzR2S2lvcUtpb3FMeUI5S1NncE8xeHVMeW9xS2lvcUtpOGdYRzR2S2lvcUtpb3FMeUF2S2lCM1pXSndZV05yTDNKMWJuUnBiV1V2WjJ4dlltRnNJQ292WEc0dktpb3FLaW9xTHlBb0tDa2dQVDRnZTF4dUx5b3FLaW9xS2k4Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbWNnUFNBb1puVnVZM1JwYjI0b0tTQjdYRzR2S2lvcUtpb3FMeUJjZEZ4MGFXWWdLSFI1Y0dWdlppQm5iRzlpWVd4VWFHbHpJRDA5UFNBbmIySnFaV04wSnlrZ2NtVjBkWEp1SUdkc2IySmhiRlJvYVhNN1hHNHZLaW9xS2lvcUx5QmNkRngwZEhKNUlIdGNiaThxS2lvcUtpb3ZJRngwWEhSY2RISmxkSFZ5YmlCMGFHbHpJSHg4SUc1bGR5QkdkVzVqZEdsdmJpZ25jbVYwZFhKdUlIUm9hWE1uS1NncE8xeHVMeW9xS2lvcUtpOGdYSFJjZEgwZ1kyRjBZMmdnS0dVcElIdGNiaThxS2lvcUtpb3ZJRngwWEhSY2RHbG1JQ2gwZVhCbGIyWWdkMmx1Wkc5M0lEMDlQU0FuYjJKcVpXTjBKeWtnY21WMGRYSnVJSGRwYm1SdmR6dGNiaThxS2lvcUtpb3ZJRngwWEhSOVhHNHZLaW9xS2lvcUx5QmNkSDBwS0NrN1hHNHZLaW9xS2lvcUx5QjlLU2dwTzF4dUx5b3FLaW9xS2k4Z1hHNHZLaW9xS2lvcUx5QXZLaUIzWldKd1lXTnJMM0oxYm5ScGJXVXZhR0Z6VDNkdVVISnZjR1Z5ZEhrZ2MyaHZjblJvWVc1a0lDb3ZYRzR2S2lvcUtpb3FMeUFvS0NrZ1BUNGdlMXh1THlvcUtpb3FLaThnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOGdQU0FvYjJKcUxDQndjbTl3S1NBOVBpQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzlpYWl3Z2NISnZjQ2twWEc0dktpb3FLaW9xTHlCOUtTZ3BPMXh1THlvcUtpb3FLaThnWEc0dktpb3FLaW9xTHlBdktpQjNaV0p3WVdOckwzSjFiblJwYldVdmJXRnJaU0J1WVcxbGMzQmhZMlVnYjJKcVpXTjBJQ292WEc0dktpb3FLaW9xTHlBb0tDa2dQVDRnZTF4dUx5b3FLaW9xS2k4Z1hIUXZMeUJrWldacGJtVWdYMTlsYzAxdlpIVnNaU0J2YmlCbGVIQnZjblJ6WEc0dktpb3FLaW9xTHlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjaUE5SUNobGVIQnZjblJ6S1NBOVBpQjdYRzR2S2lvcUtpb3FMeUJjZEZ4MGFXWW9kSGx3Wlc5bUlGTjViV0p2YkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbktTQjdYRzR2S2lvcUtpb3FMeUJjZEZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnVTNsdFltOXNMblJ2VTNSeWFXNW5WR0ZuTENCN0lIWmhiSFZsT2lBblRXOWtkV3hsSnlCOUtUdGNiaThxS2lvcUtpb3ZJRngwWEhSOVhHNHZLaW9xS2lvcUx5QmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lDZGZYMlZ6VFc5a2RXeGxKeXdnZXlCMllXeDFaVG9nZEhKMVpTQjlLVHRjYmk4cUtpb3FLaW92SUZ4MGZUdGNiaThxS2lvcUtpb3ZJSDBwS0NrN1hHNHZLaW9xS2lvcUx5QmNiaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEc1MllYSWdYMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeUE5SUh0OU8xeHVMeThnVkdocGN5QmxiblJ5ZVNCdVpXVmtJSFJ2SUdKbElIZHlZWEJ3WldRZ2FXNGdZVzRnU1VsR1JTQmlaV05oZFhObElHbDBJRzVsWldRZ2RHOGdZbVVnYVhOdmJHRjBaV1FnWVdkaGFXNXpkQ0J2ZEdobGNpQnRiMlIxYkdWeklHbHVJSFJvWlNCamFIVnVheTVjYmlnb0tTQTlQaUI3WEc0dktpRXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xSVNwY1hGeHVJQ0FoS2lvcUlDNHZiR2xpTDJsdVpHVjRMbXB6SUNvcUtpRmNiaUFnWEZ3cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh1WDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eUtGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHBPMXh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThzSUh0Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENJa1hDSTZJQ2dwSUQwK0lDZ3ZLaUJ5WldWNGNHOXlkQ0J6WVdabElDb3ZJRjlxYVdKZmFuTmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6QmZYeTRrS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKRGIyMXdiMjVsYm5SY0lqb2dLQ2tnUFQ0Z0tDOHFJSEpsWlhod2IzSjBJSE5oWm1VZ0tpOGdYMk52YlhCdmJtVnVkRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTVY5ZkxrTnZiWEJ2Ym1WdWRDa3NYRzR2S2lCb1lYSnRiMjU1SUdWNGNHOXlkQ0FxTHlBZ0lGd2lRMjl0Y0c5dVpXNTBjMXdpT2lBb0tTQTlQaUFvTHlvZ1ltbHVaR2x1WnlBcUx5QkRiMjF3YjI1bGJuUnpLU3hjYmk4cUlHaGhjbTF2Ym5rZ1pYaHdiM0owSUNvdklDQWdYQ0pLYVdKelhDSTZJQ2dwSUQwK0lDZ3ZLaUJpYVc1a2FXNW5JQ292SUVwcFluTXBMRnh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z0lDQmNJbEpsYm1SbGNtVnljMXdpT2lBb0tTQTlQaUFvTHlvZ1ltbHVaR2x1WnlBcUx5QlNaVzVrWlhKbGNuTXBMRnh1THlvZ2FHRnliVzl1ZVNCbGVIQnZjblFnS2k4Z0lDQmNJbFYwYVd4elhDSTZJQ2dwSUQwK0lDZ3ZLaUJ5WldWNGNHOXlkQ0J0YjJSMWJHVWdiMkpxWldOMElDb3ZJRjkxZEdsc2MxOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNMTlmS1N4Y2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJQ0FnWENKa1pXRmtZbVZsWmx3aU9pQW9LU0E5UGlBb0x5b2djbVZsZUhCdmNuUWdaR1ZtWVhWc2RDQmxlSEJ2Y25RZ1puSnZiU0J1WVcxbFpDQnRiMlIxYkdVZ0tpOGdaR1ZoWkdKbFpXWmZYMWRGUWxCQlEwdGZTVTFRVDFKVVJVUmZUVTlFVlV4Rlh6UmZYeWtzWEc0dktpQm9ZWEp0YjI1NUlHVjRjRzl5ZENBcUx5QWdJRndpWm1GamRHOXllVndpT2lBb0tTQTlQaUFvTHlvZ2NtVmxlSEJ2Y25RZ2MyRm1aU0FxTHlCZmFtbGlYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4dVptRmpkRzl5ZVNsY2JpOHFJR2hoY20xdmJua2daWGh3YjNKMElDb3ZJSDBwTzF4dUx5b2dhR0Z5Ylc5dWVTQnBiWEJ2Y25RZ0tpOGdkbUZ5SUY5cWFXSmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHlBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9MeW9oSUM0dmFtbGlMbXB6SUNvdklGd2lMaTlzYVdJdmFtbGlMbXB6WENJcE8xeHVMeW9nYUdGeWJXOXVlU0JwYlhCdmNuUWdLaThnZG1GeUlGOWpiMjF3YjI1bGJuUmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekZmWHlBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9MeW9oSUM0dlkyOXRjRzl1Wlc1MExtcHpJQ292SUZ3aUxpOXNhV0l2WTI5dGNHOXVaVzUwTG1welhDSXBPMXh1THlvZ2FHRnliVzl1ZVNCcGJYQnZjblFnS2k4Z2RtRnlJRjl5Wlc1a1pYSmxjbk5mYVc1a1pYaGZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekpmWHlBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9MeW9oSUM0dmNtVnVaR1Z5WlhKekwybHVaR1Y0TG1weklDb3ZJRndpTGk5c2FXSXZjbVZ1WkdWeVpYSnpMMmx1WkdWNExtcHpYQ0lwTzF4dUx5b2dhR0Z5Ylc5dWVTQnBiWEJ2Y25RZ0tpOGdkbUZ5SUY5MWRHbHNjMTlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTTE5ZklEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWd2S2lFZ0xpOTFkR2xzY3k1cWN5QXFMeUJjSWk0dmJHbGlMM1YwYVd4ekxtcHpYQ0lwTzF4dUx5b2dhR0Z5Ylc5dWVTQnBiWEJ2Y25RZ0tpOGdkbUZ5SUdSbFlXUmlaV1ZtWDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjgwWDE4Z1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLQzhxSVNCa1pXRmtZbVZsWmlBcUx5QmNJaTR2Ym05a1pWOXRiMlIxYkdWekwyUmxZV1JpWldWbUwyeHBZaTlwYm1SbGVDNXFjMXdpS1R0Y2JseHVYRzVqYjI1emRDQkthV0p6SUQwZ2UxeHVJQ0JLU1VKZlFrRlNVa1ZPT2lCZmFtbGlYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4dVNrbENYMEpCVWxKRlRpeGNiaUFnU2tsQ1gxQlNUMWhaT2lCZmFtbGlYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4dVNrbENYMUJTVDFoWkxGeHVJQ0JLU1VJNklGOXFhV0pmYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpCZlh5NUtTVUlzWEc0Z0lFcHBZam9nWDJwcFlsOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNRjlmTGtwcFlpeGNiaUFnYVhOS2FXSnBjMmc2SUY5cWFXSmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHk1cGMwcHBZbWx6YUN4Y2JpQWdZMjl1YzNSeWRXTjBTbWxpT2lCZmFtbGlYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh3WDE4dVkyOXVjM1J5ZFdOMFNtbGlMRnh1SUNCeVpYTnZiSFpsUTJocGJHUnlaVzQ2SUY5cWFXSmZhbk5mWDFkRlFsQkJRMHRmU1UxUVQxSlVSVVJmVFU5RVZVeEZYekJmWHk1eVpYTnZiSFpsUTJocGJHUnlaVzRzWEc1OU8xeHVYRzVjYmx4dVkyOXVjM1FnUTI5dGNHOXVaVzUwY3lBOUlIdGNiaUFnVlZCRVFWUkZYMFZXUlU1VU9pQmZZMjl0Y0c5dVpXNTBYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh4WDE4dVZWQkVRVlJGWDBWV1JVNVVMRnh1SUNCUlZVVlZSVjlWVUVSQlZFVmZUVVZVU0U5RU9pQmZZMjl0Y0c5dVpXNTBYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh4WDE4dVVWVkZWVVZmVlZCRVFWUkZYMDFGVkVoUFJDeGNiaUFnUmt4VlUwaGZWVkJFUVZSRlgwMUZWRWhQUkRvZ1gyTnZiWEJ2Ym1WdWRGOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNVjlmTGtaTVZWTklYMVZRUkVGVVJWOU5SVlJJVDBRc1hHNGdJRWxPU1ZSZlRVVlVTRTlFT2lCZlkyOXRjRzl1Wlc1MFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHhYMTh1U1U1SlZGOU5SVlJJVDBRc1hHNGdJRk5MU1ZCZlUxUkJWRVZmVlZCRVFWUkZVem9nWDJOdmJYQnZibVZ1ZEY5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1WOWZMbE5MU1ZCZlUxUkJWRVZmVlZCRVFWUkZVeXhjYmlBZ1VFVk9SRWxPUjE5VFZFRlVSVjlWVUVSQlZFVTZJRjlqYjIxd2IyNWxiblJmYW5OZlgxZEZRbEJCUTB0ZlNVMVFUMUpVUlVSZlRVOUVWVXhGWHpGZlh5NVFSVTVFU1U1SFgxTlVRVlJGWDFWUVJFRlVSU3hjYmlBZ1RFRlRWRjlTUlU1RVJWSmZWRWxOUlRvZ1gyTnZiWEJ2Ym1WdWRGOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNVjlmTGt4QlUxUmZVa1ZPUkVWU1gxUkpUVVVzWEc0Z0lGQlNSVlpKVDFWVFgxTlVRVlJGT2lCZlkyOXRjRzl1Wlc1MFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHhYMTh1VUZKRlZrbFBWVk5mVTFSQlZFVXNYRzU5TzF4dVhHNWNibHh1WTI5dWMzUWdVbVZ1WkdWeVpYSnpJRDBnZTF4dUlDQkRUMDVVUlZoVVgwbEVPaUJmY21WdVpHVnlaWEp6WDJsdVpHVjRYMnB6WDE5WFJVSlFRVU5MWDBsTlVFOVNWRVZFWDAxUFJGVk1SVjh5WDE4dVVtOXZkRTV2WkdVdVEwOU9WRVZZVkY5SlJDeGNiaUFnUms5U1EwVmZVa1ZHVEU5WE9pQmZjbVZ1WkdWeVpYSnpYMmx1WkdWNFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHlYMTh1Ums5U1EwVmZVa1ZHVEU5WExGeHVJQ0JTYjI5MFRtOWtaVG9nWDNKbGJtUmxjbVZ5YzE5cGJtUmxlRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTWw5ZkxsSnZiM1JPYjJSbExGeHVJQ0JTWlc1a1pYSmxjam9nWDNKbGJtUmxjbVZ5YzE5cGJtUmxlRjlxYzE5ZlYwVkNVRUZEUzE5SlRWQlBVbFJGUkY5TlQwUlZURVZmTWw5ZkxsSmxibVJsY21WeUxGeHVJQ0JTYjI5MFJXeGxiV1Z1ZERvZ1gzSmxibVJsY21WeWMxOXBibVJsZUY5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1sOWZMbEp2YjNSRmJHVnRaVzUwTEZ4dUlDQkRiMjF0Wlc1MFJXeGxiV1Z1ZERvZ1gzSmxibVJsY21WeWMxOXBibVJsZUY5cWMxOWZWMFZDVUVGRFMxOUpUVkJQVWxSRlJGOU5UMFJWVEVWZk1sOWZMa052YlcxbGJuUkZiR1Z0Wlc1MExGeHVJQ0JPWVhScGRtVkZiR1Z0Wlc1ME9pQmZjbVZ1WkdWeVpYSnpYMmx1WkdWNFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHlYMTh1VG1GMGFYWmxSV3hsYldWdWRDeGNiaUFnVUc5eWRHRnNSV3hsYldWdWREb2dYM0psYm1SbGNtVnljMTlwYm1SbGVGOXFjMTlmVjBWQ1VFRkRTMTlKVFZCUFVsUkZSRjlOVDBSVlRFVmZNbDlmTGxCdmNuUmhiRVZzWlcxbGJuUXNYRzRnSUZSbGVIUkZiR1Z0Wlc1ME9pQmZjbVZ1WkdWeVpYSnpYMmx1WkdWNFgycHpYMTlYUlVKUVFVTkxYMGxOVUU5U1ZFVkVYMDFQUkZWTVJWOHlYMTh1VkdWNGRFVnNaVzFsYm5Rc1hHNTlPMXh1WEc1Y2JseHVYRzVjYmx4dWZTa29LVHRjYmx4dWRtRnlJRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMThrSUQwZ1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5NGtPMXh1ZG1GeUlGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOURiMjF3YjI1bGJuUWdQU0JmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmTGtOdmJYQnZibVZ1ZER0Y2JuWmhjaUJmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmUTI5dGNHOXVaVzUwY3lBOUlGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHVRMjl0Y0c5dVpXNTBjenRjYm5aaGNpQmZYM2RsWW5CaFkydGZaWGh3YjNKMGMxOWZTbWxpY3lBOUlGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOHVTbWxpY3p0Y2JuWmhjaUJmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmVW1WdVpHVnlaWEp6SUQwZ1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5NVNaVzVrWlhKbGNuTTdYRzUyWVhJZ1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlgxVjBhV3h6SUQwZ1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5NVZkR2xzY3p0Y2JuWmhjaUJmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmWkdWaFpHSmxaV1lnUFNCZlgzZGxZbkJoWTJ0ZlpYaHdiM0owYzE5ZkxtUmxZV1JpWldWbU8xeHVkbUZ5SUY5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE5bVlXTjBiM0o1SUQwZ1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlh5NW1ZV04wYjNKNU8xeHVaWGh3YjNKMElIc2dYMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYeVFnWVhNZ0pDd2dYMTkzWldKd1lXTnJYMlY0Y0c5eWRITmZYME52YlhCdmJtVnVkQ0JoY3lCRGIyMXdiMjVsYm5Rc0lGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOURiMjF3YjI1bGJuUnpJR0Z6SUVOdmJYQnZibVZ1ZEhNc0lGOWZkMlZpY0dGamExOWxlSEJ2Y25SelgxOUthV0p6SUdGeklFcHBZbk1zSUY5ZmQyVmljR0ZqYTE5bGVIQnZjblJ6WDE5U1pXNWtaWEpsY25NZ1lYTWdVbVZ1WkdWeVpYSnpMQ0JmWDNkbFluQmhZMnRmWlhod2IzSjBjMTlmVlhScGJITWdZWE1nVlhScGJITXNJRjlmZDJWaWNHRmphMTlsZUhCdmNuUnpYMTlrWldGa1ltVmxaaUJoY3lCa1pXRmtZbVZsWml3Z1gxOTNaV0p3WVdOclgyVjRjRzl5ZEhOZlgyWmhZM1J2Y25rZ1lYTWdabUZqZEc5eWVTQjlPMXh1WEc0dkx5TWdjMjkxY21ObFRXRndjR2x1WjFWU1REMWtZWFJoT21Gd2NHeHBZMkYwYVc5dUwycHpiMjQ3WTJoaGNuTmxkRDExZEdZdE9EdGlZWE5sTmpRc1pYbEtNbHBZU25waFZ6bDFTV3B2ZWt4RFNtMWhWM2hzU1dwdmFXRlhOV3RhV0dkMVlXNU5hVXhEU25SWldFSjNZVmMxYm1ONVNUWkphbk0zVDNwek4wOTZjemRSVlVaQ1VWUnpOMUZWUmtaWlZITTNVVlZHUmxscGQzSlNSVVpDU3pCUmMyTlZTa0pSVlRBM1VWVkdSR05yVlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVY3pkUlZVWkdVVlJ6TjFGVlJrWlJWSFJDVVZWT1FreEliRVJSVlVZMVVYbDRVbEZWUmxKUE1FWkNVVEp3UlV4R1ZrSlJWbFZ6WWpCS1FsRlhPVU5QTUVaQ1VYcHNRMDh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZjMk5WU2tKUldFWkRURWRXUWxGWFZUZFBNRVpDVWxoQ1JFOHdSa0pSTUVVM1VWVkdSRkZUZUhSUk1FWkNZbFZOYzFOVlJrSlRVM2hzVVZWR2JFeEZiRUpSVldzM1R6QkdRbEpVUmtWUE1FWkNVVEJGTjA4d1JrSlNWVVZ6V1RCR1FsbDVlRkJSVlVaUVRFVmtRbEZWWTNOVFZVWkNVMVIwUWxGVlRURlJhbk0zVVZWR1JsRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSek4xRlZSa1pSVkhSQ1VWVk9Ra3hIYkVOUlZVWndVV2w0V0ZGVlJsaE1SV1JDVVZWamMxa3dSa0paZW5SQ1VWVk5NMUY2ZEVKUlZVNUNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNUekJHUWxFd1JYTmxWVTVDVVZoc1JFeEdSa0pSVmtVM1VWVkdSR0ZyVVRkUE1FWkNVbFZGTjFGVlJrUlJWSE0zVVZWR1JsRlVkRUpSVlU1Q1R6QkdRbEV3UlhObFZVNUNVVmhzUkV4R1JrSlJWa1UzVVZWR1JHRnJVVGRQTUVaQ1VsVkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVEVjeFExRlZSblJSYVhoMFVXdEdRbUpWU1RkUlZVWkVaRVZOTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSE0zVVZWR1JsRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVTNoSVVWVkdTRTh3UmtKUk1HYzNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKTVJXUkNVVlZqTjFGVlJrUlRSSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JYTlNNRVpDVW5wMFFsRlZUa2xQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRWhSVlVaSVR6QkdRbEV3WjNOUk1FWkNVWHB6TjFGVlJrWlNSSE0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBNRVpFVERCb1FrOTZkRUpSVlZWNVVYcDBRbEZWVGtWUE1FWkNVek5vUTA5NmRFSlJWVlpaVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVY3pkUlZVWkdWVVJ6TjFGVlJrWlJWSFJDVVZWT1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSE0zVVZWR1JsRlVkRUpSVlU1Q1QzcDBRbEZWVmxCTVNHUkRVVlZHTTFGcGVIWlNSVVpDVjFSMFFsRlZUWHBSZW5NM1VWVkdSbEZVZEVKUlZVNUNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQZW5SQ1VWVldRazk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVTNoS1VWVkdTa3hJVmtWUlZVWjZVV3B6TjFGVlJrWk5WVWszVHpCR1FsSlZSVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRlJSVlVaVVR6QkdRbEV4VVRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVWelZUQkdRbFY2ZEVKUlZVNVZURVU1UWxGVk9EZFJWVVpFVlVSek4xRlZSa1pSVTNnelVsVkdRbVF3VlRkUlZVWkVaVVZWTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRmMxUXdSa0pVZW5SQ1VWVk9VVTh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWTjRVRkZWUmxCUE1FWkNVVEZCTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZUZUhwUmEwWkNZekJKYzAxRlRrSlJWazAzVVZWR1JFd3dTWE5VTUVaQ1ZIcDBRbEZWVGxGUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVWelpEQktRbEZZWkVOUE1FWkNVVE5vUTB4Rk9VSlJWVGczVVZWR1JGVkVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRmMxUXdSa0pVZW5SQ1VWVk9VVTh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWTjRVRkZWUmxCUE1FWkNVVEZCTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNURVU1UWxGVk9EZFJWVVpFVlVSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVZ6VkRCR1FsUjZkRUpSVlU1UlR6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVTNoVVVWVkdWRTh3UmtKUk1WRTNVVlZHUkZGVWRFSlJWVTVDVEVjNVJsRlZSblpTVTNoT1VWVkdUazk2ZEVKUlZWVjRVbFIwUWxGVlRrSk1SazVDVVZaTk4xRlZSa1JXUTNoUVVWVkdVRTh3UmtKUk1VRnpVekJHUWxONmRFSlJWVTVOVDNwMFFsRlZWa0pQTUVaQ1VUQkZjMVl3UmtKV2VYZzFVa1ZHUW1Jd1NUZFJWVVpFVERCSk4wOHdSa0pTVlVVM1VWVkdSRkZUZUZoUlZVWllURWRzUlZGVlJsSlBNRVpDVVRJMVEwOTZkRUpSVlZaQ1R6QkdRbEV3UlhOV01FWkNWbmw0ZUZKRlJrSlhWSFJDVVZWT01sRnFjemRSVlVaR1VWUjBRbEZWVGtKUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1QzcDBRbEZWVmtKUE1FWkNVVEJGTjFGVlJrUlJWSE0zVVZWR1JsRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JYTlZNRVpDVlhwMFFsRlZUbFZNUlRsQ1VWVTROMUZWUmtSVlJITTNVVlZHUmxGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVEVaR1FsRldSWE5oVlZKQ1VWZGtRMDh3UmtKUk0yaERUekJHUWxFd1JUZFBNRVpDVWxWRmMyUXdUa0pSV0dSRVRFWkdRbEZXUlRkUlZVWkVZVVZSTjFGVlJrUlJVM2h5VVRCR1FtRXdUWE5rTUZKQ1VWaFdRMDh3UmtKUk0zQkZUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNURVV4UWxGVk1EZFJWVVpFVkdsNGFGRlZSbWhNU0dSRlVWVkdNVkZxZEVKUlZVNTNVWHAwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZUZUhCU1ZVWkNZVlZWYzFSVlJrSlVWSE0zVVZWR1JtUnJWVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPUWs4d1JrSlJNRVZ6WkRCV1FsRllaRVpNUlRGQ1VWVXdOMDh3UmtKU1ZHeEdUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pNUlRGQ1VWVXdOMUZWUmtSVWFuUkNVVlZPUWs4d1JrSlJNRVUzVHpCR1FsSlZSVGRSVlVaRVVWUjBRbEZWVGtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSk1TRTVFVVZWR2VsRjVlRkpSVlVaU1R6QkdRbEY2YkVSUE1FWkNVVEJGTjFGVlJrUlJWSE0zVVZWR1JsRlRlRlpSVlVaV1RFZHNSVkZWUm01UmFuUkNVVlZOZUZGcGQzbFJNRVpDVFd0TmMyRlZVa0pSVjJSRFR6QkdRbEY2VGtWTVJGSkVVVlZGTUZGNWVGSlJWVVpTVHpCR1FsRXpRa1ZQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWt4R1JrSlJWa1UzVVZWR1JGVnFkRUpSVlU1Q1R6QkdRbEV3UlRkUE1FWkNVbFZGYzFwVlJrSmFVM2h3VWtWR1Fsb3dTVGRSVlVaRVREQkpOMDh3UmtKU1ZVVnpZVlZLUWxGWGJFTk1SMnhGVVZWR2JsRnFkRUpSVlU1eFVYbDRWRkZWUmxSUGVuUkNVVlZXVlV4RVVrUlJWVVV3VVhsNFVsRlZSbEpQTUVaQ1VUTkNSVTh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVEVaR1FsRldSWE5WTUVaQ1ZYbDRjRkpGUmtKYU1FazNVVlZHUkdGclRUZFJWVVpFVVZOM2QxRXdSa0pOUlUxelZWVkdRbFZVZEVKUlZVNXpVa1IwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUM3AwUWxGVlZrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQZW5SQ1VWVldRazh3UmtKUk1FVTNVVlZHUkZGVGVGWlJWVVpXVEVkc1JWRlZSbTVSYW5SQ1VWVk5lRkZxY3pkUlZVWkdVVlIwUWxGVlRrSk1SR2hFVVZWRk5GRjVlRkpSVlVaU1R6QkdRbEV6VWtWUE1FWkNVVEJGYzFrd1JrSlplWGh3VWtWR1Fsb3dTVGRSVlVaRVQxVkpOMDh3UmtKU1ZVVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKTVJrWkNVVlpGTjFGVlJrUlZhblJDVVZWT1FreEVRa1JSVlVWM1VYbDRVbEZWUmxKUE1FWkNVVEo0UlU4d1JrSlJNRVUzVVZWR1JGRlVjemRSVlVaR1VWTjRhbEZWUm1wTVIyeEZVVlZHYmxGcWRFSlJWVTAxVVdwMFFsRlZUa0pNUnpGRFVWVkdkRkZwZUhCU1JVWkNXakJKTjFGVlJrUmlhMDAzVVZWR1JGRlVkRUpSVlU1Q1QzcDBRbEZWVmtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRE5SYTBaQ1pEQkpOMUZWUmtSbFJVbHpWREJHUWxSNmRFSlJWVTVSVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRSVlVaRVVWTjRVRkZWUmxCUGVuUkNVVlZXVVU4d1JrSlJNRVUzVVZWR1JGRlVjemRSVlVaR1VWUjBRbEZWVGtKUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRmMxWlZSa0pXVkhSQ1VWVk9WMDh3UmtKUk1FVTNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVEVoR1JGRlZSbmhSZVhoU1VWVkdVazh3UmtKUmVtUkVUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOHdSa1JPVjFaQ1QzcDBRbEZWVmxCUE1FWkNVVEZCTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZONFVGRlZSbEJQTUVaQ1VURkJjMU13UmtKVGVuUkNVVlZPVFU5NmRFSlJWVlpDVHpCR1FsRXdSVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUGVuUkNVVlZXUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVVZWR1JGRlVjemRSVlVaR1VWUjBRbEZWVGtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1QzcDBRbEZWVmtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVHpCR1FsSlZSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJWSE0zVVZWR1JsRlRlREZSTUVaQ1pGVk5jMVZWUmtKVlZIUkNVVlZOZGxGNmRFSlJWVTVDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVHpCR1FsSlZSVGRSVlVaRVVWUjBRbEZWVGtKUGVuUkNVVlZXUWs4d1JrSlJNRVUzVVZWR1JGRlVjemRSVlVaR1VWUjBRbEZWVGtKUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVZEVKUlZVNUNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUE1FWkVUakJrYmxGNmRFSlJWVTVLVDNwMFFsRlZWVE5SYW5SQ1VWVk9VVTh3UmtKUk1FVTNUekJHUWxKVlJUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVZ6VkRCR1FsUjZkRUpSVlU1UlR6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRmMyUXdTa0pSV0dSRFRFZGtSRkZWUm01UmVYaElVVlZHU0U4d1JrSlJlazVGVEVVNVFsRlZPRGRSVlVaRVZVUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FreElUa05SVlVaNlVXbDRkRkpGUmtKaE1FazNVVlZHUkdWRlRYTlVNRVpDVkhwMFFsRlZUbEZNUlhSQ1VWVnpOMUZWUmtSVVJIUkNVVlZPUWs5NmRFSlJWVlpRVHpCR1FsRXdSVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPVVV4SVJrUlJWVVo0VVhwMFFsRlZUbmxSZW5SQ1VWVk9Razk2ZEVKUlZWWkNUM3AwUWxGVlZrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZUZUZwUlZVWmFURWRzUlZGVlJtNVJhWGMwVVRCR1FrOUZUWE5oVlZKQ1VWZGtRMDh3UmtKUmVrWkhUekJHUWxFd1JUZFJWVVpFVVZSek4xRlZSa1pSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSWE5XTUVaQ1ZucDBRbEZWVGxsUGVuUkNVVlZXUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZONFZGRlZSbFJQTUVaQ1VURlJjMVV3UmtKVmVYZDVVVEJHUWxsNmRFSlJWVTR5VVdwMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWt4R1RrSlJWazAzVVZWR1JGWkRlRkJSVlVaUVQzcDBRbEZWVmxGUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRmMxUXdSa0pVZW5SQ1VWVk9VVXhGT1VKUlZUaHpUV3RPUWxGWFRUZFJWVVpFWTJ0Sk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVGVGQlJWVVpRVHpCR1FsRXhRWE5UTUVaQ1UzcHpOMUZWUmtaVVJIUkNVVlZPUWs4d1JrSlJNRVUzVHpCR1FsSlZPRGRQTUVaQ1VsVkZOMUZWUmtSVlJIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZITTNVVlZHUmxSNmRFSlJWVTVSVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1QzcDBRbEZWVmtKUE1FWkNVVEJGTjA4d1JrSlNWVGczVVZWR1JGVkVjemRSVlVaR1VWTjRUbEZWUms1TVIyeEZVVlZHYmxGcWRFSlJWVTR3VVdwek4xRlZSa1pSVTNod1VUQkdRbUZWVFhOak1GSkNVVmhHUTB4SWJFWlJWVVkxVWxONGRGSkZSa0poTUVrM1VWVkdSR0ZyYnpkUE1FWkNVbFZGYzJGVlNrSlJWMnhEVEVSb1JGRlZSbWhNUnpsRFVWVkdkbEZwZUd4UlZVWnNUekJHUWxFeWNFWk1SMnhEVVZWR2NGRnBlSEJTUlVaQ1dqQkpOMDh3UmtKU1YzQkVUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZjMUl3UmtKU2VuTTNVVlZHUmxORWRFSlJWVTVDVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUE1FWkVZbXR3YmxKRWN6ZFJWVVpHWld0TmMwNXJTa0pSVkZwRFRFaHNSVkZWUmxoUE1FWkNVWGs1UkV4SFpFTlJWVVp1VVdsNGVsSlZSa0prTUVrM1R6QkdRbEpZYUVSUE1FWkNVVEJGYzFaVlJrSldVM2g2VWxWR1FtUXdTVGRSVlVaRVlrVk5OMUZWUmtSUlZITTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUGVuTTNUekJHUkZSSVpFTlBlblJDVVZWV2NWRnFjemRSVlVaR1lUQk5OMDh3UmtKU1ZUZzNVVlZHUkZSVWRFSlJWVTVIVHpCR1FsRXdSVGRSVlVaRVUycHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBlblJDVVRKS1FrOTZkRUpSVlZZMlVYbDNNRkZyUmtKT1JVbHpaVlZTUWxGV1l6ZFJWVVpFVDFWTmMxb3dTa0pSVjJSRFRFaE9SbEZWUmpOUmFuTTNVVlZHUm1WRlRUZFJWVVpFVVZONFZsRlZSbFpNU0U1R1VWVkdNMUZxZEVKUlZVNXpVWHAwUWxGVlRrSlBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDh3UmtSVmJXUkZUM3AwUWxGVlZqWlJlWGN3VVd0R1FrNUZTWE5sVlZKQ1VWWmpOMUZWUmtSUFZVMXpXakJLUWxGWFpFTk1TRVpHVVZWR01WRnFjemRSVlVaR1pHdE5OMUZWUmtSUlUzaFdVVlZHVmt4SVJrWlJWVVl4VVdwMFFsRlZUbkZSZW5SQ1VWVk9Razk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4xRlZUbE5PUlUwM1VWVkdSRkpFZEVKUlZXeDFVV3B6TjFGVlJrWmxSVWszVHpCR1FsSlZPSE5rVlVwQ1VWaFdRMHhIT1VWUlZVWmFUekJHUWxGNlJrUk1SemxEVVZWR2RsRnBlSFJTUlVaQ1ZWUnpOMUZWUmtaT1ZVazNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRkJSVlVaUVR6QkdRbEV4UVRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Ra3hGT1VKUlZUZzNVVlZHUkZWRWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGYzFRd1JrSlVlblJDVVZWT1VVeEZkRUpSVlhNM1VWVkdSRlJFY3pkUlZVWkdVVlIwUWxGVlRrSlBNRVpDVVRCRmMyRXdVa0pSVjNSRlRFaEdSVkZWUmxaUGVuUkNVVlZWTVZKRWRFSlJWVTVDVHpCR1FsRXdSWE5sVlVwQ1VWaHNRMHhJUmtWUlZVWldUekJHUWxFeU5VUk1TRVpGVVZWR2VGSkRlSGhTUlVaQ1ZsUjBRbEZWVFhaU1JIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlUzaFFVVlZHVUU4d1JrSlJNVUUzVVZWR1JGRlRlRFZSYTBaQ1pWVkpjMk5WVWtKUlZsVTNVVlZHUkdKclRUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNUM3AwUWxGVlZrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZUZUZCUlZVWlFUekJHUWxFeFFYTlRNRVpDVTNwMFFsRlZUazFQTUVaQ1VUQkZOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVVZWT2VWSlZSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjA4d1JrSlNWVGczVVZWR1JGVkVjemRSVlVaR1VWUnpOMUZWUmtaUlZITTNVVlZHUmxGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBlblJDVVROU1EyTlZUVGRQTUVaQ1VsUnNRMDk2ZEVKUlZWWlJUM3AwUWxGVlZsQlBNRVpDVVRGQk4wOHdSa0pTVlVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQZW5SQ1VWVldRazh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKTVJUbENVVlU0TjFGVlJrUlZSSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JYTlVNRVpDVkhwMFFsRlZUbEZQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlRlRkJSVlVaUVR6QkdRbEV4UVRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Ra3hHVGtKUlZrMDNVVlZHUkZaRGR6UlJhMFpDVDBWSk4xRlZSa1JQVlVselZEQkdRbFI2ZEVKUlZVNVJUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlUzaFFVVlZHVUU4d1JrSlJNVUUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSk1SVGxDVVZVNE4xRlZSa1JWUkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSWE5VTUVaQ1ZIcDBRbEZWVGxGTVJYUkNVVlZ6TjFGVlJrUlVSSE0zVVZWR1JsRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FreEdaRUpSVm1OellsVlNRbEZYZEVOUE1FWkNVWHBrUTA5NmRFSlJWVlpDVHpCR1FsRXdSWE5XTUVaQ1ZubDRlbEpGUmtKalZVazNVVlZHUkdGRlRUZFBNRVpDVWxWRk4xRlZSa1JSVTNoWVVWVkdXRXhIZEVWUlZVWndVV3AwUWxGVlRURlJhbk0zVVZWR1JsRlVkRUpSVlU1Q1RFWmtRbEZXWTNOalZWSkNVVmM1UTA4d1JrSlJlVGxEVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNVVlZHUmxGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWt4Rk9VSlJWVGczVVZWR1JGVkVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVk40VUZGVlJsQlBNRVpDVVRGQk4xRlZSa1JSVkhNM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmRFSlJNMHBJV2pCUk4wOHdSa0pTV0hCRVRFUkNRMUZWUlhkUmFYZzFVa1ZHUWxaNmRFSlJWVTB4VVhsNGJsRnJSa0phTUVsellsVldRbEZZUmtOUGVuUkNVVlZXZVZGNmRFSlJWVTVDVEVaV1FsRldWWE5pVlZaQ1VWaEdRMDh3UmtKUmVUbERUekJHUWxFd1JUZFBlbk0zVDNwek4wOTZjemRQZW5NM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFJWVTVUV2pCTk4wOHdSa0pTVjJoRVQzcDBRbEZWVmtKUE1FWkNVVEJGYzAxRlpFSlJWRUpJVEVaT1FsRlZhemRQTUVaQ1VsaGFTRTh3UmtKUk1VRTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRQTUVaQ1VsVkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUjBRbEZWVGtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVkRUpSVlU1Q1R6QkdRbEV3UlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNUM3AwUWxGVlZrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSE0zVVZWR1JsRlVkRUpSVlU1Q1QzcDBRbEZWVmtKUE1FWkNVVEJGTjA4d1JrSlNWVVZ6VFVWT1FsRlVRa1JNUms1Q1VWWk5OMUZWUmtSaWExRTNVVlZHUkZGVWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMDh3UmtKU1ZUZzNVVlZHUkZWRWRFSlJWVTVDVDNwMFFsRlZWa0pQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQZW5SQ1VWVldRazh3UmtKUk1FVTNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQZW5SQ1VWVldRazh3UmtKUk1FVTNUekJHUWxKVlJYTmpWVTVDVVZoR1JFeEdSa0pSVmtVM1VWVkdSRTR3VFRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWT0RkUlZVWkVWVVIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOTZkRUpSVlZaQ1R6QkdRbEV3UlRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FreEhPVU5SVlVaMlVXcDBRbEZWVG5kUmFuTTNVVlZHUmxGVWRFSlJWVTVDVDNwMFFsRlZWa0pNU0VaRVVWVkdlRkY1ZUZKUlZVWlNUekJHUWxGNlpFUlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVZEVKUlZVNUNUM3AwUWxGVlZrSlBNRVpDVVRCRk4xRlZSa1JSVTNoS1VWVkdTazh3UmtKUk1HODNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZIUkNVVlZPUWs5NmRFSlJWVlpDVHpCR1FsRXdSVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPUWs4d1JrSlJNRVZ6VkZWR1FsUlVkRUpSVlU1UFQzcDBRbEZWVmtKUE1FWkNVVEJGTjFGVlJrUlJWSFJDVVZWT1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNURVZzUWxGVmF6ZFJWVVpFVTJwMFFsRlZUa0pQZW5SQ1VWVldRazk2ZEVKUlZWWkNUekJHUWxFd1JYTmpNRTVDVVZoT1JFeEdSa0pSVmtVM1VWVkdSRTlWVFRkUlZVWkVVVlJ6TjFGVlJrWlJWSFJDVVZWT1FrOHdSa0pSTUVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pNUldSQ1VWVmpOMUZWUmtSVFEzaEVVVlZHUkU5NmRFSlJWVlpPVDNwMFFsRlZWa0pQTUVaQ1VURkJOMUZWUmtSUlZITTNVVlZHUmxGVGVGWlJWVVpXVEVoR1JGRlZSbEpNUnpGRFVWVkdkRkZwZUhoUk1FWkNWVlIwUWxGVlRUTlJlbk0zVVZWR1JsUjZkRUpSVlU1UlR6QkdRbEV3UlRkUE1FWkNVbFZGTjFGVlJrUlJWSE0zVVZWR1JsRlVjemRSVlVaR1VWUjBRbEZWVGtKUE1FWkNVVEJGYzFOVlJrSlRWSFJDVVZWT1MwOHdSa0pSTUVWelUxVkdRbE5VZEVKUlZVNUxUekJHUWxFd1JUZFJWVVpFVVZSek4xRlZSa1pSVkhNM1VWVkdSbEZVZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVHpCR1FsRXdSVGRSVlVaRVVWUnpOMUZWUmtaUlZIUkNVVlZPUWs4d1JrSlJNRVUzVVZWR1JGRlVjemRSVlVaR1VWUjBRbEZWVGtKUE1FWkNVVEJGTjA4d1JrSlNWVVUzVVZWR1JGRlRlSGhSTUVaQ1kxVk5jMVZWUmtKVlZIUkNVVlZOTTFGNmN6ZFJWVVpHVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVDNwMFFsRlZWbEJQTUVaQ1VURkJOMUZWUmtSUlZITTNVVlZHUmxGVWRFSlJWVTVDVHpCR1FsRXdSVGRQTUVaQ1VsVkZjMk13VGtKUldFNUVURVpHUWxGV1JUZFJWVVpFVDFWTk4xRlZSa1JSVkhSQ1VWVk9Razk2ZEVKUlZWWkNUekJHUWxFd1JUZFBNRVpDVWxWRk4wOHdSa0pTVlVVM1R6QkdRbEpWUlRkUlZVWkVVVlIwUWxGVlRrSlBNRVpDVVRCRk4wOHdSa0pTVlVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBlblJDVVZWV1FrOHdSa0pSTUVVM1VWVkdSRkZVY3pkUlZVWkdVVlIwUWxGVlRrSlBNRVpDVVRCRk4xRlZSa1JSVkhNM1VWVkdSbFI2ZEVKUlZVNVJUekJHUWxFd1JUZFBNRVpDVWxWRk4xRlZSa1JSVkhNM1VWVkdSbEZVZEVKUlZVNUNUM3AwUWxGVlZrSlBNRVpDVVRCRk4xRlZSa1JSVkhSQ1VWVk9Razh3UmtKUk1FVTNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQZW5SQ1VWVldVRTh3UmtKUk1VRTNVVlZHUkZGVWN6ZFJWVVpHVkhwMFFsRlZUbEZQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVGVIaFJNRVpDWTFWTmMxVlZSa0pWVkhSQ1VWVk5NMUY2ZEVKUlZVNUNUekJHUWxFd1JUZFJWVVpFVVZSMFFsRlZUa0pQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVWN6ZFJWVVpHVkhwMFFsRlZUbEZQTUVaQ1VUQkZOMDh3UmtKU1ZVVTNVVlZHUkZGVWN6ZFJWVVpHVVZSMFFsRlZUa0pQZW5SQ1VWVldRazh3UmtKUk1FVTNUekJHUWxKVlJUZFJWVVpFVVZSek4xRlZSa1pVZW5SQ1VWVk9VVTh3UmtKUk1FVTNUekJHUWxKVlJUZFJWVVpFVVZSek4xRlZSa1pVZW5SQ1VWVk9VVTh3UmtKUk1FVTNVVlZHUkZGVWRFSlJWVTVDVHpCR1FsRXdSVGRQZW5NM1QzcHpOMVV3VG5WWmEwVTNWVEJHUkZGVWN6ZFZNRVpHVVZSMFZGRlZUa0pQTVU1Q1VUQkZOMVV3UmtSUlZIUlVVVlZPUWs4eFRrSlJNRVUzVlRCR1JGRlVkRlJSVlU1Q1R6Rk9RbEV3UlRkVk1FWkVVVlIwVkZGVlRrSlBNVTVDVVRCRk4xVXdSa1JSVkhNM1ZUQkdSbEZVZEZSUlZVNUNUM3AwVkZGVlZrSlBNVTVDVVRCRk4xVXdSa1JSVkhNM1QzcHpOMVpWVGpCUmEwVTNWbFZHUkZGVWRGWlJWVTVDVHpGV1FsRXdSVGRXVlVaRVVWTjROVkV3UmtKbFZVMXpaREJPUWxGWVpFUlBNVlpDVVRKd1IwOHhWa0pSTUVVM1ZsVkdSRkZVY3pkUGVuTTNWbFZPVVZGVWRGWlJWVTVDVHpGV1FsRXdSVGRXVlVaRVVWUjBWbEZWVGtKTVJXUkNVVlZqTjFaVlJrUlRSSFJXVVZWT1FrOHhWa0pSTUVWelVUQkdRbEY2Y3pkUGVuTTNWbFZPVVZKRWN6ZFBlbk0zVmxWT1FsRlVkRlpSVlU1Q1R6RldRbEV3UlRkV1ZVWkVVVk40TVZKRlJrSmtWVkZ6WVZWS1FsRlhiRU5QTVZaQ1VUTm9Sazh4VmtKUk1FVnpXakJTUWxGWFpFVk1SMFpDVVZkRk4xWlZSa1JPTUZFM1QzcHpOMDk2Y3pkUGVuTTNUM3B6TjA5NmN6ZFBlbk0zVDNwek4wOTZjemRQTUVaRVUxZDBRMDk2ZEVKUlZWWlpUekJHUWxFeFFYTlhWVVpDVjFSMFFsRlZUbUZNUm1SQ1VWWmpOMUZWUmtSWFEzaE1VVlZHVEU4d1JrSlJNSGR6VXpCR1FsTjZkRUpSVlU1TlRFWldRbEZXVlRkUlZVWkVWbWw0YWxGVlJtcFBNRVpDVVRKUmMyRlZTa0pSVjJ4RFR6QkdRbEV5Y0VOUGVuUkNVVmRHTTFGcWN6ZFJWVVpHWVd0Sk4xRlZSa1JWUTNocVVWVkdhazh3UmtKUk1sRnpZMVZLUWxGWVJrTlBNRVpDVVROS1EweElSa05SVlVaNFVXcDBRbEZWVG5sUmFYaG9VVlZHYUU4d1JrSlJNa2x6WWpCS1FsRlhPVU5QTUVaQ1VUTkNRMHhJVGtOUlZVWjZVV3AwUWxGVlRqQlJhWGh5VVd0R1FtRXdTVGRSVlVaRVlrVkpjMW93U2tKUlYyUkRUekJHUWxFeWFFTlBlblJDVVZaak5GRnFjemRSVlVaR1pHdEpOMUZWUmtSVlEzaHFVVlZHYWt4SE9VWlJWVVowVVdwMFFsRlZUbkZSZVhocVVWVkdhazh3UmtKUk1sRnpWbFZHUWxaVWRFSlJWVTVYVEVaV1FsRldWVGRSVlVaRVZtbDRhRkZWUm1oUE1FWkNVVEpKYzFvd1NrSlJWMlJEVHpCR1FsRXlhRU5NUjFaQ1VWZFZOMUZWUmtSYWFYaHNVVlZHYkU4d1JrSlJNbGx6V1ZWR1FsbFVkRUpSVlU1cFQzcDBRbEZWVm5aUmVuUkNVVlZPV0U5NmRFSlJWVEF6VVhsSmMwbHVUblprV0VwcVdsaE5hVTlzYzJsa01sWnBZMGRHYW1GNmIzWk1NbkJ3V1c1TmRreHBPWFZpTWxKc1dESXhkbHBJVm5OYVdFMTJXa2RXYUZwSFNteGFWMWwyWWtkc2FVd3liSFZhUjFZMFRHMXdla2xwZDJsa01sWnBZMGRHYW1GNmIzWk1NbkJ3V1c1TmRreHBPWE5oVjBsMldUSTVkR05IT1hWYVZ6VXdURzF3ZWtscGQybGtNbFpwWTBkR2FtRjZiM1pNTW5Cd1dXNU5ka3hwT1hOaFYwbDJXbGhhYkdKdVVucE1iWEI2U1dsM2FXUXlWbWxqUjBacVlYcHZka3d5Y0hCWmJrMTJUR2s1YzJGWFNYWmhiV3hwVEcxd2VrbHBkMmxrTWxacFkwZEdhbUY2YjNaTU1uQndXVzVOZGt4cE9YTmhWMGwyWTIxV2RWcEhWbmxhV0VwNlRESk9kbUpYTVd4aWJsRjBXbGQ0YkdKWFZuVmtRelZ4WTNsSmMwbHVaR3haYmtKb1dUSnpOa3g1T1hGaFYwcDZUSGswZG1KSGJHbE1NMHBzWW0xU2JHTnRWbmxqZVRsd1ltMVNiR1ZETlhGamVVbHpTVzVrYkZsdVFtaFpNbk0yVEhrNWNXRlhTbnBNZVRSMllrZHNhVXd6U214aWJWSnNZMjFXZVdONU9YVlpXRkp3WkcxVmRGcFhlR3hpVjFaMVpFTTFjV041U1hOSmJtUnNXVzVDYUZreWN6Wk1lVGx4WVZkS2VreDVOSFppUjJ4cFRETktiR0p0VW14amJWWjVZM2s1ZDJJelNqQlpWM2QwV2xkNGJHSlhWblZrUXpWeFkzbEpjMGx1Wkd4WmJrSm9XVEp6Tmt4NU9YRmhWMHA2VEhrMGRtSkhiR2xNTTBwc1ltMVNiR050Vm5samVUbDVXbGMxYTFwWVNteGphVFZ4WTNsSmMwbHVaR3haYmtKb1dUSnpOa3g1T1hGaFYwcDZUSGswZG1KSGJHbE1NMHBzWW0xU2JHTnRWbmxqZVRsNVlqSTVNRXhYVm5OYVZ6RnNZbTVSZFdGdVRXbE1RMG96V2xkS2QxbFhUbkpQYVRoMllXMXNhV041T0hWTU1uaHdXV2s1ZVZwWE5XdGFXRXBzWTI1TmRtTnRPWFprUXpGMVlqSlNiRXh0Y0hwSmFYZHBaREpXYVdOSFJtcGhlbTkyVERKd2NGbHVUWFpNYVRsellWZEpkbU50Vm5WYVIxWjVXbGhLZWt3elVteGxTRkYwV2xkNGJHSlhWblZrUXpWeFkzbEpjMGx1Wkd4WmJrSm9XVEp6Tmt4NU9YRmhWMHA2VEhrMGRtSkhiR2xNTTFZd1lWZDRla3h0Y0hwSmFYZHBaREpXYVdOSFJtcGhlbTkyVERKd2NGbHVUWFprTWxacFkwZEdhbUY1T1dsaU1qa3dZek5TZVZsWVFXbE1RMG96V2xkS2QxbFhUbkpQYVRoMllXMXNhV041T1ROYVYwcDNXVmRPY2t3elNqRmlibEp3WWxkVmRscEhWbTFoVnpWc1NVaENlV0l6UW14amJsSTFTVWRrYkdSSVVteGpiazFwVEVOS00xcFhTbmRaVjA1eVQyazRkbUZ0YkdsamVUa3pXbGRLZDFsWFRuSk1NMG94WW01U2NHSlhWWFphTW5oMldXMUdjMGxwZDJsa01sWnBZMGRHYW1GNmIzWk1NbkJ3V1c1TmRtUXlWbWxqUjBacVlYazVlV1JYTlRCaFZ6RnNUREpvYUdNd09UTmliRUo1WWpOQ2JHTnVValZKU0U1dllqTktNR0ZIUm5WYVEwbHpTVzVrYkZsdVFtaFpNbk0yVEhrNWNXRlhTbnBNTTJSc1dXNUNhRmt5YzNaamJsWjFaRWRzZEZwVE9YUlpWM1JzU1VjMWFHSlhWbnBqUjBacVdsTkNkbGx0Y0d4Wk0xRnBURU5LTTFwWFNuZFpWMDV5VDJrNGRtRnRiR2xqZVRoMVRESjRjRmxwT1hCaWJWSnNaVU0xY1dONVNtUk1RMHA2WWpOV2VWa3lWbnBSTWpsMVpFZFdkV1JEU1RaWGVVbDJUSGxDUkdJelFqVmpiV3h1WVVoUlowMXFRWGxOYVVKWVpWZEdNR1JEUWtoamJWWnNZbTVrYUdWV2VIVllSelJ1WkZoT2JFbElUakJqYld4cVpFTmpOMWhITldOaWJVNTJZbTVPTUVsSVVtOWhXRTVJWWtjNWFWbFhkMmRRVTBGdlMwaFNOV05IVm5aYWFVSXpZVmMxYTJJelkyZEpWREE1U1VOa01XSnRVbXhhYld4MVdsZFJia3RUUVM5SlNHUndZbTFTZG1SNVFUWkpSMlJ6WWpKS2FHSkRhMmRtU0hkblpFZG9jR042ZEdOaWJVNTJZbTVPTUVsRlVrWlJWVkpEVWxWV1IxZ3hTa1pTYkRsT1VWWkNabE13VmxwSlJEQm5WVE5zZEZsdE9YTk1iVnAyWTJsbmJsRkZRbXRhVjBacldXMVdiRnBzU214YWF6Rm9ZME5qY0U4eGVIVlpNamwxWXpOUloxWlZOVXBWVmxaR1dEQnNSVmd4VGxwVVZVcFFWRU5CT1VsR1RqVmlWMHAyWWtNMWJXSXpTVzlLTUVKQldrZFdhRnBIU214YVYxcFdZbTFzZUdSWFZrcFNRMk53VHpGNGRWa3lPWFZqTTFGblkyMVdiVlJYUm5kSlJEQm5TMGhTYjJGWVRraGlSemxwV1ZkNFlsSkZWa0pTUlVwR1VsVmFabFZyVmtkWU1ERkNWVVk1VEZKV2JHUkxVMEV2U1VoU2IyRllUa2hpUnpscFdWZDRZbEpGVmtKU1JVcEdVbFZhWmxWclZrZFlNREZDVlVZNVRGSldiR1JKUkc5blltMVdNMGxHWkd4WlYzUk9XVmhCYjB0VWRHTmliVTUyWW01T01FbEhiR3RUUjFaelkwZFdlV041UVRsSlJuUmtUekY0ZFZoSE5YQmFhVUZ2U1ZoU2IyRllUa2hpUnpscFdWZDRZbEpGVmtKU1JVcEdVbFZhWmxWclZrZFlNREZDVlVZNVRGSldiR1JMVm5oMVNVTkNNR0ZIYkhwU01uaDJXVzFHYzFjd1VrWlJWVkpEVWxWV1IxZ3hTa1pTYkRsT1VWWkNabE13VmxwWVUwRTVTVWhLYkZwck1XaGpSSFJqWW14NGRXSkhWakJKU0ZZeFlWZFNSR0l6Vm5Wa1IxWjVTVVF3WjAxSE5EZFlSelZqWW0xYU1XSnRUakJoVnpsMVNVZGtiR1JGYUd4aVNFSnNZMnRhZG1Oc1dtaGlTRlpzUzBoYWFHSklWbXhMVTBJM1dFYzBaMGxIV25aamFVRnZZa2RXTUVsSGEyZFFVMEYzVEVOQ2NHSkRRVGxKUjJ4clUwZFdjMk5IVm5samVUVnpXbGMxYm1SSFp6ZEpSMnRuVUVOQ2NHSkVjMmRoVTNOeVMxTkNOMWhITkdkSlEwRm5Za2RXTUVsSWMyZGhSMVp6WTBkV2VVeERRbTVhVnpWc1kyMUdNR0l6U1dkbVUwRTVTVWRzYTFOSFZuTmpSMVo1WXpGMGNGaFVkR05pYVVGblNVTkNjRnBwUVc5aFIxWnpZMGRXZVV0SVdtaGlTRlpzUzFOc1kySnBRV2RKUTBGblNVaEtiR1JJVm5saWFVSnVXbGMxYkdOdFJqQmlNMGszV0VjMFowbElNV05pYmpGallteDRkVnB1Vm5WWk0xSndZakkwWjFsWE5UVmtSMmh3WW0xa1ZXSXdiRVZMUmpsb1kyMWpjMGxHT1doaVNFcHNXVmRTTlZadGJIcGhXRkpzV2tOcloyVXhlSFZKUTBKeldsaFJaMWxZU201SlJEQm5XREpHZVZwNmRHTmlhVUZuWVZkWlowdEhSbmxhZVVKd1ltNU9NRmxYTldwYVZ6bHRTVVUxTVdKWFNteGphVUk0WmtOQ2FHTnRZMmRoVnpWNlpFZEdkVmt5Vm5aYWFVSlVaRWhLY0dKdFkyZG1TSGRuV1ZoS2JrbEhiSFZqTTFKb1ltMU9iR0l5V1dkUmJUbDJZa2RXYUdKcGJHTmlhVUZuU1VOQ2FHTnRZMmRRVTBKb1kyMWpkV1J0Um5Oa1YxWlFXbWxuY0U4eGVIVllSelJuU1VkNGJHUkRRakJsV0VKc1ZESlpaMUJUUWpCbFdFSnNZakpaWjFsWVNtNVBNWGgxV0VjMFowbEhiRzFKUTJnd1pWaENiRlF5V1dkUVZEQTVTVU5rZFdSWE1XbGFXRWx1U1VOWmJVbEhSbmxhZVVFNVVGUXdaMDFEYTJkbE1YaDFTVU5CWjBsSGJHMUpRMmhRV1cxd2JGa3pVWFZoV0UxdldWaEtia3hEUVhSTlEydHdXRWMwWjBsRFFXZEpRMEo1V2xoU01XTnROR2RLTWpVeFlsZEtiR05xYjNSTlEyTTNXRWMxWTJKcFFXZEpRMEo1V2xoU01XTnROR2RLTWpVeFlsZEtiR05xYjNKTlEyTTNXRWMwWjBsSU1XTmliSGgxU1VOQ2NGcHBRVzlrU0d4M1dsVTViVWxFTURsUVUwRnVZek5zZEZsdE9YTktlV3hqWW1sQlowbERRbmxhV0ZJeFkyMDBaMWxJVGpWaVYwcDJZa1J2YTJVeVJubGFlVFV3WWpGT01HTnRiSFZhZVdkd1psZEJOMWhITldOaWFVRm5ZVmRaWjB0SFJubGFlVUU1VUZOQ2RXUlhlSE5KU0hnNFNVaFNOV05IVmxCYWFVRTVVRlF3WjBveU5URmlWMHBzWTJsaloyWklkMmRrU0d4M1dsVTViVWxFTURsUVUwRnVXVzA1ZG1KSFZtaGlhV05uWmtoM1oyUkliSGRhVlRsdFNVUXdPVkJUUVc1ak0xSjVZVmMxYmtwNVFqaG1RMEl3WlZoQ2JGUXlXV2RRVkRBNVNVTmthV0ZYWkhCaWJsRnVTMU5DTjFoSE5HZEpRMEZuWVZkWlowdElValZqUjFaUVdtbEJPVkJVTUdkS01qVXhZbGRLYkdOcFkzQllSelJuU1VOQlowbERRbmxhV0ZJeFkyMDBaMHRIUm5sYWVVRTRTVVJCY0VsRU9HZFpSelV4WWxkS2JHTnFiMnRsTWtaNVdqTXhaMGxFYjJkWlJ6VXhZbGRLYkdOcWIzSktTSFJvWTIxa09WbEVkR05pYkhoMVNVTkJaMGxIYkcxSlEyZ3daVmhDYkZReVdXZFFWREE1U1VOa2FXRlhaSEJpYmxGdVNVTlpiVWxIUm5sYWVVRTVVRlF3WjAxSE5IQllSelJuU1VOQlowbERRbmxhV0ZJeFkyMDBaMG95U25CYU1teDFaRVJ2Y2sxRFl6ZFlSelZqWW1sQlowbERRbmxhV0ZJeFkyMDBaMWxEVWpka1NHeDNXbFU1YldaVWIydGxNa1o1V2pNeFowOHhlSFZKUTBJNVdFYzFZMkpwUVdkaVIxWXdTVWRzYTFOSFZuTmpSMVo1U1VRd1owdEhiR3RUUjFaelkwZFdlV041TlhOYVZ6VnVaRWRuWjFCcFFYZEpRMWx0U1Vka2JHUkZhR3hpU0VKc1kydGFkbU5zV21oaVNGWnNTMGRHZVZwNWEzQlBNWGgxU1VOQ2NGcHBRVzloVjFKSldsZDRkMXBZU1hCWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VkR2RXVllVbTloVnpWdVZrYzVTbEpEYUhCYVJXaHNZa2hDYkdOcGFHaGpiV053UzFSMFkySnNlSFZKUTBKd1dtbEJiMVpWTlVwVlZsWkdXREJzUlZneFRscFVWVXBRVkVOQ2NHSnBRbWhqYldOblNtbFpaMlJJYkhkYVZ6bHRTVWRHZVZveGRGWlVhMnhTVmxWV1psTlZVbVpWTVd4T1VXczVUVmhUUVRsUVZEQm5TakphTVdKdFRqQmhWemwxU25scloyVXhlSFZKUTBGblNVTTRka2xHUW5sYVdGcHNZbTVSWjJGWE5XMWhWelZ3WkVkVloyTnRWbXBrV0VwNllWYzVkVmhITkdkSlEwRm5ZVmRaWjB0RFJtWlpWM2g1V2xkR2EyVldXbkJqTW13d1dsZFJaMlpJZDJkSlZqbG9Za2hLYkZsWFVqVldiV3g2WVZoU2JGcEROVzlaV0UxdldWaEtia3RUYTJkbE1YaDFTVU5CWjBsRFFXZGlSMVl3U1VkR2MyTnRWbWhhU0d4WFlWaE9jR1JIVm10SlJEQm5XREpHYzJOdFZtaGFTR3hYWVZoT2NHUkhWbXRKU0hnNFNVYzFiR1I1UWxSYVdGRnZTMVIwWTJKcFFXZEpRMEZuU1VkR2MyTnRWbWhhU0d4WFlWaE9jR1JIVm10TWJVWnJXa05vYUdOdFkzQlBNWGgxU1VOQlowbERRV2RqYlZZd1pGaEtkVWxIUm5WbFdGSnZZVmMxYmxaSE9VcFNRMmhvWTIxa1lsWlZOVXBWVmxaR1dEQnNSVmd4VGxwVVZVcFFWRVl3YjB0VGQyZFpWM2g1V2xkR2EyVldXbkJqTW13d1dsZFJjRTh4ZUhWSlEwRm5TVWd4WTJKcFFXZG1WbmgxV0VjMFowbEhiRzFKUTJkb1kyMVdiVlJYUm5kTWJXaG9ZM2xvYUdOdFkzQkxVMEkzV0VjMFowbERRV2RpUjFZd1NVZDBiR1ZUUVRsSlIwRnJaVE5TTldOSFZuWmFhVUpvWTIxa09VOXBVamRMZVhReFpGZHNhMUV5T1RGaWJsSnNZMjR4WjA4eGVIVkpRMEZuU1VoS2JGcHJNV2hqUXpWNldsaFJiMWxZU201TVEwSnlXbGhyY0U4eGVIVkpRMEZuU1VoS2JHUklWbmxpYVVKeVdsaHJOMWhITkdkSlNERmpZbXg0ZFVsRFFubGFXRkl4WTIwMFoyTnRWbTFVVjBaM1RHMWtiR1JEYUdoamJXTndUekY0ZFdaV2VIVllSelZ0WkZjMWFtUkhiSFppYVVKcldsZEdhMWx0Vm14YWFXZHdTVWgwWTJKcFFXZGlSMVl3U1VoQ2FHTnVVbnBKUkRCblYzbENhR050WkRGaVYxWjFaRWhOZFdKSFZuVmFNMUp2U1VZd04xaEhOR2RKUjFwMlkybEJiMkpIVmpCSlIydG5VRk5CZDB4RFFuQmlRMEU1U1VkR2VWb3pWblJhVnpVd1kzazFjMXBYTlc1a1IyYzNTVWRyWjFCRFFuQmlSSE5uWVZOemNrdFdlSFZKUTBGblNVaENhR051VW5wTWJrSXhZekpuYjFsWE5UVmtSMmh3WW0xa1ZXSXdiRVZMUjBaNVdqTldkRnBYTlRCak1YUndXRk5yY0U4eGVIVllSelJuU1VoS2JHUklWbmxpYVVKM1dWaEtNR041TlhGaU1teDFTME5qTmtwNWF6ZFlSelU1V0VjMVkySnRXakZpYlU0d1lWYzVkVWxIVW14WlYxSnBXbGRXYlZVeU9YbGtSMVpyUzBOcloyVXhlSFZKUTBKeldsaFJaMk5IUm5sa1NFMW5VRk5DWWtsSFJubGFNMVowV2xjMU1HTjVOWE5hVnpWdVpFZG5aMWhVZEdOaWFVRm5XbTA1ZVVsRGFITmFXRkZuWVZOQk9VbEVRWE5KUjJ4elNVUXdaMWxZU201a1Z6RnNZbTVTZWt4dGVHeGliV1F3WVVSeloyRlRRVGhKUjJ4elQzbENjRXQ1YzNCWVJ6Um5TVU5CWjJOSFJubGtTRTExWTBoV2VtRkRhR2hpYm13d1lVZHNkVm94VW5aVFZWRnZXVmhLYm1SWE1XeGlibEo2VnpKc1pFdFRhemRZUnpWalltbEJaMk50VmpCa1dFcDFTVWhDYUdOdVVucE1iazUyWTI1UmIwdFROWEZpTW14MVMwTmpOa3A1YXpkWVJ6VTVXRWMxWTJKdFdqRmliVTR3WVZjNWRVbEhaR3hpYlZaNVdWaFNiRk5WVWtkaU0wbHZZVWRXYzJOSFZubE1RMEp1V2xjMWJHTnRSakJpTTBsd1NVaDBZMkpwUVdkaFYxSkpXbGQ0ZDFwWVNucE1ia0l4WXpKbmIyVjVRbTlhVjNoM1dsaEpjMGxIWkd4aWJWWjVXVmhTZG1OcFFqbExWSFJqWW00eFkySnNlSFZhYmxaMVdUTlNjR0l5TkdkamJWWjBZak5hYkZOVlVraGFWelZzWTIxR01HSXpTVzloUjFaelkwZFdlVXRUUWpkWVJ6Um5TVWQ0YkdSRFFuQmliVkpzWlVOQk9VbEhiR3RUUjFaelkwZFdlV041TlcxaFZ6VnJVMWMxYTFwWVoyOUxSMnd3V2xjd2NFbEVNQ3RKUTJod1pFZFdkRXh0YUd4aVNFSnNZMmxCT1ZCVU1HZGhSMVp6WTBkV2VVdFRhemRZUnpSblNVZHNiVWxEYUhCaWJWSnNaVU5CT0VsRVFYQllSelJuU1VOQloyTnRWakJrV0VwMVR6RjRkVmhITkdkSlIyeHJVMGRXYzJOSFZubGplVFY2WTBkNGNGa3lWVzloVnpWcldsaG5jMGxFUlhCUE1YaDFabFo0ZFZoSE5WQlpiWEJzV1ROUmRWcEhWbTFoVnpWc1ZVaEtkbU5IVm5sa1IyeHNZM2xvYTFwWFJtdFpiVlpzV21sM1oyVXhlSFZKUTBGdVlWZFNWR1ZYTUc1UGFVSTNXRWMwWjBsRFFXZGtNMHB3WkVkR2FXSkhWVFpKUTBGblNVTkNNR051Vm14TVJuaDFTVU5CWjBsSFZuVmtWekZzWTIxR2FXSkhWVFpKUTBGbldtMUdjMk15VlhOWVJ6Um5TVU5CWjFreU9YVmFiV3h1WkZoS2FGbHRlR3hQYVVJd1kyNVdiRXhHZUhWSlEwRm5TVWhhYUdKSVZteFBhVUZuU1VOQlowbERRV2RXVlRWS1ZWWldSbGd3YkVWWU1VNWFWRlZLVUZSRGVHTmlhVUZuWmxONFkySnBRV2RLTTA1MlkyNVNiRnBEWXpaSlNIUmpZbWxCWjBsRFFqTmpiV3d3V1ZkS2MxcFViMmRKUTBGblNVaFNlV1JYVlhOWVJ6Um5TVU5CWjFwWE5URmlWMVo1V1ZkS2MxcFViMmRKUTBKdFdWZDRlbHBUZUdOaWFVRm5TVU5DYW1JeU5XMWhWMlF4WTIxR2FXSkhWVFpKU0ZKNVpGZFZjMWhITkdkSlEwRm5aRzFHYzJSWFZUWkpRMEZuU1VOQlowbERRbXRhVjBacldXMVdiRnBzVG5aamJsSnNXa040WTJKcFFXZG1VM2hqWW1sQlowb3laR3hpYlZaNVdWaFNiRk5WVWtkaU0wbHVUMmxDTjFoSE5HZEpRMEZuWkROS2NHUkhSbWxpUjFVMlNVTkJaMGxEUWpCamJsWnNURVo0ZFVsRFFXZEpSMVoxWkZjeGJHTnRSbWxpUjFVMlNVTkJaMXB0Um5Oak1sVnpXRWMwWjBsRFFXZFpNamwxV20xc2JtUllTbWhaYlhoc1QybENNR051Vm14TVJuaDFTVU5CWjBsSVdtaGlTRlpzVDJsQlowbERRV2RKUTBGbldqSldkVnBZU21oa1IxWktVa1ZhZG1OcGVHTmlhVUZuWmxONFkySnBRV2RLTTBwc1lsYzVNbHBWYkVWU01sWjFXbGhLYUdSSE9YbEtlbTluWlRGNGRVbERRV2RKU0dSNVlWaFNhRmx0ZUd4UGFVRm5TVU5CWjJSSVNqRmFVM2hqWW1sQlowbERRbXhpYmxaMFdsaEthRmx0ZUd4UGFVRm5TVWRhYUdKSVRteE1SbmgxU1VOQlowbEhUblppYlZwd1dqTldlVmxYU25OYVZHOW5aRWhLTVZwVGVHTmlhVUZuU1VOQ01sbFhlREZhVkc5blNVTkJaMGxEUVdkSlNFcHNZbGM1TWxwVmJFVlNNbFoxV2xoS2FHUkhPWGxNUm5oMVNVTkNPVXhHZUhWbVUyczNXRWMxWTJKdE1YWmFTRlp6V2xNMWJHVklRblpqYmxKNlNVUXdaMXBIVm1oYVIwcHNXbGRaTjFoSE5HbE1RMGwyUzJsQ2JtSkhPV2xaVjNkblVXNVdiVnB0Vm5sSlEyOTJXRWMxWTJKdGJIUmpSemw1WkVOQ04wbEZWakphVnpVd1VsY3hjR1JJVW14amFVSTVTVWRhZVdJeU1HZEtlVFIyV2xoYWJHSnVVbnBNYlhCNlNucDBZMkp0YkhSalJ6bDVaRU5CY1VsSFJucEpSbFl3WVZkNGVrbERRV2RKUTBGblNVZGFlV0l5TUdkS2VUUjJaRmhTY0dKSVRYVmhiazF1VHpGNGRXRlhNWGRpTTBvd1NVaDBZMkpwUVdkaFdFNUxZVmRLY0dNeVozTllSelJuU1VoS2JHTXlPWE5rYlZaRVlVZHNjMXBJU214aWFYaGpZbWxCWjFreU9YVmpNMUo1WkZkT01GTnRiR2xNUm5oMVpsTkNiV050T1hSSlEyTjFUREp3Y0ZscE5YRmplV00zV0VjMVkySnRWalJqUnpsNVpFTkNhbUl5Tlhwa1EwSldWVVZTUWxaRlZtWlNWbHBHVkd4UlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlJEQm5TakJDY1dGWFNucE1NazUyWWxoQ2RtSnRWblZrUXpsc1pHMVdkV1JET1RGalIxSm9aRWRWYms4eGVIVmFXR2gzWWpOS01FbEhUblppYms0d1NVWkdWbEpXVmtaWU1WWlJVa1ZHVlZKV09VNVNWbEpKVkRCUlowbERRV2RKUTBGblVGTkNWR1ZYTVdsaU1uZDFXbTA1ZVV0RFpFRmhiV3hwWTNrNWFtSXlNWGRpTWpWc1ltNVJkbU5ZVm14a1YxWldZMGRTYUdSSFZXNUxWSFJqWW0xV05HTkhPWGxrUTBKcVlqSTFlbVJEUWtkVVJsWlVVMFk1VmxWRlVrSldSVlptVkZWV1ZWTkZPVVZKUTBGblNVTkJaMGxFTUdkVk0yeDBXVzA1YzB4dFduWmphV2R1VVVkd2NGbHVUWFpaTWpsMFkwYzVkVnBYTlRCTU1scHpaRmhPYjFaWVFtdFpXRkpzU25sck4xaEhOV3hsU0VKMlkyNVJaMWt5T1hWak0xRm5VMVUxU2xaR09VNVNWbEpKVkRCUlowbERRV2RKUTBGblNVTkJaMGxEUVdkSlEwRTVTVVpPTldKWFNuWmlRelZ0WWpOSmIwb3dRbkZoVjBwNlRESk9kbUpZUW5aaWJWWjFaRU01WmxneWJIVmhXRkZ1UzFSMFkySnRWalJqUnpsNVpFTkNhbUl5Tlhwa1EwSlVVekJzVVZneFRsVlJWbEpHV0RGV1VWSkZSbFZTVmsxblNVTkJaMGxEUVdkSlJEQm5WVE5zZEZsdE9YTk1iVnAyWTJsbmJsRkhjSEJaYmsxMldUSTVkR05IT1hWYVZ6VXdURE5PY21GWVFsUmtSMFl3V2xaV2QxcEhSakJhV0UxdVMxUjBZMkp0VmpSalJ6bDVaRU5DYW1JeU5YcGtRMEpSVWxVMVJWTlZOVWhZTVU1VlVWWlNSbGd4VmxGU1JVWlZVbE5CWjBsRFFXZEpSREJuVlROc2RGbHRPWE5NYlZwMlkybG5ibEZIY0hCWmJrMTJXVEk1ZEdOSE9YVmFWelV3VEROQ2JHSnRVbkJpYldSVVpFZEdNRnBXVm5kYVIwWXdXbE5qY0U4eGVIVmFXR2gzWWpOS01FbEhUblppYms0d1NVVjRRbFV4VW1aVmExWlBVa1ZXVTFneFVrcFVWVlZuU1VOQlowbERRV2RKUTBGblVGTkNWR1ZYTVdsaU1uZDFXbTA1ZVV0RFpFRmhiV3hwWTNrNWFtSXlNWGRpTWpWc1ltNVJkbUpIUm5wa1JrcHNZbTFTYkdOc1VuQmlWMVZ1UzFSMFkySnRWalJqUnpsNVpFTkNhbUl5Tlhwa1EwSlJWV3RXVjFOVk9WWlZNVGxVVmtWR1ZWSlRRV2RKUTBGblNVTkJaMGxEUVdkSlJEQm5WVE5zZEZsdE9YTk1iVnAyWTJsbmJsRkhjSEJaYmsxMldUSTVkR05IT1hWYVZ6VXdURE5DZVZwWVduQmlNMVo2VlROU2FHUkhWVzVMVkhSalltMVdOR05IT1hsa1EwSnFZakkxZW1SRFFrUlJWa0pWVmxaS1JsZ3hTa1pTYTFaVFVsVTFSRkpXT1U1U1ZsSkpWREJTVkVsRU1HZFZNMngwV1cwNWMweHRXblpqYVdkdVVVZHdjRmx1VFhaWk1qbDBZMGM1ZFZwWE5UQk1NMEo1V2xoYWNHSXpWbnBWTTFKb1pFZFZia3RVZEdOaWJIaDFXVEk1ZFdNelVXZGFWM2hzWWxkV2RXUkZVbWhrUjBaRVdWZE9iMXBUUVRsSlJ6VnNaSGxDV0ZwWFJuSlVWMFozUzBOck4xaEhOV05pYlZveFltMU9NR0ZYT1hWSlIyeDZWbTFHYzJGWFVsUmtSMFl3V2xVNWFXRnRWbXBrUTJneVdWZDRNVnBUYTJkbE1YaDFTVU5DY0ZwcFFXOWtiVVp6WkZkVloxQlVNR2RpYmxaellrTnNZMkpwUVdkSlEwSjVXbGhTTVdOdE5HZGFiVVp6WXpKVk4xaEhOV05pYVVGbllWZFpaMHRGT1dsaGJWWnFaRU0xY0dONWFESlpWM2d4V2xOM1oxUnRSazlMVTJ4alltbEJaMGxEUW5sYVdGSXhZMjAwWjFwdFJuTmpNbFUzV0VjMVkySnBRV2RoVjFsblMwVTVhV0Z0Vm1wa1F6VndZM2xvTWxsWGVERmFVM2RuVTFjMWJXRlhOWEJrU0d0d1MxWjRkVWxEUVdkSlNFcHNaRWhXZVdKcFFtMVpWM2g2V2xSMFkySnNlSFZKUTBKd1dtbEJiMlJ0Um5Oa1YxVm5ZVmMxZW1SSFJuVlpNbFoyV21sQ1EySXlPWE5hVjBaMVNVaDRPRWxJV21oaVNGWnNTVWRzZFdNelVtaGliVTVzWWpKWloxUnVWblJaYlZaNVNVaDRPRWxJV21oaVNGWnNTVWRzZFdNelVtaGliVTVzWWpKWloxVXpVbmxoVnpWdVMxWjRkVWxEUVdkSlNFcHNaRWhXZVdKcFFtMVpWM2g2V2xSMFkySnNlSFZKUTBKeldsaFJaMlJJYkhkYVZUbHRTVVF3WjJSSWJIZGFWemx0U1VoYWFHSklWbXhQTVhoMVNVTkNjRnBwUVc5a1NHeDNXbFU1YlVsRU1EbFFVMEZ1WXpOU2VXRlhOVzVLZVVJNFprTkNNR1ZZUW14VU1sbG5VRlF3T1VsRFpIVmtWekZwV2xoSmJrbEllRGhKU0ZJMVkwZFdVRnBwUVRsUVZEQm5TakpLZG1JeWVHeFpWelJ1UzFaNGRVbERRV2RKU0Vwc1pFaFdlV0pwUW0xWlYzaDZXbFIwWTJKc2VIVkpRMEp3V21sQmIxRllTbmxaV0d0MVlWaE9RbU51U21obFUyZ3lXVmQ0TVZwVGEzQllSelJuU1VOQloyTnRWakJrV0VwMVNVZGFhR0pJVG14UE1YaDFXRWMwWjBsSGJHMUpRMmd3WlZoQ2JHSXlXV2RSYmxadFdtMVdlVWxEUlRsUVUwRnVaRmMxYTFwWFduQmliVlpyU25sQmJVcHBRa05rVjFwdFdsaEpkV0ZZVGtOa1YxcHRXbGhKYjJSdFJuTmtWMVZ3UzFaNGRVbERRV2RKU0Vwc1pFaFdlV0pwUW0xWlYzaDZXbFIwWTJKc2VIVkpRMEo1V2xoU01XTnROR2RrU0VveFdsUjBZMkp1TVdOaWJIaDFXbGhvZDJJelNqQkpSMDV6V1ZoT2VrbEZUblppV0VKMlltMVdkV1JEUW14bFNGSnNZbTFTZWtsRlZqSmFWelV3VWxjeGNHUklVbXhqYVVJM1dFYzBaMGxJVGpCWldGSndXWGxDVmxWRlVrSldSVlptVWxaYVJsUnNVV2RRVTBKV1ZVVlNRbFpGVm1aU1ZscEdWR3hSTjFoSE5XTmlhVUZuVnpGR1ZsSldWa1pZTVZaUlVrVkdWVkpXT1U1U1ZsSkpWREJTWkV0RGEyZGxNWGgxU1VOQlowbEhiRzFKUTJnd1lVZHNlbGN4UWtaVWExSktWR3RrWmxVeFVrSldSVlptVmxaQ1JWRldVa1pZVTJ4alltbEJaMGxEUVdkSlNFcHNaRWhXZVdKcWRHTmliSGgxU1VOQlowbElVbTloV0U1aVZVVldUMUpGYkU5U01UbFVWa1ZHVlZKV09WWlZSVkpDVmtWV1pFbEVNR2RWU0VwMllsZHNlbHBUTlhsYVdFNTJZa2hhYkV0RGF6ZFlSelJuU1VOQloyUkhhSEJqTVhSUlVsVTFSVk5WTlVoWU1VNVZVVlpTUmxneFZsRlNSVVpWVWxZd2RXUkhhR3hpYVdnd1lVZHNlbGN3V2sxV1ZrNUpXREZXVVZKRlJsVlNWamxPVWxaU1NWUXdVbVJNYlVwd1ltMVJiMlJIYUhCamVXdHdUekY0ZFVsRFFqbFlSelZqWW1sQloxY3dXazFXVms1SldERldVVkpGUmxWU1ZqbE9VbFpTU1ZRd1VtUkxRMnRuWlRGNGRVbERRV2RKUXpoMlNVWmthR041UWpCaFIxVm5Zek5TYUdSSFZXZGtXRUpyV1ZoU2JFbEhUbWhpYlU1c1lrZDRiRnBFT1dOaWFVRm5TVU5DY0ZwcFFXOUpXRkp2WVZoT1lsVkZWazlTUld4UFVqRTVWRlpGUmxWU1ZqbFdWVVZTUWxaRlZtUkxWbmgxU1VOQlowbERRV2RqYlZZd1pGaEtkVTh4ZUhWWVJ6Um5TVU5CWjJSSGFIQmplVFZzWWxkc01FdEdWbEZTUlVaVlVsWTVSbFpyVms5V1EyczNXRWMxWTJKcFFXZEpRMEl3WVVkc2VsY3hRa1pVYTFKS1ZHdGtabFV4VWtKV1JWWm1WbFpDUlZGV1VrWllVMEU1U1VjMU1XSkhkemRZUnpSblNVZ3hZMkpzZUhWSlEwSmlVMVUxU2xaR09VNVNWbEpKVkRCU1pFdERhMmRsTVhoMVNVTkJaMGxJVW05aFdFNWlWVEIwU2xWR09WUldSVVpWVWxZNVZsVkZVa0pXUlZaVVdGTkJPVWxIV21oaVNFNXNUekY0ZFVsRFFqbFlSelZqWW1sQloxa3lPWFZqTTFKNVpGZE9NR0l6U1c5WU1uQndXV2xyWjJVeGVIVkpRMEZuU1VoT01XTkhWbmxMUTJzM1dFYzFZMkpwUVdkSlEwRjJUSGxDUTJGWE5XdEpSMFp6WWtOQ2FtSkhSbnBqZVVKMFdsaFNiMkl5VW5wSlNGSjJTVVozYVdSSGFIQmpNWGRwV0VjMFowbERRV2RXV0ZKd1lraE5kVmx0YkhWYVJURnNaRWRvZGxwSVRYVlpNa1p6WWtOb01HRkhiSHBNUTBJd1lVZHNla3h0VG5aaWJrNHdZMjVXYW1SSE9YbE1ia0o1WWpOU2RtUkliSGRhVTJzM1dFYzFZMkpwUVdkSlEwSnpXbGhSWjJGdGJHbEpSREJuV0RKd2NGbHBRamhtUTBJM1psUjBZMkpzZUhWSlEwRm5TVWRPZG1KdVRqQkpSMDU1V2xkR01GcFZOV3hrTVU0d1dWaFNiRWxFTUdkTFEydG5VRlEwWjJVeGVIVkpRMEZuU1VOQloySkhWakJKUjNoMldUSkdjMVV6VW1oa1IxVm5VRk5DVUZsdGNHeFpNMUYxV1ROS2JGbFlVbXhMUnpVeFlrZDNjRTh4ZUhWWVJ6Um5TVU5CWjBsRFFubGFXRkl4WTIwMFoySnRWak5KUmtKNVlqTm9OVXRIZUhaWk1rWnpWVE5TYUdSSFZYTkpTSFJqWW1sQlowbERRV2RKUTBGbldqSldNRTlwUVc5a1IwWjVXakpXTUV4RFFuZGpiVGwzVkcxR2RGcFRhMmRRVkRSblpURjRkVWxEUVdkSlEwRm5TVU5CWjBsSVNteGtTRlo1WW1sQ01GbFlTbTVhV0ZKaVkwaEtkbU5GTldoaVYxWmtUekY0ZFVsRFFXZEpRMEZuU1VOQ09VeEdlSFZKUTBGblNVTkJaMGxEUW5wYVdGRTJTVU5vTUZsWVNtNWFXRkZ6U1VoQ2VXSXpRazlaVnpGc1RFTkNNbGxYZURGYVUydG5VRlEwWjJVeGVIVkpRMEZuU1VOQlowbERRV2RKUjNoc1pFTkNhbVJZU25sYVZ6VXdWbTFHYzJSWFZXZFFVMEl3V1ZoS2JscFlVbUpqU0VwMlkwVTFhR0pYVm1SUE1YaDFTVU5CWjBsRFFXZEpRMEZuU1Vkc2JVbERhR3BrV0VwNVdsYzFNRlp0Um5Oa1YxVm5VRlF3T1VsSVdtaGlTRlpzUzFaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSVVubGtWMVUzV0VjMVkySnBRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZTVmhTYjJGWVRtSlZNSFJLVlVZNVZGWkZSbFZTVmpsV1ZVVlNRbFpGVmxSWVUyeGpZbWxCWjBsRFFXZEpRMEZuU1VOQlowbElVbTloV0U1aVZWWldSbFpWVm1aV1ZrSkZVVlpTUmxnd01VWldSV2hRVWtZd2IwdFVkR05pYkhoMVNVTkJaMGxEUVdkSlEwRm5TVWhTYUdOdFpHeGtSblIzWTIwNWQxUnRSblJhVmpCblVGTkNNbGxYZURGYVZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQ01HRkhiSHBNYlRsMVZUTlNhR1JIVmxaalIxSm9aRWRXYTB0SVFubGlNMEpQV1ZjeGJFeERRakpaVjNneFdsTjNaMWt6Vm5samJWWjFaRVphYUdKSVZteExWSFJqWW14NGRVbERRV2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDTUdOdVZteFBNWGgxU1VOQlowbERRV2RKUTBJNVRFWjRkVWxEUVdkSlEwRm5abE5yTjFoSE5HZEpRMEZuWmxSMFkySnNlSFZKUTBGblNVZDRiR1JEUW5kamJUbDNZM2xCWjBsRFFXZEpRMEU1U1VVNWFXRnRWbXBrUXpWb1l6Tk9jRm95Tkc5VU1rcHhXbGRPTUV4dFRubGFWMFl3V2xOb2RXUlhlSE5MVTNkbllXMXNhVXh1UW5saU0wSjZTVWg0T0VsSWREbExWSFJqWW1sQlowbERRbk5hV0ZGbldESjRkbGt5Um5OVk0xSm9aRWRWWjFCVFFtcGpiVlpvWkVkV1QxcFlaRlJrUjBZd1dsTm5jRTh4ZUhWWVJ6Um5TVU5CWjFReVNuRmFWMDR3VEcxU2JGcHRiSFZhVmtKNVlqTkNiR051VW5CYVdFMXZaRWRvY0dONWQyZGxNWGgxU1VOQlowbERRV2RYTVU1TVUxWkNabFV4VWtKV1JWWm1WbFpDUlZGV1VrWlZNVEEyU1VoMFkySnBRV2RKUTBGblNVTkJaMlF6U25Ca1IwWnBZa2RWTmtsRFFXZEpRMEl3WTI1V2JFeEdlSFZKUTBGblNVTkJaMGxEUW14aWJsWjBXbGhLYUZsdGVHeFBhVUZuU1VkYWFHSklUbXhNUm5oMVNVTkJaMGxEUVdkSlEwSnFZakkxYldGWFpERmpiVVpwWWtkVk5rbElVbmxrVjFWeldFYzBaMGxEUVdkSlEwRm5TVWhhYUdKSVZteFBhVUZuU1VOQlowbERRV2RrU0VveFdsTjRZMkpwUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQ1lsVkZWazlTUld4UFVqRTVWRlpGUmxWU1ZqbFdWVVZTUWxaRlZtUlBhVUkzV0VjMFowbERRV2RKUTBGblNVaGtlV0ZZVW1oWmJYaHNUMmxCWjBsRFFXZGtTRW94V2xONFkySnBRV2RKUTBGblNVTkJaMXBYTlRGaVYxWjVXVmRLYzFwVWIyZEpRMEp0V1ZkNGVscFRlR05pYVVGblNVTkJaMGxEUVdkWk1qbDFXbTFzYm1SWVNtaFpiWGhzVDJsQ01HTnVWbXhNUm5oMVNVTkJaMGxEUVdkSlEwSXlXVmQ0TVZwVWIyZEpRMEZuU1VOQlowbEhOVEZpUjNkeldFYzBaMGxEUVdkSlEwSTVURVo0ZFVsRFFXZEpRMEZuVnpCNFFsVXhVbVpWYTFaUFVrVldVMWd4VWtwVVZWWmtUMmxDTjFoSE5HZEpRMEZuU1VOQlowbElaSGxoV0ZKb1dXMTRiRTlwUVdkSlEwRm5aRWhLTVZwVGVHTmlhVUZuU1VOQlowbERRV2RhVnpVeFlsZFdlVmxYU25OYVZHOW5TVU5DYlZsWGVIcGFVM2hqWW1sQlowbERRV2RKUTBGbldUSTVkVnB0Ykc1a1dFcG9XVzE0YkU5cFFqQmpibFpzVEVaNGRVbERRV2RKUTBGblNVTkNNbGxYZURGYVZHOW5TVU5CWjBsRFFXZEpSbFl3WVZkNGVreHROWFprZVdkd1RFWjRkVWxEUVdkSlEwRm5abE40WTJKcFFXZEpRMEZuU1VaMFJGRldRbFZXVmtwR1dERktSbEpyVmxOU1ZUVkVVbFk1VGxKV1VrbFVNRkpVV0ZSdloyVXhlSFZKUTBGblNVTkJaMGxEUWpOamJXd3dXVmRLYzFwVWIyZEpRMEZuU1VoU2VXUlhWWE5ZUnpSblNVTkJaMGxEUVdkSlIxWjFaRmN4YkdOdFJtbGlSMVUyU1VOQloxcHRSbk5qTWxWeldFYzBaMGxEUVdkSlEwRm5TVWRPZG1KdFduQmFNMVo1V1ZkS2MxcFViMmRrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjJSdFJuTmtWMVUyU1VOQlowbERRV2RKUTBJM1psTjRZMkpwUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQmJtRlhVVzVQYVVJM1dFYzBaMGxEUVdkSlEwRm5TVWhrZVdGWVVtaFpiWGhzVDJsQlowbERRV2RhYlVaell6SlZjMWhITkdkSlEwRm5TVU5CWjBsSFZuVmtWekZzWTIxR2FXSkhWVFpKUTBGbldtMUdjMk15VlhOWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW0xYWNGb3pWbmxaVjBweldsUnZaMXB0Um5Oak1sVnpXRWMwWjBsRFFXZEpRMEZuU1VoYWFHSklWbXhQYVVGblNVTkJaMGxEUVdkaGJXeHBURzFzYTB4R2VIVkpRMEZuU1VOQloyWlRlR05pYVVGblNVTkJaMGxEWkhkamJUbDNZM2xqTmtsSWRHTmlhVUZuU1VOQlowbERRV2RrTTBwd1pFZEdhV0pIVlRaSlEwRm5TVU5DTUdOdVZteE1SbmgxU1VOQlowbERRV2RKUTBKc1ltNVdkRnBZU21oWmJYaHNUMmxCWjBsSFdtaGlTRTVzVEVaNGRVbERRV2RKUTBGblNVTkNhbUl5TlcxaFYyUXhZMjFHYVdKSFZUWkpTRko1WkZkVmMxaEhOR2RKUTBGblNVTkJaMGxJV21oaVNGWnNUMmxCWjBsRFFXZEpRMEZuWTBoS2RtTklUWE5ZUnpSblNVTkJaMGxEUWpsTVJuaDFTVU5CWjBsRFFXZEtNazV2WVZkNGEyTnRWblZLZW05blpURjRkVWxEUVdkSlEwRm5TVU5DTTJOdGJEQlpWMHB6V2xSdlowbERRV2RKU0ZKNVpGZFZjMWhITkdkSlEwRm5TVU5CWjBsSFZuVmtWekZzWTIxR2FXSkhWVFpKUTBGbldtMUdjMk15VlhOWVJ6Um5TVU5CWjBsRFFXZEpSMDUyWW0xYWNGb3pWbmxaVjBweldsUnZaMlJJU2pGYVUzaGpZbWxCWjBsRFFXZEpRMEZuWkcxR2MyUlhWVFpKUTBGblNVTkJaMGxEUW5GaFYwbDFXVEpvY0dKSFVubGFWelJuWmtoM1oxY3hNSE5ZUnpSblNVTkJaMGxEUWpsTVJuaDFTVU5CWjBsRFFXZEtNazUyWW01U2JHVklVVzVQYVVJM1dFYzBaMGxEUVdkSlEwRm5TVWhrZVdGWVVtaFpiWGhzVDJsQlowbERRV2RrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjFwWE5URmlWMVo1V1ZkS2MxcFViMmRKUTBKdFdWZDRlbHBUZUdOaWFVRm5TVU5CWjBsRFFXZFpNamwxV20xc2JtUllTbWhaYlhoc1QybENNR051Vm14TVJuaDFTVU5CWjBsRFFXZEpRMEl5V1ZkNE1WcFViMmRKUTBGblNVTkJaMGxIY0hCWmFUVnFZakkxTUZwWWFEQkpTSGc0U1VVNWFXRnRWbXBrUXpWcVkyMVdhR1JIVlc5aWJsWnpZa05yYzFoSE5HZEpRMEZuU1VOQ09VeEdlSFZKUTBGblNVTkJaMG96VGpCWldGSnNTbnB2WjJVeGVIVkpRMEZuU1VOQlowbERRbXhpYmxaMFdsaEthRmx0ZUd4UGFVRm5TVWRhYUdKSVRteE1SbmgxU1VOQlowbERRV2RKUTBKcVlqSTFiV0ZYWkRGamJVWnBZa2RWTmtsSVVubGtWMVZ6V0VjMFowbERRV2RKUTBGblNVZGtiR1JFYjJkSlEwRm5TVU5CWjBsRFFXZExRMnRuVUZRMFoyVXhlSFZKUTBGblNVTkJaMGxEUVdkSlNFcHNaRWhXZVdKcFFtWmlSemxxV1ZkNFZHUkhSakJhVkhSalltbEJaMGxEUVdkSlEwRm5abE40WTJKcFFXZEpRMEZuU1VOQloyTXlWakJQYVVGblNVTkJaMGxEUVdkSlEwRnZaRzFHYzJSWFZYQkpSREFyU1VoMFkySnBRV2RKUTBGblNVTkJaMGxEUW5CYWFVRnZTVmRzZWxadFJuTmhWMUpVWkVkR01GcFZPV2xoYlZacVpFTm9NbGxYZURGYVUydHdXRWMwWjBsRFFXZEpRMEZuU1VOQlowbERRakJoU0VwMlpIbENkVnBZWTJkV1NHeDNXbFZXZVdOdE9YbExSMEpLWW01YWFHSkhiR3RKU0Zwb1lraFdiRWxIV25aamFVSmpTVzVTYjJGWVRYVmpNMUpvWkVkV1kwbHFiMmRZUTBsclpUTmFhR0pJVm14bVZuZHBUR2xDVVdOdE9USmhWMUpzV2tOQ1kwbHVUakJaV0ZKc1dFTkpaMkpZVm5wa1EwSnBXbE5DYUdKcFFuQmtSMVo1V1ZkS2MxcFRRblpaYlhCc1dUTlJkVmxEYXpkWVJ6VmpZbWxCWjBsRFFXZEpRMEZuU1VOQ1VGbHRjR3haTTFGMVdWaE9lbUZYWkhWTFJqbHpZakpPYUdKR1RqQlpXRkpzVEVOQ01sbFhlREZhVTJzM1dFYzBaMGxEUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQ09VeEdlSFZKUTBGblNVZ3djRTh4ZUhWSlEwSTVXRWMxWTJKcFFXZGpiVlo2WWpKNE1scFZUbTloVjNoclkyMVdkVXRIVG05aFYzaHJZMjFXZFV0VFFqZFlSelJuU1VOQloyTnRWakJrV0VwMVNVaEtiR015T1hOa2JWWkVZVWRzYzFwSVNteGlhVFZxV1ZkNGMwdElVbTloV0UxelNVZE9iMkZYZUd0amJWWjFTMVIwWTJKcFFXZG1WbmgxV0VjMFowbEhiSHBUYld4cFMwaGFhR0pJVm14TFUwSTNXRWMwWjBsRFFXZGpiVll3WkZoS2RVbEhiSHBUYld4cFlWaE9iMHRJV21oaVNGWnNTMVIwWTJKcFFXZG1WbmgxV0VjMFowbEhUblppYms0d1kyNVdhbVJGY0hCWmFXZ3lXVmQ0TVZwVGEyZGxNWGgxU1VOQlowbElTbXhrU0ZaNVltbENhbUl5Tlhwa1NFb3hXVE5TUzJGWFNXOWtiVVp6WkZkVmNFOHhlSFZKUTBJNVdFYzFZMkpwUVdkalNGWjZZVVpLYkdKdFVteGphV2g1V2xjMWExcFlTbE5hV0U0eFlraFJjRWxJZEdOaWFVRm5TVU5DTUdGSGJIcE1iVlowWVZoUmIxWldRa1ZSVmxKR1dEQldWMUpWTlZWTVEwSjVXbGMxYTFwWVNsTmFXRTR4WWtoUmNFOHhlSFZKUTBJNVdFYzFZMkpwUVdkTWVUaG5XbGhPYzJGWE5UQk1WMUp3WXpKR2FXSkhWWFJpYlZZMFpFTXhjMkZYTld4SlJ6VjJURmhXZFdSWVRteGFRekV5V1ZoS2VsaEhOR2RKUnpsMVZVaEtkbU5HVm5kYVIwWXdXbGRSYjJOSVNuWmpSVFZvWWxkVmMwbEhOV3hrTVZwb1lraFdiRXhEUW5aaVIxSlhXVmQ0TVZwVGEyZGxNWGgxU1VOQ09WaEhOV05pYVVGblRIazRaMXBZVG5OaFZ6VXdURmRTY0dNeVJtbGlSMVYwWW0xV05HUkRNWE5oVnpWc1NVYzFka3hZVm5Wa1dFNXNXa014TWxsWVNucFlSelJuU1VjNWRWVXpVbWhrUjFaV1kwZFNhR1JIVm10TFNFSjVZak5DVDFsWE1XeE1RMEoxV2xoa1YxbFhlREZhVTNkbllqSjRhMVp0Um5Oa1YxVndTVWgwWTJKcFFXZG1WbmgxV0VjMFowbEhUbWhqU0ZJeFkyMVdVMXBYV214amJWWjFXVEpWYjJKdFJuUmFVM2RuWVZjMU1GcFlTbXBhV0VJd1lqTktSRmxYZUhOWmJVWnFZWGxyWjJVeGVIVkpRMEZuU1VkNGJHUkRRblJhV0ZKdllqSlJaMUJUUWpCaFIyeDZWekJPUWxWR1VsWlZhMVptVld0V1IxSldTa1pVYTA1R1dEQXhSbFpGYUZCU1JrNWtWekkxYUdKWFZtUlBNWGgxU1VOQlowbEhiRzFKUTJoMFdsaFNiMkl5VVhCWVJ6Um5TVU5CWjBsRFFubGFXRkl4WTIwMFoySlhWakJoUnpsclR6RjRkVmhITkdkSlEwRm5ZbGRXTUdGSE9XdEpSREJuUzBZNWVWcFhXWE5KU0VKNVdsaGFjR0l6Vm5wVmJWWnRTMU5CT1ZCcFFqZFlSelJuU1VOQlowbERRbk5hV0ZGblkyMVdiVWxFTUdkWU0wcHNXbXAwWTJKc2VIVkpRMEZuU1VOQloyRlhXV2RMU0ZJMVkwZFdkbHBwUW5CaWJsSnNZMjFPYkdOSVVuWmphMDVvWWtkNGFWbFhUbkpKUkRBNVVGTkJibHB1Vm5WWk0xSndZakkwYmt0V2VIVkpRMEZuU1VOQlowbERRbmxhVjFsblVGTkNjR0p1VW14amJVNXNZMGhTZG1OclRtaGlSM2hwV1ZkT2NreHRUbWhpUjNkdlpFZG9jR041ZDJkamJWWnRURU5DZDJOdFZqSmhWemt4WXpGS2JGcHBhemRZUnpWalltbEJaMGxEUVdkSlJUbHBZVzFXYW1SRE5XdGFWMXB3WW0xV1VXTnRPWGRhV0Vvd1lWZFdla3RJVW05aFdFMXpTVWgwWTJKcFFXZEpRMEZuU1VOQloxY3lOV2hpVjFaa1QybENOMWhITkdkSlEwRm5TVU5CWjBsRFFXZGtNMHB3WkVkR2FXSkhWVFpKUTBGblNVTkNNR051Vm14TVJuaDFTVU5CWjBsRFFXZEpRMEZuU1VkV2RXUlhNV3hqYlVacFlrZFZOa2xEUVdkYWJVWnpZekpWYzFoSE5HZEpRMEZuU1VOQlowbERRV2RaTWpsMVdtMXNibVJZU21oWmJYaHNUMmxDTUdOdVZteE1SbmgxU1VOQlowbERRV2RKUTBGblNVaGFhR0pJVm14UGFVRm5TVU5CWjBsRFFXZGpiVlp0VEVaNGRVbERRV2RKUTBGblNVTkNPVXhHZUhWSlEwRm5TVU5CWjJaVGF6ZFlSelJuU1VOQloyWlVkR05pYkhoMVNVTkJaMGxIYkcxSlEyZ3daVmhDYkdJeVdXZGhWelV3V2xoS2FscFlRakJpTTBwRVdWZDRjMWx0Um1waGVVRm9VRlF3WjBveVdqRmliVTR3WVZjNWRVcDViR05pYVVGblNVTkJaMGxJVW05aFdFNWlVVEJHVVZaR1ZsTlNWamxUVWxWYVJsVnJWazlSTUZabVZGVldWVk5GT1VWVk1UQm5VRk5DZEZwWVVtOWlNbEUzV0VjMVkySnBRV2RKUTBKNVdsaFNNV050TkdkaVYxWXdZVWM1YTA4eGVIVkpRMEk1V0VjMVkySnBRV2RhYlRsNVdUSldWbU5IVW1oa1IxVnZTMU5DTjFoSE5HZEpRMEZuWkVkb2NHTXhkRkpXVlZaV1VsWTVWbFZGVWtKV1JWWm1WRlZXVlZORk9VVllVMmR3VHpGNGRVbERRamxZUnpWalltbEJaMW95VmpCVk0xSm9aRWRWYjJOSVNuWmpSMVo1WkVoc1VWbFlVbTlNUTBKcldsZGFhR1JYZURCV2JVWnpaRmRWY0VsSWRHTmlhVUZuU1VOQ2MxcFlVV2RqTTFKb1pFZFZaMUJUUWpCaFIyeDZURzVPTUZsWVVteFBNWGgxU1VOQlowbEhiRzFKUTJob1kyMWtNV0pYVm5Wa1NFMTFZa2RXZFZvelVtOUpSREE1VUZOQmQwdFdlSFZKUTBGblNVTkJaMk50VmpCa1dFcDFTVWhPTUZsWVVteFBNWGgxV0VjMFowbERRV2RoVjFsblMwWldNR0ZYZUhwTWJXeDFZek5TYUdKdFRteFVNbGx2WTBoS2RtTkhWbmxrU0d4UldWaFNiMHhEUVc1aU1rcHhXbGRPTUVwNWEzQkpTSFJqWW1sQlowbERRV2RKUjNoc1pFTkNjbHBZYkhwSlEwRm5TVU5CWjBsRFFUbEpSVGxwWVcxV2FtUkROWEphV0d4NlMwaENlV0l6UW14amJsSTFWVWRHTUdGRGEzVlpNamwxV1RKR01FdEZPV2xoYlZacVpFTTFibHBZVWxCa01qVlJZMjA1ZDFwWVNqQmxWazQxWWxkS2RtSklUVzlqU0VwMlkwZFdlV1JJYkZGWldGSnZTMU5yTjFoSE5HZEpRMEZuU1VOQ2MxcFlVV2RhYld4MVdWZDRWR1JIUmpCYVUwRm5VRk5DTjJaVWRHTmliSGgxU1VOQlowbERRV2RhYlRsNVNVTm9jMXBZVVdkaFUwRTVTVVJCYzBsSGJITkpSREJuWVRKV05XTjVOWE5hVnpWdVpFZG5OMGxIYTJkUVEwSndZa1J6WjJGVGMzSkxVMEkzV0VjMFowbERRV2RKUTBGblNVZDRiR1JEUW5KYVdHdG5VRk5DY2xwWWJIcFhNbXhrVHpGNGRVbERRV2RKUTBGblNVTkNjMXBZVVdkWGVVSXlXVmQ0TVZwVGQyZGlSMFo2WkVaQ2FHTnVVV2RZVTBFNVNVWldNR0ZYZUhwTWJWcHNaRWRPYjFKSFZteGpSa0o1WWpOQ2JHTnVValZMU0U0d1dWaFNiRXhEUW5KYVdHdHpTVWhDZVdJelFteGpibEkxVlVkR01HRkdkSEphV0d4a1RFTkNNR051Vm14TFZIUmpZbWxCWjBsRFFXZEpRMEZuWVZkWlowdEhlR2hqTTFKUldWaEtNRWxFTURsSlJ6VXhZa2QzY0ZoSE5HZEpRMEZuU1VOQlowbERRV2RaTWpsMVpFZHNkV1JYVlRkWVJ6VmpZbWxCWjBsRFFXZEpRMEZuV20xc2RWbFhlRlJrUjBZd1dsWjBjMWxZVGpCVlIwWjVaRVl3WjFCVFFqSlpWM2d4V2xSMFkySnBRV2RKUTBGblNVZ3hZMkpzZUhWSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VkYWNHSnRSbk5WTTFKb1pFZFZOMWhITkdkSlEwRm5abE5DYkdKSVRteEpTSFJqWW1sQlowbERRV2RKU0Vwc1pFaFdlV0pwUWxaa1IyeHpZM2sxYlZwWVVtcGhSVkpzV2xoQ1VXTnRPWGRhV0Vvd1pWTm9lbVJIUmpCYVUzZG5ZMGhLZG1OSFZubGtTR3hSV1ZoU2IweERRbXRhVjFwb1pGZDRNRlp0Um5Oa1YxVndUekY0ZFVsRFFXZEpTREZqWW1sQloyWldlSFZZUnpSblNVaE9iR1JHVGpCWldGSnNTMGhhYUdKSVZteExVMEkzV0VjMFowbERRV2RoVjFsblMwTkdjR014V21oaVIyeHJWVE5TYUdSSFZsQlpiWEJzV1ROUmIyUnRSbk5rVjFWd1MxWjRkVWxEUVdkSlEwRm5aRWRvZVdJelkyZGliVll6U1VaU05XTkhWa1pqYmtwMlkybG9aMU5YTlRKWlYzaHdXa05DTWxsWGVERmFVMEp0WWpOSloxaERTakJoUjJ4NlRHNU9iR1JHVGpCWldGSnNXRU5KTmtsR2QybEtTSFF5V1ZkNE1WcFlNV05KYVRSblZVaEtkbVJ0Ykd0YVYxRm5XRU5LZW1SSFJqQmFWbmRwU1VjeE1XTXpVV2RaYlZWbldWYzBaMkZZVW14amJVWnBZa2RWWjJJeVNuRmFWMDR3VEcxQmNFOHhlSFZZUnpSblNVTkJaMVF5U25GYVYwNHdURzFHZW1NeWJHNWlhV2d3WVVkc2VreHVUakJaV0ZKc1RFTkNNbGxYZURGYVUyczNXRWMwWjBsSU1XTmliSGgxU1VOQ2VscFlVbFJrUjBZd1dsWkNhR016VG5Ca2JWVnZaRzFHYzJSWFZYQkpTSFJqWW1sQlowbERRbkJhYVVGdlNWZHNlbFp0Um5OaFYxSlVaRWRHTUZwVk9XbGhiVlpxWkVOb01sbFhlREZhVTJ0d1dFYzBaMGxEUVdkSlEwSXdZVWhLZG1SNVFuVmFXR05uVmtoc2QxcFZWbmxqYlRsNVMwZENTbUp1V21oaVIyeHJTVWhhYUdKSVZteEpSMXAyWTJsQ1kwbHVVbTloV0UxMVl6SldNRlV6VW1oa1IxWlJXVmhPZW1GWVdteFlRMGsyU1VaM2FVcElkREpaVjNneFdsZ3hZMGxwTkdkVlNFcDJaRzFzYTFwWFVXZFlRMHA2WkVkR01GcFdkMmxKUnpFeFl6TlJaMWx0VldkWlZ6Um5ZVmhTYkdOdFJtbGlSMVZuWWpKS2NWcFhUakJNYlVGd1R6RjRkVmhITkdkSlEwRm5aRWhLTlVsSWRHTmlhVUZuU1VOQlowbElVbTloV0U1aVZUQjBTbFZHT1ZSV1JVWlZVbFk1VmxWRlVrSldSVlpVV0ZOQk9VbElVbmxrVjFVM1dFYzBaMGxEUVdkSlEwSlFXVzF3YkZrelVYVlpXRTU2WVZka2RVdElVbTloV0UxMVl6TlNhR1JIVlhOSlNGcG9Za2hXYkV0VWRHTmlhVUZuU1VOQ09VbEhXbkJpYlVaellraHJaMlV4ZUhWSlEwRm5TVU5CWjJSSGFIQmpNWFJVVXpCc1VWZ3hUbFZSVmxKR1dERldVVkpGUmxWU1ZrNWtTVVF3WjFwdFJuTmpNbFUzV0VjMFowbERRV2RtVm5oMVNVTkNPVmhITldOaWFVRm5ZekpvZG1SWGVHdFdXRUpyV1ZoU2JFdERhMmRsTVhoMVNVTkJaMGxJU214a1NGWjVZbWxDTUdOdVZteFBNWGgxU1VOQ09WaEhOV05pYVVGbldrZFdlbVJJU25abFUyZHdTVWgwWTJKcFFXZEpRMEpyV2xkNGJHUkhWV2RrUjJod1kzazFlbVJIUmpCYVZIUmpZbWxCWjBsRFFtdGFWM2hzWkVkVloyUkhhSEJqZVRWM1kyMDVkMk42ZEdOaWFVRm5TVU5DYTFwWGVHeGtSMVZuWkVkb2NHTjVOV3BpTWpVd1dsaG9NRTh4ZUhWSlEwRm5TVWRTYkdKSFZqQmFVMEl3WVVkc2VsY3dUa0pWUmxKV1ZXdFdabFZyVmtkU1ZrcEdWR3RPUmxnd01VWldSV2hRVWtaT1pFOHhlSFZKUTBGblNVaFNiMkZZVFhWWk1uaHNXVmhLUW1KSGVFVmFWMHAyWkZjMWFscFlUVzlMVkhSalltbEJaMlpXZUhWWVJ6Um5TVWhLYkdKdFVteGpiR1JvWVZoU2NHSnRZMjlMVTBJM1dFYzBaMGxJTVdOaWJIaDFTVU5DZVZwWE5XdGFXRWx2V1RKb2NHSkhVbmxhVnpSd1NVaDBZMkpwUVdkSlEwSjVXbGhTTVdOdE5HZFpNbWh3WWtkU2VWcFhORGRZUnpSblNVZ3hZMkpzZUhWSlEwSXhZMGRTYUdSSFZtdExRMnRuWlRGNGRVbERRamxZUnpWalltbEJaMWt5T1hSWmJXeDFXbFprY0dSSFoyOWpNbFozVEVOQmRVeHBOV2hqYldSNlMxTkNOMWhITkdkSlEwRm5Za2RXTUVsSFduQmliVVp6VVZoS2JtTjVRVGxKUnpWc1pIbENWRnBZVVc5TFZIUmpZbWxCWjBsRFFtMWlNMGxuUzBkNGJHUkRRbkJKUkRCblRVTjNaMkZYZDJkUVUwSm9ZMjFrZWt4dGVHeGliV1F3WVVSeloyRlRRVGhKUjJ4elQzbENjRXQ1YzNCSlNIUmpZbWxCWjBsRFFXZEpSM2hzWkVOQ2FHTnRZMmRRVTBKb1kyMWtlbGN5YkdSUE1YaDFTVU5CWjBsRFFXZGhWMWxuUzBOR2FHTnRZM0JZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTVTY0dKdVZteFBNWGgxV0VjMFowbERRV2RKUTBKd1dtbEJiMVpZVW5CaVNFMTFZVmMxZW1SSFJuVlpNbFpRV21sb2FHTnRZM05KUTJSNlpFaEtjR0p0WTI1TFUydG5aVEY0ZFVsRFFXZEpRMEZuU1VOQ2MxcFlVV2RrYlVaelpGZFdla2xFTUdkWldFcHVURzVPZDJKSGJEQkxTRTVzWTBOcmRWcHRiSE5rUjFaNVMwWldNR0ZYZUhwTWJXeDZWRzA1TUZKWE1YZGtTR3R3VHpGNGRVbERRV2RKUTBGblNVTkNiV0l6U1dkTFIzaHNaRU5DY0VsRU1HZE5RM2RuWVZkM1oxQlRRakpaVjNneFdsaE5kV0pIVm5WYU0xSnZUM2xDY0VsRWQyZGhWM2MzU1VkcmNrdDVhMmRsTVhoMVNVTkJaMGxEUVdkSlEwRm5TVWQ0YkdSRFFqSlpWM2d4V2xOQk9VbElXbWhpU0Zac1l6RjBjRmhVZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEp0WVZjMWFHSkZSbmxhTTAxMVdWZFNhMHRJV21oaVNGWnNTMVIwWTJKcFFXZEpRMEZuU1VOQloyWldlSFZKUTBGblNVTkJaMlpUUW14aVNFNXNTVWRzYlVsRGFFSmpia3BvWlZNMWNHTXdSbmxqYlVZMVMwZEdlVnA1YTNCSlNIUmpZbWxCWjBsRFFXZEpRMEZuWWtkV01FbElXbWhpU0Zac1kzbEJPVWxIUm5sYWVUVnRZVmQ0TUZwWVNXOUxTRnBvWWtoV2JFdFRRVGxRYVVJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExRMFl5V1ZkNE1WcFRiR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUp0V1ZkNGVscFVkR05pYkhoMVNVTkJaMGxEUVdkSlEwRm5TVWRzYlVsRFoyaFdXRkp3WWtoTmRXRlhOWHBrUjBaMVdUSldVRnBwYURKWlYzZ3hXbE4zWjBvelRqQmpiV3gxV25samNFdFdlSFZKUTBGblNVTkJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpSMXBvWWtoT2JFOHhlSFZZUnpSblNVTkJaMGxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpSbFl3WVZkNGVreHRiSHBVYlRrd1VsY3hkMlJJYTI5a2JVWnpaRmRWY0U4eGVIVkpRMEZuU1VOQlowbERRamxMVkhSallteDRkVWxEUVdkSlEwRm5TVU5DYldJelNXZExSM2hzWkVOQ2NFbEVNR2ROUTNkbllWZDNaMUJUUWpKWlYzZ3hXbGhOZFdKSFZuVmFNMUp2VDNsQ2NFbEVkMmRoVjNjM1NVZHJja3Q1YTJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VkNGJHUkRRakpaVjNneFdsTkJPVWxJV21oaVNGWnNZekYwY0ZoVWRHTmlhVUZuU1VOQlowbERRV2RKUTBKdFlWYzFhR0pGUm5sYU0wMTFXVmRTYTB0SVdtaGlTRlpzUzFSMFkySnBRV2RKUTBGblNVTkJaMlpXZUhWSlEwRm5TVU5CWjJaVFFteGlTRTVzU1Vkc2JVbERhRlprUjJ4elkzazFjR0p1VGpCWlZ6VnFXbFU1YlV0SFJubGFlWGRuU2pJNWFXRnRWbXBrUTJOd1MxTkNOMWhITkdkSlEwRm5TVU5CWjBsSGVHeGtRMEp5V2xoc2VrbEVNR2RVTWtweFdsZE9NRXh0ZEd4bFdFMXZXVmhLYmt0VWRHTmlhVUZuU1VOQlowbERRV2RhYlRsNVNVTm9jMXBZVVdkaFUwRTVTVVJCYzBsSGJITkpSREJuWVRKV05XTjVOWE5hVnpWdVpFZG5OMGxIYTJkUVEwSndZa1J6WjJGVGMzSkxVMEkzV0VjMFowbERRV2RKUTBGblNVTkJaMkpIVmpCSlIzUnNaVk5CWjBsRU1HZGhNbFkxWXpGMGNGaFVkR05pYVVGblNVTkJaMGxEUVdkSlEwSnpXbGhSWjJSdFJuTmtWMVZuVUZOQ2FHTnRaR0poTWxZMVdGUjBZMkpzZUhWSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VObmFHUnRSbk5rVjFWd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMXB3WW0xR2MxRllTbTVqZVRWcldsZDRiR1JIVlc5aE1sWTFTMVIwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUjA1MlltNVNjR0p1Vm14UE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VneFkySnNlSFZKUTBGblNVTkJaMGxEUVdkSlIxcHdZbTFHYzFGWVNtNWplVFZvV2tkUmIyRXlWalZMVkhSalltbEJaMGxEUVdkSlEwRm5abFo0ZFVsRFFXZEpRMEZuWmxaNGRVbERRV2RKU0RGallteDRkVWxEUVdkSlNFcHNaRWhXZVdKcFFrSmpia3BvWlZNMWJXTnRPWFJMUjFwd1ltMUdjMUZZU201amVXdDFZVzA1Y0dKcGFIcGFXRUZuWmtoM1owcDVZM0JQTVhoMVNVTkNPVmhITldOaWFVRm5XVEo0YUdNelRteGplV2QxVEdrMWFHTnRaSHBMVTBJM1dFYzBaMGxEUVdkamJWWXdaRmhLZFVsSVVtOWhXRTExV1RJNWRGbHRiSFZhVm1Sd1pFZG5iMHA1UVc1TVEwRjFUR2sxYUdOdFpIcExWSFJqWW1sQloyWldlSFZZUnpSblNVZFdOR1JJU21oWk0xSkVZVWRzYzFwSVNteGlhV2htWTBkR01HUkhWbmxpYmsxelNVZE9iMkZYZUd0amJWWjFTMU5DTjFoSE5HZEpRMEZuWWtkV01FbEhWalJrU0Vwb1dUTlNiRnBEUVRsSlNIUTVUekY0ZFVsRFFXZEpSM2hzWkVOQ2QxbFlVakJhV0VwMVkzbEJaMUJUUW1aalIwWXdaRWRXZVdKdVRUZFlSelJuU1VOQloySkhWakJKUjJ4NlVWaEtlVmxZYTJkSlEwRTVTVVZHZVdOdFJqVk1iV3g2VVZoS2VWbFlhMjlqUjBZd1pFZFdlV0p1VFhCUE1YaDFXRWMwWjBsRFFXZFpNamwxWXpOUloyRllUazVaV0ZKcVlVTkJPVWxEYUhGaFYwbHdTVVF3SzBsSWRHTmlhVUZuU1VOQlowbEhlR3hrUTBKeFlWZEtWV1ZZUW14SlJEQm5ZVzFzYVV4c1VqVmpSMVUzV0VjMFowbERRV2RKUTBKd1dtbEJiMVpZVW5CaVNFMTFZVmMxZW1SSFJuVlpNbFpRV21sb2NXRlhTbFZsV0VKc1RFTkJibU16VW5saFZ6VnVTbmxyY0ZoSE5HZEpRMEZuU1VOQlowbEhjSEJaYkZJMVkwZFZaMUJUUW5GaFYwcFZaVmhDYkV4dVVuWlVSemt6V2xoS1JGbFlUbXhMUTJzM1dFYzFZMkpwUVdkSlEwRm5TVWRzYlVsRGFIQmpNRVo1WTIxR05VdFRRamRZUnpSblNVTkJaMGxEUVdkSlIxcDJZMmxCYjJKSFZqQkpSMnRuVUZOQmQweERRbkJpUTBFNVNVaENhR1JJVW14amJUVjZURzE0YkdKdFpEQmhSSE5uWVZOQk9FbEhiSE5QZVVKd1MzbHpjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZEpRMEp6V2xoUloyTkhSakJrUjFaNVltbEJPVWxJUW1oa1NGSnNZMjAxZWxjeWJHUlBNWGgxU1VOQlowbERRV2RKUTBGblNVZHNiVWxEYUZaa1IyeHpZM2sxY0dKdVRqQlpWelZxV2xVNWJVdElRbWhrU0ZKc1kyMDBjMGxEWkhwa1NFcHdZbTFqYmt0VGJHTmlhVUZuU1VOQlowbERRV2RKUTBGblNVaENhR1JJVW14amJUUm5VRk5DZDFsWVVqQmFXRXAxVEc1U2RsUkhPVE5hV0VwRVdWaE9iRXREYXpkWVJ6VmpZbWxCWjBsRFFXZEpRMEZuU1VOQ2NGcHBRVzloYld4cFZraHNkMXBUUVRsUVZEQm5ZMGRHTUdSSFZubGlhV3RuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkYVdHZ3dZMjFHYW1SSFZtdFhNMEpvWkVoU2JHTnROV1JKUkRCbllXMXNhVTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpRMEZuWTIxV01HUllTblZKU0ZKNVpGZFZOMWhITkdkSlEwRm5TVU5CWjBsRFFXZG1WbmgxU1VOQlowbERRV2RKUTBJNVdFYzBaMGxEUVdkSlEwSTVTVWRXYzJNeVZXZGxNWGgxU1VOQlowbERRV2RKUTBKeldsaFJaMkV5VmpWamVVRTVTVVU1YVdGdFZtcGtRelZ5V2xoc2VrdElRbWhrU0ZKc1kyMDFla3RVZEdOaWFVRm5TVU5CWjBsRFFXZGFiVGw1U1VOb2MxcFlVV2RoVTBFNVNVUkJjMGxIYkhOSlJEQm5ZVEpXTldONU5YTmFWelZ1WkVkbk4wbEhhMmRRUTBKd1lrUnpaMkZUYzNKTFUwSTNXRWMwWjBsRFFXZEpRMEZuU1VOQloySkhWakJKUjNSc1pWTkJaMGxEUVdkUVUwSnlXbGhzZWxjeWJHUlBNWGgxU1VOQlowbERRV2RKUTBGblNVZDRiR1JEUW5kWldGSXdXbGhLZFVsRU1HZGpSMFl3WkVkV2VXSnVUbUpoTWxZMVdGUjBZMkpwUVdkSlEwRm5TVU5CWjBsRFFuTmFXRkZuWTIxV2VtUlhlREJQTVhoMVdFYzBaMGxEUVdkSlEwRm5TVU5CWjJGWFdXZExSbFl3WVZkNGVreHRiSFZqTTFKb1ltMU9iRlF5V1c5alIwWXdaRWRXZVdKcGQyZFZiVlp1VWxob2QwdFRiR05pYVVGblNVTkJaMGxEUVdkSlEwRm5TVWhLYkdNelZuTmtRMEU1U1VoQ2FHUklVbXhqYlRSMVpFZFdlbVJEYUhGaFYwcFZaVmhDYkV0VWRHTmlhVUZuU1VOQlowbERRV2RKUTBKc1lraE9iRWxIYkcxSlEyaFdaRWRzYzJONU5YQmliazR3V1ZjMWFscFZPVzFMU0VKb1pFaFNiR050TkhOSlEyUjZaRWhLY0dKdFkyNUxVMnhqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJU214ak0xWnpaRU5CT1VsRGFIZFpXRkl3V2xoS2RVeHVVblpVUnpreldsaEtSRmxZVG14TFEydG5VRlF3T1VsSGNIQlpiRkkxWTBkVmNFOHhlSFZKUTBGblNVTkJaMGxEUVdkSlIxWnpZekpXWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKU0Vwc1l6TldjMlJEUVRsSlEyaDNXVmhTTUZwWVNuVkpSREE1VUZOQ2NXRlhTbFZsV0VKc1MxUjBZMkpzZUhWSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VOb2VWcFlUakZpU0ZGd1NVaDBZMkpwUVdkSlEwRm5TVU5CWjBsRFFXZEpSMVkwWkVoS2FGa3pVbXhhUm5SeVdsaHNaRWxFTUdkaGJXeHBUekY0ZFVsRFFXZEpRMEZuU1VOQlowbERRV2RqYlZZd1pGaEtkVWxJVW5sa1YxVTNXRWMwWjBsRFFXZEpRMEZuU1VOQloyWldlSFZKUTBGblNVTkJaMGxEUWpsWVJ6Um5TVU5CWjBsRFFqbFlSelZqWW1sQlowbERRV2RKU0Vwc1pFaFdlV0pwUW0xWlYzaDZXbFIwWTJKcFFXZEpRMEk1VHpGNGRWaEhOR2RKUTBGbldsaG9NR050Um1wa1IxWnJURzVLYkdKWFJuQmliV3gxV2pCT2IyRlhlR3RqYlZaMVNVUXdaMWt5YUhCaVIxSjVXbGMwZFZwdGJITmtSMVo1UzBOb2NXRlhTWEJKUkRBclNVTkdjR013TVdoa1IwNXZTMGR3Y0ZscGEzQlBNWGgxU1VOQlowbElTbXhrU0ZaNVltbENiR1ZJVW5sWlYwNHdXbGRSTjFoSE5HZEpTREZqWW14NGRVbERRbXRhVjBwMlpGYzFhbHBUYUcxa1Z6VnFURU5DTUdGWE1XeE1RMEptWVZkUmNFbElkR05pYVVGblNVTkNhbUl5Tlhwa1EwSnFZa2RXYUdOc1FteGliVkp3WW0xa1ZXRlhNV3hpTTFZd1NVUXdaMHREYTJkUVZEUm5aVEY0ZFVsRFFXZEpRMEZuWVZkWlowdElRbXhpYlZKd1ltMWtWV0ZYTVd4amFVRnRTbWxDZDFwWE5XdGhWelZ1Vmtkc2RGcFlTWFZrUjJ4MFdsYzVNV1JEYTJkbE1YaDFTVU5CWjBsRFFXZEpRMEpxWWtkV2FHTnNVbkJpVjFaMlpGaFJiMk5IVm5WYVIyeDFXakZTY0dKWFZubE1ibEp3WWxkV2RtUllVWEJQTVhoMVNVTkJaMGxEUVdkSlEwSjNXbGMxYTJGWE5XNVdSMngwV2xoSmRXUkhiSFJhVnpreFpFTkJPVWxITlRGaVIzYzNXRWMwWjBsRFFXZEpRMEk1V0VjMFowbERRV2RtVkhSallteDRkVWxEUVdkSlNGcG9ZMmxDY0ZwRFFUbEpRMmRvV0RKc2EwdFRRUzlKUTJkdVNubEJja2xIV2pGaWJVMXdTVVJ2WjFneWJHdFBNWGgxU1VOQlowbEhiRzFKUTJkb1pFZG9jR041Tld0YVYwcDJaRmMxYWxwV1VuQmlWMVo1WTNscloyVXhlSFZKUTBGblNVTkJaMVF5U25GYVYwNHdURzFTYkZwdGJIVmFWa0o1WWpOQ2JHTnVValZMU0ZKdllWaE5jMGxEWkd0YVYwcDJaRmMxYWxwV1VuQmlWMVo1WTNsamMwbElkR05pYVVGblNVTkJaMGxEUVdka00wcHdaRWRHYVdKSFZUWkpRMEZuU1VOQ01HTnVWbXhNUm5oMVNVTkJaMGxEUVdkSlEwSnNZbTVXZEZwWVNtaFpiWGhzVDJsQlowbEhXbWhpU0U1c1RFWjRkVWxEUVdkSlEwRm5TVU5DYW1JeU5XMWhWMlF4WTIxR2FXSkhWVFpKU0ZKNVpGZFZjMWhITkdkSlEwRm5TVU5CWjBsSVdtaGlTRlpzVDJsQlowbERRV2RKUTBGblpUTXdjMWhITkdkSlEwRm5TVU5DT1V0VWRHTmlhVUZuU1VOQ09WaEhOV05pYVVGblNVTkNNbGxZU1dkalIxWjFXa2RzZFZveFVuQmlWMVo1U1VRd1oyUkhhSEJqZVRWcldsZEtkbVJYTldwYVZsSndZbGRXZVdNeGRIQmFSakEzV0VjMFowbERRV2RoVjFsblMwTkdkMXBYTld0aFZ6VnVWa2RzZEZwWVNYQllSelJuU1VOQlowbERRbmRhVnpWcllWYzFibFpIYkhSYVdFbG5VRk5DTUdGSGJIcE1iVkpzV1cwNU1XSnRUbXhXUjJ4MFdsaEtlbGN5Ykd0WVUwRTVTVWgwT1U4eGVIVllSelJuU1VOQloyTkhWblZhUjJ4MVdqRlNjR0pYVm5sTWJWb3hZbTFOWjFCVFFtMWtWelZxVHpGNGRVbERRV2RKUjA1eldsZEdlVlZIVm5WYVIyeDFXakZTY0dKWFZuWmtXRkZ2UzFSMFkySnNlSFZKUTBGblNVaGFhR05wUW5kamJUbDBZVmhPYkVsRU1HZGpSMVoxV2tkc2RWb3hVbkJpVjFaNVRHNUNlV0l5TVhCak1sVTNXRWMwWjBsRFFXZGhWMWxuUzBOR2QyTnRPWFJoV0U1c1NVaDRPRWxEUm5kamJUbDBZVmhPYkV4dVFteGliVkp3WW0xamIwdFRhMmRsTVhoMVNVTkJaMGxEUVdkaVIxWXdTVWhPTUZsWVVqRmplVUU1U1VOa2QxcFhOV3RoVnpWdVNucDBZMkpwUVdkSlEwRm5TVWQ0YkdSRFFubGFXRTUyWWtoYWJFOHhlSFZZUnpSblNVTkJaMGxEUW5kamJUbDBZVmhPYkVsRU1HZGpSMVoxV2tkc2RWb3hVbkJpVjFaNVRHNUNlV0l5TVhCak1sVm5VRk5DZFZwWVkyZFZTRXAyWWxkc2VscFRaMjlZTTBwc1l6STVjMlJ0VlhCSlJEQXJTVWgwWTJKcFFXZEpRMEZuU1VOQloyTnRWbnBpTW5neVdsTkJPVWxHT1hsYVdFNTJZa2hhYkU4eGVIVkpRMEZuU1VOQloyWlRhemRZUnpWalltbEJaMGxEUVdkSlNFSjVZakl4Y0dNeVZYVmpiVlo2WWpKNE1scFRRVGxKUTJkd1NVUXdLMGxJZEdOaWFVRm5TVU5CWjBsRFFXZGhWMWxuUzBoT01GbFlVakZqZVVGb1VGUXdaMG96UW14aWJWSndZbTFqYmt0V2VIVkpRMEZuU1VOQlowbERRV2RKU0Vwc1pFaFdlV0pxZEdOaWJIaDFTVU5CWjBsRFFXZEpRMEo2WkVkR01HUllUV2RRVTBGdVdtNVdjMXB0YkhOaVIxWnJTbnAwWTJKcFFXZEpRMEZuU1VOQloxa3llR3haV0VwUldsYzFhMkZYTlc1V1IyeDBXbGM1TVdSRFozQlBNWGgxU1VOQlowbERRV2RKUTBJd1lVZHNla3h0VW14WmJUa3hZbTFPYkZaSGJIUmFXRXA2VnpKc2ExaFRRVGxKUnpVeFlrZDNOMWhITldOaWFVRm5TVU5CWjBsRFFXZGhWMWxuUzBoU05XTkhWblphYVVKM1dsYzFhMkZYTlc1V1IyeDBXbGhKZFZwdVZuVlplVUU1VUZRd1owb3lXakZpYlU0d1lWYzVkVXA1YTJkbE1YaDFTVU5CWjBsRFFXZEpRMEZuU1VoYWFHTnBRbmxhV0ZGblVGTkNkMXBYTld0aFZ6VnVWa2RzZEZwWVNYVmFibFoxV1hrMWFsbFhlSE5MU0ZKdllWaE5jRTh4ZUhWSlEwRm5TVU5CWjBsRFFXZEpSMnh0U1VOb2VWcFlVV2RoVnpWNlpFZEdkVmt5Vm5aYWFVSlJZMjA1ZEdGWVRteEpTSGc0U1VOb2VWcFlVV2RLYVZsblpFaHNkMXBYT1cxSlNFcHNaRU0xTUdGSFZuVkpSREE1VUZOQmJscHVWblZaTTFKd1lqSTBia3RUYkdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VoS2JHUkROVEJoUjFaMVMwTm9NbGxYZURGYVUydG5VRlEwWjJOdFZucGlNbmd5V2xOb01sbFhlREZhVTJ0d1R6RjRkVWxEUVdkSlEwRm5TVU5CWjBsSFZuTmpNbFpqWW1sQlowbERRV2RKUTBGblNVTkJaMGxJU214ak1qbHpaRzFWYjJOdFZqQkxWSFJqWW1sQlowbERRV2RKUTBGblpsTkNiR0pJVG14SlNIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQ2VWcFlUblppU0Zwc1MwTnJOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmlhVUZuU1VOQlowbElNRGRZUnpWalltbEJaMGxEUVdkSlNFSjVZakl4Y0dNeVZYVlpNa1oxV1RKV2MwbEVNR2RMUTJ0blVGUTBaMlV4ZUhWSlEwRm5TVU5CWjBsRFFucGtSMFl3WkZoTloxQlRRVzVqYlZaeFdsZE9NRnBYVVc1UE1YaDFTVU5CWjBsRFFXZEpRMEpxWWtkV2FHTnNRbXhpYlZKd1ltMWtWV0ZYTVd4aU0xWXdTME5yTjFoSE5HZEpRMEZuU1VOQlowbElVbTloV0UxMVdrZFdhV0l6Vm5WWk1sWlZZVmN4YkdOdVRtSmhWMUprU1VRd1oySnVWbk5pUkhSallteDRkVWxEUVdkSlEwRm5TVU5DZDJOdE9YUmhXRTVzVEc1S2JHTXlPWE5rYlZWdlMxUjBZMkpwUVdkSlEwRm5TVWd3TjFoSE5XTmlhVUZuU1VOQlowbElRbmxpTWpGd1l6SlZkV0ZZVGxGYVZ6VnJZVmMxYmtsRU1HZExRMnRuVUZRMFoyVXhlSFZKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjB0SVRqQlpXRkl4WTNsQk9WQlVNR2RLTTBKc1ltMVNjR0p0WTI1TFZIUmpZbWxCWjBsRFFXZEpTREEzV0VjMFowbERRV2RtVm5oMVdFYzBaMGxEUVdkalIxWjFXa2RzZFZveFVuQmlWMVo1VEc1U2NHSlhWblprV0ZGblVGTkNlbHBZVWxWaFZ6RnNZak5XTUV0SVFubGlNakZ3WXpKVmRXTnRWbnBpTW5neVdsTjNaMHRJVW5CaVYxVm5VRlF3WjJKdVZuTmlRMnRuVUhsQmVVNVVRV2RQYVVJd1lWY3hiRXRVZEdOaWJIaDFTVU5CWjBsSVNteGtTRlo1WW1sQ2QyTnRPWFJoV0U1c1R6RjRkVWxEUWpsWVJ6VmpZbWxCWjFreWVHeFpXRXBGV2xkS2RtUlhOV3BhVTJod1drTnJaMlV4ZUhWSlEwRm5TVWhhYUdOcFFuZGFWelZyWVZjMWJsWkhiSFJhV0VsblVGTkNNR0ZIYkhwTWJWSnNXVzA1TVdKdFRteFdSMngwV2xoS2VsY3liR3RZVkhSalltbEJaMGxEUW5CYWFVRnZZMGRXZFZwSGJIVmFNVkp3WWxkV2VVbEVNRGxKUnpVeFlrZDNjRmhITkdkSlEwRm5TVU5DZVZwWVVqRmpiVFEzV0VjMVkySnBRV2RKUTBKd1dtbEJiMk5IVm5WYVIyeDFXakZTY0dKWFZubE1ibEp3WWxkV2RtUllVWEJZUnpSblNVTkJaMGxEUW1waVIxWm9ZMnhTY0dKWFZuWmtXRkZ2WTBkV2RWcEhiSFZhTVZKd1lsZFdlVXh1VW5CaVYxWjJaRmhSY0U4eGVIVllSelJuU1VOQloyRlhXV2RMU0VKc1ltMVNjR0p0WkZWaFZ6RnNZMmsxZDJOdE9YUmhXRTVzUzFaNGRVbERRV2RKUTBGblkwZFdkVnBIYkhWYU1WSndZbGRXZVV4dVFubGlNakZ3WXpKVmRWa3lSblZaTWxaelMwTnJOMWhITkdkSlNERmpZbXg0ZFVsRFFtcGlSMVpvWTJ0R2MySkZVbXhaYlRreFltMU9iR041WjNCSlNIUmpZbWxCWjBsRFFuTmFXRkZuV2tkV2FXSXpWblZaTWxaVllWY3hiR051VFdkSlJEQm5aRWRvY0dONU5XdGFWMHAyWkZjMWFscFdVbkJpVjFaNVkzbENPR1pEUWpkbVZIUmpZbWxCWjBsRFFuTmFXRkZuWVZkU2VrbERRV2RKUTBGblNVTkJaMGxEUVdkSlJEQm5WREpLY1ZwWFRqQk1iWFJzWlZoTmIxcEhWbWxpTTFaMVdUSldWV0ZYTVd4amJrMXdUekY0ZFZoSE5HZEpRMEZuV20wNWVVbERhSE5hV0ZGbllWTkJPVWxFUVhOSlIyeHpTVVF3WjJGWFVucE1iWGhzWW0xa01HRkVjMmRoVTBFNFNVZHNjMDk1UW5CTGVYTndXRWMwWjBsRFFXZEpRMEl3WVVkc2VreHRUbk5hVjBaNVVrZFdhV0l6Vm5WWk1sVnZZVmRTZWxjeWJHUkxWSFJqWW1sQloyWldlSFZZUnpSblNVZGtiR1JGVm5OYVZ6RnNZbTVTUlZsWVVtaExSMVp6V2xjeGJHSnVVWEJKU0hSalltbEJaMGxEUW5OYVdGRm5Xa2RHTUZsVFFUbEpSMVp6V2xjeGJHSnVVa1ZaV0ZKb1VUSkdhbUZIVlhWYU1sWXdTMGRXYzFwWE1XeGlibEZ3VHpGNGRVbERRV2RKUjJ4dFNVTm5hRnBIUmpCWlUydG5aVEY0ZFVsRFFXZEpRMEZuV2tkR01GbFRRVGxKU0hRNVR6RjRkVWxEUVdkSlEwRm5XbGQ0YkdKWFZuVmtSVkpvWkVkR1JGbFhUbTlhVXpWNldsaFJiMXBYZUd4aVYxWjFaRU4zWjFwSFJqQlpVMnMzV0VjMFowbERRV2RtVm5oMVdFYzBaMGxEUVdkamJWWXdaRmhLZFVsSFVtaGtSMFUzV0VjMFowbElNV05pYmpGalltbEpjMGx0VG5aaWJrNHdTVVZXVjFKVk5WVllNSGhLVlRGU1JsUnJWbE5WZVVFNVNVWk9OV0pYU25aaVF6VnRZak5KYjBvd1FuRmhWMHA2VERKV01scFhOVEJqZVRsellWaE9NRnBYTld4amJrMXVTMVIwWTJKc2VIVmFXR2gzWWpOS01FbEhUbk5aV0U1NlNVVldNbHBYTlRCU1Z6RndaRWhTYkdOcFFqZFlSelJuU1VkT2RtSnVUakJqYmxacVpFYzVlVXREYTJkbE1YaDFTVU5CWjBsRk9XbGhiVlpxWkVNMWExcFhXbkJpYlZaUlkyMDVkMXBZU2pCaFYxWjZTMGhTYjJGWVRYTkpTSFJqWW1sQlowbERRV2RKUm5SR1ZtdFdUMVpHT1UxVFZrNVZVbFUxUmxWc1RtUlBhVUkzV0VjMFowbERRV2RKUTBGblNVaGtlV0ZZVW1oWmJYaHNUMmxCWjBsRFFXZGFiVVp6WXpKVmMxaEhOR2RKUTBGblNVTkJaMGxIVm5Wa1Z6RnNZMjFHYVdKSFZUWkpRMEZuV20xR2MyTXlWWE5ZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTFhY0ZvelZubFpWMHB6V2xSdloxcHRSbk5qTWxWeldFYzBaMGxEUVdkSlEwRm5TVWhhYUdKSVZteFBhVUZuU1VOQlowbERRV2RpYlZZelNVVXhhR05EWjNCTVJuaDFTVU5CWjBsRFFXZG1VM2hqWW1sQlowbERRamxMVkhSalltbEJaMlpXZUhWWVJ6Um5TVWRHYTFwRmVIQmpNMUpzWW0xV2VVdEhWakphVnpVd1ZHMUdkRnBUZDJkaVIyeDZaRWRXZFZwWVNYQkpTSFJqWW1sQlowbERRbkJhYVVGdlpFaHNkMXBYT1cxSlIzaHdZek5TYkdKdFZubEpRMFU1VUZOQmJscHVWblZaTTFKd1lqSTBia3RXZUhWSlEwRm5TVU5CWjJSSGFIbGlNMk5uWW0xV00wbEdValZqUjFaR1kyNUtkbU5wWjI1U1dGcHNZbTVSWjJKSGJIcGtSMVoxV2xoSloySllWbnBrUTBKcFdsTkNhRWxITVd4a1IyaDJXa05qY0U4eGVIVllSelJuU1VOQloySkhWakJKUjFZeVdsYzFNRlJYUm5kSlEwRTVTVWhTYjJGWVRtSlNWbHBHVkd4U1psUkZiRlJXUlZaUFVsWktWRmhVZEdOaWFVRm5TVU5DYzFwWVVXZGpNazUyWTBkVlowbERRV2RKUkRCbldsaGFiR0p1VWs1WldFRjFXakpXTUV0SFZqSmFWelV3VkcxR2RGcFRhemRZUnpWalltbEJaMGxEUW5CYWFVRnZTVmhPYW1JelFteExVMEkzV0VjMFowbERRV2RKUTBKNldUSTVkMXBUUVRsSlJuUmtUekY0ZFVsRFFXZEpRMEZuV2xoYWJHSnVVazVaV0VGMVl6SldNRXRIVmpKYVZ6VXdWRzFHZEZwVGQyZGpNazUyWTBkVmNFOHhlSFZKUTBGblNVZ3hZMkpzZUhWSlEwRm5TVWhPYW1JelFteE1ia0l4WXpKbmIySkhiSHBrUjFaMVdsaEpjRTh4ZUhWWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VoU2IyRllUVGRZUnpSblNVZ3hZMkpzZUhWSlEwSjVXbGN4ZG1SdFZrMWhXRTR3V2xjMWJHTnBhR3hrYlZaMVpFVTFhR0pYVlhOSlIzaHdZek5TYkdKdFZubExVMEkzV0VjMFowbERRV2RoVjFsblMwaFNOV05IVm5aYWFVSnpZVmhPTUZwWE5XeGphVUZvVUZRd1owb3lXakZpYlU0d1lWYzVkVXA1YkdOaWFVRm5TVU5CWjBsSVVtOWpiVGt6U1VjMWJHUjVRbFZsV0VKc1VsaEtlV0l6U1c5S01GWXlXbGMxTUVsSGVIQmpNMUpzWW0xV2VVbEhNVEZqTTFGbldXMVZaMWxUUW5SYVdGSnZZakpSYmt0VWRHTmliSGgxU1VOQlowbEhlR3hrUTBKc1pHMVdkV1JGTVdoalEwRm5VRk5DTUdGSGJIcFhNRlpYVWxVMVZWZ3dlRXBWTVZKR1ZHdFdVMVV4TURkWVJ6Um5TVU5CWjJKSFZqQkpTRTVxWWpOQ2JFbERRV2RKUTBFNVNVZFdNbHBYTlRCVVYwWjNURzFrYkdSRGFHeGtiVloxWkVVMWFHSlhWWEJQTVhoMVNVTkJaMGxIYkcxSlEyZG9ZekpPZG1OSFZYQllSelJuU1VOQlowbERRbmxhV0ZJeFkyMDBaMlJIYUhCamVuUmpZbXg0ZFVsRFFXZEpSM2hzWkVOQ2NHSnRVbXhsUTBFNVNVaE9hbUl6UW14TWJXeDFXa2RXTkZReVdXOWlSMng2WkVkV2RWcFlTWEJQTVhoMVNVTkJaMGxIYkcxSlEyaHdZbTFTYkdWRFFTdFFVMEYzUzFaNGRVbERRV2RKUTBGbll6Sk9kbU5IVlhWak0wSnpZVmRPYkV0SGJIVmFSMVkwVEVOQmVFdFVkR05pYkhoMVNVTkJaMGxJU214a1NGWjVZbWxDTUdGSGJIcFBNWGgxU1VOQ09WaEhOV05pYVVGblkyMVdkR0l6V214UlYzaHpWRWRzZW1SSFZuVmFXRXA2UzBkV01scFhOVEJVYlVaMFdsTnJaMlV4ZUhWSlEwRm5TVWQ0YkdSRFFteGtiVloxWkVVeGFHTkRRV2RRVTBJd1lVZHNlbGN3VmxkU1ZUVlZXREI0U2xVeFVrWlVhMVpUVlRFd04xaEhOR2RKUTBGbllWZFpaMHREUm14a2JWWjFaRVV4YUdORE5XOVpXRTF2V2xoYWJHSnVVazlaVnpGc1MxTnNZMkpwUVdkSlEwRm5TVWhLYkdSSVZubGlhVUl3WVVkc2VrOHhlSFZZUnpSblNVTkJaMXBZV214aWJsSk9XVmhCZFdNeVZqQkxSMVl5V2xjMU1GUnRSblJhVTNkblZ6RXdjRTh4ZUhWWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VoU2IyRllUVGRZUnpSblNVZ3hZMkpzZUhWSlEwSnNZbGRzTUV0SFZqSmFWelV3VkcxR2RGcFRkMmRNYVRSMVdWaEtibU41YTJkbE1YaDFTVU5CWjBsSGVHeGtRMEpzWkcxV2RXUkZNV2hqUTBGblVGTkNNR0ZIYkhwWE1GWlhVbFUxVlZnd2VFcFZNVkpHVkd0V1UxVXhNRGRZUnpSblNVTkJaMkpIVmpCSlNFNXFZak5DYkVsRFFXZEpRMEU1U1VkV01scFhOVEJVVjBaM1RHMWtiR1JEYUd4a2JWWjFaRVUxYUdKWFZYQlBNWGgxU1VOQlowbEhiRzFKUTJkb1l6Sk9kbU5IVldkbVNIZG5ZekpPZG1OSFZYVmlSMVoxV2pOU2IwbEVNRGxRVTBGM1MxWjRkVWxEUVdkSlEwRm5ZMjFXTUdSWVNuVkpSMXBvWWtoT2JFOHhlSFZZUnpSblNVTkJaMXB0T1hsSlEyaHpXbGhSWjJGVFFUbEpSRUZ6U1Vkc2MwbEVNR2RqTWs1MlkwZFZkV0pIVm5WYU0xSnZUM2xDY0VsRWQyZGhWM2MzU1VkcmNrdDVhMmRsTVhoMVNVTkJaMGxEUVdkaVIxWXdTVWRXTWxwWE5UQlJNa1p6WWtkS2FGa3ljMmRRVTBKNldUSTVkMXBXZEhCWVZIUmpZbWxCWjBsRFFXZEpSMVl5V2xjMU1GRXlSbk5pUjBwb1dUSnpkVmxZUW5kaVNHdHZaRWRvY0dONWQyZFpXRXB1WTNsck4xaEhOR2RKUTBGblpsWjRkVmhITkdkSlEwRm5ZMjFXTUdSWVNuVkpTRko1WkZkVk4xaEhOR2RKU0RGallteDRkVWxEUW5aaWJVNXNTMGRXTWxwWE5UQlViVVowV2xOM1oySkhiSHBrUjFaMVdsaEpjRWxJZEdOaWFVRm5TVU5DYzFwWVVXZGFibFoxV1hsQk9VbERaM1ZNYVRWb1kyMWtla3RUUVRsUWFVSTNXRWMwWjBsRFFXZEpRMEl3WVVkc2VreHRPVzFhYVdoc1pHMVdkV1JGTldoaVYxVnpTVWRhTVdKdFRYQlBNWGgxU1VOQlowbERRV2RqYlZZd1pGaEtkVWxIZUhCak0xSnNZbTFXZVV0RE5IVk1iVVo1V2pOTmNFOHhlSFZKUTBGblNVZ3dOMWhITldOaWFVRm5TVU5DZVZwWVVqRmpiVFJuWkVkb2NHTjVOWFppYVdoc1pHMVdkV1JGTldoaVYxVnpTVWRhTVdKdFRYQlBNWGgxU1VOQ09WaEhOV05pYVVGbllqSTBiMXBZV214aWJsSlBXVmN4YkV4RFFuTmhXRTR3V2xjMWJHTnBhMmRsTVhoMVNVTkJaMGxJU214a1NGWjVZbWxDTUdGSGJIcE1iVVpyV2tWNGNHTXpVbXhpYlZaNVMwZFdNbHBYTlRCVWJVWjBXbE4zWjJKSGJIcGtSMVoxV2xoSmNFOHhlSFZKUTBJNVdFYzFZMkpwUVdkaU1scHRTMGRXTWxwWE5UQlViVVowV2xOM1oySkhiSHBrUjFaMVdsaEpjRWxJZEdOaWFVRm5TVU5DZVZwWVVqRmpiVFJuWkVkb2NHTjVOWGxhVnpGMlpHMVdUV0ZZVGpCYVZ6VnNZMmxvYkdSdFZuVmtSVFZvWWxkVmMwbEhlSEJqTTFKc1ltMVdlVXRVZEdOaWFVRm5abFo0ZFZoSE5HZEpSMVl5V2xjMU1GUnRSblJhV0UxdlMxTkNOMWhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSVVo1WTIxR05VeHRXbmxpTWpCdlpFZG9jR014ZEVaV2ExWlBWa1k1VFZOV1RsVlNWVFZHVld4T1pFeHRkR3hsV0UxdlMxTnJOMWhITkdkSlNERmpZbXg0ZFVsRFFuTmhXRTR3V2xjMWJHTnJUblprVnpVd1MwZFdNbHBYTlRCVWJVWjBXbE5yWjJVeGVIVkpRMEZuU1VkNGJHUkRRbXhrYlZaMVpFVXhhR05EUVdkUVUwSXdZVWRzZWxjd1ZsZFNWVFZWV0RCNFNsVXhVa1pVYTFaVFZURXdOMWhITkdkSlEwRm5Za2RXTUVsSVRtcGlNMEpzU1VOQlowbERRVGxKUjFZeVdsYzFNRlJYUm5kTWJXUnNaRU5vYkdSdFZuVmtSVFZvWWxkVmNFOHhlSFZKUTBGblNVZHNiVWxEWjJoak1rNTJZMGRWY0ZoSE5HZEpRMEZuU1VOQ2VWcFlVakZqYlRSblRVUjBZMkpzZUhWSlEwRm5TVWhLYkdSSVZubGlhVUo2V1RJNWQxcFROWE5hVnpWdVpFZG5OMWhITkdkSlNERmpZbXg0ZFVsRFFuTmhXRTR3V2xjMWJHTnVUVzlhV0Zwc1ltNVNUMWxYTVd4TFUwSTNXRWMwWjBsRFFXZGlSMVl3U1VkV01scFhOVEJVVjBaM1NVTkJPVWxJVW05aFdFNWlVbFphUmxSc1VtWlVSV3hVVmtWV1QxSldTbFJZVkhSalltbEJaMGxEUW5OYVdGRm5ZekpPZG1OSFZXZEpRMEZuU1VRd1oxcFlXbXhpYmxKT1dWaEJkVm95VmpCTFIxWXlXbGMxTUZSdFJuUmFVMnMzV0VjMFowbERRV2RoVjFsblMwTkdlbGt5T1hkYVUyeGpZbWxCWjBsRFFXZEpTRXBzWkVoV2VXSnBRbUpZVkhSallteDRkVWxEUVdkSlNFcHNaRWhXZVdKcFFucFpNamwzV2xNMWVtSkhiR3BhVTJkd1R6RjRkVWxEUWpsWVJ6VTVXRWMwYVV4RFNuQmlXRUoyWTI1UloxcEhWbWhhUjBwc1dsZFpaMXB1U25aaVUwRnVXa2RXYUZwSFNteGFWMWx1VHpGNGRXRlhNWGRpTTBvd1NVTnZaMWxZVFdkV1dGSndZa2hOWjFwdVNuWmlVMEZ1VEdrNU1XUkhiSE5qZVRWeFkzbGpOMWhITldOaWJWWTBZMGM1ZVdSRFFtcGlSMFo2WTNsQ1MyRlhTV2RsTVhoMVNVTkNhbUl5Tlhwa1NFb3hXVE5TZG1OcGFGVmxXRUpzVEVOQ2QyTnRPWGRqZVhkbldUSm9jR0pIVW5sYVZ6UndTVWgwWTJKcFFXZEpRMEp6V2xoUloxcEhWbTFaV0ZaelpFWkNlV0l6UW5wSlJEQm5TMFpTTldOSFZXZEthVmxuVmtoc2QxcFROWGRqYlRsM1kzbHJaMUI1UWxWbFdFSnNURzVDZVdJelFucEpSRzluWlRNd04xaEhOV05pYVVGblNVTkNVRmx0Y0d4Wk0xRjFXa2RXYldGWE5XeFZTRXAyWTBkV2VXUkhiR3hqZVdnd1lVZHNla3hEUWpkWVJ6Um5TVU5CWjBsRFFXNVdTR3gzV2xOak5rbElkR05pYVVGblNVTkJaMGxEUVdka00wcHdaRWRHYVdKSFZUWkpRMEZuU1VOQ01HTnVWbXhNUm5oMVNVTkJaMGxEUVdkSlEwSnNZbTVXZEZwWVNtaFpiWGhzVDJsQlowbElVbmxrVjFWeldFYzBaMGxEUVdkSlEwRm5TVWRPZG1KdFduQmFNMVo1V1ZkS2MxcFViMmRrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjJSdFJuTmtWMVUyU1VOQlowbERRV2RKUTBKVlpWaENiRXhHZUhWSlEwRm5TVU5CWjJaVGVHTmlhVUZuU1VOQlowbERaSGRqYlRsM1kzbGpOa2xJZEdOaWFVRm5TVU5CWjBsRFFXZGtNMHB3WkVkR2FXSkhWVFpKUTBGblNVTkNNR051Vm14TVJuaDFTVU5CWjBsRFFXZEpRMEpzWW01V2RGcFlTbWhaYlhoc1QybEJaMGxJVW5sa1YxVnpXRWMwWjBsRFFXZEpRMEZuU1VkT2RtSnRXbkJhTTFaNVdWZEtjMXBVYjJka1NFb3hXbE40WTJKcFFXZEpRMEZuU1VOQloyUnRSbk5rVjFVMlNVTkJaMGxEUVdkSlEwSTNTVU0wZFV4dFVteGFiVVl4WWtoU1VXTnRPWGRqZVhkblRHazBkVXRJUW5saU0wSjZTVWg0T0VsSWREbExVMEk1VEVaNGRVbERRV2RKUTBGblpsTjRZMkpwUVdkSlEwRm5TVU5rYW1GSGJITmFTRXBzWW1sak5rbElkR05pYVVGblNVTkJaMGxEUVdka00wcHdaRWRHYVdKSFZUWkpRMEZuU1VOQ01HTnVWbXhNUm5oMVNVTkJaMGxEUVdkSlEwSnNZbTVXZEZwWVNtaFpiWGhzVDJsQlowbElVbmxrVjFWeldFYzBaMGxEUVdkSlEwRm5TVWRPZG1KdFduQmFNMVo1V1ZkS2MxcFViMmRrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjJSdFJuTmtWMVUyU1VOQlowbERRV2RKUTBKV1pFZHNjMk41TlcxaVIwWXdaRWRXZFZGWVNubFpXR3R2V1RKb2NHSkhVbmxhVnpSd1RFWjRkVWxEUVdkSlEwRm5abE40WTJKcFFXZEpRMEk1UzFSMFkySnBRV2RtVm5oMVpsWjRkVmhITld4bFNFSjJZMjVSWjFreU9YVmpNMUZuVTJ0c1ExZ3dTa0pWYkVwR1ZHbEJaMUJUUWxSbFZ6RnBZakozZFZwdE9YbExRMlJCWVcxc2FXTjVOV2xaV0VwNVdsYzBia3RVZEdOaWJWWTBZMGM1ZVdSRFFtcGlNalY2WkVOQ1MxTlZTbVpWUmtwUVYwWnJaMGxEUVRsSlJrNDFZbGRLZG1KRE5XMWlNMGx2U2pCQ2NXRlhTbnBNYmtKNVlqTm9OVXA1YXpkWVJ6VnNaVWhDZG1OdVVXZFpNamwxWXpOUloxTnJiRU5KUTBGblNVTkJaMGxEUVdkUVUwSlVaVmN4YVdJeWQzVmFiVGw1UzBOa1FXRnRiR2xqZVRWeFlWZEpia3RVZEdOaWJIaDFXbGhvZDJJelNqQkpSMW94WW0xT01HRlhPWFZKUjFwb1dUTlNkbU51YTI5VGJXeHBVVEo0YUdNelRYQkpTSFJqWW1sQloyTnRWakJrV0VwMVNVZGFNV0p0VGpCaFZ6bDFTVU5SYjFnelVqVmpSMVZ6U1VoQ2VXSXpRbnBKUkRCblpUTXdjRWxJZEdOaWFVRm5TVU5DY0ZwcFFXOWhXRTVMWVZkS2NHTXlaMjlZTTFJMVkwZFZjRXRXZUhWSlEwRm5TVU5CWjJSSGFIbGlNMk5uWW0xV00wbEdValZqUjFaR1kyNUtkbU5wWjI1VmJWWnFXbGRzTWxwWFVXZFpVMEp4WVZkSloxbHVWakJKUjFZMFkwZFdhbVJIVm10SlIwVm5XVEk1ZEdOSE9YVmFWelV3VEdsamNFOHhlSFZZUnpSblNVTkJaMkpIVmpCSlJsSTFZMGRWWjFCVFFXOVlNMUkxWTBkVloxQlVNR2RpYmxaellrTnJaMUI1UWt0VFZVcG1WVVpLVUZkR2EyZFBhVUptWkVoc2QxcFVkR05pYkhoMVNVTkJaMGxIV2pGaWJVNHdZVmM1ZFVsSFNtaGpia3BzWW1sbmRVeHBOV1paTW1od1lrZFNlVnBYTkhCSlNIUmpZbWxCWjBsRFFXZEpSM2hzWkVOQ2FtRkhiSE5hU0Vwc1ltbEJPVWxHT1dwaFIyeHpXa2hLYkdKcWRHTmliSGgxU1VOQlowbERRV2RhYmxaMVdUTlNjR0l5TkdkaGJXeHBTME5yWjJVeGVIVkpRMEZuU1VOQlowbERRbkJhYVVGdlZsaFNjR0pJVFhWaFZ6VjZaRWRHZFZreVZsQmFhV2hWWlZoQ2JFeERRVzVqU0VwMllsZHNlbHBUWTNCSlNIZzRTVWRPYjJGWGVHdGpiVloxVEc1T2RtSlhWVzlMUjA1dllWZDRhMHRUUVRsUWFVSldaRWRzYzJONU5YQmliazR3V1ZjMWFscFZPVzFMUjA1dllWZDRhMHhEUVc1alNFcDJZbGRzZWxwVFkzQkxVMnRuWlRGNGRVbERRV2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDVVdOdE9YUmhXRTVzVEcxR2MySkRhR0pKUmxJMVkwZFZaMWhUTldwaU1qVnFXVmhSYjFreWFIQmlSMUo1V2xjMGNFdFROVEJoUjFaMVMwTm9hR0pIZDNCSlJEQXJTVWgwWTJKcFFXZEpRMEZuU1VOQlowbERRV2RKUmxJMVkwZFZaMUJUUW1oaVIzaGlUVVl3TjFoSE5HZEpRMEZuU1VOQlowbERRV2RKUTBKcVlVZHNjMXBJU214aWFVRTVTVWRHYzJKRE5YcGlSMnhxV2xObmVFdFVkR05pYkhoMVNVTkJaMGxEUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VjMWJHUjVRa3RoVjBwRVlrZEdlbU41YUdOaWFVRm5TVU5CWjBsRFFXZEpRMEZuU1VOQloxWkliSGRhVTNoalltbEJaMGxEUVdkSlEwRm5TVU5CWjBsRFFXZGpTRXAyWTBoTmMxaEhOR2RKUTBGblNVTkJaMGxEUVdkSlEwRm5TVWRPYjJGWGVHdGpiVloxVEVaNGRVbERRV2RKUTBGblNVTkJaMGxEUVdkTFZIUmpZbWxCWjBsRFFXZEpRMEZuU1VOQ09VdFVkR05pYVVGblNVTkJaMGxEUVdkbVZuaDFXRWMwWjBsRFFXZEpRMEZuU1VoS2JHUklWbmxpYVVKMVdsaGpaMU50YkdsUk1uaG9Zek5OYjFoSE5HZEpRMEZuU1VOQlowbERRV2RXU0d4M1dsTjRZMkpwUVdkSlEwRm5TVU5CWjBsRFFuZGpiVGwzWTNsNFkySnBRV2RKUTBGblNVTkJaMGxEUW1waFIyeHpXa2hLYkdKcGVHTmlhVUZuU1VOQlowbERRV2RMVkhSalltbEJaMGxEUVdkSlNERmpZbXg0ZFVsRFFXZEpRMEZuVkRKS2NWcFhUakJNYlZKc1dtMXNkVnBXUW5saU0wSnNZMjVTY0ZwWVRXOWhiV3hwVEVOQ04xaEhOR2RKUTBGblNVTkJaMGxHZEV0VFZVcGtUMmxDTjFoSE5HZEpRMEZuU1VOQlowbERRV2RrTTBwd1pFZEdhV0pIVlRaSlEwRm5TVU5DYlZsWGVIcGFVM2hqWW1sQlowbERRV2RKUTBGblNVTkNiR0p1Vm5SYVdFcG9XVzE0YkU5cFFXZEpSMXBvWWtoT2JFeEdlSFZKUTBGblNVTkJaMGxEUVdkSlIwNTJZbTFhY0ZvelZubFpWMHB6V2xSdloxcHRSbk5qTWxWeldFYzBaMGxEUVdkSlEwRm5TVU5CWjJSdFJuTmtWMVUyU1VOQlowbERRV2RKUTBJd1kyNVdiRXhHZUhWSlEwRm5TVU5CWjBsRFFqbE1SbmgxU1VOQlowbERRV2RKUTBKaVdrZFdhRnBIU214YVYxbDFZVmRTVkdWWE1XUlBhVUkzV0VjMFowbERRV2RKUTBGblNVTkJaMlF6U25Ca1IwWnBZa2RWTmtsRFFXZEpRMEp0V1ZkNGVscFRlR05pYVVGblNVTkJaMGxEUVdkSlEwSnNZbTVXZEZwWVNtaFpiWGhzVDJsQlowbEhXbWhpU0U1c1RFWjRkVWxEUVdkSlEwRm5TVU5CWjBsSFRuWmliVnB3V2pOV2VWbFhTbk5hVkc5bldtMUdjMk15VlhOWVJ6Um5TVU5CWjBsRFFXZEpRMEZuWkcxR2MyUlhWVFpKUTBGblNVTkJaMGxEUVc5TFUwRTVVR2xDVldWWVFteE1SbmgxU1VOQlowbERRV2RKUTBJNVRFWjRkVWxEUVdkSlEwRm5abE5yTjFoSE5XTmlhVUZuU1VOQlowbElTbXhrU0ZaNVltbENjV0ZYU1RkWVJ6Um5TVU5CWjJaV2VIVllSelJuU1VOQloxUXlTbkZhVjA0d1RHMVNiRnB0YkhWYVZrSjVZak5DYkdOdVVuQmFXRTF2V1cxR2VXTnRWblZNUTBJM1dFYzBaMGxEUVdkSlEwSmlVMnRzUTFnd1NrSlZiRXBHVkd3d05rbElkR05pYVVGblNVTkJaMGxEUVdka00wcHdaRWRHYVdKSFZUWkpRMEZuU1VOQ2JWbFhlSHBhVTNoalltbEJaMGxEUVdkSlEwRm5XbGMxTVdKWFZubFpWMHB6V2xSdlowbERRbTFaVjNoNldsTjRZMkpwUVdkSlEwRm5TVU5CWjFreU9YVmFiV3h1WkZoS2FGbHRlR3hQYVVKdFdWZDRlbHBUZUdOaWFVRm5TVU5CWjBsRFFXZGtiVVp6WkZkVk5rbERRV2RKUTBGblNVTkNNR051Vm14TVJuaDFTVU5CWjBsRFFXZG1VM2hqWW1sQlowbERRV2RKUm5ScldsZEdhMWx0Vm14YWFUVndXa1pPTldKV01EWkpTSFJqWW1sQlowbERRV2RKUTBGblpETktjR1JIUm1saVIxVTJTVU5CWjBsRFFtMVpWM2g2V2xONFkySnBRV2RKUTBGblNVTkJaMXBYTlRGaVYxWjVXVmRLYzFwVWIyZEpRMEp0V1ZkNGVscFRlR05pYVVGblNVTkJaMGxEUVdkWk1qbDFXbTFzYm1SWVNtaFpiWGhzVDJsQ2JWbFhlSHBhVTNoalltbEJaMGxEUVdkSlEwRm5aRzFHYzJSWFZUWkpRMEZuU1VOQlowbERRVzlMVTBFNVVHbENWV1ZZUW14TVJuaDFTVU5CWjBsRFFXZG1VM2hqWW1sQlowbERRamxMVkhSallteDRkVWxEUVdkSlNFcHNaRWhXZVdKcFFtbFpXRXA1V2xjME4xaEhOR2RKU0RBM1dFYzFPVmhITldOaWJWWTBZMGM1ZVdSRFFtcGlNalY2WkVOQmEwbEVNR2RhYlVacVpFYzVlV1ZUYUV0aFYwbHdUekY0ZFZoSE5XeGxTRUoyWTI1UloxcHVWblZaTTFKd1lqSTBaMkZZVGt0aFYwcHdZekpuYjJSdFJuTmtWMVZ3U1VoMFkySnBRV2RoVjFsblMwaFNOV05IVm5aYWFVSXlXVmQ0TVZwVFFUbFFWREJuU2pKYU1XSnRUakJoVnpsMVNubEJiVXBwUVc5a2JVWnpaRmRXWWxOcmJFTllNRXBDVld4S1JsUnNNR2RtU0hkblpHMUdjMlJYVm1KVGEyeERXRk5yY0ZoSE5HZEpRMEZuWTIxV01HUllTblZKU0ZKNVpGZFZOMWhITldOaWFVRm5ZVmRaWjB0SVdtaGlTRlpzU1Vkc2RXTXpVbWhpYlU1c1lqSlpaMU50YkdsTFZuaDFTVU5CWjBsSVNteGtTRlo1WW1sQ01HTnVWbXhQTVhoMVdFYzBaMGxJU214a1NGWjVZbWxDYlZsWGVIcGFWSFJqWW00eFkySnNlSFZhV0doM1lqTktNRWxIV2pGaWJVNHdZVmM1ZFVsSFRuWmliazR3WTI1V2FtUkZjSEJaYVdneVdWZDRNVnBUYTJkbE1YaDFTVU5DY0ZwcFFXOWtiVVp6WkZkVloyRlhOWHBrUjBaMVdUSldkbHBwUWt0aFYwbHdXRWMwWjBsRFFXZGpiVll3WkZoS2RVbElXbWhpU0Zac1R6RjRkVmhITkdkSlIyeHRTVU5vTUdWWVFteGlNbGxuWkcxR2MyUlhWV2RRVkRBNVNVTmtiV1JYTldwa1IyeDJZbWxqY0VsSWRHTmlhVUZuU1VOQ2NGcHBRVzlrYlVaelpGZFdZbE5yYkVOWU1FcENWV3hLUmxSc01IQllSelJuU1VOQlowbERRbmxhV0ZJeFkyMDBaMlJ0Um5Oa1YxVnZTMU5uY0U4eGVIVkpRMEZuU1VkV2MyTXlWV2RoVjFsblMwaGFhR0pJVm14WE1IQktVV3d3Y0ZoSE5HZEpRMEZuU1VOQ2VWcFlVakZqYlRSblpHMUdjMlJYVlc5TFZIUmpZbWxCWjJaV2VIVllSelJuU1VoU2IyTnRPVE5KUnpWc1pIbENWV1ZZUW14U1dFcDVZak5KYjBveVRuWmliazR3WTI1V2FtUkZjSEJaYW05blZVaEtkbVJ0Ykd0YVYxRm5aRzFHYzJSWFZXZGhXRTFuWW0wNU1FbEhSV2RUYld4cFRHbGpjRTh4ZUhWbVZuaDFXRWMxYkdWSVFuWmpibEZuV1ZoT05XSnRUV2RhYmxaMVdUTlNjR0l5TkdkamJWWjZZako0TWxwVlRtOWhWM2hyWTIxV2RVdEdPV3BoUjJ4eldraEtiR0pwYTJkbE1YaDFTVU5DYzFwWVVXZFpNbWh3WWtkU2VWcFhOR2RRVTBKbVdUSm9jR0pIVW5sYVZ6UTNXRWMxWTJKcFFXZGhWMWxuUzBaV01HRlhlSHBNYld4MVl6TlNhR0p0VG14VU1sbHZXVEpvY0dKSFVubGFWelJ6U1VOa2QyTnRPWFJoV0U1c1NubHJjRmhITkdkSlEwRm5XVEpvY0dKSFVubGFWelJuVUZOQ2FHUXlSbkJrUTBKcVlVZHNjMXBJU214aWFuUmpZbXg0ZFVsRFFuQmFhVUZ2U1ZObmIyUkhhSEJqZVRWd1l6QnNNRnBZU21oWmJYaHNVVEpvY0dKSFVXZG1TSGRuVmxoU2NHSklUWFZoV0U1S1pFZFdlVmxYU25OYVZVNXZZVmQ0YTB0VE5XcFpWM2h6UzBoU2IyRllUWE5KUjA1dllWZDRhMk50Vm5WTFUydG5TbWxaWjB0SGJIcFRiV3hwWVZoT2IwdEhUbTloVjNoclkyMVdkVXRUUWpobVEwRnZTMGhTYjJGWVRYVmhXRTVYV1ZkNGNGcEZUbTloVjNoclNVaDRPRWxHVmpCaFYzaDZURzFzZWxadFJuTmhWMUpFWVVkc2MxcERhM1ZaTWtaellrTm9NR0ZIYkhwTVEwSnFZVWRzYzFwSVNteGlhV3R3UzFOc1kySnBRV2RKUTBKcVlVZHNjMXBJU214aWFVRTVTVVp6WjFreWFIQmlSMUo1V2xjMFoxaFVkR05pYkhoMVNVTkNjMXBZVVdkalNFcDJZbGRzZWxwWVRXZFFVMEpXWkVkc2MyTjVOWEJrUjFaNVdWaFNiRXRIVG05aFYzaHJZMjFXZFV4RFFtaGpNMngxV1hsQmIyVjVRakpaVjNneFdsUnZaMWd5VG05aFYzaHJTVWd3Y0VsRU1DdEpTSFJqWW1sQlowbERRbk5hV0ZGbldUSm9jR0pIVVdkUVUwRnZWbGhTY0dKSVRYVmhWelY2WkVkR2RWa3lWbEJhYVdobVdUSm9jR0pIVVhOSlEyUjNZMjA1ZEdGWVRteEtlV3R3U1VRNFoxbFlaR2hoV0ZGbldESk9iMkZYZUd0SlJHOW5XREpPYjJGWGVHdFBNWGgxV0VjMFowbERRV2RoVjFsblMwZHNlbE50YkdsaFdFNXZTMGRPYjJGWGVHdExVMnhqWW1sQlowbERRV2RKU0Vwc1pFaFdlV0pwUW1oa01rWndaRU5DYW1JeU5YcGtTRW94V1ROU1MyRlhTVzlaTW1od1lrZFJjRTh4ZUhWSlEwRm5TVWRXYzJNeVZtTmlhVUZuU1VOQlowbElTbXhrU0ZaNVltbENhbUZIYkhOYVJIUmpZbWxCWjJaVGF6ZFlSelZqWW1sQloyTnRWakJrV0VwMVNVZEdNMWxYYkRCSlJrSjVZakl4Y0dNeVZYVlpWM2h6UzBoQ2VXSXlNWEJqTWxaNlMxUjBZMkp1TVdOaWFVbHpTVzFzZEdOSE9YbGtRMEkzU1VaS2RtSXpVa1ppUjFaMFdsYzFNRWxJTUdkYWJrcDJZbE5CYmt4cE9YbGlNamt3VEZkV2MxcFhNV3hpYmxGMVlXNU5iazh4ZUhWWVJ6VnNaVWhDZG1OdVVXZFpNbmhvWXpOTloxRXlPWFJpVjFaMVpFVldjMXBYTVd4aWJsRm5XbGhvTUZwWE5XdGplVUpUWWpJNU1GSlhlR3hpVjFaMVpFTkNOMWhITkdkSlNFNHdXVmhTY0ZsNVFsVlhWa0pHU1VRd1oxVnRPWFprUlZaeldsY3hiR0p1VVhWV1JteFJVbFk1UkZRd01VNVNWVFZWVHpGNGRWaEhOR2RKUjA1MlltNU9NR051Vm1wa1J6bDVTMGRzYTB4RFFqSlpWM2d4V2xOM1oyTklTblpqU0Uxd1NVaDBZMkpwUVdkSlEwSjZaRmhDYkdOcGFGTmlNamt3VWxkNGJHSlhWblZrUXpWVlYxWkNSbGd3VGxCVVZURkdWR3hSYzBsSGJHdE1RMEl5V1ZkNE1WcFRkMmRqU0VwMlkwaE5jRTh4ZUhWSlEwSTVXRWMxT1ZoSE5HbE1RMHBzWlVoQ2RtTnVVV2RsTVhoMVNVTkNSRlF3TlZWU1ZtaFZXREJzUlV4R2VIVkpRMEpUWWpJNU1GUnRPV3RhVTNoalltNHdaMXB1U25aaVUwRnVUR2s1ZVdJeU9UQk1WelYyV2tkVmRXRnVUVzVQTVhoMVdFYzFiR1ZJUW5aamJsRm5XVEk1ZFdNelVXZFNhemxUVVRCV1psVnJWa2RVUlRsWVNVUXdaMVV6YkhSWmJUbHpURzFhZG1OcFoyNVJSM0J3V1c1T1IySXpTbXBhVmtwc1dtMTRkbVI1WTNCUE1YaDFXRWMxYkdWSVFuWmpibEZuWlhsQ1UxcFhOV3RhV0Vwc1kybENPVWxIV25saU1qQm5TbmswZG1OdFZuVmFSMVo1V2xoSmRXRnVUVzVQTVhoMVdFYzFiR1ZJUW5aamJsRm5aWGxDVTJJeU9UQlNWM2hzWWxkV2RXUkRRamxKUjFwNVlqSXdaMHA1TkhaamJUbDJaRU14YkdKSFZuUmFWelV3VEcxd2VrcDZkR05pYlZZMFkwYzVlV1JEUWpkSlJVNTJZbGN4YkdKdVVrWmlSMVowV2xjMU1FbElNR2RhYmtwMllsTkJia3hwT1dwaU1qRjBXbGMxTUV4WFZuTmFWekZzWW01UmRXRnVUVzVQTVhoMVdsaG9kMkl6U2pCSlNITm5WRzFHTUdGWVdteFNWM2hzWWxkV2RXUkRRamxKUjFwNVlqSXdaMHA1TkhaaWJVWXdZVmhhYkV4WFZuTmFWekZzWW01UmRXRnVUVzVQTVhoMVdsaG9kMkl6U2pCSlNITm5WVWM1ZVdSSFJuTlNWM2hzWWxkV2RXUkRRamxKUjFwNVlqSXdaMHA1TkhaalJ6bDVaRWRHYzB4WFZuTmFWekZzWW01UmRXRnVUVzVQTVhoMVdsaG9kMkl6U2pCSlNITm5Wa2RXTkdSRlZuTmFWekZzWW01UloyWlRRbTFqYlRsMFNVTmpkVXd6VW14bFNGRjBXbGQ0YkdKWFZuVmtRelZ4WTNsak4xaEhOR2xNUTBwd1lsaENkbU51VVdkbGVVSlRZakk1TUZKWGVHeGlWMVoxWkVOQ09VbEhXbmxpTWpCblNuazBkbU50T1haa1F6RnNZa2RXZEZwWE5UQk1iWEI2U25wMFkySnNlSFZhV0doM1lqTktNRWxIVG5OWldFNTZTVVUxYUdSSGJESmFWVlp6V2xjeGJHSnVVV2RhV0dnd1dsYzFhMk41UWxOaU1qa3dVbGQ0YkdKWFZuVmtRMEkzV0VjMFowbElUakJaV0ZKd1dYbENWVmRXUWtaSlJEQm5WVzA1ZG1SRlZuTmFWekZzWW01UmRWWkdiRkZTVmpsR1ZFVldUbEpWTlZWUE1YaDFXRWMwWjBsSFRuWmliazR3WTI1V2FtUkhPWGxMUjJ4clRFTkNNbGxYZURGYVUzZG5ZMGhLZG1OSVRYQkpTSFJqWW1sQlowbERRbnBrV0VKc1kybG9VMkl5T1RCU1YzaHNZbGRXZFdSRE5WVlhWa0pHV0RCV1RWSlZNVVpVYkZGelNVZHNhMHhEUWpKWlYzZ3hXbE4zWjJOSVNuWmpTRTF3VHpGNGRVbERRamxZUnpVNVdFYzBhVXhEU25CaVdFSjJZMjVSWjJWNVFsTmlNamt3VWxkNGJHSlhWblZrUTBJNVNVZGFlV0l5TUdkS2VUUjJZMjA1ZG1SRE1XeGlSMVowV2xjMU1FeHRjSHBLZW5SallteDRkVnBZYUhkaU0wb3dTVWRPYzFsWVRucEpSa0oyWTI1U2FHSkZWbk5hVnpGc1ltNVJaMXBZYURCYVZ6VnJZM2xDVTJJeU9UQlNWM2hzWWxkV2RXUkRRamRZUnpSblNVaE9NRmxZVW5CWmVVSlZWMVpDUmtsRU1HZFZiVGwyWkVWV2MxcFhNV3hpYmxGMVZrWnNVVkpXT1ZGVU1VcFZVVlYzTjFoSE5XTmlhVUZuV1RJNWRXTXpVbmxrVjA0d1lqTkpiMkZYVVhOSlNGcG9Za2hXYkV4RFFuZGpiVGwzWTNscloyVXhlSFZKUTBGblNVaE9NV05IVm5sTFJrcDJZak5TUm1KSFZuUmFWelV3VEd4U1dsVkZWbVpWUlRsVFZrVkdUVXhEUW5CYVEzZG5aRzFHYzJSWFZYTkpTRUo1WWpOQ2VrdFVkR05pYVVGblpsWjRkV1pXZUhWSmFYZHBZVmN4ZDJJelNqQkpTSE5uVWxoYWJHSnVVa1ppVjJ3d1pFZFdlVWxJTUdkYWJrcDJZbE5CYmt4cE5IWmFXRnBzWW01U2VreHRjSHBLZW5SalltMXNkR05IT1hsa1EwRnhTVWRHZWtsR1ZqQmhWM2g2U1VOQlowbERRV2RKUjFwNVlqSXdaMHA1TkhWTU0xWXdZVmQ0ZWt4dGNIcEtlblJqWW0xc2RHTkhPWGxrUTBJM1dFYzBaMGxGVGxCVWJGSkdWMFpTWmxOVlVYTllSelJuU1VaS2RtSXpVazlpTWxKc1RFWjRkV1pUUW0xamJUbDBTVU5qZFV3elNuWmlNMUYwWW0wNWExcFROWEZqZVdNM1dFYzFZMkp0ZUd4a1EwSm1XVEk1ZFdSSFZqUmtSV3hGVVRJNU1XSnVVbXhqYVVFNVNVUkNkVTh4ZUhWWVJ6VnNaVWhDZG1OdVVXZFpNbmhvWXpOTloxVnRWblZhUjFaNVdsaEpaMXBZYURCYVZ6VnJZM2xDUm1SdFZuVmtSVlowWVZoU01GcFlTV2RsTVhoMVNVTkNlbVJIUmpCaFYwMW5WVzA1ZG1SRk5YWmFSMVZuVUZOQ1UySXlPVEJVYlRscldsUjBZMkpzZUhWSlEwSnFZakkxZW1SSVNqRlpNMUoyWTJsbmNFbElkR05pYVVGblNVTkNlbVJZUW14amFXZHdUekY0ZFZoSE5HZEpRMEZuVkRKS2NWcFhUakJNYlZKc1dtMXNkVnBXUW5saU0wSnNZMjVTY0ZwWVRXOWtSMmh3WTNsM1oyVXhlSFZKUTBGblNVTkJaMG95VG5aaWJsSnNaVWhSYms5cFFqZFlSelJuU1VOQlowbERRV2RKU0dSNVlWaFNhRmx0ZUd4UGFVRm5TVU5CWjJSSVNqRmFVM2hqWW1sQlowbERRV2RKUTBGbldsYzFNV0pYVm5sWlYwcHpXbFJ2WjBsRFFtMVpWM2g2V2xONFkySnBRV2RKUTBGblNVTkJaMWt5T1hWYWJXeHVaRmhLYUZsdGVHeFBhVUl3WTI1V2JFeEdlSFZKUTBGblNVTkJaMGxEUWpKWlYzZ3hXbFJ2WjBsRFFXZEpRMEZuU1VoU2IyRllUWFZaTTBwc1dWaFNiRkV5T1hWa1IxWTBaRU5uY0V4R2VIVkpRMEZuU1VOQloyWlRlR05pYVVGblNVTkJaMGxEWkd0YVdFNHdZMjA1TldGWE5XNUtlbTluWlRGNGRVbERRV2RKUTBGblNVTkNNMk50YkRCWlYwcHpXbFJ2WjBsRFFXZEpTRko1WkZkVmMxaEhOR2RKUTBGblNVTkJaMGxIVm5Wa1Z6RnNZMjFHYVdKSFZUWkpRMEZuV20xR2MyTXlWWE5ZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTFhY0ZvelZubFpWMHB6V2xSdloyUklTakZhVTNoalltbEJaMGxEUVdkSlEwRm5aRzFHYzJSWFZUWkpRMEZuU1VOQlowbERRbTFaVjNoNldsTjRZMkpwUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQmJtTnRWblZhUjFaNVVtNUthR0pYVlc1UGFVSTNXRWMwWjBsRFFXZEpRMEZuU1Voa2VXRllVbWhaYlhoc1QybEJaMGxEUVdka1NFb3hXbE40WTJKcFFXZEpRMEZuU1VOQloxcFhOVEZpVjFaNVdWZEtjMXBVYjJkSlEwSnRXVmQ0ZWxwVGVHTmlhVUZuU1VOQlowbERRV2RaTWpsMVdtMXNibVJZU21oWmJYaHNUMmxDTUdOdVZteE1SbmgxU1VOQlowbERRV2RKUTBJeVdWZDRNVnBVYjJkSlEwRm5TVU5CWjBsRVFYTllSelJuU1VOQlowbERRamxNUm5oMVNVTkJaMGxJTUhCUE1YaDFTVU5DT1ZoSE5XTmlhVUZuV1ROS2JGbFlVbXhSTWpsMVpFZFdOR1JEYUhsaU1qa3dVVEk1ZFdSSFZqUmtRM2RuWWpJMVZtTkhVbWhrUjFWelNVYzVkVlpZUW10WldGSnNWa2RvY0dONWEyZGxNWGgxU1VOQlowbEhlR3hrUTBKcVlqSTFNRnBZYURCSlEwRm5TVU5CT1VsRk9XbGhiVlpxWkVNMWFtTnRWbWhrUjFWdlltNVdjMkpEYXpkWVJ6Um5TVU5CWjJKSFZqQkpSekUxVVRJNWRXUkhWalJrUld4RlNVUXdaMHRJU25aaU0xSkVZakkxTUZwWWFEQkxVMEV2U1VoS2RtSXpVa1JpTWpVd1dsaG9NRmN3VGxCVWJGSkdWMFpTWmxOVlVtUkpSRzluVFZjME4xaEhOV05pYVVGblNVTkNlVnBZVWpGamJUUm5ZbTFXTTBsR1FubGlNMmcxUzBkT2RtSnVVbXhsU0ZGelNVaDBZMkpwUVdkSlEwRm5TVWRrYkdSRWIyZExTRkpvWTIxa2JHUkRkMmRqU0VwMlkwVTFhR0pYVlhCSlJEQXJTVWgwWTJKcFFXZEpRMEZuU1VOQloyRlhXV2RMU0VKNVlqTkNUMWxYTVd4SlJEQTVVRk5DUkZRd05WVlNWbWhWV0RCc1JVdFRRamRZUnpSblNVTkJaMGxEUVdkSlEwRm5Za2RXTUVsSVFtaGpiVloxWkVWc1JVbEVNR2RMU0VwMllqTlNSR0l5TlRCYVdHZ3dTMU5CTDBsSVNuWmlNMUpFWWpJMU1GcFlhREJYTUU1UVZHeFNSbGRHVW1aVFZWSmtTVVJ2WjAxWE5EZFlSelJuU1VOQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlEyaDNXVmhLYkdKdVVrcFNRMEVyU1VjeE5WRXlPWFZrUjFZMFpFVnNSVXRUUVM5SlNFSm9ZMjFXZFdSRmJFVkpSRzluWWxoc1JHSXlOVEJhV0dnd1UxVlJOMWhITkdkSlEwRm5TVU5CWjBsSU1XTmliSGgxU1VOQlowbERRV2RKUTBKd1dtbEJiMGxWT1dsaGJWWnFaRU0xZDJOdE9UQmlNMUkxWTBkVmRXRkhSbnBVTTJSMVZVaEtkbU5IVm5sa1NHdDFXVEpHYzJKRGFEQlpXRXB1V2xoUmMwbElRbmxpTTBKUFdWY3hiRXRUYkdOaWFVRm5TVU5CWjBsRFFXZEpRMEo1V2xoU01XTnROR2RMU0VwMllqTlNSR0l5TlRCYVdHZ3dTMU5CTDBsSVNuWmlNMUpFWWpJMU1GcFlhREJYTTBKNVlqTkNUMWxYTVd4WVUwRTJTVWhXZFZwSFZtMWhWelZzV2tSMFkySnNlSFZKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjJSSFJubGFNbFl3VnpOQ2VXSXpRazlaVnpGc1dGUjBZMkpwUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQ2VscFlVVFpKUTJnd1dWaEtibHBZVVhOSlNFSjVZak5DVDFsWE1XeE1RMEl5V1ZkNE1WcFRhMmRRVkRSblpURjRkVWxEUVdkSlEwRm5TVU5DY0ZwcFFXOWpTRXAyWTBVMWFHSlhWV2RRVkRBNVNVVk9VRlJzVWtaWFJsSm1VMVZSY0ZoSE5HZEpRMEZuU1VOQlowbERRV2RqYlZZd1pGaEtkVWxJVW5sa1YxVTNXRWMxWTJKcFFXZEpRMEZuU1VOQloyRlhXV2RMU0ZKb1kyMWtiR1JHZEhkamJUbDNWRzFHZEZwV01HZFFWREE1U1VoYWFHSklWbXhMVm5oMVNVTkJaMGxEUVdkSlEwRm5TVWhLYkdSSVZubGlhVUl3WTI1V2JFOHhlSFZZUnpSblNVTkJaMGxEUVdkSlJ6RTFVVEk1ZFdSSFZqUmtSV3hGU1VRd1owdDVkR1paTWpsMVpFZFdOR1JGYkVWUk1qa3hZbTVTYkdOcWRHTmlhVUZuU1VOQlowbERRV2RrUjBaNVdqSldNRmN6UW5saU0wSlBXVmN4YkZoVFFUbEpTRnBvWWtoV2JFOHhlSFZZUnpSblNVTkJaMGxEUVdkSlIyeHRTVU5vTUdWWVFteGlNbGxuWWpJMVZtTkhVbWhrUjFWblVGUXdPVWxEWkcxa1Z6VnFaRWRzZG1KcFkzQllSelJuU1VOQlowbERRV2RKUTBGbllqSTFWbU5IVW1oa1IxVjFXVEpHYzJKRGFIWmliRlozV2tkR01GcFdVbTloV0UxelNVYzVkVlpZUW10WldGSnNWa2RvY0dONWF6ZFlSelZqWW1sQlowbERRV2RKUTBGblkyMVdNR1JZU25WSlNGSjVaRmRWTjFoSE5HZEpRMEZuU1VOQ09VeEdlSFZKUTBGblNVZ3djRTh4ZUhWSlEwSTVXRWMxT1ZoSE5HbE1RMHBqWW0xT2RtSnVUakJKUmxKYVZVVldabEpWZUVaVVZWWlBWa05CWjFCVFFYaFBNWGgxV1RJNWRXTXpVV2RXUm14UlVsWTVWVkpXYUZWSlEwRm5TVU5CT1VsRVRUZFlSelZxWWpJMWVtUkRRbFZYVmtKR1dEQk9VRlJWTVVaVWJGRm5TVVF3WjA5RWRHTmliVTUyWW01T01FbEdVbHBWUlZabVZVVTVVMVpGUmsxSlEwRm5VRk5CZUU1VWRHTmliSGgxV2xob2QySXpTakJKUjA1eldWaE9la2xHU25aaU0xSkdZa2RXZEZwWE5UQkpTSFJqWW1sQloyTXpVbWhrUjJ4cVNVWlNXbFZGVm1aU1ZYaEdWRlZXVDFaRFFXZFFVMEpWVjFaQ1JsZ3dWazFTVlRGR1ZHeFJOMWhITldOaWFVRm5Zek5TYUdSSGJHcEpSbEphVlVWV1psWkZWbGxXUTBGblNVTkJaMUJUUWxWWFZrSkdXREZTUmxkR1VUZFlSelZqWW1sQloyTXpVbWhrUjJ4cVNVWlNXbFZGVm1aUk1EbE9WRlZXVDFaRFFXZFFVMEpWVjFaQ1JsZ3dUbEJVVlRGR1ZHeFJOMWhITldOaWFVRm5Zek5TYUdSSGJHcEpSbEphVlVWV1psVkZPVk5XUlVaTlNVTkJaMUJUUWxWWFZrSkdXREZDVUZWc1VrSlVSSFJqWW14NGRVbERRbXBpTWpWNlpFaEtNVmt6VW5aamFXZ3daVmhDYkV4RFFuQmFRM2RuWkcxR2MyUlhWWE5KU0VKNVlqTkNla3RUUWpkWVJ6Um5TVU5CWjJSSGFIQmplVFZ3WXpCd2NGbHVUbGRoV0Vvd1pGZEdjMUpYZUd4aVYxWjFaRU5CT1VsSVVubGtWMVUzV0VjMFowbERRV2RrUjJod1kzazFNR1ZZUW14SlEwRm5VRk5DTUdWWVFteFBNWGgxU1VOQlowbElVbTloV0UxMVlWZFJaMGxEUVdkSlJEQm5ZVmRSTjFoSE5HZEpRMEZuWkVkb2NHTjVOVEpaVjNneFdsTkJaMUJUUWpKWlYzZ3hXbFIwWTJKcFFXZEpRMEl3WVVkc2VreHVRbmxpTTBKNlNVTkJPVWxJUW5saU0wSjZTVWg0T0VsSWREbFBNWGgxU1VOQ09WaEhOVGxZUnpScFRFTktjR0pZUW5aamJsRm5TMmxDYUdONVFsWmtSMnh6WTNsQ2JXTnRPWFJKUTJOMVRHazVNV1JIYkhOamVUVnhZM2xqTjFoSE5XTmliVlkwWTBjNWVXUkRRbXBpTWpWNlpFTkNSRlF3TlZWU1ZtaFZXREJzUlVsRU1HZFZNMngwV1cwNWMweHRXblpqYVdkdVVVZHdjRmx1VFhaaWJUbHJXbE01YW1JeU5UQmFXR2d3VTFWUmJrdFVkR05pYkhoMVlrZFdNRWxJVmpGaFYxRm5VRk5CZUU4eGVIVllSelZzWlVoQ2RtTnVVV2RaTW5ob1l6Tk5aMVZ0T1haa1JUVjJXa2RWWjJVeGVIVkpRMEo2WkVkR01HRlhUV2RSTURsUFZrVldXVlpHT1VwU1EwRTVTVVZPVUZSc1VrWlhSbEptVTFWUk4xaEhOV05pYVVGbldUSTVkV016VW5sa1YwNHdZak5KYjJOdFZuVmFSMVo1V2xoSmMwbElRbWhqYlZaMVpFTjNaMWd5VG5aaWJsSnNaVWhSY0VsSWRHTmlhVUZuU1VOQ2MxcFlVV2RaTWpsMVpFZFdOR1JEUVRsSlNFcHNZbTFTYkdOdFZubE1iVTU1V2xkR01GcFZUblppYmxKc1pVaFJiMWhITkdkSlEwRm5TVU5DWmxreU9YVmtSMVkwWkVONFkySnBRV2RKUTBGblNVTm9NR0ZIYkhwTWJUbDFVVEk1ZFdSSFZqUmtSbFozV2tkR01GcFRhMmRRZVVJd1lVZHNla3h0T1hWUk1qbDFaRWRXTkdSR1ZuZGFSMFl3V2xOQk5rbElWblZhUjFadFlWYzFiRnBEZUdOaWFVRm5TVU5CWjBsSVVtOWhXRTF6V0VjMFowbERRV2RMVkhSallteDRkVWxEUVdkSlJUbHBZVzFXYW1SRE5XdGFWMXB3WW0xV1VXTnRPWGRhV0Vvd1lWZFdla3RJVW05aFdFMXpTVWgwWTJKcFFXZEpRMEZuU1VOa2NGcERZelpKU0hSalltbEJaMGxEUVdkSlEwRm5aRE5LY0dSSFJtbGlSMVUyU1VOQlowbERRbTFaVjNoNldsTjRZMkpwUVdkSlEwRm5TVU5CWjFwWE5URmlWMVo1V1ZkS2MxcFViMmRKUTBKdFdWZDRlbHBUZUdOaWFVRm5TVU5CWjBsRFFXZFpNamwxV20xc2JtUllTbWhaYlhoc1QybENiVmxYZUhwYVUzaGpZbWxCWjBsRFFXZEpRMEZuWkcxR2MyUlhWVFpKUTBGblNVTkJaMGxEUWpGa1YyeHJTM2x6YzFoSE5HZEpRMEZuU1VOQ09VeEdlSFZKUTBGblNVTkJaMG96U214aWJWSnNZMjFXZVVwNmIyZGxNWGgxU1VOQlowbERRV2RKUTBJelkyMXNNRmxYU25OYVZHOW5TVU5CWjBsSVVubGtWMVZ6V0VjMFowbERRV2RKUTBGblNVZFdkV1JYTVd4amJVWnBZa2RWTmtsRFFXZGFiVVp6WXpKVmMxaEhOR2RKUTBGblNVTkJaMGxIVG5aaWJWcHdXak5XZVZsWFNuTmFWRzluWkVoS01WcFRlR05pYVVGblNVTkJaMGxEUVdka2JVWnpaRmRWTmtsRFFXZEpRMEZuU1VOQ2VWcFhOV3RhV0Vwc1kybDRZMkpwUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQmJtTkhSbmxhVnpVd1NucHZaMlV4ZUhWSlEwRm5TVU5CWjBsRFFqTmpiV3d3V1ZkS2MxcFViMmRKUTBGblNVaFNlV1JYVlhOWVJ6Um5TVU5CWjBsRFFXZEpSMVoxWkZjeGJHTnRSbWxpUjFVMlNVTkJaMXB0Um5Oak1sVnpXRWMwWjBsRFFXZEpRMEZuU1VkT2RtSnRXbkJhTTFaNVdWZEtjMXBVYjJka1NFb3hXbE40WTJKcFFXZEpRMEZuU1VOQloyUnRSbk5rVjFVMlNVTkJaMGxEUVdkSlEwSjNXVmhLYkdKdVVYTllSelJuU1VOQlowbERRamxNUm5oMVNVTkJaMGxEUVdkS01rNTJZbTVTYkdWSVVXNVBhVUkzV0VjMFowbERRV2RKUTBGblNVZFdkV1JYTVd4amJVWnBZa2RWTmtsRFFXZGFiVVp6WXpKVmMxaEhOR2RKUTBGblNVTkJaMGxIVG5aaWJWcHdXak5XZVZsWFNuTmFWRzluWkVoS01WcFRlR05pYVVGblNVTkJaMGxEUVdkYU1sWXdUMmxCWjBsRFFXZEpRMEZuU1VOQmIwdFRRVGxRYVVJM1dFYzBaMGxEUVdkSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VkT2RtSnVVbXhsU0ZFM1dFYzBaMGxEUVdkSlEwRm5TVWd3YzFoSE5HZEpRMEZuU1VOQlowbElUbXhrUkc5blNVTkJaMGxEUVdkSlEwRm5TME5yWjFCVU5HZGxNekJ6V0VjMFowbERRV2RKUTBJNVRFWjRkVWxEUVdkSlEwRm5Tak5LYkdKdFVteGpiRUo1WWpJeGNHTXlWVzVQYVVJM1dFYzBaMGxEUVdkSlEwRm5TVWhrZVdGWVVtaFpiWGhzVDJsQlowbERRV2RrU0VveFdsTjRZMkpwUVdkSlEwRm5TVU5CWjFwWE5URmlWMVo1V1ZkS2MxcFViMmRKUTBKdFdWZDRlbHBUZUdOaWFVRm5TVU5CWjBsRFFXZFpNamwxV20xc2JtUllTbWhaYlhoc1QybENNR051Vm14TVJuaDFTVU5CWjBsRFFXZEpRMEl5V1ZkNE1WcFViMmRKUTBGblNVTkJaMGxITlRGaVIzZHpXRWMwWjBsRFFXZEpRMEk1VEVaNGRVbERRV2RKUTBGblNqSlNiR016VW5saU0yeHdZbTFqYms5cFFqZFlSelJuU1VOQlowbERRV2RKU0dSNVlWaFNhRmx0ZUd4UGFVRm5TVU5CWjJSSVNqRmFVM2hqWW1sQlowbERRV2RKUTBGbldsYzFNV0pYVm5sWlYwcHpXbFJ2WjBsRFFtMVpWM2g2V2xONFkySnBRV2RKUTBGblNVTkJaMWt5T1hWYWJXeHVaRmhLYUZsdGVHeFBhVUl3WTI1V2JFeEdlSFZKUTBGblNVTkJaMGxEUWpKWlYzZ3hXbFJ2WjBsRFFXZEpRMEZuU1VkYWFHSklUbXhNUm5oMVNVTkJaMGxEUVdkbVUzaGpZbWxCWjBsRFFXZEpRMlI1V2xjMWExcFlTa2RqYlVaMFdsTmpOa2xJZEdOaWFVRm5TVU5CWjBsRFFXZGtNMHB3WkVkR2FXSkhWVFpKUTBGblNVTkNNR051Vm14TVJuaDFTVU5CWjBsRFFXZEpRMEpzWW01V2RGcFlTbWhaYlhoc1QybEJaMGxIV21oaVNFNXNURVo0ZFVsRFFXZEpRMEZuU1VOQ2FtSXlOVzFoVjJReFkyMUdhV0pIVlRaSlNGSjVaRmRWYzFoSE5HZEpRMEZuU1VOQlowbElXbWhpU0Zac1QybEJaMGxEUVdkSlEwRm5UVU40WTJKcFFXZEpRMEZuU1Vnd2MxaEhOR2RKUTBGblpsTnJOMWhITkdkSlNERmpZbXg0ZFVsRFFtdGFXRTR3WTIwNU5VdERhMmRsTVhoMVNVTkJaMGxJVW05aFdFMTFXa2RXZW1SSVNuWmxWMngxV25sQk9VbElVbmxrVjFVM1dFYzBaMGxEUVdka1IyaHdZM2sxYW1JeU5UQmFXR2d3U1VRd1oySnVWbk5pUkhSalltbEJaMlpXZUhWWVJ6Um5TVWRzZWxadFJuTmhWMUpFWVVkc2MxcERhR3BoUjJ4eldrTnJaMlV4ZUhWSlEwRm5TVWhLYkdSSVZubGlhVUpXWkVkc2MyTjVOWEJqTVZwb1lrZHNhMUV5YUhCaVIxRnZXVEpvY0dKSFVYQlBNWGgxU1VOQ09WaEhOV05pYVVGbllWaE9TbVJIVm5sWlYwcHpXbFZPYjJGWGVHdExSMDV2WVZkNGEwdFRRamRZUnpSblNVTkJaMk50VmpCa1dFcDFTVVpXTUdGWGVIcE1iV3g2VTFoU2JHTnRSbWxpUjFaRVlVZHNjMXBEYUdwaFIyeHpXa05yTjFoSE5HZEpTREZqWW14NGRVbERRbmRqYlRsM1l6QlNjRnB0V214amFXaDJZa2RTVVdOdE9YZGplWGRuWW0xV00xVklTblpqU0UxelNVaE9jbUZZUWt4YVdHeDZTMU5DTjFoSE5HZEpRMEZuWTIxV01HUllTblZKUmxZd1lWZDRla3h1UW5saU0wSjZVa2RzYlZwdFZubExSemx6V2taQ2VXSXpRbnBNUTBKMVdsaGtVV050T1hkamVYZG5ZekowY0dORmRHeGxXRTF3VHpGNGRVbERRamxZUnpWalltbEJaMWt5YUhCaVIxSjVXbGMxUldGWFdtMWFXRWx2WWpKNGExRXlhSEJpUjFKNVdsYzBjMGxITld4a01FNXZZVmQ0YTJOdFZuVkxVMEkzV0VjMFowbERRV2RqYlZZd1pGaEtkVWxHVmpCaFYzaDZURzFPYjJGWGVHdGpiVloxVWtkc2JWcHRWbmxMUnpseldrVk9iMkZYZUd0amJWWjFURU5DZFZwWVpFUmhSMnh6V2toS2JHSnBhemRZUnpSblNVZ3hZMkpzZUhWSlEwSm9Zek5zZFZsNVFubGFWelZyV2xoSmIyRnRiR2xNUTBKNVdsYzFhMXBZU2tSaU1qVXdXbGhvTUV0VFFqZFlSelJuU1VOQloyRlhXV2RMU0ZKdllWaE5kVnBIVm5wa1NFcDJaVmRzZFZwNWJHTmlhVUZuU1VOQlowbElTbXhrU0ZaNVltcDBZMkpzZUhWSlEwRm5TVWhTYjJGWVRYVmpiVloxV2tkV2VWSnVTbWhpVjFWeVMzcDBZMkpzZUhWSlEwRm5TVWhLYkdSSVZubGlhVUl3WVVkc2VreHNPWGxhVnpWcldsaEpiMkZ0YkdsTVEwSjVXbGMxYTFwWVNrUmlNalV3V2xob01FdFdlSFZKUTBGblNVTkJaMHh1VW05YVZ6UnZTMGhLYkdNelZuTmtRMnRuVUZRMFoyVXhlSFZKUTBGblNVTkJaMGxEUWpCaFIyeDZURzVLYkdKdFVteGpiRUo1WWpJeGNHTXlWV2RRVTBKMVpGZDRjMDh4ZUhWSlEwRm5TVU5CWjBsRFFubGFXRkl4WTIwMFoyTnRWbnBrVjNnd1R6RjRkVWxEUVdkSlEwRm5abE5zWTJKcFFXZEpRMEZuU1VNMWFsbFlVbXBoUTJkdldsaEtlV0l6U1hCSlJEQXJTVWgwWTJKcFFXZEpRMEZuU1VOQloyUkhhSEJqZVRWNVdsYzFhMXBZU2xGamJUbDBZVmhPYkVsRU1HZGlibFp6WWtSMFkySnBRV2RKUTBGblNVTkJaMlJIYUhsaU0yTm5XbGhLZVdJelNUZFlSelJuU1VOQlowbERRamxMVkhSalltbEJaMlpXZUhWbVZuaDFTV2wzYVdGWE1YZGlNMG93U1VoeloxVnRPWFprUlZaeldsY3hiR0p1VVdkbVUwSnRZMjA1ZEVsRFkzVk1NMHAyWWpOUmRGcFhlR3hpVjFaMVpFTTFjV041WXpkWVJ6VmpZbTFXTkdOSE9YbGtRMEpxWWtkR2VtTjVRbFZhV0dnd1VsZDRiR0pYVm5Wa1EwSnNaVWhTYkdKdFVucEpSa3AyWWpOU1JtSkhWblJhVnpVd1NVaDBZMkpwUVdkak0xSm9aRWRzYWtsR1VscFZSVlZuVUZOQ1UySXlPVEJTVjNoc1lsZFdkV1JETlZWWFZrSkdXREZTUmxkR1VUZFlSelZqWW1sQloxa3lPWFZqTTFKNVpGZE9NR0l6U1c5aFYxRnpTVWhhYUdKSVZteE1RMEozWTIwNWQyTjVhMmRsTVhoMVNVTkJaMGxJVGpGalIxWjVTMFpLZG1JelVrWmlSMVowV2xjMU1FeHNVbHBWUlZabVZrVldXVlpEZDJkaFYxRnpTVWhhYUdKSVZteE1RMEozWTIwNWQyTjVhemRZUnpSblNVZ3hZMkp1TVdOaWFVbHpTVzFzZEdOSE9YbGtRMEpyV2xkR2ExbHRWbXhhYVVKdFkyMDVkRWxEWkd0YVYwWnJXVzFXYkZwcFl6ZFlSelZqWW0xT2RtSnVUakJKUms1VlZERkJaMUJUUWxSbFZ6RnBZakozZFZwdE9YbExRMlJCWVcxc2FXTXdiREJhV0Vwb1pFZFdWR1JIT1hkS2VXczNXRWMxWTJKcE9IWkpSMVo2WWtkc2RXUkRNV3RoV0U1b1dXMTRiRXhYTld4bFNGRjBZa2RzZFZwVFFuVmllVEYxV2xoT01GcFhVWFJrUjFaNVltMUdlV1ZXZUhWWk1qbDFZek5SWjFveWVIWlpiVVp6VlRKT2RtTkhWV2RRVTBGdlpFaHNkMXBYT1cxSlIyUnpZakpLYUdKRFFXaFFWREJuU2pOV2RWcEhWbTFoVnpWc1drTmpjRWxFT0dkYU1uaDJXVzFHYzBsRWIyZExTRkkxWTBkV2RscHBRak5oVnpWcllqTmpaMGxVTURsSlEyUXhZbTFTYkZwdGJIVmFWMUZ1UzFOQkwwbElaSEJpYlZKMlpIbEJOa2xJVW05aFdFMDNXRWMxWTJKdFZqUmpSemw1WkVOQ2JXUlhOV3BrUjJ4MlltbENjR0p1VGpCWlZ6VnFXbFU1YlV0SE9XbGhhV3RuWlRGNGRVbERRbTFrVnpWcVpFZHNkbUpwUWpCYVdFNHdWa2hzZDFwVGFIWlpiVzl6U1VZNU1sbFhkM0JKU0hSalltbEJaMGxEUW0xa1Z6VnFaRWRzZG1KcFFuQmpNRkpzV20xV2VXTnRWbXRXU0d4M1dsTm9kbGx0YjNCSlNIUmpZbWxCWjBsRFFXZEpSMnh0U1VOb2RsbHRiMmRoVnpWNlpFZEdkVmt5Vm5aYWFVSlJZMjA1ZEdGWVRteEpTSGc0U1VOb2RsbHRiM1ZaTWpsMVl6TlNlV1JYVGpCaU0wbG5TbWxaWjJJeVNuRk1iVTUyWW01T01HTnVWbXBrUnpsNVRHMDFhR0pYVldkUVZEQTVTVU5rVVdOdE9YUmhXRTVzU25scmNGaEhOR2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDTUdOdVZteFBNWGgxV0VjMFowbERRV2RKUTBGMlRIbENVbVJYUm1waGVVSjRaRmRHYW1GNU5IVk1iSGgxU1VOQlowbERRV2RoVjFsblMwaFNOV05IVm5aYWFVSjJXVzF2ZFdSSGFHeGlhVUU1VUZRd1owb3lXakZpYlU0d1lWYzVkVXA1UVcxS2FVSXdaVmhDYkdJeVdXZGlNa3B4VEcxT2FHUkhUbTlKUkRBNVVGTkJibHB1Vm5WWk0xSndZakkwYmt0V2VIVkpRMEZuU1VOQlowbERRbmxhV0ZJeFkyMDBaMlJJU2pGYVZIUmpZbXg0ZFVsRFFXZEpRMEZuWTIxV01HUllTblZKUjFwb1lraE9iRTh4ZUhWSlEwRm5TVWd4WTJKc2VIVkpRMEZuU1VkNGJHUkRRakpaVjNkblNVTkJaMGxFTUdkWU0xcG9Za1IwWTJKcFFXZEpRMEp6V2xoUloyUkliSGRhVlRsdFNVTkJPVWxEYURCbFdFSnNZakpaWjJJeVNuRkxWSFJqWW14NGRVbERRV2RKUjJ4dFNVTm9NbGxYZDJkUVZEQTVTVWRrYzJJeVNtaGlSazVxWWpOQ2JFeHNUakJqYld4MVdubHNZMkpwUVdkSlEwRm5TVWhhYUdKRFFUbEpRMlI2WkVoS2NHSnRZMjVQTVhoMVNVTkJaMGxIVm5Oak1sVm5ZVmRaWjB0SVdtaGlRMEU1VUZRd1oxb3llSFpaYlVaelZUSk9kbU5IVlhWVWJsWjBXVzFXZVV0V2VIVkpRMEZuU1VOQloyUnRSbk5KUkRCblNqSTFNV0pYU214amFXTTNXRWMwWjBsRFFXZGFWM2g2V2xOQ2NGcHBRVzlrYlVaelNVUXdPVkJUUW01aVJ6bHBXVmQ0VkZreU9YZGFVelZEWWpJNWMxcFhSblZMVm5oMVNVTkJaMGxEUVdka2JVWnpTVVF3WjBveVNuWmlNbmhzV1ZjMGJrOHhlSFZKUTBGblNVZFdjMk15VldkaFYxbG5TMGhhYUdKRFFUbFFWREJuV2pKNGRsbHRSbk5WTWs1MlkwZFZkVkp1Vm5WWk0xSndZakkwY0ZoSE5HZEpRMEZuU1VOQ01sbFhkMmRRVTBGdVdtNVdkVmt6VW5CaU1qUnVUekY0ZFVsRFFXZEpSMVp6WXpKVloyRlhXV2RMU0Zwb1lrTkJPVkJVTUdkYU1uaDJXVzFHYzFVeVRuWmpSMVYxVVZoS2VWbFlhM0JZUnpSblNVTkJaMGxEUWpKWlYzZG5VRk5CYmxsWVNubFpXR3R1VHpGNGRVbERRV2RKUjFaell6SlZaMkZYV1dkTFNGcG9Za05CT1ZCVU1HZGFNbmgyV1cxR2MxVXlUblpqUjFWMVZESktjVnBYVGpCTFZuaDFTVU5CWjBsRFFXZGtiVVp6U1VRd1owb3lPV2xoYlZacVpFTmpOMWhITkdkSlEwRm5XbGQ0ZWxwVFFuQmFhVUZ2WkcxR2MwbEVNRGxRVTBKdVlrYzVhVmxYZUZSWk1qbDNXbE0xVVdOdE9YUmhXRTVzUzFaNGRVbERRV2RKUTBGblpHMUdjMGxFTUdkS00wSjVZakl4Y0dNeVZXNVBNWGgxU1VOQlowbEhWbk5qTWxWbllWZFpaMHRJV21oaVEwRTVVRlF3WjFveWVIWlpiVVp6VlRKT2RtTkhWWFZSYld4dVUxYzFNRXRXZUhWSlEwRm5TVU5CWjJSdFJuTkpSREJuU2pKS2NGb3liSFZrUTJNM1dFYzBaMGxEUVdkYVYzaDZXbE5DY0ZwcFFXOWtiVVp6U1VRd09WQlRRbTVpUnpscFdWZDRWRmt5T1hkYVV6Vk9XVmhCY0ZoSE5HZEpRMEZuU1VOQ01sbFhkMmRRVTBGdVlsZEdkMHA2ZEdOaWFVRm5TVU5DYkdKSVRteEpSMnh0U1VOb01sbFhkMmRRVkRBNVNVZGtjMkl5U21oaVJrNXFZak5DYkV4c1pHeFpWM1JPV1ZoQmNGaEhOR2RKUTBGblNVTkNNbGxYZDJkUVUwRnVaREpXYUdFeU1XaGpRMk0zV0VjMFowbERRV2RhVjNoNldsTkNjRnBwUVc5a2JVWnpTVVF3T1ZCVFFtNWlSemxwV1ZkNFZGa3lPWGRhVXpWVVdsaFJjRmhITkdkSlEwRm5TVU5DTWxsWGQyZFFVMEZ1WXpKV01FcDZkR05pYVVGblNVTkNiR0pJVG14SlIyeHRTVU5vTWxsWGQyZFFWREE1U1Vka2MySXlTbWhpUms1cVlqTkNiRXhzVGpWaVYwcDJZa05zWTJKcFFXZEpRMEZuU1VoYWFHSkRRVGxKUTJSNlpWY3hhV0l5ZDI1UE1YaDFTVU5CWjBsSFZuTmpNbFZuWVZkWlowdElXbWhpUTBFNVVGUXdaMW95ZUhaWmJVWnpWVEpPZG1OSFZYVlJibFp0V20xV2VVdFdlSFZKUTBGblNVTkJaMlJ0Um5OSlJEQm5TakpLTVZwdFdteGphV00zV0VjMVkySnBRV2RKUTBKd1dtbEJiMlJ0Um5OSlJEQTVVRk5CYmxsdVZtMWFiVlo1U25sQmJVcHBRbTVpUnpscFdWZDRWRmt5T1hkYVV6VkRaRmRhYlZwWVNXZEthVmxuV2pKNGRsbHRSbk5WTWs1MlkwZFZkVkZ1Vm0xYWJWWjVURzFzZWxGdVZtMWFiVlo1UzBjNWFXRnBhM0JZUnpSblNVTkJaMGxEUW5sYVdGSXhZMjAwWjJSSVNqRmFWSFJqWW14NGRVbERRV2RKUjJ4dFNVTm9NbGxYZDJkUVZEQTVTVU5rZFdSWE1XbGFXRWx1U1VOWmJVbERhREJsV0VKc1ZESlpaMUJVTURsSlEyUjFaRmN4YVZwWVNXNUpTSGc0U1VjNWFXRnBRbkJpYms0d1dWYzFhbHBYT1cxSlJUVXhZbGRLYkdOcFFqaG1RMEZ2WWpKS2NVeHRUblppYms0d1kyNVdhbVJIT1hsSlExbHRTVWM1YVdGcE5XcGlNalY2WkVoS01Wa3pVblpqYVRWMVdWY3hiRWxFTURsUVUwRnVWRzVXZEZsdFZubEtlV3R3UzFOQ04xaEhOR2RKUTBGblNVTkNjRnBwUVc5SlYyeDZVbTFzZFdGWVVteExSemxwWVdscmNGaEhOR2RKUTBGblNVTkJaMGxJU214a1NGWjVZbWxDYlZsWGVIcGFWSFJqWW14NGRVbERRV2RKUTBGblkyMVdNR1JZU25WSlNGSjVaRmRWTjFoSE5HZEpRMEZuWmxaNGRWaEhOR2RKUTBGbllWZFpaMHRJV21oaVEwRm9VRlF3WjBveU9XbGhiVlpxWkVOalowcHBXV2RrYlVaelNVUXdPVkJUUWpCbFdFSnNWREpaY0ZoSE5HZEpRMEZuU1VOQ2VWcFlVakZqYlRSblpFaEtNVnBVZEdOaWJIaDFTVU5CWjBsSGJHMUpRMmd5V1ZkM1oxQlVNRGxKUTJSMldXMXdiRmt6VVc1TFUwSTNXRWMwWjBsRFFXZEpRMEp3V21sQmIwdEhPV2xoYVRWcVlqSTFlbVJJU2pGWk0xSjJZMmxCT1ZCVU1HZFVNa3B4V2xkT01FeHVRbmxpTTFKMlpFaHNkMXBUTldwaU1qVjZaRWhLTVZrelVuWmphVUk0WmtOQmIySXlTbkZNYlU1MlltNU9NR051Vm1wa1J6bDVTVU5aYlVsSE9XbGhhVFZxWWpJMWVtUklTakZaTTFKMlkyazFkVmxYTVd4SlJEQTVVRk5CYmxReVNuRmFWMDR3U25scmNFdFdlSFZKUTBGblNVTkJaMGxEUW5sYVdGSXhZMjAwWjJSSVNqRmFWSFJqWW14NGRVbERRV2RKUTBGblRIazRaMVJ1Vm5OaVEwSjNZMjA1TUdJelVqVmpSMVZuWWpJMFoySXlTbkZhVjA0d1dFYzBaMGxEUVdkSlEwSndXbWxCYjJSSWJIZGFWVGx0U1VRd09WQlRRVzVpTWtweFdsZE9NRXA1UVcxS2FVRm9ZakpLY1V4dFRuWmliazR3WTI1V2FtUkhPWGxMVm5oMVNVTkJaMGxEUVdkSlEwSjVXbGhTTVdOdE5HZGtTRW94V2xSMFkySnNlSFZKUTBGblNVTkJaMk50VmpCa1dFcDFTVWRhYUdKSVRteFBNWGgxU1VOQlowbElNV05pYkhoMVNVTkJaMGxIYkcxSlEyZ3lXVmQzWjFCVU1EbEpRMlJvWTI1S2FHVlRZMmRLYVZsblMwVkdlV050UmpWTWJXeDZVVmhLZVZsWWEyOWlNa3B4UzFOQ09HWkRRblpaYlc5bllWYzFlbVJIUm5WWk1sWjJXbWxDUW1OdVNtaGxVMEk0WmtOQmIySXlTbkZNYlU1MlltNU9NR051Vm1wa1J6bDVTVU5aYlVsSE9XbGhhVFZxWWpJMWVtUklTakZaTTFKMlkyazFkVmxYTVd4SlJEQTVVRk5CYmxGWVNubFpXR3R1UzFOcmNGaEhOR2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWhLTVZwVWRHTmliSGgxU1VOQlowbEhiRzFKUTJkdlpHMUdjMGxFTURsUVUwRnVZMGhLZG1KWGJIcGFVMk5uWmtoM1oyUnRSbk5KUkRBNVVGTkJibHBIVm0xYVdFcDVXbGRSYmt0VFFXMUthVUp3WXpCU2JGcHRWbmxqYlZaclZraHNkMXBUYUhaWmJXOXdTMVo0ZFVsRFFXZEpRMEZuWTIxV01HUllTblZKU0ZKNVpGZFZOMWhITldOaWFVRm5TVU5DY0ZwcFFXOWtiVVp6U1VRd09WQlRRVzVqTTFKNVlWYzFia3A1UVcxS2FVRnZZakpLY1VsSGJIVmpNMUpvWW0xT2JHSXlXV2RhTW5oMldXMUdjMVV5VG5aalIxVjFWVE5TZVdGWE5XNUpTSGc0U1VOb2RsbHRiM1ZaTWpsMVl6TlNlV1JYVGpCaU0wbG5TbWxaWjJJeVNuRk1iVTUyWW01T01HTnVWbXBrUnpsNVRHMDFhR0pYVldkUVZEQTVTVU5rVkdSSVNuQmliV051UzFOcmNGaEhOR2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWhLTVZwVWRHTmliSGgxU1VOQlowbEhiRzFKUTJneVdWZDNaMUJVTURsSlEyUnBZakk1YzFwWFJuVktlVUZ0U21sQmIySXlTbkZKUjJ4MVl6TlNhR0p0VG14aU1sbG5Xako0ZGxsdFJuTlZNazUyWTBkVmRWRnRPWFppUjFab1ltbENPR1pEUVc5aU1rcHhURzFPZG1KdVRqQmpibFpxWkVjNWVVbERXVzFKUnpscFlXazFhbUl5Tlhwa1NFb3hXVE5TZG1OcE5YVlpWekZzU1VRd09WQlRRVzVSYlRsMllrZFdhR0pwWTNCTFUyeGpZbWxCWjBsRFFXZEpTRXBzWkVoV2VXSnBRakJqYmxac1R6RjRkVmhITkdkSlEwRm5ZVmRaWjB0SVdtaGlRMEU1VUZRd1owb3lNV2hqUTJOblNtbFpaMHRIT1dsaGFVSndZbTVPTUZsWE5XcGFWemx0U1Vka2MySXlTbWhpUms1cVlqTkNiRXhyTVdoalEwSTRaa05CYjJJeVNuRk1iVTUyWW01T01HTnVWbXBrUnpsNVNVTlpiVWxIT1dsaGFUVnFZakkxZW1SSVNqRlpNMUoyWTJrMWRWbFhNV3hKUkRBNVVGTkJibFJYUm5kS2VXdHdTMVo0ZFVsRFFXZEpRMEZuWTIxV01HUllTblZKU0ZKNVpGZFZOMWhITldOaWFVRm5TVU5DY0ZwcFFXOWtiVVp6U1VRd09WQlRRVzVrTWxab1lUSXhhR05EWTJkS2FWbG5TMGM1YVdGcFFuQmliazR3V1ZjMWFscFhPVzFKUjJSellqSkthR0pHVG1waU0wSnNUR3hrYkZsWGRFNVpXRUZuWmtoM1owdEhPV2xoYVRWcVlqSTFlbVJJU2pGWk0xSjJZMmxCYlVwcFFuWlpiVzkxV1RJNWRXTXpVbmxrVjA0d1lqTkpkV0p0Um5SYVUwRTVVRlF3WjBveFpHeFpWM1JPV1ZoQmJrdFRhM0JZUnpSblNVTkJaMGxEUW5sYVdGSXhZMjAwWjJSSVNqRmFWSFJqWW14NGRVbERRV2RKUjJ4dFNVTm9NbGxYZDJkUVZEQTVTVU5rZWxwWVVXNUpRMWx0U1VOb2RsbHRiMmRoVnpWNlpFZEdkVmt5Vm5aYWFVSnVZa2M1YVZsWGVGUlpNamwzV2xNMVZGcFlVV2RtU0hkblMwYzVhV0ZwTldwaU1qVjZaRWhLTVZrelVuWmphVUZ0U21sQ2RsbHRiM1ZaTWpsMVl6TlNlV1JYVGpCaU0wbDFZbTFHZEZwVFFUbFFWREJuU2pGT2JHUkRZM0JMVTJ4alltbEJaMGxEUVdkSlNFcHNaRWhXZVdKcFFqQmpibFpzVHpGNGRWaEhOR2RKUTBGbllWZFpaMHRJV21oaVEwRTVVRlF3WjBveVdqRmliVTR3WVZjNWRVcDVRVzFLYVVJd1pWaENiRlF5V1dkUVZEQTVTVU5rYldSWE5XcGtSMngyWW1samNGaEhOR2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWhLTVZwVWRHTmliSGgxU1VOQlowbEhiRzFKUTJnd1pWaENiR0l5V1dka2JVWnpTVVF3T1ZCVFFXNWFibFoxV1ROU2NHSXlORzVKUTFsdFNVYzVhV0ZwUW5CaWJrNHdXVmMxYWxwWE9XMUpTRnBvWWtOc1kySnBRV2RKUTBGblNVaEtiR1JJVm5saWFVSXdZMjVXYkU4eGVIVllSelJuU1VOQloyRlhXV2RMU0ZJMVkwZFdkbHBwUWpKWlYzZG5VRlF3T1VsRFpIcGtTRXB3WW0xamJrbERXVzFKUnpscFlXazFhbUl5Tlhwa1NFb3hXVE5TZG1OcFFXMUthVUoyV1cxdmRWa3lPWFZqTTFKNVpGZE9NR0l6U1hWaWJVWjBXbE5CT1ZCVU1HZGtiVVp6UzFaNGRVbERRV2RKUTBGblkyMVdNR1JZU25WSlNGSjVaRmRWTjFoSE5XTmlhVUZuU1VOQ2VWcFlVakZqYlRSbldtMUdjMk15VlRkWVJ6Um5TVWd4WTJKc2VIVkpRMEp3V21sQmIySXlTbkZKUkRBNVNVYzFNV0pIZDNCWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VkYWFHSklUbXhQTVhoMVdFYzBaMGxIV25aamFVRnZaRzFHZVVsSGEyZFFVMEY0VEVOQ2MxcFhOR2RRVTBKb1kyMWtNV0pYVm5Wa1NFMTFZa2RXZFZvelVtOVBlVUp3U1VSM1oySkhWblZQZVVKd1MzbHpjRWxJZEdOaWFVRm5TVU5DY0ZwcFFXOWtSMVo2WkVaU05XTkhWVzlpTWtweFRFTkNhR050WkRGaVYxWjFaRWhPWW1GV01IQkpSREE1VUZOQ01HTnVWbXhMVm5oMVNVTkJaMGxEUVdkamJWWXdaRmhLZFVsSVVubGtWMVUzV0VjMFowbElNV05pYkhoMVNVTkNlVnBZVWpGamJUUm5XbTFHYzJNeVZUZFlSelU1V0VjMVkySnRWalJqUnpsNVpFTkNiV1JYTldwa1IyeDJZbWxDZDJOdE9YZGpNRkp3V20xYWJHTnBhSFppUjFKUlkyMDVkMk41ZDJkaWJWWXpWVWhLZG1OSVRYTkpTRTV5WVZoQ1RGcFliSHBMVTBJM1dFYzBaMGxIYkcxSlEyaDJZa2RTVVdOdE9YZGplVUU1VUZRd1oySnRWak5WU0VwMlkwaE5jRmhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSMXBvWWtoT2JFOHhlSFZZUnpSblNVZHNiVWxEYURCbFdFSnNZakpaWjJJeWVHdFZTRXAyWTBoTlowbFVNRGxKU0ZJMVkwZFdkbHBwUW5WYVdHUlJZMjA1ZDJONWJHTmlhVUZuU1VOQ2VWcFlVakZqYlRSblpFaEtNVnBVZEdOaWJIaDFTVU5DY0ZwcFFXOUpWemx6V2taQ2VXSXpRbnBKUTFsdFNVYzFiR1F4UW5saU0wSjZTMVo0ZFVsRFFXZEpTRXBzWkVoV2VXSnBRakJqYmxac1R6RjRkVmhITkdkSlIyeHRTVU5vZG1KSFVsRmpiVGwzWTNsQmJVcHBRV2hpYlZZelZVaEtkbU5JVFhCWVJ6Um5TVU5CWjJOdFZqQmtXRXAxU1VoU2VXUlhWVGRZUnpWalltbEJaMHg1T0dkYVdFNXpZVmMxTUV4WFVuQmpNa1pwWWtkVmRHSnRWalJrUXpGellWYzFiRWxIVm5oYVdFWnNZMVo0ZFVsRFFuQmFhVUZ2U1ZjNWMxcEdRbmxpTTBKNlNVTlpiVWxEUm5WYVdHUlJZMjA1ZDJONVFXMUthVUoyWWtkU1VXTnRPWGRqZVVGb1VGTkNkbUpIVWxGamJUbDNZM2xzWTJKcFFXZEpRMEo1V2xoU01XTnROR2RrU0VveFdsUjBZMkpzZUhWSlEwSnpXbGhSWjFsVmRHeGxXRTFuVUZOQ1VGbHRjR3haTTFGMVlUSldOV041YUhaaVIxSlJZMjA1ZDJONWEzVlpNamwxV1RKR01FdEZPV2xoYlZacVpFTTFibHBZVWxCa01qVlJZMjA1ZDFwWVNqQmxWazQxWWxkS2RtSklUVzlpTW5oclZVaEtkbU5JVFhCTFZIUmpZbWxCWjJKSFZqQkpSMHBNV2xoc2VrbEVNR2RVTWtweFdsZE9NRXh0ZEd4bFdFMXZZbTFXTTFWSVNuWmpTRTF3VEcxT2RtSnRUbWhrUTJoUVdXMXdiRmt6VVhWYU1sWXdWRE5rZFZWSVNuWmpSMVo1WkVoc1ZHVlhNV2xpTW5oNlMwYzFiR1F4UW5saU0wSjZTMU5yTjFoSE5XTmlhVUZuWVZkWlowdEhSa3hhV0d4NlRHMTRiR0p0WkRCaFEwRm9VRlF3WjFscmRHeGxXRTExWWtkV2RWb3pVbTlMVm5oMVNVTkJaMGxJU214a1NGWjVZbWxDTUdOdVZteFBNWGgxV0VjMFowbEhXblpqYVVGdllrZFdNRWxIYTJkUVUwRjNURU5DY0dKRFFUbEpSMFpNV2xoc2VreHRlR3hpYldRd1lVUnpaMkZUUVRoSlIyeHpUM2xDY0V0NWMzQkpTSFJqWW1sQlowbERRbk5hV0ZGbldWVjBiR1ZUUVRsSlIwWk1XbGhzZWxjeWJHUlBNWGgxU1VOQlowbEhiRzFKUTJoNllUSnNkMU15VmpWamVVRnRTbWxDZW1FeWJIZFRNbFkxWTNrMWNHSnRVbXhsUlRsdFMwZEdURnBZYTNCSlJEUTVTVVJCY0ZoSE5HZEpRMEZuU1VOQ2FtSXlOVEJoVnpVeFdsUjBZMkpzZUhWSlEwRm5TVWRzYlVsRGFIWmlSMUpSWTIwNWQyTXhkR2hUTWxZMVdGTkJhRkJVTUdkaWJWWXpWVWhLZG1OSVRtSlpWWFJzWlZZd2NGaEhOR2RKUTBGblNVTkNlVnBZVWpGamJUUm5aRWhLTVZwVWRHTmliSGgxU1VOQlowbEhlR3hrUTBKcFV6SldOVWxFTUdkWmEzUnNaVmhPWW1GV01EZFlSelJuU1VOQloyRlhXV2RMU0U1eVlWaENURnBZYkhwSlExbHRTVWhPY21GWVFreGFXR3g2VEcxc2RWcEhWalJVTWxsdldXdDBiR1ZUYTNCWVJ6Um5TVU5CWjBsRFFtcGlNalV3WVZjMU1WcFVkR05pYkhoMVNVTkJaMGxIYkcxSlEyaG9VekpXTlVsRU1EbFFVMEpwVXpKV05VdFdlSFZKUTBGblNVTkJaMWt5T1hWa1IyeDFaRmRWTjFoSE5XTmlhVUZuU1VOQ2NGcHBRVzlpTW5oclZVaEtkbU5JVG1KWmEzUnNaVll3WjBsVU1EbEpSelZzWkRGQ2VXSXpRbnBYTWtwTVdsaHNaRXRXZUhWSlEwRm5TVU5CWjJOdFZqQmtXRXAxU1VoU2VXUlhWVGRZUnpSblNVZ3hZMkpzZUhWSlEwSjVXbGhTTVdOdE5HZGFiVVp6WXpKVk4xaEhOVGxZUnpWalltMVdOR05IT1hsa1EwSnRaRmMxYW1SSGJIWmlhVUo2WVZod2JGUXlXVzlrYlVaelpGZFZjRWxJZEdOaWFVRm5ZVmRaWjB0RFJqSlpWM2d4V2xOc1kySnBRV2RKUTBKNVdsaFNNV050TkdkTlJIUmpZbXg0ZFVsRFFuQmFhVUZ2VkRKS2NWcFhUakJNYld4NlMwVnNkVnB0YkhWaFdGSTFTMU5zWTJKcFFXZEpRMEo1V2xoU01XTnROR2ROUkhSallteDRkVWxEUW5CYWFVRnZaRWhzZDFwWE9XMUpTRnBvWWtoV2JFeHRlR3hpYldRd1lVTkJPVkJVTUdkS01qVXhZbGRLYkdOcFkzQllSelJuU1VOQloyTnRWakJrV0VwMVNVaGFhR0pJVm14TWJYaHNZbTFrTUdGRWRHTmliSGgxU1VOQ2VWcFlVakZqYlRSblZESktjVnBYVGpCTWJYUnNaVmhOYjJSdFJuTmtWMVZ3VEcxNGJHSnRaREJoUkhSalltNHhZMkpzZUhWYWJsWjFXVE5TY0dJeU5HZFlNbXd3V2xoS2FHUkhWVzlpTWtweFRFTkNhbGxYZUhOWmJVWnFZWGxyWjJVeGVIVkpRMEp3V21sQmIwbFhPV2xoYVVJNFprTkNVRmx0Y0d4Wk0xRjFZVmhOYjFOWE5XMWhWelZ3WkVocmNFdFdlSFZKUTBGblNVaEtiR1JJVm5saWFVSmlXRlIwWTJKc2VIVkpRMEp6V2xoUloyTnRWbnBrVjNnd1kzbEJaMGxFTUdkWE1UQTNXRWMwWjBsSGVHeGtRMEo2V1RJNWQxcFRRV2RKUTBGblVGTkNOMGxIVG5aaVIzaHNXVE5TY0dJeU5EWkpSemxwWVdsM1oxVXhVbEJWUTBJNVR6RjRkVWxEUW5OYVdGRm5ZMjFXZW1SWGVEQlBNWGgxV0VjMFowbEhiRzFKUTJoQ1kyNUthR1ZUTlhCak1FWjVZMjFHTlV0SE9XbGhhV3R3U1VoMFkySnBRV2RKUTBKNldUSTVkMXBUTlRCbFdFSnNTVVF3WjBvd1JubGpiVVkxU25wMFkySnNlSFZKUTBGblNVZGFkbU5wUVc5aVIxWXdTVWRyWjFCVFFYZE1RMEp3WWtOQk9VbEhPV2xoYVRWeldsYzFibVJIWnpkSlIydG5VRU5DY0dKRWMyZGhVM055UzFOQ04xaEhOR2RKUTBGblNVTkNlbGt5T1hkYVV6VXlXVmQ0TVZwVFFUbEpSemxwWVd4MGNGaFVkR05pYVVGblNVTkJaMGxJVG1waU0wSnNURzFzZFZwSFZqUkpSREJuWXpKT2RtTkhWWFZoTWxZMVNVUXdaMkZVZEdOaWJIaDFTVU5CWjBsRFFXZGpiVlo2WkZkNE1FbEVNR2RaTWtaellrZEthRmt5YzNWWk1rWnpZa05vTUdGSGJIcE1RMEo2V1RJNWQxcFRhemRZUnpSblNVTkJaMGxEUW5CYWFVRnZZMjFXZW1SWGVEQkpSREE1VUZOQ1ZGWkZPVkZMVm5oMVNVTkJaMGxEUVdkSlEwSnBZMjFXYUdGNmRHTmliSGgxU1VOQlowbERRV2RqYlZaNlpGZDRNR041Tlhka1dFNXZTMGhLYkdNelZuTmtRMnMzV0VjMFowbERRV2RtVm5oMVNVTkNPVWxIVm5Oak1sVm5ZVmRaWjB0SVVqVmpSMVoyV21sQ2RsbHRiM1ZhVnpVd1kyMXNiR041UVRsUVZEQm5TakphTVdKdFRqQmhWemwxU25scloyVXhlSFZKUTBGblNVZHNiVWxEYUhaWmJXOW5ZVmMxZW1SSFJuVlpNbFoyV21sQ1ZGcFlVV2RtU0hkbllqSktjVXh0VG5aaWJrNHdZMjVXYW1SSE9YbE1iVFZvWWxkVloxQlVNRGxKUTJSVVdsaFJia3RUUWpkWVJ6Um5TVU5CWjBsRFFucFpNamwzV2xNMU1HVllRbXhKUkRCblNqRk9iR1JEWXpkWVJ6VmpZbWxCWjBsRFFXZEpSM2hzWkVOQ2NHSnRVbXhsUTBFNVNVUkJOMWhITkdkSlEwRm5TVU5DYldJelNXZExSM2hzWkVOQ2NHUkhWblJKUnpsdFNVYzVhV0ZwTlRKWlYzZ3hXbGhOYjB0VGEyZGxNWGgxU1VOQlowbERRV2RKUTBKNldUSTVkMXBUTlRKWlYzZ3hXbE5CT1VsSGJEQmFWekEzV0VjMFowbERRV2RKUTBGblNVaE9hbUl6UW14TWJYUnNaVk5CT1VsSGJEQmFWekEzV0VjMFowbERRV2RKUTBGblNVaE9hbUl6UW14TWJXeDFXa2RXTkVsRU1HZGhWelZyV2xobmNrdDZkR05pYkhoMVNVTkJaMGxEUVdkSlEwSjVXbGhPTVdKSVVXZFFVMEpxV1ZkNGMxbHRSbXBoZVRWcVdWZDRjMHRJVW05aFdFMXpTVWhPYW1JelFteExWSFJqWW1sQlowbERRV2RKUTBGbllWZFpaMHRJU214ak0xWnpaRU5CT1ZCVU1HZFZNVkpRVlVOc1kySnBRV2RKUTBGblNVTkJaMGxEUW1samJWWm9ZWHAwWTJKc2VIVkpRMEZuU1VOQlowbERRbmxhV0U0eFlraFNla3h1UWpGak1tZHZZMjFXZW1SWGVEQkxWSFJqWW1sQlowbERRV2RKU0RGalltbEJaMGxEUWpsSlIxWnpZekpWWjJVeGVIVkpRMEZuU1VOQloyTXlUblpqUjFWMVpFaHNkMXBUUVRsSlJ6bHBZV2sxYW1JeU5YcGtTRW94V1ROU2RtTnBOWFZaVnpGc1R6RjRkVmhITkdkSlEwRm5TVU5DYzFwWVVXZGhWelZyV2xobloxQlRRWGRQTVhoMVNVTkJaMGxEUVdkYWJUbDVTVU5vYzFwWVVXZFhlVUp5V2xocmMwbElXbWhpU0Zac1NVWXdaMkl5V1dkaU1rcHhURzFXZFdSSVNuQmFXRTF2UzFOcloyVXhlSFZKUTBGblNVTkJaMGxEUW5wWk1qbDNXbE0xTWxsWGVERmFVMEU1U1VoYWFHSklWbXhQTVhoMVNVTkJaMGxEUVdkSlEwSjZXVEk1ZDFwVE5YSmFXR3RuVUZOQ2NscFlhemRZUnpSblNVTkJaMGxEUVdkSlNFNXFZak5DYkV4dGJIVmFSMVkwU1VRd1oyRlhOV3RhV0dkeVMzcDBZMkpzZUhWSlEwRm5TVU5CWjBsRFFubGFXRTR4WWtoUloxQlRRbXBaVjNoeldXMUdhbUY1TldwWlYzaHpTMGhTYjJGWVRYTkpTRTVxWWpOQ2JFdFVkR05pYVVGblNVTkJaMGxEUVdkaFYxbG5TMGhLYkdNelZuTmtRMEU1VUZRd1oxVXhVbEJWUTJ4alltbEJaMGxEUVdkSlEwRm5TVU5DYVdOdFZtaGhlblJqWW14NGRVbERRV2RKUTBGblNVTkNlVnBZVGpGaVNGSjZURzVDTVdNeVoyOWpiVlo2WkZkNE1FdFVkR05pYVVGblNVTkJaMGxJTVdOaWFVRm5TVU5DT1ZoSE5HZEpTREJuV2xkNGVscFRRamRZUnpSblNVTkJaMkZYV1dkTFIyeDFZek5TYUdKdFRteFVNbGx2WWpKS2NVeERRVzVaYlRsMllrZFdhR0pwWTNOSlEyUjFaRmN4YVZwWVNXNU1RMEZ1V1cxc2JtRlhOVEJLZVhkblNqSmFNV0p0VGpCaFZ6bDFTbmxyY0ZoSE5HZEpRMEZuU1VOQ2VWcFlVakZqYlRRM1dFYzFZMkpwUVdkSlEwSjZXVEk1ZDFwVE5UQmxXRUpzU1VRd1owdEhPV2xoYVRWcVlqSTFlbVJJU2pGWk0xSjJZMmxyWjFCNVFuWlpiVzkxV1RJNWRXTXpVbmxrVjA0d1lqTkpkV0p0Um5SYVUwRTJTVU5rVUZsdGNHeFpNMUZ1VHpGNGRWaEhOR2RKUTBGbllrZFdNRWxIZEd4bFdFMW5VRk5DVUZsdGNHeFpNMUYxWVRKV05XTjVhSFpaYlc5d1R6RjRkVWxEUVdkSlIxcDJZMmxCYjJKSFZqQkpSMnRuVUZOQmQweERRbkJpUTBFNVNVZDBiR1ZZVFhWaVIxWjFXak5TYjA5NVFuQkpSSGRuWVZkM04wbEhhM0pMZVd0blpURjRkVWxEUVdkSlEwRm5Za2RXTUVsSGRHeGxVMEZuU1VRd1oyRXlWalZqTVhSd1dGUjBZMkpwUVdkSlEwRm5TVWQ0YkdSRFFqSlpWM2d4V2xOQk9VbEhPV2xoYkhSeVdsaHNaRTh4ZUhWWVJ6Um5TVU5CWjBsRFFucFpNamwzV2xNMU1sbFhlREZhVTBFNVNVaGFhR0pJVm14UE1YaDFTVU5CWjBsRFFXZGpNazUyWTBkVmRXRXlWalZKUkRCbllUSldOVTh4ZUhWSlEwRm5TVU5CWjJNeVRuWmpSMVYxWVZjMWExcFlaMmRRVTBKd1R6RjRkVmhITkdkSlEwRm5TVU5DZVZwWVRqRmlTRkZuVUZOQ2FsbFhlSE5aYlVacVlYazFhbGxYZUhOTFNGSnZZVmhOYzBsSVRtcGlNMEpzUzFSMFkySnBRV2RKUTBGblNVZHNiVWxEYUhsYVdFNHhZa2hSWjFCVU1EbEpSazVWVkRGQmNGaEhOR2RKUTBGblNVTkJaMGxIU25sYVYwWnlUekY0ZFZoSE5HZEpRMEZuU1VOQ2VWcFlUakZpU0ZKNlRHNUNNV015WjI5amJWWjZaRmQ0TUV0VWRHTmlhVUZuU1VOQ09WaEhOR2RKU0RGallteDRkVWxEUW5sYVdGSXhZMjAwWjJOdFZucGtWM2d3WTNwMFkySnVNV05pYkhoMVZESktjVnBYVGpCTWJWSnNXbTFzZFZwV1FubGlNMEpzWTI1U2NGcFlUVzlZTW13d1dsaEthR1JIVlhOSlNIUmpZbWxCWjBveFRsVlVNVUZ1VDJsQ04xaEhOR2RKUTBGblpETktjR1JIUm1saVIxVTJTVU5CWjBsRFFtMVpWM2g2V2xONFkySnBRV2RKUTBKc1ltNVdkRnBZU21oWmJYaHNUMmxCWjBsSFdtaGlTRTVzVEVaNGRVbERRV2RKUjA1MlltMWFjRm96Vm5sWlYwcHpXbFJ2WjFwdFJuTmpNbFZ6V0VjMFowbERRV2RrYlVaelpGZFZOa2xEUVdkSlEwRm5TVU5DVkZaRk9WRk1SbmgxU1VOQ09VeEdlSFZtVTJzM1dFYzFZMkp0VmpSalJ6bDVaRU5DYW1JeU5YcGtRMEp3WkVkV2VWbFlVbXhKUkRCbldESnNNRnBZU21oa1IxVTNXRWMxWTJKdFZqUmpSemw1WkVOQ2JXUlhOV3BrUjJ4MlltbENhbUZIYkhOYVNFcHNZbXRTY0ZwdFdteGphV2htV1RKb2NHSkhVbmxhVnpSNFRFTkNabGt5YUhCaVIxSjVXbGMwZVV0VFFqZFlSelJuU1VkNGJHUkRRbXBoUjJ4eldraEtiR0pxUldkUVUwRnZTVlZHZVdOdFJqVk1iV3g2VVZoS2VWbFlhMjlZTWs1dllWZDRhMk50Vm5WTlUydHdTVVE0WjFkNVFtWlpNbWh3WWtkU2VWcFhOSGhKUmpCblQybENabGt5YUhCaVIxSjVXbGMwZUU4eGVIVkpRMEp6V2xoUloxa3lhSEJpUjFKNVdsYzBlVWxFTUdkTFEwWkNZMjVLYUdWVE5YQmpNRVo1WTIxR05VdEdPV3BoUjJ4eldraEtiR0pxU1hCTFUwRXZTVVp6WjFneVRtOWhWM2hyWTIxV2RVMXBRbVJKUkc5bldESk9iMkZYZUd0amJWWjFUV3AwWTJKc2VIVkpRMEo1V2xoU01XTnROR2RMUjFKc1dWZFNhVnBYVm0xTFF6UjFURzFPYjJGWGVHdGpiVloxVFZOclowbFVNRGxKUjFKc1dWZFNhVnBYVm0xTFF6UjFURzFPYjJGWGVHdGpiVloxVFdscmNFOHhlSFZtVm5oMVdFYzFiR1ZJUW5aamJsRm5XbTVXZFZrelVuQmlNalJuV20xV01Ga3lhRVZhVjFaM1ZVaEtkbU5IVm5sa1NHdHZZakpLY1V4RFFtWmhNbFkxVEVOQ2ExcFhXbWhrVjNnd1ZtMUdjMlJYVlhOSlIzaG9Zek5TVVZsWVNqQkxVMEkzV0VjMFowbEhiRzFKUTJoMldXMXZaMUJVTUdkaWJsWnpZa05DT0daRFFsQlpiWEJzV1ROUmRXRllUVzlVYlVaUFRFTkNkbGx0YjNCSlNIZzRTVVU1YVdGdFZtcGtRelZ3WTNsb1NtSnRXbkJpYld3d1pWTjNaMkl5U25GTFUyeGpZbWxCWjBsRFFubGFXRkl4WTIwMFowdEhlR2hqTTFKUldWaEtNRXRUUVM5SlJuTm5Xa2RXYlZsWVZuTmtSbHBvWWtoV2JFeERRblZrVjNoelNVWXdaMDlwUW10YVYxcG9aRmQ0TUZadFJuTmtWMVUzV0VjMVkySnBRV2RoVjFsblMwWTVjbHBZYTJkUVZEQm5ZbTVXYzJKRFFqaG1RMEpRV1cxd2JGa3pVWFZoV0UxdlZHMUdUMHhEUW1aaE1sWTFTMU5DT0daRFFsQlpiWEJzV1ROUmRXRllUVzlUVnpWdFlWYzFjR1JJYTNOSlJqbHlXbGhyY0V0V2VIVkpRMEZuU1VoS2JHUklWbmxpYVVGdllrZEdlbVJHUW1oamJsRndTVVE0WjFkNVFtdGFWMXBvWkZkNE1GWnRSbk5rVjFWelNVYzFNV0pIZDJkWVUwRTJTVWRTYkZwdFJqRmlTRkpYV1ZkNE1WcFVkR05pYkhoMVNVTkNjMXBZVVdkalIwWjVaRWhOTjFoSE5XTmlhVUZuWVZkWlowdEZSbmxqYlVZMVRHMXNlbEZZU25sWldHdHZXREowYkdWVGEzQkpTSFJqWW1sQlowbERRbmRaV0Vvd1kzbEJPVWxHT1hKYVdHczNXRWMwWjBsSU1HZGFWM2g2V2xOQ2NGcHBRVzlrU0d4M1dsYzViVWxHT1hKYVdHdG5VRlF3T1VsRFpIcGxWekZwWWpKM2JrdFRRamRZUnpSblNVTkJaMk5IUm5sa1NFMW5VRk5DWWtsR09YSmFXR3RuV0ZSMFkySnBRV2RtVTBKc1lraE9iRWxJZEdOaWFVRm5TVU5DYzFwWVVXZGhNbFkxU1VOQlowbERRV2RKUTBGblVGTkJiMHA1WTJkTGVVSm1ZVEpXTlV0VWRHTmlhVUZuU1VOQ2MxcFlVV2RpUjBaNlpFVnNkVnBIVmpSSlEwRm5VRk5CZDA4eGVIVkpRMEZuU1VkNGJHUkRRbk5aV0U0d1VUTldlV015T1hsSlEwRTVTVVJCTjFoSE5XTmlhVUZuU1VOQ2QxbFlTakJqZVVFNVNVWjBaRTh4ZUhWWVJ6Um5TVU5CWjB4NU9HZGFXRTV6WVZjMU1FeFhVbkJqTWtacFlrZFZkR0p0VmpSa1F6RnpZVmMxYkVsSE5YWk1WMDUyWW01T01GbFhOVEJNVjA1MlltMVNjR1JIYkhaaWJIaDFTVU5CWjBsSVpHOWhWM2hzU1VOb01HTnVWbXhMVTBJM1dFYzBaMGxEUVdkSlEwSnpXbGhSWjJGWE5XdGFXR2RuVUZOQ2NscFlhM1ZoVnpWcldsaG9VRnBwWjI1TWFXTnpTVWQ0YUdNelVrcGliVkpzWlVOck4xaEhOR2RKUTBGblNVTkNjRnBwUVc5aFZ6VnJXbGhuWjFCRFFYZExVMEkzV0VjMFowbERRV2RKUTBGblNVaENhR051VW5wTWJrSXhZekpuYjJFeVZqVk1iazR4V1c1T01HTnRiSFZhZVdoeldWaE9NRkV6Vm5sak1qbDVTMU5yTjFoSE5HZEpRMEZuU1VOQlowbEhTbmxhVjBaeVR6RjRkVWxEUVdkSlEwRm5abFo0ZFZoSE5HZEpRMEZuU1VOQ2NGcHBRVzloTWxZMVRHMU9iMWxZU2tKa1EyaHdZbTFTYkdWRFFYUkpSRVZ3U1VRd09WQlRRVzVZUm5oaldFTmpjRWxJZEdOaWFVRm5TVU5CWjBsRFFXZGlSMFo2WkVWc2RWcEhWalJKUkRCbllWYzFhMXBZWjJkTGVVRjRUekY0ZFVsRFFXZEpRMEZuU1VOQ2FtSXlOVEJoVnpVeFdsUjBZMkpwUVdkSlEwRm5TVWd4WTJKc2VIVkpRMEZuU1VOQloyTkhSbmxrU0UxMVkwaFdlbUZEYUhKYVdHdDFZek5XYVdNelVubGhWelZ1UzBkNGFHTXpVa1JrV0VwNllqTkpjMGxIYkhWYVIxWTBTMU5yTjFoSE5HZEpRMEZuU1VOQ2MxbFlUakJSTTFaNVl6STVlVWxFTUdkaVIwWjZaRVZzZFZwSFZqUkpSREJuWVZjMWExcFlaMmRMZVVGNFR6RjRkVWxEUVdkSlNERmpZbWxCWjJaV2VIVllSelJuU1VkNGJHUkRRbmRaV0Vvd1ZHbEJPVWxJUW1oamJsSjZWek5DYUdOdVVucE1iWGhzWW0xa01HRkRRWFJKUkVaa1R6RjRkVWxEUW5CYWFVRnZZMGRHZVdSSVRYVmlSMVoxV2pOU2IwbEVNRGxRVTBGM1MxWjRkVWxEUVdkSlNFcHNaRWhXZVdKcFFXOWlSMFo2WkVaQ2FHTnVVWEJKUkRoblYzbENhMXBYV21oa1YzZ3dWbTFHYzJSWFZYTkpTRUpvWTI1U1QwbEdNR2RQYVVKcldsZGFhR1JYZURCV2JVWnpaRmRWTjFoSE5XTmlhVUZuWWtkV01FbEhUakZqYmtwc1ltNVNWMWxYZURGYVUwRTVTVWM1YVdGcWRHTmlhVUZuV20wNWVVbERhSE5hV0ZGbllWTkJPVWxFUVhOSlIyeHpTVVF3WjJOSFJubGtTRTExWWtkV2RWb3pVbTlQZVVKd1NVUjNaMkZYZHpkSlIydHlTM2xyWjJVeGVIVkpRMEZuU1VkNGJHUkRRbkphV0d0blVGTkNkMWxZU2pCak1YUndXRlIwWTJKc2VIVkpRMEZuU1VkT01XTnVTbXhpYmxKWFdWZDRNVnBUUVRsSlIwNHhZMjVLYkdKdVVsZFpWM2d4V2xaMGNscFliR1JQTVhoMVNVTkJaMGxIYkcxSlEyaHFaRmhLZVZwWE5UQldiVVp6WkZkVloxQlVNR2RpYmxaellrTnNZMkpwUVdkSlEwRm5TVWhLYkdSSVZubGlhVUZ2WWtkR2VtUkdRbWhqYmxGd1NVUTRaMWQ1UW10YVYxcG9aRmQ0TUZadFJuTmtWMVZ6U1VoQ2FHTnVVazlKUmpCblQybENhMXBYV21oa1YzZ3dWbTFHYzJSWFZUZFlSelJuU1VneFkySnNlSFZKUTBKNVdsaFNNV050TkdkTFIzaG9Zek5TVVZsWVNqQkxVMEV2U1Vaeloxa3pWbmxqYlZaMVpFWmFhR0pJVm14TVEwSjNXVmhLTUZScFFtUkpSRzluV1ROV2VXTnRWblZrUmxwb1lraFdiRTh4ZUhWbVZuaDFXRWMxYkdWSVFuWmpibEZuV201V2RWa3pVbkJpTWpSbldXMXNkVnBGTVd4a1IyaDJXa2hOYjFnelFubGlNMUoyVEVOQ2VtRXliSGRWU0VwMlpFYzVla3RUUWpkWVJ6Um5TVWQ0YkdSRFFuZGpiVGt3WW5sQlowbERRV2RKUTBGblNVTkJaMUJUUW1aalNFcDJaRWM0TjFoSE5HZEpSM2hzWkVOQ2FHSklTbXhaVjFJMVZtMXNlbUZZVW14YVEwRm5VRk5DZFZwWVkyZFZNbFl3UzBOck4xaEhOV05pYVVGblpESm9jR0pIVldkTFNFSjVZak5TZGt0VFFqZFlSelJuU1VOQloySkhWakJKUjFKc1l6Sk9lV0ZZUWpCaU0wcDZTVVF3WjFReVNuRmFWMDR3VEcxa2JHUkZPVE5pYkVKNVlqTkNiR051VWpWU1IxWjZXVE5LY0dOSVVuWmpiazF2WTBoS2RtUkhPSEJQTVhoMVNVTkJaMGxIZUd4a1EwSnlXbGhzZWtsRFFXZEpRMEZuU1VOQk9VbEZPV2xoYlZacVpFTTFjbHBZYkhwTFIxSnNZekpPZVdGWVFqQmlNMHA2UzFNMWFtSXlOV3BaV0ZGdlZESktjVnBYVGpCTWJXUnNaRVU1TTJKc1FubGlNMEpzWTI1U05WVXpiSFJaYlRselkzbG9hMXBZVG1wamJXeDNaRWM1ZVdONWEzQlBNWGgxV0VjMFowbERRV2RhYlRsNVNVTm9jMXBZVVdkaFUwRTVTVVJCYzBsSGJITkpSREJuWVRKV05XTjVOWE5hVnpWdVpFZG5OMGxIYTJkUVEwSndZa1J6WjJGVGMzSkxVMEkzV0VjMFowbERRV2RKUTBKeldsaFJaMkV5VmpWSlJEQm5ZVEpXTldNeGRIQllWSFJqWW1sQlowbERRV2RKUjJ4dFNVTm9jbHBZYTJkUVZEQTVTVU5rYW1JeU5YcGtTRW94V1ROU2RtTnBZM0JZUnpSblNVTkJaMGxEUVdkSlIwNTJZbTVTY0dKdVZteFBNWGgxV0VjMFowbERRV2RKUTBKd1dtbEJiMWxYZUhsYVYwWnJaVlphY0dNeWJEQmFWMUYxWVVkR2VrdEhkR3hsVTJ0d1dFYzBaMGxEUVdkSlEwRm5TVWRPZG1KdVVuQmlibFpzVHpGNGRWaEhOR2RKUTBGblNVTkNhR0pJU214WlYxSTFWbTFzZW1GWVVteGFRelZvV2tkUmIyRXlWalZMVkhSallteDRkVWxEUVdkSlEwRm5Za2RXTUVsSVdtaGlTRlpzU1VRd1oyTklTblprUnpsaVlUSldOVmhVZEdOaWJIaDFTVU5CWjBsRFFXZE1lVGhuVlRKMGNHTkRRbmRqYlRrd1lqTlNOV05IVldkaU1sbG5WREpLY1ZwWFRqQllSelJuU1VOQlowbERRWFpNZVVKc1l6SjRjR0p1VVhSYVIyeDZXVmRLYzFwVE1YVmFXR2d3VEZkNGNHSnRWV2RpYlRoMFkwaEtkbVJIT1RCbFdFSnNURmRLTVdGWGVEQmhWelY2V0VjMFowbERRV2RKUTBKd1dtbEJiMVF5U25GYVYwNHdURzVDZVdJelVuWmtTR3gzV2xNMWIxbFlUbEJrTWpWUlkyMDVkMXBZU2pCbFUyaHlXbGhyY0VsRFdXMUpSVGxwWVcxV2FtUkROWGRqYlRrd1lqTlNOV05IVm1KaE1sWTFXRk5CT1ZCVU1HZGtiVVp6WkZkVmNGaEhOR2RKUTBGblNVTkJaMGxIVG5aaWJsSndZbTVXYkU4eGVIVllSelJuU1VOQlowbERRbkJhYVVGdlpFaHNkMXBYT1cxSlNGcG9Za2hXYkVsRFJUbFFVMEZ1V201V2RWa3pVbkJpTWpSdVMxWjRkVWxEUVdkSlEwRm5TVU5DYW1JeU5UQmhWelV4V2xSMFkySnNlSFZKUTBGblNVTkJaMlJIYUhCak1YUnlXbGhzWkVsRU1HZGtiVVp6WkZkVmRWbHRiSFZhUTJnd1lVZHNla3RVZEdOaWFVRm5TVU5DT1ZoSE5XTmlhVUZuU1VOQ2QyTnRPVEJpZVVFNVNVVTVhV0Z0Vm1wa1F6VnVXbGhTVVdOdE9UQmlNMUkxWTBkV1VGcHBhSGRqYlRrd1lubHJOMWhITkdkSlEwRm5ZVmRaWjB0SVFubGlNMUoyU1VRd09WQlRRbEJaYlhCc1dUTlJkV05JU25aa1J6a3daVmhDYkV0V2VIVkpRMEZuU1VOQloxbHVTbXhaVjNNM1dFYzFZMkpwUVdkSlEwSndXbWxCYjJNeWRIQmpSa0o1WWpOU2RtTjVRVzFLYVVKNllUSnNkMVZJU25aa1J6bDZURzFzZFZwSFZqUlVNbGx2WTBoS2RtUkhPSEJKUkRRNVNVUkJjRmhITkdkSlEwRm5TVU5DYVdOdFZtaGhlblJqWW1sQloyWldlSFZtVm5oMVdFYzFiR1ZJUW5aamJsRm5XbTVXZFZrelVuQmlNalJuWVZoT1JtSllRakJsVTJneVdWZDRNVnBUYTJkbE1YaDFTVU5DY0ZwcFFXOWtiVVp6WkZkVloxQlVNR2RpYmxaellrTnNZMkpwUVdkSlEwSjVXbGhTTVdOdE5HZGtTRW94V2xSMFkySnNlSFZKUTBKd1dtbEJiMVF5U25GYVYwNHdURzFzZWt0SVdtaGlTRlpzVEVOQ1NtSnRXbkJpYld3d1pWTnJjRmhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSMXBvWWtoT2JFOHhlSFZZUnpSblNVZHNiVWxEYUZCWmJYQnNXVE5SZFdGWVRXOWtiVVp6WkZkVmMwbEZOV2hVYVd0d1dFYzBaMGxEUVdkamJWWXdaRmhLZFVsSVVubGtWMVUzV0VjMVkySnBRV2RoVjFsblMwZHNkV016VW1oaWJVNXNWREpaYjJSdFJuTmtWMVZ6U1VOa2VtUklTbkJpYldOdVMxTnNZMkpwUVdkSlEwSjVXbGhTTVdOdE5HZEpVMmQyV0VaNFZFeDVhM1ZrUjFaNlpFTm9NbGxYZURGYVUyczNXRWMwWjBsSFZuTmpNbFZuWVZkWlowdEhiSFZqTTFKb1ltMU9iRlF5V1c5a2JVWnpaRmRWYzBsRFpIVmtWekZwV2xoSmJrdFRRVzFLYVVKd1l6QmFjR0p0YkRCYVUyZ3lXVmQ0TVZwVGEzQllSelJuU1VOQloyTnRWakJrV0VwMVNVZGFhR0pJVG14UE1YaDFTVU5DYkdKSVRteEpSMnh0U1VObmFHRlhOWHBrUjBaMVdUSldVRnBwYURKWlYzZ3hXbE4zWjBveVNuWmlNbmhzV1ZjMGJreERRVzVaYld4dVlWYzFNRXA1ZDJkS01sb3hZbTFPTUdGWE9YVktlV3RuU21sWloyTXliRFphVlRsdFMwaGFhR0pJVm14TFUwRTVVRlF3WjAxRGJHTmlhVUZuU1VOQ2VWcFlVakZqYlRSblpFaEtNVnBVZEdOaWJIaDFTVU5DZVZwWVVqRmpiVFJuV20xR2MyTXlWVGRZUnpVNVdFYzFZMkp0VmpSalJ6bDVaRU5DYldSWE5XcGtSMngyWW1sQ2NHTXdOWFprUlZaMFkwaFNOVXRJV21oaVNGWnNTMU5DTjFoSE5HZEpTRXBzWkVoV2VXSnBRV2hoV0U1R1lsaENNR1ZUTldwWlYzaHpTMGhTYjJGWVRYTkpTRnBvWWtoV2JFdFVkR05pYmpGallteDRkVnBZYUhkaU0wb3dTVWRhTVdKdFRqQmhWemwxU1VkYWMxbFlVakJhVnpWQ1kyNUthR1ZUYURKWlYzZ3hXbE5yWjJVeGVIVkpRMEp3V21sQmIwbFZSbmxqYlVZMVRHMXNlbEZZU25sWldHdHZaRzFHYzJSWFZYQkxWbmgxU1VOQlowbElTbXhrU0ZaNVltbENNbGxYZURGYVZIUmpZbXg0ZFVsRFFuTmFXRkZuWW0xV00xRllTbmxaV0d0blVGTkNZbGhVZEdOaWFVRm5XbTA1ZVVsRGFITmFXRkZuWVZOQk9VbEVRWE5KUjJ4elNVUXdaMlJ0Um5Oa1YxVjFZa2RXZFZvelVtOVBlVUp3U1VSM1oyRlhkemRKUjJ0eVMzbHJaMlV4ZUhWSlEwRm5TVWQ0YkdSRFFuQmtSMVowU1VRd1oyUnRSbk5rVjFaaVlWWXdOMWhITkdkSlEwRm5ZVmRaWjB0RlJubGpiVVkxVEcxc2VsRllTbmxaV0d0dllWaFNiR0pUYTNCWVJ6Um5TVU5CWjBsRFFuVmFXR1JDWTI1S2FHVlRRVGxKUnpWc1pEQkdlV050UmpWTWJVNTJZbTFPYUdSRGFHMWlSMFl3WkVkV2RWRllTbmxaV0d0dllWaFNiR0pUYTNCUE1YaDFTVU5CWjBsSFZuTmpNbFpqWW1sQlowbERRV2RKUnpWc1pEQkdlV050UmpWTWJrSXhZekpuYjJGWVVteGlVMnMzV0VjMFowbElNV05pYkhoMVNVTkNlVnBZVWpGamJUUm5ZbTFXTTFGWVNubFpXR3MzV0VjMU9WaEhOV05pYlZZMFkwYzVlV1JEUW0xa1Z6VnFaRWRzZG1KcFFuQmpNVnBvWWtkc2ExRXlhSEJpUjFGdldUSm9jR0pIVVhCSlNIUmpZbWxCWjJGWFdXZExSMDV2WVZkNGEwbEVNRGxKUnpVeFlrZDNjRmhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSMXBvWWtoT2JFOHhlSFZZUnpSblNVZHNiVWxEYURCbFdFSnNZakpaWjFreWFIQmlSMUZuVUZRd09VbERaR2xpTWpseldsZEdkVXA1YkdOaWFVRm5TVU5DZVZwWVVqRmpiVFJuV20xR2MyTXlWVGRZUnpWalltbEJaMkZYV1dkTFJUbHBZVzFXYW1SRE5YQmplV2hxWVVkc2MxcERkMmRUVnpWdFlWYzFjR1JJYTNCTFZuaDFTVU5CWjBsSVNteGtTRlo1WW1sQ2JWbFhlSHBhVkhSallteDRkVWxEUW5CYWFVRnZWREpLY1ZwWFRqQk1iV3g2UzBkT2IyRlhlR3RNUTBKUFdWVTBjRXRXZUhWSlEwRm5TVWhLYkdSSVZubGlhVUp0V1ZkNGVscFVkR05pYkhoMVNVTkNlVnBZVWpGamJUUm5aRWhLTVZwVWRHTmliakZqWW14NGRWcFlhSGRpTTBvd1NVZGFNV0p0VGpCaFZ6bDFTVWRzZWxOWVVteGpiVVpwWWtkV1JHRkhiSE5hUTJocVlVZHNjMXBEYTJkbE1YaDFTVU5DY0ZwcFFXOVpNbWh3WWtkUloxQlVNR2RpYmxaellrTkNPR1pEUWxCWmJYQnNXVE5SZFdGWVRXOVpNbWh3WWtkUmMwbEZOV2hVYVd0blpraDNaMVF5U25GYVYwNHdURzFzZWt0SFRtOWhWM2hyVEVOQ1NtSnRXbkJpYld3d1pWTnJjRmhITkdkSlEwRm5ZMjFXTUdSWVNuVkpSMXBvWWtoT2JFOHhlSFZZUnpSblNVaEtiR1JJVm5saWFVRnZVVmhLZVZsWWEzVmhXRTVDWTI1S2FHVlRhR3BoUjJ4eldrTnJaMlpJZDJka1NHeDNXbGM1YlVsSFRtOWhWM2hyU1VRd09WQlRRVzVpTWtweFdsZE9NRXA1UVcxS2FVRm9ZVmMxZW1SSFJuVlpNbFpRV21sb2FtRkhiSE5hUTNkblNqSktkbUl5ZUd4WlZ6UnVURU5CYm1KdVZuUlpiVlo1U25sM1owb3pUakJqYld4MVdubGpjRXRVZEdOaWJqRmpZbXg0ZFZwWWFIZGlNMG93U1VkYU1XSnRUakJoVnpsMVNVYzFkbVI1WjNCSlNIUmpZbWxCWjJGWFdXZExTRkkxWTBkV2RscHBRbmRhV0VwdFlqTktkRmxYTldwYVUwRm9VRlF3WjBvelZuVmFSMVp0WVZjMWJGcERZMmRLYVZsblpFaHNkMXBYT1cxSlNFSnNZMjFhZG1OdE1XaGliVTVzVEcwMWRtUjVRVGxRVkRCblNqSmFNV0p0VGpCaFZ6bDFTbmxzWTJKcFFXZEpRMEo1V2xoU01XTnROR2RqUjFaNVdtMDVlV0pYUm5WWk1sVjFZbTA1TTB0RGF6ZFlSelJuU1VkV2MyTXlWbU5pYVVGblNVTkNlVnBZVWpGamJUUm5Va2RHTUZwVE5YVmlNMk52UzFSMFkySnVNV05pYVVselNXazRka2xHVW05YVUwSjBZakpTTVdKSFZXZFpNa1pxWVVkV1kySnVXbWhqYVVKbVdETmtiRmx1UW1oWk1uUm1ZbGM1YTJSWGVHeFlNazVvV1RKb2JGZ3hPR2RRVTBJM1psUjBZMkpzZUhWTWVUaG5Wa2RvYkVsSVNteGpXRlp3WTIxVloxcHVWblZaTTFKd1lqSTFZMkp0V2pGaWJVNHdZVmM1ZFVsR09XWmtNbFpwWTBkR2FtRXhPWGxhV0VZeFlWaEtiRmd4T0c5aVZ6bHJaRmQ0YkZOWFVYQkpTSFJqWW14NE1FeDVPR2RSTW1oc1dUSnpaMkZYV1dkaVZ6bHJaRmQ0YkVsSGJIcEpSMngxU1VkT2FGa3lhR3hZUnpWalpFaGFhR05wUW1wWlYwNXZXbGRTVG1JeVVqRmlSMVZuVUZOQ1psZ3paR3haYmtKb1dUSjBabUpYT1d0a1YzaHNXREpPYUZreWFHeFlNVGxpWWxjNWEyUlhlR3hUVjFKa1R6RjRkVmhJVW5CYWFVRnZXVEpHYW1GSFZtdFVWemxyWkZkNGJFbERSVGxRVTBJeFltMVNiRnB0YkhWYVYxRndTVWgwWTJKc2VEQllTRko1V2xoU01XTnROR2RaTWtacVlVZFdhMVJYT1d0a1YzaHNURzFXTkdOSE9YbGtTRTAzV0VjMVkyUklNV05pYkhnd1RIazRaMUV6U214WldGSnNTVWRGWjJKdFZqTkpSekYyV2toV2MxcFRRVzlaVnpWclNVaENNV1JEUW5Ca1EwSndZbTVTZGtsSVVtOWFVMEpxV1ZkT2IxcFRiR05pYkhnd1pHMUdlVWxITVhaYVNGWnpXbE5CT1VsR09XWmtNbFpwWTBkR2FtRXhPWFJpTWxJeFlrZFdabGt5Um1waFIxWm1XREYwZEdJeVVqRmlSMVpLV2tZd1oxQlRRamRZUnpWalpFWjRNRXg1T0dkaWJUaG5ZbGM1YTJSWGVHeE1iV3hyU1VjMWJGcFhVbXhhUm5oMVdFaFNZMlJET0haSlJ6VjJTVWN4ZGxwSVZuTmFVelZ6WWpKR2ExcFhVV2RpYlZac1drZFdhMWhITldOa1JuZ3dXbGhvZDJJelNqQmplbTluWlRNeFkySnNlREJtVkhSallteDRkVmhJVVhaTWVVSkdaVWRXYW1SWVVteEpTRkp2V2xOQ2RHSXlVakZpUjFWbldtNVdkVmt6VW5CaU1qVmpZbXg0TUZneE9UTmFWMHAzV1ZkT2NsZ3lNWFphU0ZaeldsaE9abGd4ZEhSaU1sSXhZa2RXU2xwR01IVlpNa1p6WWtOb2RHSXlVakZpUjFWMVdsaG9kMkl6U2pCamVYZG5ZbGM1YTJSWGVHeE1RMEowWWpKU01XSkhWWFZhV0doM1lqTktNR041ZDJkWU1Ua3pXbGRLZDFsWFRuSllNMHBzWTFoV2NHTnRWbVpZZVdzM1dFYzFZMkpzZURCTWVUaG5WVzFXTUdSWVNuVkpTRkp2V2xOQ2JHVklRblpqYmxKNlNVYzViVWxJVW05YVUwSjBZakpTTVdKSFZtTmliSGd3WTIxV01HUllTblZKUnpGMldraFdjMXBUTld4bFNFSjJZMjVTZWs4eGVIVm1WbmgxV0VjMGFVeERTWFpNZVVKcldsZGFjR0p0VldkYU1sWXdaRWRXZVVsSFdqRmliVTR3WVZjNWRXTjVRbTFpTTBsbllVZEdlV0pYT1hWbFUwSnNaVWhDZG1OdVVucFlSelZtV0ROa2JGbHVRbWhaTW5SbVkyMVdlR1JYYkhsYVZqbG1URzFSWjFCVFFXOWFXR2gzWWpOS01HTjVkMmRhUjFadFlWYzFjR1JIYkhaaWFXdG5VRlEwWjJVeGVIVllTRkp0WWpOSmIyUnRSbmxKUjNSc1pWTkNjR0pwUW10YVYxcHdZbTFzTUdGWE9YVkxVMEkzV0VjMVkyUkdlREJoVjFsdldERTVNMXBYU25kWlYwNXlXRE5LYkdOWVZuQmpiVlptV0hrMWRrdEhVbXhhYld4MVlWaFNjR0l5TkhOSlIzUnNaVk5yWjBwcFdXZEpWamxtWkRKV2FXTkhSbXBoTVRsNVdsaEdNV0ZZU214WU1UaDFZbmxvYkdWSVFuWmpibEo2VEVOQ2NscFlhM0JMVTBJM1dFYzFZMlJHZURCWVNGSlFXVzF3YkZrelVYVmFSMVp0WVZjMWJGVklTblpqUjFaNVpFaHJiMXBZYUhkaU0wb3dZM2wzWjJFeVZqVk1RMEkzU1VkV2RXUlhNV3hqYlVacFlrZFZOa2xJVW5sa1YxVnpTVWRrYkdSRWIyZGFSMVp0WVZjMWNHUkhiSFppYkhSeVdsaHNaRWxJTUhCUE1YaDFXRWhTWTJSSU1XTmliSGd3WmxaNGRXWlVjMmxNUTBwbVdETmtiRmx1UW1oWk1uUm1ZMjFXZUdSWGJIbGFWamxtVEcxaloxQlRRVzlhYmxaMVdUTlNjR0l5Tkc5TFUwSTNXRWMxWTJSSGJHMUpRMmd3WlZoQ2JHSXlXV2RhTW5oMldXMUdjMVpIYUhCamVVRTVVRlF3WjBveU9XbGhiVlpxWkVOamNFbElTbXhrU0ZaNVltbENibUpIT1dsWlYzaFZZVWRzZWs4eGVIVllTRkl3WTI1cloyVXhlSFZZU0ZKalpFaEtiR1JJVm5saWFVSXdZVWRzZWtsSWVEaEpSelZzWkhsQ1IyUlhOV3BrUjJ4MlltbG5ibU50VmpCa1dFcDFTVWhTYjJGWVRXNUxVMmR3VHpGNGRWaElVamxKUjA1b1pFZE9iMGxEYUd4TFUwSTNXRWMxWTJSR2VEQmhWMWxuUzBoU05XTkhWblphYVVJellWYzFhMkl6WTJkUVZEQTVTVU5rZGxsdGNHeFpNMUZ1UzFOQ2VWcFlVakZqYlRSblpESnNkVnBIT1ROUE1YaDFXRWhTT1ZoSE5UbExVMmR3VDNsSmMwbHNPV1prTWxacFkwZEdhbUV4T1hsYVdFWXhZVmhLYkZneE9IVmllVUU1U1VOb2RsbHRiM05KU0VKNVlqTkJjRWxFTUN0SlEyaFFXVzF3YkZrelVYVmpTRXAyWkVjNU1HVllRbXhNYldob1l6QTVNMkpzUW5saU0wSnNZMjVTTlV4dFRtaGlSM2R2WWpKS2NVeERRbmRqYlRsM1MxTnJhVXhEU1haTWVVSnJXbGRhY0dKdFZXZFlNVGxzWXpBeGRscElWbk5hVTBKMlltbENiR1ZJUW5aamJsSjZXRWMxWmxnelpHeFpia0pvV1RKMFptTnRWbmhrVjJ4NVdsWTVaa3h1U1dkUVUwRnZXbGhvZDJJelNqQmplV3RuVUZRMFoyVXhlSFZZU0ZKd1dtbG9NR1ZZUW14aU1sbG5WVE5zZEZsdE9YTkpRMFU1VUZOQmJtUlhOV3RhVjFwd1ltMVdhMHA1UVcxS2FVSlVaVmN4YVdJeWQzVmtSemxVWkVoS2NHSnRaRlZaVjJOd1NVaDBZMkpzZURCWVNGSlFXVzF3YkZrelVYVmFSMVp0WVZjMWJGVklTblpqUjFaNVpFaHJiMXBZYUhkaU0wb3dZM2wzWjFVemJIUlpiVGx6VEc1U2RsVXpVbmxoVnpWdVZrZEdia3hEUWpkSlNGcG9Za2hXYkU5cFFXNVVWemxyWkZkNGJFcDVRamxMVkhSallteDRNR1pXZUhWWVNGSlFXVzF3YkZrelVYVmFSMVp0WVZjMWJGVklTblpqUjFaNVpFaHJiMXBZYUhkaU0wb3dZM2wzWjBveE9XWmFXRTVPWWpKU01XSkhWVzVNUTBJM1NVaGFhR0pJVm14UGFVSXdZMjVXYkVsSU1IQlBNWGgxWmxSemFVeERTbkJpV0VKMlkyNVJaMlV4ZUhWSlEwSkxVMVZLWmxGclJsTlZhMVpQVEVaNGRVbERRa3RUVlVwbVZVWktVRmRHYTNOWVJ6Um5TVVZ3U2xGcGVHTmlhVUZuVTIxc2FVeEdlSFZKUTBKdFdWZE9NR0l6U2pWTVJuaDFTVU5CYTB4R2VIVkpRMEp3WXpCd2NGbHRiSHBoUTNoalltbEJaMWt5T1hWak0xSjVaRmRPTUZOdGJHbE1SbmgxU1VOQ2VWcFlUblppU0Zwc1VUSm9jR0pIVW5sYVZ6UnpXRWMxT1VsSFdubGlNakJuU25rMGRtRnRiR2xNYlhCNlNucDBZMkpzZUhWYVdHaDNZak5LTUVsSFRuWmliazR3U1VWd2NGbHVUV2RRVTBJM1dFYzBaMGxGY0VwUmJEbERVVlpLVTFKVk5ITllSelJuU1VWd1NsRnNPVkZWYXpsWlYxTjRZMkpwUVdkVGEyeERURVo0ZFVsRFFrdGhWMGx6V0VjMFowbEhiSHBUYld4cFlWaE9iMHhHZUhWSlEwSnFZakkxZW1SSVNqRlpNMUpMWVZkSmMxaEhOR2RKU0Vwc1l6STVjMlJ0VmtSaFIyeHpXa2hLYkdKcGVHTmliakEzV0VjMVkySnRiSFJqUnpsNVpFTkNOMWhITkdkSlJsWlJVa1ZHVlZKV09VWldhMVpQVmtONFkySnBRV2RWVmxaR1ZsVldabFpXUWtWUlZsSkdXREF4UmxaRmFGQlNRM2hqWW1sQloxSnJlRlpWTUdobVZsWkNSVkZXVWtaWU1ERkdWa1ZvVUZKRGVHTmlhVUZuVTFVMVNsWkdPVTVTVmxKSlZEQlJjMWhITkdkSlJrNU1VMVpDWmxVeFVrSldSVlptVmxaQ1JWRldVa1pWZVhoalltbEJaMVZGVms5U1JXeFBVakU1VkZaRlJsVlNWamxXVlVWU1FsWkZWWE5ZUnpSblNVVjRRbFV4VW1aVmExWlBVa1ZXVTFneFVrcFVWVlZ6V0VjMFowbEdRbE5TVmxwS1ZERldWRmd4VGxWUlZsSkdURVo0ZFZoSE5HZEpSVTUyWWxoQ2RtSnRWblZrUTNoalltNHdaMXB1U25aaVUwRnVUR2s1YW1JeU1YZGlNalZzWW01UmRXRnVUVzVQTVhoMVdFYzFiR1ZJUW5aamJsRm5XVEk1ZFdNelVXZFJNamwwWTBjNWRWcFhOVEJqZVVFNVNVaDBZMkpwUVdkV1ZrSkZVVlpTUmxnd1ZsZFNWVFZWVEVaNGRVbERRbEpXVlZaV1VsWTVWbFZGVWtKV1JWWm1WRlZXVlZORk9VVk1SbmgxU1VOQ1IxUkdWbFJUUmpsV1ZVVlNRbFpGVm1aVVZWWlZVMFU1UlV4R2VIVkpRMEpLVkd0c1ZWZ3dNVVpXUldoUVVrTjRZMkpwUVdkVk1IUktWVVk1VkZaRlJsVlNWamxXVlVWU1FsWkZWbFJNUm5oMVNVTkNVVkpWTlVWVFZUVklXREZPVlZGV1VrWllNVlpSVWtWR1ZWSlRlR05pYVVGblZFVkdWRlpHT1ZOU1ZUVkZVbFpLWmxaRmJFNVNVM2hqWW1sQloxVkdTa1pXYTJ4UVZsWk9abFV4VWtKV1JWVnpXRWMxT1U4eGVIVllSelZ3WWxoQ2RtTnVVV2RsTVhoMVNVTkNSMVF4U2tSU1ZqbFRVbFZhVFZReFkzTllSelJuU1VaS2RtSXpVazlpTWxKc1RFWjRkVWxEUWxOYVZ6VnJXbGhLYkdOcGVHTmlhVUZuVlcwNWRtUkZWbk5hVnpGc1ltNVJjMWhITkdkSlJVNTJZbGN4YkdKdVVrWmlSMVowV2xjMU1FeEdlSFZKUTBKUFdWaFNjR1J0VmtaaVIxWjBXbGMxTUV4R2VIVkpRMEpSWWpOS01GbFhlRVppUjFaMFdsYzFNRXhHZUhWSlEwSlZXbGhvTUZKWGVHeGlWMVoxWkVONFkySnVNR2RhYmtwMllsTkJia3hwT1hsYVZ6VnJXbGhLYkdOdVRYWmhWelZyV2xobmRXRnVUVzVQTVhoMVdFYzFiR1ZJUW5aamJsRm5XVEk1ZFdNelVXZFZiVloxV2tkV2VWcFlTbnBKUkRCblpURjRkVWxEUWtSVU1EVlZVbFpvVlZnd2JFVlBhVUpUWWpJNU1GUnRPV3RhVXpWRVZEQTFWVkpXYUZWWU1HeEZURVo0ZFVsRFFrZFVNVXBFVWxZNVUxSlZXazFVTVdOeldFYzBaMGxHU25aaU0xSlBZakpTYkV4R2VIVkpRMEpUV2xjMWExcFlTbXhqYVhoalltbEJaMVZ0T1haa1JWWnpXbGN4YkdKdVVYTllSelJuU1VWT2RtSlhNV3hpYmxKR1lrZFdkRnBYTlRCTVJuaDFTVU5DVDFsWVVuQmtiVlpHWWtkV2RGcFhOVEJNUm5oMVNVTkNVV0l6U2pCWlYzaEdZa2RXZEZwWE5UQk1SbmgxU1VOQ1ZWcFlhREJTVjNoc1lsZFdkV1JEZUdOaWJqQTNXRWMxWTJKdFZqUmpSemw1WkVOQmNVbEhSbnBKUmxZd1lWZDRla2xIV25saU1qQm5TbmswZG1SWVVuQmlTRTExWVc1TmJrOHhlSFZhV0doM1lqTktNRWxJYzJkYVIxWnRXVmhXYzJSRFFtaGplVUpyV2xkR2ExbHRWbXhhYVVJNVNVZGFlV0l5TUdkS01sSnNXVmRTYVZwWFZtMUtlblJqWW14NGRWcFlhSGRpTTBvd1NVaDBZMkpwUVdkYWJVWnFaRWM1ZVdWVGVHTmlhVUZuU2tONFkySnBRV2RSTWpsMFkwYzVkVnBYTlRCTVJuaDFabFIwWTJKcFNtUk1RMHAxV1ZjeGJHTjVTVFpYTVRCelNXNU9kbVJZU21wYVZrcDJZak5SYVU5cFNXbG1VVDA5SWl3aUx5OGdWR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVkbUZ5SUY5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWTJGamFHVmZYeUE5SUh0OU8xeHVYRzR2THlCVWFHVWdjbVZ4ZFdseVpTQm1kVzVqZEdsdmJseHVablZ1WTNScGIyNGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWh0YjJSMWJHVkpaQ2tnZTF4dVhIUXZMeUJEYUdWamF5QnBaaUJ0YjJSMWJHVWdhWE1nYVc0Z1kyRmphR1ZjYmx4MGRtRnlJR05oWTJobFpFMXZaSFZzWlNBOUlGOWZkMlZpY0dGamExOXRiMlIxYkdWZlkyRmphR1ZmWDF0dGIyUjFiR1ZKWkYwN1hHNWNkR2xtSUNoallXTm9aV1JOYjJSMWJHVWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVYSFJjZEhKbGRIVnliaUJqWVdOb1pXUk5iMlIxYkdVdVpYaHdiM0owY3p0Y2JseDBmVnh1WEhRdkx5QkRjbVZoZEdVZ1lTQnVaWGNnYlc5a2RXeGxJQ2hoYm1RZ2NIVjBJR2wwSUdsdWRHOGdkR2hsSUdOaFkyaGxLVnh1WEhSMllYSWdiVzlrZFd4bElEMGdYMTkzWldKd1lXTnJYMjF2WkhWc1pWOWpZV05vWlY5ZlcyMXZaSFZzWlVsa1hTQTlJSHRjYmx4MFhIUXZMeUJ1YnlCdGIyUjFiR1V1YVdRZ2JtVmxaR1ZrWEc1Y2RGeDBMeThnYm04Z2JXOWtkV3hsTG14dllXUmxaQ0J1WldWa1pXUmNibHgwWEhSbGVIQnZjblJ6T2lCN2ZWeHVYSFI5TzF4dVhHNWNkQzh2SUVWNFpXTjFkR1VnZEdobElHMXZaSFZzWlNCbWRXNWpkR2x2Ymx4dVhIUmZYM2RsWW5CaFkydGZiVzlrZFd4bGMxOWZXMjF2WkhWc1pVbGtYU2h0YjJSMWJHVXNJRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLVHRjYmx4dVhIUXZMeUJTWlhSMWNtNGdkR2hsSUdWNGNHOXlkSE1nYjJZZ2RHaGxJRzF2WkhWc1pWeHVYSFJ5WlhSMWNtNGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNTlYRzVjYmlJc0lpOHZJR1JsWm1sdVpTQm5aWFIwWlhJZ1puVnVZM1JwYjI1eklHWnZjaUJvWVhKdGIyNTVJR1Y0Y0c5eWRITmNibDlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNBOUlDaGxlSEJ2Y25SekxDQmtaV1pwYm1sMGFXOXVLU0E5UGlCN1hHNWNkR1p2Y2loMllYSWdhMlY1SUdsdUlHUmxabWx1YVhScGIyNHBJSHRjYmx4MFhIUnBaaWhmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG04b1pHVm1hVzVwZEdsdmJpd2dhMlY1S1NBbUppQWhYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV2S0dWNGNHOXlkSE1zSUd0bGVTa3BJSHRjYmx4MFhIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCclpYa3NJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWjJWME9pQmtaV1pwYm1sMGFXOXVXMnRsZVYwZ2ZTazdYRzVjZEZ4MGZWeHVYSFI5WEc1OU95SXNJbDlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YnlBOUlDaHZZbW9zSUhCeWIzQXBJRDArSUNoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2IySnFMQ0J3Y205d0tTa2lMQ0l2THlCa1pXWnBibVVnWDE5bGMwMXZaSFZzWlNCdmJpQmxlSEJ2Y25SelhHNWZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbklnUFNBb1pYaHdiM0owY3lrZ1BUNGdlMXh1WEhScFppaDBlWEJsYjJZZ1UzbHRZbTlzSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCVGVXMWliMnd1ZEc5VGRISnBibWRVWVdjcElIdGNibHgwWEhSUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5MQ0I3SUhaaGJIVmxPaUFuVFc5a2RXeGxKeUI5S1R0Y2JseDBmVnh1WEhSUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dKMTlmWlhOTmIyUjFiR1VuTENCN0lIWmhiSFZsT2lCMGNuVmxJSDBwTzF4dWZUc2lMQ0psZUhCdmNuUWdleUJFVDAxU1pXNWtaWEpsY2lCOUlHWnliMjBnSnk0dlpHOXRMWEpsYm1SbGNtVnlMbXB6Snp0Y2JtVjRjRzl5ZENBcUlHWnliMjBnSjJwcFluTW5PMXh1SWwwc0ltNWhiV1Z6SWpwYlhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOSIsImNvbnN0IGNhY2hlTWFwICAgICAgICAgID0gbmV3IE1hcCgpO1xuY29uc3QgcmVzb3VyY2VSZXNvbHZlcnMgPSBuZXcgU2V0KCk7XG5jb25zdCByZXNvdXJjZUhhbmRsZXJzICA9IG5ldyBTZXQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlc291cmNlUmVzb2x2ZXIoY2FsbGJhY2spIHtcbiAgcmVzb3VyY2VSZXNvbHZlcnMuYWRkKGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVJlc291cmNlUmVzb2x2ZXIoY2FsbGJhY2spIHtcbiAgcmVzb3VyY2VSZXNvbHZlcnMuZGVsZXRlKGNhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlc291cmNlSGFuZGxlcih0ZXN0LCBjYWxsYmFjaykge1xuICBsZXQgcmVzb3VyY2VPYmogPSB7IHRlc3QsIGNhbGxiYWNrIH07XG4gIHJlc291cmNlSGFuZGxlcnMuYWRkKHJlc291cmNlT2JqKTtcblxuICByZXR1cm4gcmVzb3VyY2VPYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVSZXNvdXJjZUhhbmRsZXIocmVzb3VyY2VPYmopIHtcbiAgcmVzb3VyY2VIYW5kbGVycy5kZWxldGUocmVzb3VyY2VPYmopO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVJlc291cmNlUGF0aChyZXNvdXJjZVBhdGgpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gcmVzb3VyY2VQYXRoO1xuXG4gIGZvciAobGV0IHJlc29sdmVyIG9mIHJlc291cmNlUmVzb2x2ZXJzKVxuICAgIGN1cnJlbnRQYXRoID0gcmVzb2x2ZXIoY3VycmVudFBhdGgpO1xuXG4gIHJldHVybiBjdXJyZW50UGF0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGphdmFzY3JpcHRIYW5kbGVyKHJlc291cmNlUGF0aCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXZhbFxuICByZXR1cm4gZXZhbChgKGltcG9ydCgnJHtyZXNvdXJjZVBhdGgucmVwbGFjZSgvJy9nLCAnXFxcXFxcJycpfScpKWApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3NzSGFuZGxlcihyZXNvdXJjZVBhdGgsIHsgbWVkaWEgPSAnc2NyZWVuJyB9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cbiAgICBsaW5rVGFnLm9ubG9hZCA9ICgpID0+IHJlc29sdmUobGlua1RhZyk7XG4gICAgbGlua1RhZy5vbmVycm9yID0gKGVycm9yKSA9PiByZWplY3QoZXJyb3IpO1xuXG4gICAgbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XG4gICAgbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICBsaW5rVGFnLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gICAgbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCByZXNvdXJjZVBhdGgpO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVSZXNvdXJjZShyZXNvdXJjZVBhdGgsIF9vcHRpb25zKSB7XG4gIGxldCBvcHRpb25zID0gX29wdGlvbnMgfHwge307XG5cbiAgZm9yIChsZXQgaGFuZGxlciBvZiByZXNvdXJjZUhhbmRsZXJzKSB7XG4gICAgbGV0IHsgdGVzdCwgY2FsbGJhY2sgfSA9IGhhbmRsZXI7XG4gICAgaWYgKCF0ZXN0KHJlc291cmNlUGF0aCwgb3B0aW9ucykpXG4gICAgICBjb250aW51ZTtcblxuICAgIGxldCByZXN1bHQgPSBjYWxsYmFjayhyZXNvdXJjZVBhdGgsIG9wdGlvbnMpO1xuICAgIGlmIChyZXN1bHQpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBqaWJzLWh0bWwtcmVuZGVyZXI6bG9hZDogVW5rbm93biByZXNvdXJjZSBcIiR7cmVzb3VyY2VQYXRofVwiLiBJIGRvbid0IGtub3cgaG93IHRvIGhhbmRsZSB0aGlzIHJlc291cmNlIHR5cGUuIFBsZWFzZSBhZGQgYSByZXNvdXJjZSBoYW5kbGVyIHRvIG1hbmFnZSB0aGlzIHJlc291cmNlIHR5cGUuYCk7XG59XG5cbmZ1bmN0aW9uIGxvYWQoX3Jlc291cmNlUGF0aCwgb3B0aW9ucykge1xuICBsZXQgcmVzb3VyY2VQYXRoICA9IHJlc29sdmVSZXNvdXJjZVBhdGgoX3Jlc291cmNlUGF0aCk7XG4gIGxldCBjYWNoZSAgICAgICAgID0gY2FjaGVNYXAuZ2V0KHJlc291cmNlUGF0aCk7XG5cbiAgaWYgKGNhY2hlKVxuICAgIHJldHVybiBjYWNoZTtcblxuICBsZXQgcHJvbWlzZSA9IGhhbmRsZVJlc291cmNlKHJlc291cmNlUGF0aCwgb3B0aW9ucykudGhlbigoX3Jlc291cmNlKSA9PiB7XG4gICAgbGV0IHJlc291cmNlID0gX3Jlc291cmNlO1xuICAgIGlmIChyZXNvdXJjZSAmJiByZXNvdXJjZS5kZWZhdWx0KVxuICAgICAgcmVzb3VyY2UgPSByZXNvdXJjZS5kZWZhdWx0O1xuXG4gICAgY2FjaGVNYXAuc2V0KHJlc291cmNlUGF0aCwgcmVzb3VyY2UpO1xuXG4gICAgcmV0dXJuIHJlc291cmNlO1xuICB9KTtcblxuICAvLyBTZXQgcHJvbWlzZSBhcyBjYWNoZSBzb1xuICAvLyBhbGwgcHJvbWlzZXMgZnJvbSBtdWx0aXBsZVxuICAvLyBsb2FkIHJlcXVlc3RzIGFyZSBjb25zaXN0ZW50XG4gIGNhY2hlTWFwLnNldChyZXNvdXJjZVBhdGgsIHByb21pc2UpO1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2FkLCB7XG4gIGFkZFJlc29sdmVyOiB7XG4gICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiAgICAgICAgYWRkUmVzb3VyY2VSZXNvbHZlcixcbiAgfSxcbiAgcmVtb3ZlUmVzb2x2ZXI6IHtcbiAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6ICAgICAgICByZW1vdmVSZXNvdXJjZVJlc29sdmVyLFxuICB9LFxuICByZXNvbHZlOiB7XG4gICAgd3JpdGFibGU6ICAgICB0cnVlLFxuICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiAgICAgICAgcmVzb2x2ZVJlc291cmNlUGF0aCxcbiAgfSxcbiAgamF2YXNjcmlwdEhhbmRsZXI6IHtcbiAgICB3cml0YWJsZTogICAgIHRydWUsXG4gICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6ICAgICAgICBqYXZhc2NyaXB0SGFuZGxlcixcbiAgfSxcbiAgY3NzSGFuZGxlcjoge1xuICAgIHdyaXRhYmxlOiAgICAgdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiAgIGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogICAgICAgIGNzc0hhbmRsZXIsXG4gIH0sXG59KTtcblxuYWRkUmVzb3VyY2VIYW5kbGVyKChyZXNvdXJjZVBhdGgsIG9wdGlvbnMpID0+IHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2phdmFzY3JpcHQnKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiAoL1xcLlttY10/anMkL2kpLnRlc3QocmVzb3VyY2VQYXRoKTtcbn0sIGphdmFzY3JpcHRIYW5kbGVyKTtcblxuYWRkUmVzb3VyY2VIYW5kbGVyKChyZXNvdXJjZVBhdGgsIG9wdGlvbnMpID0+IHtcbiAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2NzcycpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuICgvXFwuY3NzJC9pKS50ZXN0KHJlc291cmNlUGF0aCk7XG59LCBjc3NIYW5kbGVyKTtcblxuZXhwb3J0IHtcbiAgbG9hZCxcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IERPTVJlbmRlcmVyLCBVdGlscywgUmVuZGVyZXJzIH0gZnJvbSAnamlicy1kb20tcmVuZGVyZXInO1xuZXhwb3J0ICogZnJvbSAnamlicy1kb20tcmVuZGVyZXInO1xuXG5jb25zdCB7XG4gIE5hdGl2ZUVsZW1lbnQsXG4gIFRleHRFbGVtZW50LFxuICBQb3J0YWxFbGVtZW50LFxuICBGT1JDRV9SRUZMT1csXG59ID0gUmVuZGVyZXJzO1xuXG5leHBvcnQgY2xhc3MgSFRNTFJlbmRlcmVyIGV4dGVuZHMgRE9NUmVuZGVyZXIge1xuICBjb25zdHJ1Y3Rvcihyb290RWxlbWVudCwgX29wdGlvbnMpIHtcbiAgICBzdXBlcihyb290RWxlbWVudCk7XG5cbiAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgIGRvY3VtZW50OiAodGhpcy5yb290RWxlbWVudCAmJiB0aGlzLnJvb3RFbGVtZW50Lm93bmVyRG9jdW1lbnQpLFxuICAgICAgLi4uKF9vcHRpb25zIHx8IHt9KSxcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgJ29wdGlvbnMnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgIH0sXG4gICAgICAnZXZlbnRCaW5kaW5ncyc6IHtcbiAgICAgICAgd3JpdGFibGU6ICAgICBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogICBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6ICAgICAgICBuZXcgV2Vha01hcCgpLFxuICAgICAgfSxcbiAgICAgICdlbGVtZW50SURNYXAnOiB7XG4gICAgICAgIHdyaXRhYmxlOiAgICAgZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6ICAgZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAgICAgICAgbmV3IE1hcCgpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldERvY3VtZW50KGNvbnRleHQpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAob3B0aW9ucy5kb2N1bWVudClcbiAgICAgIHJldHVybiBvcHRpb25zLmRvY3VtZW50O1xuXG4gICAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSA/IGRvY3VtZW50IDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0V2luZG93KGNvbnRleHQpIHtcbiAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50KGNvbnRleHQpO1xuICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgbGV0IHdpbmRvdyA9IChkb2N1bWVudC5wYXJlbnRXaW5kb3cgfHwgZG9jdW1lbnQuZGVmYXVsdFZpZXcpO1xuICAgICAgaWYgKHdpbmRvdylcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG5cbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldEVsZW1lbnRGcm9tQ2FjaGUoY29udGV4dCwgZWxlbWVudE9ySUQpIHtcbiAgICBsZXQgd2luZG93ICAgICAgICAgID0gdGhpcy5nZXRXaW5kb3coY29udGV4dCk7XG4gICAgbGV0IHZpcnR1YWxFbGVtZW50ICA9IChlbGVtZW50T3JJRCAmJiB0aGlzLmVsZW1lbnRJRE1hcC5nZXQoZWxlbWVudE9ySUQuaWQpKSB8fCB0aGlzLmVsZW1lbnRJRE1hcC5nZXQoZWxlbWVudE9ySUQpO1xuICAgIGlmICghdmlydHVhbEVsZW1lbnQgJiYgKGVsZW1lbnRPcklEIGluc3RhbmNlb2Ygd2luZG93Lk5vZGUpKVxuICAgICAgcmV0dXJuIHsgZWxlbWVudDogZWxlbWVudE9ySUQgfTtcblxuICAgIHJldHVybiB2aXJ0dWFsRWxlbWVudDtcbiAgfVxuXG4gIGFkZEVsZW1lbnRUb0NhY2hlKHZpcnR1YWxFbGVtZW50KSB7XG4gICAgaWYgKCF2aXJ0dWFsRWxlbWVudClcbiAgICAgIHJldHVybjtcblxuICAgIGlmICh2aXJ0dWFsRWxlbWVudC5lbGVtZW50KVxuICAgICAgdGhpcy5lbGVtZW50SURNYXAuc2V0KHZpcnR1YWxFbGVtZW50LmVsZW1lbnQsIHZpcnR1YWxFbGVtZW50KTtcblxuICAgIGlmICh2aXJ0dWFsRWxlbWVudC5pZClcbiAgICAgIHRoaXMuZWxlbWVudElETWFwLnNldCh2aXJ0dWFsRWxlbWVudC5pZCwgdmlydHVhbEVsZW1lbnQpO1xuICB9XG5cbiAgcmVtb3ZlRWxlbWVudEZyb21DYWNoZSh2aXJ0dWFsRWxlbWVudCkge1xuICAgIGlmICghdmlydHVhbEVsZW1lbnQpXG4gICAgICByZXR1cm47XG5cbiAgICBpZiAodmlydHVhbEVsZW1lbnQuZWxlbWVudClcbiAgICAgIHRoaXMuZWxlbWVudElETWFwLmRlbGV0ZSh2aXJ0dWFsRWxlbWVudC5lbGVtZW50KTtcblxuICAgIGlmICh2aXJ0dWFsRWxlbWVudC5pZClcbiAgICAgIHRoaXMuZWxlbWVudElETWFwLmRlbGV0ZSh2aXJ0dWFsRWxlbWVudC5pZCk7XG4gIH1cblxuICBfZmxhdHRlbkFuZEZpbHRlclN0eWxlcyhjb250ZXh0LCBzdHlsZXMpIHtcbiAgICBpZiAoIXN0eWxlcyB8fCBzdHlsZXMgPT09IHRydWUgfHwgT2JqZWN0LmlzKHN0eWxlcywgSW5maW5pdHkpIHx8IE9iamVjdC5pcyhzdHlsZXMsIE5hTikpXG4gICAgICByZXR1cm47XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZXMpKSB7XG4gICAgICBsZXQgZmluYWxTdHlsZXMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHN0eWxlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHN0eWxlc1tpXTtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICB2YWx1ZSA9IHRoaXMuX2ZsYXR0ZW5BbmRGaWx0ZXJTdHlsZXMoY29udGV4dCwgc3R5bGVzW2ldKTtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgICAgICAgZmluYWxTdHlsZXMgPSBmaW5hbFN0eWxlcy5jb25jYXQodmFsdWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgZmluYWxTdHlsZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaW5hbFN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgX3BhcnNlQ1NTU3R5bGVTdHJpbmcoY29udGV4dCwgc3R5bGVTdHIpIHtcbiAgICBjb25zdCBuYW1lVG9Qcm9wZXJ0eU5hbWUgPSAobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIG5hbWUucmVwbGFjZSgvXlteYS16QS1aXSsvLCAnJykucmVwbGFjZSgvW15hLXpBLVowLTldKFthLXpBLVowLTktXSkvZywgKG0sIHApID0+IHtcbiAgICAgICAgcmV0dXJuIHAudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBsZXQgc3R5bGVPYmogPSB7fTtcblxuICAgIChzdHlsZVN0ciArICcnKS5yZXBsYWNlKC8oW2EtekEtWjAtOS1dKylcXHMqOlxccyooW147XSspL2csIChtLCBuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgc3R5bGVPYmpbbmFtZVRvUHJvcGVydHlOYW1lKG5hbWUpXSA9IHZhbHVlLnJlcGxhY2UoL15bJ1wiXS8sICcnKS5yZXBsYWNlKC9bJ1wiXSQvLCAnJyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3R5bGVPYmo7XG4gIH1cblxuICBfcGFyc2VTdHlsZXMoY29udGV4dCwgc3R5bGVzKSB7XG4gICAgaWYgKCFzdHlsZXMpXG4gICAgICByZXR1cm4ge307XG5cbiAgICBsZXQgZmluYWxTdHlsZU9iaiA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHN0eWxlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICBsZXQgdmFsdWUgPSBzdHlsZXNbaV07XG4gICAgICBpZiAoIXZhbHVlIHx8IFV0aWxzLmluc3RhbmNlT2YodmFsdWUsICdudW1iZXInLCAnYm9vbGVhbicsICdiaWdpbnQnLCAnZnVuY3Rpb24nKSlcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGlmIChVdGlscy5pbnN0YW5jZU9mKHZhbHVlLCAnc3RyaW5nJykpXG4gICAgICAgIGZpbmFsU3R5bGVPYmogPSBPYmplY3QuYXNzaWduKGZpbmFsU3R5bGVPYmosIHRoaXMuX3BhcnNlQ1NTU3R5bGVTdHJpbmcoY29udGV4dCwgdmFsdWUpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgZmluYWxTdHlsZU9iaiA9IE9iamVjdC5hc3NpZ24oZmluYWxTdHlsZU9iaiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5hbFN0eWxlT2JqO1xuICB9XG5cbiAgX2ZsYXR0ZW5TdHlsZXMoY29udGV4dCwgX3N0eWxlcykge1xuICAgIGxldCBzdHlsZXMgPSB0aGlzLl9mbGF0dGVuQW5kRmlsdGVyU3R5bGVzKGNvbnRleHQsIF9zdHlsZXMpO1xuICAgIGlmICghc3R5bGVzKVxuICAgICAgcmV0dXJuIHt9O1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHN0eWxlcykpXG4gICAgICBzdHlsZXMgPSBbIHN0eWxlcyBdO1xuXG4gICAgcmV0dXJuIHRoaXMuX3BhcnNlU3R5bGVzKGNvbnRleHQsIHN0eWxlcyk7XG4gIH1cblxuICBiaW5kRXZlbnRNZXRob2QoY29udGV4dCwgZWxlbWVudCwgcHJvcE5hbWUsIF9leHRyYUFyZ3MsIGV2ZW50Q2FsbGJhY2ssIHByb3BzKSB7XG4gICAgbGV0IGV4dHJhQXJncyAgICAgICA9IF9leHRyYUFyZ3MgfHwgW107XG4gICAgbGV0IGV2ZW50TmFtZSAgICAgICA9IHByb3BOYW1lLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBjdXJyZW50QmluZGluZ3MgPSB0aGlzLmV2ZW50QmluZGluZ3MuZ2V0KGVsZW1lbnQpO1xuICAgIGlmIChjdXJyZW50QmluZGluZ3MpIHtcbiAgICAgIGxldCBldmVudEJpbmRpbmcgPSBjdXJyZW50QmluZGluZ3MuZ2V0KGV2ZW50TmFtZSk7XG4gICAgICBpZiAoZXZlbnRCaW5kaW5nKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGV2ZW50QmluZGluZy5jYWxsYmFjayk7XG4gICAgICAgIGN1cnJlbnRCaW5kaW5ncy5kZWxldGUoZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudEJpbmRpbmdzID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy5ldmVudEJpbmRpbmdzLnNldChlbGVtZW50LCBjdXJyZW50QmluZGluZ3MpO1xuICAgIH1cblxuICAgIGxldCBiaW5kaW5nQ29udGV4dCA9IHtcbiAgICAgIGNhbGxiYWNrOiAoZXZlbnQpID0+IGV2ZW50Q2FsbGJhY2suY2FsbChlbGVtZW50LCB7IHRhcmdldDogZWxlbWVudCwgcHJvcE5hbWUsIGV2ZW50LCBwcm9wcyB9KSxcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIGV4dHJhQXJncyxcbiAgICB9O1xuXG4gICAgY3VycmVudEJpbmRpbmdzLnNldChldmVudE5hbWUsIGJpbmRpbmdDb250ZXh0KTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGJpbmRpbmdDb250ZXh0LmNhbGxiYWNrLCAuLi5leHRyYUFyZ3MpO1xuICB9XG5cbiAgY3JlYXRlTmF0aXZlRWxlbWVudChjb250ZXh0LCBfdHlwZSkge1xuICAgIGxldCBpc1Rlcm0gID0gKC9edGVybSQvaSkudGVzdChfdHlwZSk7XG4gICAgbGV0IHR5cGUgICAgPSAoaXNUZXJtKSA/ICdzcGFuJyA6IF90eXBlO1xuICAgIGxldCBlbGVtZW50ID0gdGhpcy5nZXREb2N1bWVudChjb250ZXh0KS5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgZmluZE5hdGl2ZUVsZW1lbnQoY29udGV4dCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5nZXREb2N1bWVudChjb250ZXh0KS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuXG4gIGFwcGx5RWxlbWVudFN0eWxlKGNvbnRleHQsIGVsZW1lbnQsIGVsZW1lbnRTdHlsZSwgcHJvcE5hbWUsIF9wcm9wVmFsdWUsIHVwZGF0ZWRTdHlsZXMpIHtcbiAgICBsZXQgcHJvcFZhbHVlID0gX3Byb3BWYWx1ZTtcbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwgfHwgcHJvcFZhbHVlID09PSBmYWxzZSB8fCBwcm9wVmFsdWUgPT09IHRydWUgfHwgT2JqZWN0LmlzKHByb3BWYWx1ZSwgSW5maW5pdHkpIHx8IE9iamVjdC5pcyhwcm9wVmFsdWUsIE5hTikpXG4gICAgICBwcm9wVmFsdWUgPSAndW5zZXQnO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiBwcm9wVmFsdWUgPT09ICdiaWdpbnQnIHx8IChwcm9wVmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpKVxuICAgICAgcHJvcFZhbHVlID0gYCR7cHJvcFZhbHVlfXB4YDtcblxuICAgIGlmIChlbGVtZW50U3R5bGVbcHJvcE5hbWVdICE9PSBwcm9wVmFsdWUpIHtcbiAgICAgIHVwZGF0ZWRTdHlsZXNbcHJvcE5hbWVdID0geyBwcmV2aW91czogZWxlbWVudFN0eWxlW3Byb3BOYW1lXSwgY3VycmVudDogcHJvcFZhbHVlIH07XG4gICAgICBlbGVtZW50U3R5bGVbcHJvcE5hbWVdID0gcHJvcFZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGFwcGx5RWxlbWVudFN0eWxlcyhjb250ZXh0LCBlbGVtZW50LCBzdHlsZU9iaiwgdXBkYXRlZFByb3BzKSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICFzdHlsZU9iailcbiAgICAgIHJldHVybjtcblxuICAgIGxldCBzdHlsZVByb3BzID0gT2JqZWN0LmtleXMoc3R5bGVPYmopLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBNYXRoLnNpZ24oYS5sZW5ndGggLSBiLmxlbmd0aCk7XG5cbiAgICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gMDtcblxuICAgICAgcmV0dXJuIChhIDwgYikgPyAtMSA6IDE7XG4gICAgfSk7XG5cbiAgICBsZXQgdXBkYXRlZFN0eWxlcyA9IHt9O1xuICAgIGxldCBlbGVtZW50U3R5bGUgID0gZWxlbWVudC5zdHlsZTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBpbCA9IHN0eWxlUHJvcHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGV0IHByb3BOYW1lID0gc3R5bGVQcm9wc1tpXTtcbiAgICAgIGlmICghKHByb3BOYW1lIGluIGVsZW1lbnRTdHlsZSkpXG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBsZXQgcHJvcFZhbHVlID0gc3R5bGVPYmpbcHJvcE5hbWVdO1xuICAgICAgdGhpcy5hcHBseUVsZW1lbnRTdHlsZShjb250ZXh0LCBlbGVtZW50LCBlbGVtZW50U3R5bGUsIHByb3BOYW1lLCBwcm9wVmFsdWUsIHVwZGF0ZWRTdHlsZXMpO1xuICAgIH1cblxuICAgIGxldCB1cGRhdGVkU3R5bGVzS2V5cyA9IE9iamVjdC5rZXlzKHVwZGF0ZWRTdHlsZXMpO1xuICAgIGlmICh1cGRhdGVkU3R5bGVzS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgc3R5bGVQcm9wVXBkYXRlT2xkICA9IHt9O1xuICAgICAgbGV0IHN0eWxlUHJvcFVwZGF0ZU5ldyAgPSB7fTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0gdXBkYXRlZFN0eWxlc0tleXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBsZXQgcHJvcE5hbWUgICAgPSB1cGRhdGVkU3R5bGVzS2V5c1tpXTtcbiAgICAgICAgbGV0IHVwZGF0ZVZhbHVlID0gdXBkYXRlZFN0eWxlc1twcm9wTmFtZV07XG5cbiAgICAgICAgc3R5bGVQcm9wVXBkYXRlT2xkW3Byb3BOYW1lXSA9IHVwZGF0ZVZhbHVlLnByZXZpb3VzO1xuICAgICAgICBzdHlsZVByb3BVcGRhdGVOZXdbcHJvcE5hbWVdID0gdXBkYXRlVmFsdWUuY3VycmVudDtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlZFByb3BzWydzdHlsZSddID0geyBwcmV2aW91czogc3R5bGVQcm9wVXBkYXRlT2xkLCBjdXJyZW50OiBzdHlsZVByb3BVcGRhdGVOZXcgfTtcbiAgICB9XG4gIH1cblxuICBmb3JtYXRFbGVtZW50UHJvcHMoY29udGV4dCwgZWxlbWVudCwgcHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHMgfHwge307XG4gIH1cblxuICBmb3JtYXRUb0F0dHJpYnV0ZU5hbWUobmFtZSkge1xuICAgIGxldCByZXN1bHQgPSBuYW1lLnJlcGxhY2UoLyhbYS16MC05XXxeKShbQS1aXSkvZywgKG0sIHAxLCBwMikgPT4ge1xuICAgICAgcmV0dXJuIGAke3AxfS0ke3AyfWA7XG4gICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmb3JtYXRGcm9tQXR0cmlidXRlTmFtZShuYW1lKSB7XG4gICAgbGV0IHJlc3VsdCA9IG5hbWUucmVwbGFjZSgvLVthLXpdL2csIChtKSA9PiB7XG4gICAgICByZXR1cm4gbS5zdWJzdHJpbmcoMSkudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBoYW5kbGVFbGVtZW50UHJvcGVydHkoY29udGV4dCwgZWxlbWVudCwgcHJvcE5hbWUsIHByb3BWYWx1ZSwgdXBkYXRlZFByb3BzKSB7XG4gICAgaWYgKCEocHJvcE5hbWUgaW4gZWxlbWVudCkpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoISgvXihzY3JvbGxMZWZ0fHNjcm9sbFRvcHx2YWx1ZXxjaGVja2VkfGRpc2FibGVkfG1heHxtaW58bWF4TGVuZ3RofG1pbkxlbmd0aHxtdWx0aXBsZXxwYXR0ZXJufHJlYWRvbmx5fHJlcXVpcmVkfGF1dG9mb2N1c3xvcGVuKSQvKS50ZXN0KHByb3BOYW1lKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGxldCBhdHRyaWJ1dGVWYWx1ZSA9IGVsZW1lbnRbcHJvcE5hbWVdO1xuICAgIGlmIChhdHRyaWJ1dGVWYWx1ZSAhPT0gcHJvcFZhbHVlKSB7XG4gICAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0RJQUxPRycgJiYgcHJvcE5hbWUgPT09ICdvcGVuJyAmJiB0eXBlb2YgZWxlbWVudC5zaG93TW9kYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAocHJvcFZhbHVlKVxuICAgICAgICAgICAgZWxlbWVudC5zaG93TW9kYWwoKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBlbGVtZW50LmNsb3NlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudFtwcm9wTmFtZV0gIT09IGF0dHJpYnV0ZVZhbHVlKVxuICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChwcm9wVmFsdWUpXG4gICAgICAgICAgICAgIGVsZW1lbnQuc2hvd01vZGFsKCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIGVsZW1lbnQuY2xvc2UoKTtcbiAgICAgICAgICB9LCA1KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB1cGRhdGVkUHJvcHNbcHJvcE5hbWVdID0geyBwcmV2aW91czogYXR0cmlidXRlVmFsdWUsIGN1cnJlbnQ6IHByb3BWYWx1ZSB9O1xuICAgICAgZWxlbWVudFtwcm9wTmFtZV0gPSBwcm9wVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB1cGRhdGVFbGVtZW50QXR0cmlidXRlcyhjb250ZXh0LCBlbGVtZW50LCBfcHJvcHMpIHtcbiAgICBsZXQgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCAoX3Byb3BzIHx8IHt9KSk7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgJ3N0eWxlJykpXG4gICAgICBwcm9wcy5zdHlsZSA9IHRoaXMuX2ZsYXR0ZW5TdHlsZXMoY29udGV4dCwgcHJvcHMuc3R5bGUpO1xuICAgIGVsc2VcbiAgICAgIHByb3BzLnN0eWxlID0ge307XG5cbiAgICBwcm9wcyA9IHRoaXMuZm9ybWF0RWxlbWVudFByb3BzKGNvbnRleHQsIGVsZW1lbnQsIHByb3BzKTtcblxuICAgIGxldCB1cGRhdGVkUHJvcHMgID0ge307XG4gICAgbGV0IG5hbWVzVG9EZWxldGUgPSBbXTtcbiAgICBsZXQgcHJvcE5hbWVzICAgICA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICBsZXQgYXR0cmlidXRlcyAgICA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTmFtZXMoKS5yZWR1Y2UoKGF0dHJpYnV0ZXMsIGF0dHJpYnV0ZU5hbWUpID0+IHtcbiAgICAgIGxldCBjdXJyZW50QXR0cmlidXRlVmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIGxldCBwcm9wTmFtZSA9IHRoaXMuZm9ybWF0RnJvbUF0dHJpYnV0ZU5hbWUoYXR0cmlidXRlTmFtZSk7XG5cbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBwcm9wTmFtZSkpIHtcbiAgICAgICAgbmFtZXNUb0RlbGV0ZS5wdXNoKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB1cGRhdGVkUHJvcHNbcHJvcE5hbWVdID0geyBwcmV2aW91czogY3VycmVudEF0dHJpYnV0ZVZhbHVlLCBjdXJyZW50OiB1bmRlZmluZWQgfTtcbiAgICAgIH1cblxuICAgICAgYXR0cmlidXRlc1twcm9wTmFtZV0gPSBjdXJyZW50QXR0cmlidXRlVmFsdWU7XG4gICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICB9LCB7fSk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBwcm9wTmFtZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgbGV0IHByb3BOYW1lID0gcHJvcE5hbWVzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBwcm9wTmFtZSA9PT0gJ3N5bWJvbCcpXG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBpZiAoKC9eb25bQS1aXS4qRXh0cmFBcmdzJC8pLnRlc3QocHJvcE5hbWUpKVxuICAgICAgICBjb250aW51ZTtcblxuICAgICAgaWYgKCgvXihvdXRlckhUTUwpJC8pLnRlc3QocHJvcE5hbWUpKVxuICAgICAgICBjb250aW51ZTtcblxuICAgICAgbGV0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcblxuICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIEJvb2xlYW4gfHwgcHJvcFZhbHVlIGluc3RhbmNlb2YgTnVtYmVyIHx8IHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN0cmluZylcbiAgICAgICAgcHJvcFZhbHVlID0gcHJvcFZhbHVlLnZhbHVlT2YoKTtcblxuICAgICAgaWYgKHByb3BOYW1lID09PSAnc3R5bGUnKSB7XG4gICAgICAgIHRoaXMuYXBwbHlFbGVtZW50U3R5bGVzKGNvbnRleHQsIGVsZW1lbnQsIHByb3BWYWx1ZSwgdXBkYXRlZFByb3BzKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wTmFtZSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAocHJvcFZhbHVlID09IG51bGwpID8gJycgOiBwcm9wVmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaGFuZGxlRWxlbWVudFByb3BlcnR5KGNvbnRleHQsIGVsZW1lbnQsIHByb3BOYW1lLCBwcm9wVmFsdWUsIHVwZGF0ZWRQcm9wcykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCB0eXBlT2YgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9wVmFsdWUgPSBwcm9wTmFtZTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBwcm9wVmFsdWUgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICh0eXBlT2YgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHByb3BWYWx1ZSA9IHByb3BWYWx1ZS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlT2YgPT09ICdudW1iZXInIHx8IHR5cGVPZiA9PT0gJ3N0cmluZycgfHwgdHlwZU9mID09PSAnYmlnaW50Jykge1xuICAgICAgICBwcm9wVmFsdWUgPSAnJyArIHByb3BWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZU9mID09PSAnZnVuY3Rpb24nICYmICgvXm9uW0EtWl0vKS50ZXN0KHByb3BOYW1lKSkge1xuICAgICAgICB0aGlzLmJpbmRFdmVudE1ldGhvZChjb250ZXh0LCBlbGVtZW50LCBwcm9wTmFtZSwgcHJvcHNbYCR7cHJvcE5hbWV9RXh0cmFBcmdzYF0sIHByb3BWYWx1ZSwgcHJvcHMpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBhdHRyaWJ1dGVWYWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcE5hbWVdO1xuICAgICAgaWYgKGF0dHJpYnV0ZVZhbHVlICE9PSBwcm9wVmFsdWUpXG4gICAgICAgIHVwZGF0ZWRQcm9wc1twcm9wTmFtZV0gPSB7IHByZXZpb3VzOiBhdHRyaWJ1dGVWYWx1ZSwgY3VycmVudDogcHJvcFZhbHVlIH07XG4gICAgICBlbHNlXG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBpZiAocHJvcFZhbHVlID09IG51bGwpXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHRoaXMuZm9ybWF0VG9BdHRyaWJ1dGVOYW1lKHByb3BOYW1lKSk7XG4gICAgICBlbHNlXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMuZm9ybWF0VG9BdHRyaWJ1dGVOYW1lKHByb3BOYW1lKSwgcHJvcFZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBuYW1lc1RvRGVsZXRlLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgIGxldCBwcm9wTmFtZSA9IG5hbWVzVG9EZWxldGVbaV07XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZWRQcm9wcztcbiAgfVxuXG4gIGRlc3Ryb3lOYXRpdmVFbGVtZW50KGNvbnRleHQsIGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY3JlYXRlVGV4dEVsZW1lbnQoY29udGV4dCwgdGV4dCkge1xuICAgIHJldHVybiB0aGlzLmdldERvY3VtZW50KGNvbnRleHQpLmNyZWF0ZVRleHROb2RlKCgnJyArIHRleHQpKTtcbiAgfVxuXG4gIHVwZGF0ZVRleHRFbGVtZW50KGNvbnRleHQsIGVsZW1lbnQsIF90ZXh0KSB7XG4gICAgbGV0IHRleHQgICAgICAgID0gKCcnICsgX3RleHQpO1xuICAgIGxldCBjdXJyZW50VGV4dCA9IGVsZW1lbnQubm9kZVZhbHVlO1xuICAgIGlmIChjdXJyZW50VGV4dCA9PT0gdGV4dClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGVsZW1lbnQubm9kZVZhbHVlID0gdGV4dDtcblxuICAgIHJldHVybiB7IHByZXZpb3VzOiBjdXJyZW50VGV4dCwgY3VycmVudDogdGV4dCB9O1xuICB9XG5cbiAgYnVpbGRJbmNvbWluZ0VsZW1lbnRzKGNvbnRleHQsIHJlbmRlclJlc3VsdCkge1xuICAgIHJldHVybiBVdGlscy5mbGF0dGVuQXJyYXkocmVuZGVyUmVzdWx0KS5maWx0ZXIoKHZpcnR1YWxFbGVtZW50KSA9PiB7XG4gICAgICBpZiAodmlydHVhbEVsZW1lbnQgPT0gbnVsbCB8fCBPYmplY3QuaXModmlydHVhbEVsZW1lbnQsIE5hTikgfHwgT2JqZWN0LmlzKHZpcnR1YWxFbGVtZW50LCBJbmZpbml0eSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkubWFwKCh2aXJ0dWFsRWxlbWVudCkgPT4ge1xuICAgICAgbGV0IGVsZW1lbnRJRCAgICAgICAgICAgICA9IHZpcnR1YWxFbGVtZW50LmlkO1xuICAgICAgbGV0IGNhY2hlZFZpcnR1YWxFbGVtZW50ICA9IChlbGVtZW50SUQgIT0gbnVsbCkgPyB0aGlzLmdldEVsZW1lbnRGcm9tQ2FjaGUoY29udGV4dCwgdmlydHVhbEVsZW1lbnQpIDogbnVsbDtcbiAgICAgIGlmIChjYWNoZWRWaXJ0dWFsRWxlbWVudClcbiAgICAgICAgcmV0dXJuIHsgLi4uY2FjaGVkVmlydHVhbEVsZW1lbnQsIC4uLnZpcnR1YWxFbGVtZW50IH07XG5cbiAgICAgIGxldCBlbGVtZW50O1xuICAgICAgaWYgKHZpcnR1YWxFbGVtZW50LnR5cGUgPT09IE5hdGl2ZUVsZW1lbnQuVFlQRSkge1xuICAgICAgICBsZXQgdHlwZSA9IHZpcnR1YWxFbGVtZW50LnZhbHVlO1xuICAgICAgICBlbGVtZW50ID0gdGhpcy5jcmVhdGVOYXRpdmVFbGVtZW50KGNvbnRleHQsIHR5cGUpO1xuICAgICAgfSBlbHNlIGlmICh2aXJ0dWFsRWxlbWVudC50eXBlID09PSBUZXh0RWxlbWVudC5UWVBFKSB7XG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRleHRFbGVtZW50KGNvbnRleHQsIHZpcnR1YWxFbGVtZW50LnZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmlydHVhbEVsZW1lbnQudHlwZSA9PT0gUG9ydGFsRWxlbWVudC5UWVBFKSB7XG4gICAgICAgIGVsZW1lbnQgPSB0aGlzLmZpbmROYXRpdmVFbGVtZW50KGNvbnRleHQsIHZpcnR1YWxFbGVtZW50LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEhUTUxSZW5kZXJlcjo6dXBkYXRlRWxlbWVudENoaWxkcmVuOiBVbnN1cHBvcnRlZCB2aXJ0dWFsIGVsZW1lbnQgdHlwZSBkZXRlY3RlZDogJHt2aXJ0dWFsRWxlbWVudH1gKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgLi4udmlydHVhbEVsZW1lbnQsIGVsZW1lbnQgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldE5hdGl2ZUVsZW1lbnRBdHRyaWJ1dGVzKGNvbnRleHQsIGVsZW1lbnQsIGhlbHBlckNhbGxiYWNrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZU5hbWVzICA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTmFtZXMoKTtcbiAgICBsZXQgcHJvcHMgICAgICAgICAgID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICBsZXQgYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWVzW2ldO1xuICAgICAgbGV0IHZhbHVlICAgICAgICAgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcblxuICAgICAgaWYgKHR5cGVvZiBoZWxwZXJDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gaGVscGVyQ2FsbGJhY2soYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xuICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpXG4gICAgICAgICAgcHJvcHMgPSB7IC4uLnByb3BzLCAuLi5yZXN1bHQgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BzW3RoaXMuZm9ybWF0RnJvbUF0dHJpYnV0ZU5hbWUoYXR0cmlidXRlTmFtZSldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG5cbiAgdXBkYXRlRWxlbWVudENoaWxkcmVuKGNvbnRleHQsIF9wYXJlbnRWaXJ0dWFsRWxlbWVudCwgX3JlbmRlclJlc3VsdCwgcmVuZGVyRnJhbWUpIHtcbiAgICBsZXQgd2luZG93ICAgICAgICAgICAgICAgID0gdGhpcy5nZXRXaW5kb3coY29udGV4dCk7XG4gICAgbGV0IHJlbmRlclJlc3VsdCAgICAgICAgICA9IF9yZW5kZXJSZXN1bHQ7XG4gICAgbGV0IHBhcmVudFZpcnR1YWxFbGVtZW50ICA9IHRoaXMuZ2V0RWxlbWVudEZyb21DYWNoZShjb250ZXh0LCBfcGFyZW50VmlydHVhbEVsZW1lbnQpIHx8IF9wYXJlbnRWaXJ0dWFsRWxlbWVudDtcbiAgICBsZXQgcGFyZW50RWxlbWVudCAgICAgICAgID0gKHBhcmVudFZpcnR1YWxFbGVtZW50ICYmIHBhcmVudFZpcnR1YWxFbGVtZW50LmVsZW1lbnQpO1xuXG4gICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7XG4gICAgICBpZiAoIV9wYXJlbnRWaXJ0dWFsRWxlbWVudClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBsZXQgWyByZXN1bHQgXSA9IHRoaXMuYnVpbGRJbmNvbWluZ0VsZW1lbnRzKGNvbnRleHQsIFsgX3BhcmVudFZpcnR1YWxFbGVtZW50IF0pO1xuICAgICAgcGFyZW50RWxlbWVudCA9IChyZXN1bHQgJiYgcmVzdWx0LmVsZW1lbnQpO1xuXG4gICAgICBpZiAocGFyZW50RWxlbWVudClcbiAgICAgICAgdGhpcy5hZGRFbGVtZW50VG9DYWNoZShyZXN1bHQpO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXMgaXMgYSBcInRlcm1cIiBlbGVtZW50LCB0aGVuIHBpcGUgaXRcbiAgICAvLyB0aHJvdWdoIFwiZmV0Y2hUZXJtS2V5XCJcbiAgICBpZiAocGFyZW50VmlydHVhbEVsZW1lbnQgJiYgcGFyZW50VmlydHVhbEVsZW1lbnQudHlwZSA9PT0gTmF0aXZlRWxlbWVudC5UWVBFICYmICgvXnRlcm0kL2kpLnRlc3QocGFyZW50VmlydHVhbEVsZW1lbnQudmFsdWUpKSB7XG4gICAgICBsZXQgdGVybSA9IHRoaXMuZmV0Y2hUZXJtS2V5KGNvbnRleHQsIHsgLi4uKHBhcmVudFZpcnR1YWxFbGVtZW50LnByb3BzIHx8IHt9KSB9KTtcbiAgICAgIGlmICh0ZXJtKSB7XG4gICAgICAgIHBhcmVudEVsZW1lbnQuaW5uZXJIVE1MID0gdGVybSB8fCAnJztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChyZW5kZXJSZXN1bHQgPT0gbnVsbCB8fCBPYmplY3QuaXMocmVuZGVyUmVzdWx0LCBOYU4pIHx8IE9iamVjdC5pcyhyZW5kZXJSZXN1bHQsIEluZmluaXR5KSlcbiAgICAgICAgcmVuZGVyUmVzdWx0ID0gW107XG4gICAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShyZW5kZXJSZXN1bHQpKVxuICAgICAgICByZW5kZXJSZXN1bHQgPSBbIHJlbmRlclJlc3VsdCBdO1xuXG4gICAgICBsZXQgY3VycmVudENoaWxkRWxlbWVudHMgID0gQXJyYXkuZnJvbShwYXJlbnRFbGVtZW50LmNoaWxkTm9kZXMgfHwgW10pO1xuICAgICAgbGV0IG5ld0NoaWxkRWxlbWVudHMgICAgICA9IHRoaXMuYnVpbGRJbmNvbWluZ0VsZW1lbnRzKGNvbnRleHQsIHJlbmRlclJlc3VsdCk7XG4gICAgICBsZXQgY2hhbmdlZCAgICAgICAgICAgICAgID0gZmFsc2U7XG4gICAgICBsZXQgY2hpbGROb2Rlc01hcCAgICAgICAgID0gbmV3IE1hcCgpO1xuICAgICAgbGV0IG5ld05vZGVzTWFwICAgICAgICAgICA9IG5ldyBNYXAoKTtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGlsID0gY3VycmVudENoaWxkRWxlbWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICBsZXQgZWxlbWVudCAgICAgICAgID0gY3VycmVudENoaWxkRWxlbWVudHNbaV07XG4gICAgICAgIGxldCB2aXJ0dWFsRWxlbWVudCAgPSB0aGlzLmdldEVsZW1lbnRGcm9tQ2FjaGUoY29udGV4dCwgZWxlbWVudCk7XG5cbiAgICAgICAgY2hpbGROb2Rlc01hcC5zZXQodmlydHVhbEVsZW1lbnQuZWxlbWVudCwgdmlydHVhbEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMCwgaWwgPSBuZXdDaGlsZEVsZW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcbiAgICAgICAgbGV0IHZpcnR1YWxFbGVtZW50ID0gbmV3Q2hpbGRFbGVtZW50c1tpXTtcbiAgICAgICAgbmV3Tm9kZXNNYXAuc2V0KHZpcnR1YWxFbGVtZW50LmVsZW1lbnQsIHZpcnR1YWxFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuXG4gICAgICBmb3IgKGxldCBbIGVsZW1lbnQsIHZpcnR1YWxFbGVtZW50IF0gb2YgY2hpbGROb2Rlc01hcCkge1xuICAgICAgICBpZiAoIW5ld05vZGVzTWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuXG4gICAgICAgICAgdGhpcy5kZXN0cm95TmF0aXZlRWxlbWVudChjb250ZXh0LCBlbGVtZW50LCB2aXJ0dWFsRWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVFbGVtZW50RnJvbUNhY2hlKHZpcnR1YWxFbGVtZW50KTtcblxuICAgICAgICAgIGlmICh2aXJ0dWFsRWxlbWVudC5wcm9wcyAmJiB0eXBlb2YgdmlydHVhbEVsZW1lbnQucHJvcHMucmVmID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdmlydHVhbEVsZW1lbnQucHJvcHMucmVmLmNhbGwodmlydHVhbEVsZW1lbnQuZWxlbWVudCwgbnVsbCwgdmlydHVhbEVsZW1lbnQuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWRkIGNoaWxkcmVuXG4gICAgICBmb3IgKGxldCBbIGVsZW1lbnQsIHZpcnR1YWxFbGVtZW50IF0gb2YgbmV3Tm9kZXNNYXApIHtcbiAgICAgICAgaWYgKCFjaGlsZE5vZGVzTWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuXG4gICAgICAgICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICB0aGlzLmFkZEVsZW1lbnRUb0NhY2hlKHZpcnR1YWxFbGVtZW50KTtcblxuICAgICAgICAgIGlmICh2aXJ0dWFsRWxlbWVudC5wcm9wcyAmJiB2aXJ0dWFsRWxlbWVudC5wcm9wc1tGT1JDRV9SRUZMT1ddKSB7XG4gICAgICAgICAgICAvLyBGb3JjZSBhIHJlZmxvdyBvbiB0aGUgZWxlbWVudFxuICAgICAgICAgICAgZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gd2luZG93LkVsZW1lbnQuRUxFTUVOVF9OT0RFKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50QXR0cmlidXRlcyhjb250ZXh0LCBlbGVtZW50LCB2aXJ0dWFsRWxlbWVudC5wcm9wcyk7XG5cbiAgICAgICAgICBpZiAodmlydHVhbEVsZW1lbnQucHJvcHMgJiYgdHlwZW9mIHZpcnR1YWxFbGVtZW50LnByb3BzLnJlZiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHZpcnR1YWxFbGVtZW50LnByb3BzLnJlZi5jYWxsKHZpcnR1YWxFbGVtZW50LmVsZW1lbnQsIHZpcnR1YWxFbGVtZW50LmVsZW1lbnQsIG51bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IHdpbmRvdy5FbGVtZW50LkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgIGxldCBkaWRVcGRhdGVkID0gdGhpcy51cGRhdGVFbGVtZW50QXR0cmlidXRlcyhjb250ZXh0LCBlbGVtZW50LCB2aXJ0dWFsRWxlbWVudC5wcm9wcyk7XG4gICAgICAgICAgaWYgKGRpZFVwZGF0ZWQgJiYgIWNoYW5nZWQgJiYgT2JqZWN0LmtleXMoZGlkVXBkYXRlZCkubGVuZ3RoID4gMClcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IHdpbmRvdy5FbGVtZW50LlRFWFRfTk9ERSkge1xuICAgICAgICAgIHRoaXMudXBkYXRlVGV4dEVsZW1lbnQoY29udGV4dCwgZWxlbWVudCwgdmlydHVhbEVsZW1lbnQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgZmV0Y2hUZXJtS2V5KGNvbnRleHQsIHByb3BzKSB7XG4gICAgLy8gUmV0dXJuIG5vdGhpbmcgbWVhbnMgZmFsbGJhY2tcbiAgICAvLyB0byBzdGFuZGFyZCBjaGlsZHJlblxuICB9XG59XG5cbmV4cG9ydCAqIGZyb20gJy4vcmVzb3VyY2UtbG9hZGVyLmpzJztcblxuZXhwb3J0IGNvbnN0IEEgPSAnQSc7XG5leHBvcnQgY29uc3QgQUJCUiA9ICdBQkJSJztcbmV4cG9ydCBjb25zdCBBRERSRVNTID0gJ0FERFJFU1MnO1xuZXhwb3J0IGNvbnN0IEFSRUEgPSAnQVJFQSc7XG5leHBvcnQgY29uc3QgQVJUSUNMRSA9ICdBUlRJQ0xFJztcbmV4cG9ydCBjb25zdCBBU0lERSA9ICdBU0lERSc7XG5leHBvcnQgY29uc3QgQVVESU8gPSAnQVVESU8nO1xuZXhwb3J0IGNvbnN0IEIgPSAnQic7XG5leHBvcnQgY29uc3QgQkFTRSA9ICdCQVNFJztcbmV4cG9ydCBjb25zdCBCREkgPSAnQkRJJztcbmV4cG9ydCBjb25zdCBCRE8gPSAnQkRPJztcbmV4cG9ydCBjb25zdCBCTE9DS1FVT1RFID0gJ0JMT0NLUVVPVEUnO1xuZXhwb3J0IGNvbnN0IEJSID0gJ0JSJztcbmV4cG9ydCBjb25zdCBCVVRUT04gPSAnQlVUVE9OJztcbmV4cG9ydCBjb25zdCBDQU5WQVMgPSAnQ0FOVkFTJztcbmV4cG9ydCBjb25zdCBDQVBUSU9OID0gJ0NBUFRJT04nO1xuZXhwb3J0IGNvbnN0IENJVEUgPSAnQ0lURSc7XG5leHBvcnQgY29uc3QgQ09ERSA9ICdDT0RFJztcbmV4cG9ydCBjb25zdCBDT0wgPSAnQ09MJztcbmV4cG9ydCBjb25zdCBDT0xHUk9VUCA9ICdDT0xHUk9VUCc7XG5leHBvcnQgY29uc3QgREFUQSA9ICdEQVRBJztcbmV4cG9ydCBjb25zdCBEQVRBTElTVCA9ICdEQVRBTElTVCc7XG5leHBvcnQgY29uc3QgREQgPSAnREQnO1xuZXhwb3J0IGNvbnN0IERFTCA9ICdERUwnO1xuZXhwb3J0IGNvbnN0IERFVEFJTFMgPSAnREVUQUlMUyc7XG5leHBvcnQgY29uc3QgREZOID0gJ0RGTic7XG5leHBvcnQgY29uc3QgRElBTE9HID0gJ0RJQUxPRyc7XG5leHBvcnQgY29uc3QgRElWID0gJ0RJVic7XG5leHBvcnQgY29uc3QgREwgPSAnREwnO1xuZXhwb3J0IGNvbnN0IERUID0gJ0RUJztcbmV4cG9ydCBjb25zdCBFTSA9ICdFTSc7XG5leHBvcnQgY29uc3QgRU1CRUQgPSAnRU1CRUQnO1xuZXhwb3J0IGNvbnN0IEZJRUxEU0VUID0gJ0ZJRUxEU0VUJztcbmV4cG9ydCBjb25zdCBGSUdDQVBUSU9OID0gJ0ZJR0NBUFRJT04nO1xuZXhwb3J0IGNvbnN0IEZJR1VSRSA9ICdGSUdVUkUnO1xuZXhwb3J0IGNvbnN0IEZPT1RFUiA9ICdGT09URVInO1xuZXhwb3J0IGNvbnN0IEZPUk0gPSAnRk9STSc7XG5leHBvcnQgY29uc3QgSDEgPSAnSDEnO1xuZXhwb3J0IGNvbnN0IEgyID0gJ0gyJztcbmV4cG9ydCBjb25zdCBIMyA9ICdIMyc7XG5leHBvcnQgY29uc3QgSDQgPSAnSDQnO1xuZXhwb3J0IGNvbnN0IEg1ID0gJ0g1JztcbmV4cG9ydCBjb25zdCBINiA9ICdINic7XG5leHBvcnQgY29uc3QgSEVBREVSID0gJ0hFQURFUic7XG5leHBvcnQgY29uc3QgSEdST1VQID0gJ0hHUk9VUCc7XG5leHBvcnQgY29uc3QgSFIgPSAnSFInO1xuZXhwb3J0IGNvbnN0IEkgPSAnSSc7XG5leHBvcnQgY29uc3QgSUZSQU1FID0gJ0lGUkFNRSc7XG5leHBvcnQgY29uc3QgSU1HID0gJ0lNRyc7XG5leHBvcnQgY29uc3QgSU5QVVQgPSAnSU5QVVQnO1xuZXhwb3J0IGNvbnN0IElOUyA9ICdJTlMnO1xuZXhwb3J0IGNvbnN0IEtCRCA9ICdLQkQnO1xuZXhwb3J0IGNvbnN0IExBQkVMID0gJ0xBQkVMJztcbmV4cG9ydCBjb25zdCBMRUdFTkQgPSAnTEVHRU5EJztcbmV4cG9ydCBjb25zdCBMSSA9ICdMSSc7XG5leHBvcnQgY29uc3QgTElOSyA9ICdMSU5LJztcbmV4cG9ydCBjb25zdCBNQUlOID0gJ01BSU4nO1xuZXhwb3J0IGNvbnN0IE1BUCA9ICdNQVAnO1xuZXhwb3J0IGNvbnN0IE1BUksgPSAnTUFSSyc7XG5leHBvcnQgY29uc3QgTUVOVSA9ICdNRU5VJztcbmV4cG9ydCBjb25zdCBNRVRBID0gJ01FVEEnO1xuZXhwb3J0IGNvbnN0IE1FVEVSID0gJ01FVEVSJztcbmV4cG9ydCBjb25zdCBOQVYgPSAnTkFWJztcbmV4cG9ydCBjb25zdCBOT1NDUklQVCA9ICdOT1NDUklQVCc7XG5leHBvcnQgY29uc3QgT0JKRUNUID0gJ09CSkVDVCc7XG5leHBvcnQgY29uc3QgT0wgPSAnT0wnO1xuZXhwb3J0IGNvbnN0IE9QVEdST1VQID0gJ09QVEdST1VQJztcbmV4cG9ydCBjb25zdCBPUFRJT04gPSAnT1BUSU9OJztcbmV4cG9ydCBjb25zdCBPVVRQVVQgPSAnT1VUUFVUJztcbmV4cG9ydCBjb25zdCBQID0gJ1AnO1xuZXhwb3J0IGNvbnN0IFBJQ1RVUkUgPSAnUElDVFVSRSc7XG5leHBvcnQgY29uc3QgUFJFID0gJ1BSRSc7XG5leHBvcnQgY29uc3QgUFJPR1JFU1MgPSAnUFJPR1JFU1MnO1xuZXhwb3J0IGNvbnN0IFEgPSAnUSc7XG5leHBvcnQgY29uc3QgUlAgPSAnUlAnO1xuZXhwb3J0IGNvbnN0IFJUID0gJ1JUJztcbmV4cG9ydCBjb25zdCBSVUJZID0gJ1JVQlknO1xuZXhwb3J0IGNvbnN0IFMgPSAnUyc7XG5leHBvcnQgY29uc3QgU0FNUCA9ICdTQU1QJztcbmV4cG9ydCBjb25zdCBTQ1JJUFQgPSAnU0NSSVBUJztcbmV4cG9ydCBjb25zdCBTRUNUSU9OID0gJ1NFQ1RJT04nO1xuZXhwb3J0IGNvbnN0IFNFTEVDVCA9ICdTRUxFQ1QnO1xuZXhwb3J0IGNvbnN0IFNMT1QgPSAnU0xPVCc7XG5leHBvcnQgY29uc3QgU01BTEwgPSAnU01BTEwnO1xuZXhwb3J0IGNvbnN0IFNPVVJDRSA9ICdTT1VSQ0UnO1xuZXhwb3J0IGNvbnN0IFNQQU4gPSAnU1BBTic7XG5leHBvcnQgY29uc3QgU1RST05HID0gJ1NUUk9ORyc7XG5leHBvcnQgY29uc3QgU1RZTEUgPSAnU1RZTEUnO1xuZXhwb3J0IGNvbnN0IFNVQiA9ICdTVUInO1xuZXhwb3J0IGNvbnN0IFNVTU1BUlkgPSAnU1VNTUFSWSc7XG5leHBvcnQgY29uc3QgU1VQID0gJ1NVUCc7XG5leHBvcnQgY29uc3QgVEFCTEUgPSAnVEFCTEUnO1xuZXhwb3J0IGNvbnN0IFRCT0RZID0gJ1RCT0RZJztcbmV4cG9ydCBjb25zdCBURCA9ICdURCc7XG5leHBvcnQgY29uc3QgVEVNUExBVEUgPSAnVEVNUExBVEUnO1xuZXhwb3J0IGNvbnN0IFRFWFRBUkVBID0gJ1RFWFRBUkVBJztcbmV4cG9ydCBjb25zdCBURVJNID0gJ1RFUk0nO1xuZXhwb3J0IGNvbnN0IFRGT09UID0gJ1RGT09UJztcbmV4cG9ydCBjb25zdCBUSCA9ICdUSCc7XG5leHBvcnQgY29uc3QgVEhFQUQgPSAnVEhFQUQnO1xuZXhwb3J0IGNvbnN0IFRJTUUgPSAnVElNRSc7XG5leHBvcnQgY29uc3QgVElUTEUgPSAnVElUTEUnO1xuZXhwb3J0IGNvbnN0IFRSID0gJ1RSJztcbmV4cG9ydCBjb25zdCBUUkFDSyA9ICdUUkFDSyc7XG5leHBvcnQgY29uc3QgVSA9ICdVJztcbmV4cG9ydCBjb25zdCBVTCA9ICdVTCc7XG5leHBvcnQgY29uc3QgVkFSID0gJ1ZBUic7XG5leHBvcnQgY29uc3QgVklERU8gPSAnVklERU8nO1xuZXhwb3J0IGNvbnN0IFdCUiA9ICdXQlInO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9